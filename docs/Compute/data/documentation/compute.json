{"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"paths":["\/documentation\/compute"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"metadata":{"roleHeading":"Framework","role":"collection","title":"Compute","modules":[{"name":"Compute"}],"externalID":"Compute","symbolKind":"module"},"kind":"symbol","topicSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyKeyPath","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyPath","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ManagedBuffer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialKeyPath","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceArrayTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceWritableKeyPath","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/WritableKeyPath"],"generated":true,"title":"Classes","anchor":"Classes"},{"generated":true,"title":"Protocols","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AdditiveArithmetic","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bijective","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryFloatingPoint","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CaseIterable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CodingKey","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CodingKeyRepresentable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ComplexNumeric","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ConstructibleReferenceParentPointerTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ConstructibleTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomLeafReflectable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomPlaygroundDisplayConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decoder","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DestructivelyMutableDirectedGraph","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DirectedAcyclicGraph","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DirectedAcyclicGraphEdge","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DirectedGraph","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DirectedGraphEdge","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DurationProtocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encoder","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Error","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByArrayLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByBooleanLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByDictionaryLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByExtendedGraphemeClusterLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByFloatLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByNilLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringInterpolation","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByUnicodeScalarLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExtensibleRecursiveSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatingPoint","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatingPointAggregate","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/HomogenousTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Identifiable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Injective","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/InjectiveOnly","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/InstantProtocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyedDecodingContainerProtocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyedEncodingContainerProtocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyCollectionProtocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MirrorPath","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRectangularCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRecursiveSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRecursiveTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRowMajorRectangularCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableWeighted","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/NonInjective","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/NonSurjective","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/OptionSet","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Partializable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PrimitiveGraphPatternExpression","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Quaternion","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/QueueProtocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomAccessCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomNumberGenerator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RawRepresentable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RectangularCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveTreeProtocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceArrayTreeValueObject","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceParentPointerTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ResizableRecursiveSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RowMajorRectangularCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD-swift.protocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDScalar","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDStorage","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SequenceInitiableRecursiveSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SetAlgebra","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SetRelation","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedNumeric","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SingleValueDecodingContainer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SingleValueEncodingContainer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Stack","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringInterpolationProtocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Surjective","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TextOutputStream","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TextOutputStreamable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeProtocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeRepresentable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnicodeCodec","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnkeyedDecodingContainer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnkeyedEncodingContainer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeSendable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsignedInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Weighted"],"anchor":"Protocols"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyBidirectionalCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyDAG","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyHashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIdentifiableTreeNode","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIndex","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyRandomAccessCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnySequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AutoreleasingUnsafeMutablePointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bag","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalMap","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BranchingArray","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BranchingDictionary","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVaListPointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Character","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CodingUserInfoKey","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionDifference","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionOfOne","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ContiguousArray","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultIndices","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultRecursiveIndex","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultRecursiveIndices","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultStringInterpolation","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DiscontiguousSlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DropFirstSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DropWhileSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Duration","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EmptyCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EnumeratedSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EvictingQueue","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/GraphMatch","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hasher","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IndexPathEnumeratedTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IndexingIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/JoinedSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyValuePairs","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyedDecodingContainer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyedEncodingContainer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyCompactMapTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyDropWhileSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LevelOrderIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ManagedBufferPointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Matrix","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Mirror","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ObjectIdentifier","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/OpaquePointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialOf","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PrefixSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PriorityQueue","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Queue","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeSet","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveAdjacencyMapElement","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Repeated","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReversedCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD2","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD3","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD4","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD64","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDMask","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SequenceParser","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SequenceTokenizer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Slice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StaticBigInt","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StaticString","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideThrough","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideThroughIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideTo","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideToIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SystemRandomNumberGenerator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeChains","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeIndexPath","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeValuesTraversalSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt128","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnfoldSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unmanaged","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawBufferPointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafePointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawBufferPointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Zip2Sequence"],"generated":true,"title":"Structures","anchor":"Structures"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/abs(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/all(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/any(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/assert(_:_:file:line:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/assertionFailure(_:file:line:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/debugPrint(_:separator:terminator:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/debugPrint(_:separator:terminator:to:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/dump(_:name:indent:maxDepth:maxItems:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/dump(_:to:name:indent:maxDepth:maxItems:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/exchange(_:with:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/fatalError(_:file:line:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/getVaList(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/isKnownUniquelyReferenced(_:)-5kvtu","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/isKnownUniquelyReferenced(_:)-98zpp","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/max(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/max(_:_:_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/min(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/min(_:_:_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/numericCast(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/pointwiseMax(_:_:)-29hn2","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/pointwiseMax(_:_:)-2k6er","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/pointwiseMin(_:_:)-39txi","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/pointwiseMin(_:_:)-8v95p","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/precondition(_:_:file:line:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/preconditionFailure(_:file:line:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/print(_:separator:terminator:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/print(_:separator:terminator:to:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/readLine(strippingNewline:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/repeatElement(_:count:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/sequence(first:next:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/sequence(state:next:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/stride(from:through:by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/stride(from:to:by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/swap(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/transcode(_:from:to:stoppingOnError:into:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/type(of:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/unsafeBitCast(_:to:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/unsafeDowncast(_:to:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withExtendedLifetime(_:_:)-4kl68","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withExtendedLifetime(_:_:)-6mq1","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withUnsafeBytes(of:_:)-5gesg","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withUnsafeBytes(of:_:)-5zxtl","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withUnsafeMutableBytes(of:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withUnsafeMutablePointer(to:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withUnsafePointer(to:_:)-35wrn","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withUnsafePointer(to:_:)-9fjn6","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withUnsafeTemporaryAllocation(byteCount:alignment:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withUnsafeTemporaryAllocation(of:capacity:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withVaList(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withoutActuallyEscaping(_:do:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/zip(_:_:)"],"generated":true,"title":"Functions","anchor":"Functions"},{"anchor":"Operators","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/!=(_:_:)-18co7","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/!=(_:_:)-3nrcc","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/!=(_:_:)-4fzl6","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/!=(_:_:)-6s4z0","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/!=(_:_:)-754t2","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/!=(_:_:)-7ao4l","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/!=(_:_:)-7er1l","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/!=(_:_:)-8pggn","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/!=(_:_:)-9wy5n","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/!==(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/*(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/*=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/+(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/+=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/-(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/-=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/==(_:_:)-1hbor","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/==(_:_:)-1ud2a","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/==(_:_:)-2htbb","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/==(_:_:)-7lhq7","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/==(_:_:)-958in","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/==(_:_:)-9hu5c","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/==(_:_:)-h88g","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/==(_:_:)-w1qf","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/===(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-1b1cu","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-23151","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-3ewuy","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-3hhjy","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-4ck5h","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-4xg09","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-5gb41","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-6p1tf","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-7p512","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-8mgtp","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-kqsy","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-yktb","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-16p1e","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-1ak1k","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-1hzxz","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-1n7oc","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-3jpod","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-43xgn","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-6i1ov","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-6kea2","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-6kwvw","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-7n746","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-7p28b","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-8u5uu","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/__(_:_:)-1fjjj","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/__(_:_:)-9xjze","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/~=(_:_:)"],"generated":true,"title":"Operators"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DebugDescription()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/column()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/dsohandle()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/error(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/externalMacro(module:type:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/file()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/fileID()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/filePath()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/function()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/line()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/warning(_:)"],"anchor":"Macros","generated":true,"title":"Macros"},{"anchor":"Type-Aliases","title":"Type Aliases","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyClass","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyObject","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayLiteralConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalIndexable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalSlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BooleanLiteralConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BooleanLiteralType","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CBool","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CChar","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CChar16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CChar32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CDouble","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CFloat","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CFloat16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CInt","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CLong","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CLongDouble","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CLongLong","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CShort","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CSignedChar","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CUnsignedChar","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CUnsignedInt","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CUnsignedLong","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CUnsignedLongLong","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CUnsignedShort","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CWideChar","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRangeIndex","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Codable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ConcurrentValue","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CountableClosedRange","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CountablePartialRangeFrom","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CountableRange","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomPlaygroundQuickLookable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultBidirectionalIndices","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultRandomAccessIndices","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DictionaryIndex","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DictionaryIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DictionaryLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DictionaryLiteralConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EmptyIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EnumeratedIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExtendedGraphemeClusterLiteralConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExtendedGraphemeClusterType","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenBidirectionalCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenBidirectionalCollectionIndex","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenCollectionIndex","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float64","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatLiteralConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatLiteralType","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Indexable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IndexableBase","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IntegerLiteralConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IntegerLiteralType","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorOverOne","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/JoinedIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyBidirectionalCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyDropWhileBidirectionalCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyDropWhileCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyDropWhileIndex","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyDropWhileIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterBidirectionalCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterIndex","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapBidirectionalCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapRandomAccessCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileBidirectionalCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileIndex","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyRandomAccessCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableBidirectionalSlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableIndexable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRandomAccessSlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRangeReplaceableBidirectionalSlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRangeReplaceableRandomAccessSlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRangeReplaceableSlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableSlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/NilLiteralConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PlaygroundQuickLook","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomAccessIndexable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomAccessSlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableBidirectionalSlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableIndexable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableRandomAccessSlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableSlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReversedIndex","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReversedRandomAccessCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SetIndex","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SetIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringInterpolationConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringLiteralConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringLiteralType","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UTF16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UTF32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UTF8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnboundedRange","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnfoldFirstSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnicodeScalar","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnicodeScalarLiteralConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnicodeScalarType","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointerIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeConcurrentValue","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawBufferPointerIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawBufferPointerIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Void","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Zip2Iterator"]},{"anchor":"Enumerations","generated":true,"title":"Enumerations","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CommandLine","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DecodingError","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EncodingError","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatingPointClassification","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatingPointRoundingRule","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatingPointSign","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/GraphPatternBuilder","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LinkedList","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MemoryLayout","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MergeSplitSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Never","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveTreeIterators","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Result","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeTraversalAlgorithmType","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnboundedRange_","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unicode","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnicodeDecodingResult"]},{"generated":true,"title":"Extended Modules","anchor":"Extended-Modules","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/simd-swift.module.extension"]}],"hierarchy":{"paths":[[]]},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","interfaceLanguage":"swift"},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/RangeReplaceableIndexable":{"title":"RangeReplaceableIndexable","type":"topic","role":"symbol","url":"\/documentation\/compute\/rangereplaceableindexable","abstract":[],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RangeReplaceableIndexable"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableIndexable","navigatorTitle":[{"kind":"identifier","text":"RangeReplaceableIndexable"}],"kind":"symbol","deprecated":true},"doc://com.swallow.documentation.Compute/documentation/Compute/KeyedDecodingContainer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyedDecodingContainer","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"KeyedDecodingContainer"}],"role":"symbol","url":"\/documentation\/compute\/keyeddecodingcontainer","title":"KeyedDecodingContainer","type":"topic","abstract":[{"text":"A concrete container that provides a view into a decoder’s storage, making","type":"text"},{"type":"text","text":" "},{"text":"the encoded properties of a decodable type accessible by keys.","type":"text"}],"navigatorTitle":[{"text":"KeyedDecodingContainer","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/withUnsafeBytes(of:_:)-5gesg":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeBytes"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"E"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"text":"of","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"borrowing"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"T"},{"text":", (","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SW","text":"UnsafeRawBufferPointer"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":") -> "},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Result","kind":"typeIdentifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withUnsafeBytes(of:_:)-5gesg","kind":"symbol","title":"withUnsafeBytes(of:_:)","url":"\/documentation\/compute\/withunsafebytes(of:_:)-5gesg","type":"topic","abstract":[{"type":"text","text":"Invokes the given closure with a buffer pointer covering the raw bytes of"},{"type":"text","text":" "},{"type":"text","text":"the given argument."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","role":"symbol","abstract":[{"type":"text","text":"A slice of an "},{"code":"Array","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"ContiguousArray"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"ArraySlice"},{"text":" instance.","type":"text"}],"title":"ArraySlice","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArraySlice"}],"navigatorTitle":[{"kind":"identifier","text":"ArraySlice"}],"url":"\/documentation\/compute\/arrayslice","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/RandomAccessSlice":{"title":"RandomAccessSlice","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomAccessSlice","kind":"symbol","navigatorTitle":[{"text":"RandomAccessSlice","kind":"identifier"}],"role":"symbol","deprecated":true,"url":"\/documentation\/compute\/randomaccessslice","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"RandomAccessSlice"}],"type":"topic","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/CommandLine":{"type":"topic","kind":"symbol","title":"CommandLine","navigatorTitle":[{"kind":"identifier","text":"CommandLine"}],"url":"\/documentation\/compute\/commandline","abstract":[{"type":"text","text":"Command-line arguments for the current process."}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CommandLine","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CommandLine","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/==(_:_:)-h88g":{"kind":"symbol","url":"\/documentation\/compute\/==(_:_:)-h88g","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the corresponding components of"},{"text":" ","type":"text"},{"type":"text","text":"two tuples are equal."}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/==(_:_:)-h88g","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"==","kind":"identifier"},{"kind":"text","text":" "},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"A"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"B"},{"text":", ","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":"), (","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":")) -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"title":"==(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyMapBidirectionalCollection":{"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyMapBidirectionalCollection"}],"navigatorTitle":[{"kind":"identifier","text":"LazyMapBidirectionalCollection"}],"url":"\/documentation\/compute\/lazymapbidirectionalcollection","type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapBidirectionalCollection","abstract":[],"title":"LazyMapBidirectionalCollection","kind":"symbol","deprecated":true},"doc://com.swallow.documentation.Compute/documentation/Compute/CountableRange":{"navigatorTitle":[{"kind":"identifier","text":"CountableRange"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CountableRange","url":"\/documentation\/compute\/countablerange","title":"CountableRange","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"CountableRange","kind":"identifier"}],"abstract":[],"type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/MutableIndexable":{"kind":"symbol","url":"\/documentation\/compute\/mutableindexable","deprecated":true,"abstract":[],"navigatorTitle":[{"kind":"identifier","text":"MutableIndexable"}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableIndexable","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"MutableIndexable"}],"title":"MutableIndexable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnkeyedDecodingContainer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnkeyedDecodingContainer","navigatorTitle":[{"text":"UnkeyedDecodingContainer","kind":"identifier"}],"url":"\/documentation\/compute\/unkeyeddecodingcontainer","type":"topic","kind":"symbol","abstract":[{"text":"A type that provides a view into a decoder’s storage and is used to hold","type":"text"},{"text":" ","type":"text"},{"text":"the encoded properties of a decodable type sequentially, without keys.","type":"text"}],"title":"UnkeyedDecodingContainer","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnkeyedDecodingContainer","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeSendable":{"title":"UnsafeSendable","abstract":[{"type":"text","text":"A type whose values can safely be passed across concurrency domains by copying,"},{"type":"text","text":" "},{"type":"text","text":"but which disables some safety checking at the conformance site."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnsafeSendable"}],"navigatorTitle":[{"text":"UnsafeSendable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeSendable","role":"symbol","kind":"symbol","type":"topic","deprecated":true,"url":"\/documentation\/compute\/unsafesendable"},"doc://com.swallow.documentation.Compute/documentation/Compute/CodingKey":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CodingKey","url":"\/documentation\/compute\/codingkey","navigatorTitle":[{"text":"CodingKey","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"CodingKey","kind":"identifier"}],"abstract":[{"text":"A type that can be used as a key for encoding and decoding.","type":"text"}],"type":"topic","role":"symbol","title":"CodingKey","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnySequence":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnySequence","kind":"symbol","abstract":[{"text":"A type-erased sequence.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AnySequence","kind":"identifier"}],"url":"\/documentation\/compute\/anysequence","type":"topic","title":"AnySequence","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnySequence"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CChar":{"type":"topic","url":"\/documentation\/compute\/cchar","role":"symbol","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"CChar","kind":"identifier"}],"abstract":[{"text":"The C ‘char’ type.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"CChar"}],"title":"CChar","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CChar"},"doc://com.swallow.documentation.Compute/documentation/Compute/pointwiseMin(_:_:)-8v95p":{"role":"symbol","url":"\/documentation\/compute\/pointwisemin(_:_:)-8v95p","type":"topic","kind":"symbol","abstract":[{"text":"The lanewise minimum of two vectors.","type":"text"}],"title":"pointwiseMin(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"pointwiseMin","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/pointwiseMin(_:_:)-8v95p"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int128":{"url":"\/documentation\/compute\/int128","abstract":[{"type":"text","text":"A 128-bit signed integer type."}],"title":"Int128","role":"symbol","navigatorTitle":[{"text":"Int128","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int128"}],"kind":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/CBool":{"type":"topic","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CBool","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"CBool"}],"title":"CBool","abstract":[{"type":"text","text":"The C ‘_Bool’ and C++ ‘bool’ type."}],"url":"\/documentation\/compute\/cbool","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CBool"},"doc://com.swallow.documentation.Compute/documentation/Compute/DictionaryLiteralConvertible":{"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"DictionaryLiteralConvertible"}],"navigatorTitle":[{"kind":"identifier","text":"DictionaryLiteralConvertible"}],"url":"\/documentation\/compute\/dictionaryliteralconvertible","type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DictionaryLiteralConvertible","abstract":[],"title":"DictionaryLiteralConvertible","kind":"symbol","deprecated":true},"doc://com.swallow.documentation.Compute/documentation/Compute/~=(_:_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/~=(_:_:)","title":"~=(_:_:)","kind":"symbol","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether two arguments match by value"},{"type":"text","text":" "},{"type":"text","text":"equality."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"~="},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"url":"\/documentation\/compute\/~=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/isKnownUniquelyReferenced(_:)-98zpp":{"kind":"symbol","url":"\/documentation\/compute\/isknownuniquelyreferenced(_:)-98zpp","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the given object is known to"},{"type":"text","text":" "},{"type":"text","text":"have a single strong reference."}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/isKnownUniquelyReferenced(_:)-98zpp","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"isKnownUniquelyReferenced","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"title":"isKnownUniquelyReferenced(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/BidirectionalMap":{"kind":"symbol","navigatorTitle":[{"text":"BidirectionalMap","kind":"identifier"}],"url":"\/documentation\/compute\/bidirectionalmap","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalMap"}],"abstract":[{"text":"A bidirectional map between two ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" types."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalMap","role":"symbol","title":"BidirectionalMap"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD4":{"role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SIMD4","kind":"identifier"}],"navigatorTitle":[{"text":"SIMD4","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD4","abstract":[{"type":"text","text":"A vector of four scalar values."}],"title":"SIMD4","url":"\/documentation\/compute\/simd4"},"doc://com.swallow.documentation.Compute/documentation/Compute/MutableCollection":{"role":"symbol","kind":"symbol","type":"topic","title":"MutableCollection","url":"\/documentation\/compute\/mutablecollection","navigatorTitle":[{"text":"MutableCollection","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableCollection","abstract":[{"type":"text","text":"A collection that supports subscript assignment."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MutableCollection"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/_=(_:_:)-8u5uu":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"<=","kind":"identifier"},{"kind":"text","text":" "},{"text":"<","kind":"text"},{"text":"A","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"B"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"C"},{"kind":"text","text":">(("},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":"), ("},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"text":"C","kind":"typeIdentifier"},{"text":")) -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"url":"\/documentation\/compute\/_=(_:_:)-8u5uu","type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-8u5uu","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the first tuple is ordered"},{"type":"text","text":" "},{"text":"before or the same as the second in a lexicographical ordering.","type":"text"}],"title":"<=(_:_:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/CUnsignedInt":{"kind":"symbol","url":"\/documentation\/compute\/cunsignedint","abstract":[{"text":"The C ‘unsigned int’ type.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"CUnsignedInt"}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CUnsignedInt","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CUnsignedInt"}],"title":"CUnsignedInt"},"doc://com.swallow.documentation.Compute/documentation/Compute/BidirectionalCollection":{"navigatorTitle":[{"text":"BidirectionalCollection","kind":"identifier"}],"abstract":[{"text":"A collection that supports backward as well as forward traversal.","type":"text"}],"title":"BidirectionalCollection","kind":"symbol","url":"\/documentation\/compute\/bidirectionalcollection","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BidirectionalCollection"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalCollection","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/EmptyCollection":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EmptyCollection"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"text":"EmptyCollection","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A collection whose element type is "},{"type":"codeVoice","code":"Element"},{"text":" but that is always empty.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EmptyCollection","url":"\/documentation\/compute\/emptycollection","title":"EmptyCollection"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt16":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UInt16","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UInt16"}],"title":"UInt16","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt16","url":"\/documentation\/compute\/uint16","kind":"symbol","role":"symbol","abstract":[{"text":"A 16-bit unsigned integer value","type":"text"},{"text":" ","type":"text"},{"text":"type.","type":"text"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/_=(_:_:)-1ak1k":{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the first tuple is ordered"},{"text":" ","type":"text"},{"text":"after or the same as the second in a lexicographical ordering.","type":"text"}],"type":"topic","role":"symbol","kind":"symbol","title":">=(_:_:)","url":"\/documentation\/compute\/_=(_:_:)-1ak1k","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-1ak1k","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":">=","kind":"identifier"},{"kind":"text","text":" "},{"text":"((), ()) -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/_(_:_:)-1b1cu":{"abstract":[{"text":"Returns a Boolean value indicating whether the first tuple is ordered","type":"text"},{"text":" ","type":"text"},{"text":"before the second in a lexicographical ordering.","type":"text"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-1b1cu","type":"topic","url":"\/documentation\/compute\/_(_:_:)-1b1cu","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"<","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"((), ()) -> "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"title":"<(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/KeyedEncodingContainer":{"navigatorTitle":[{"text":"KeyedEncodingContainer","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyedEncodingContainer","url":"\/documentation\/compute\/keyedencodingcontainer","abstract":[{"text":"A concrete container that provides a view into an encoder’s storage, making","type":"text"},{"type":"text","text":" "},{"text":"the encoded properties of an encodable type accessible by keys.","type":"text"}],"title":"KeyedEncodingContainer","type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"KeyedEncodingContainer","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyClass":{"type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyClass"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyClass","abstract":[{"type":"text","text":"The protocol to which all class types implicitly conform."}],"title":"AnyClass","navigatorTitle":[{"kind":"identifier","text":"AnyClass"}],"url":"\/documentation\/compute\/anyclass"},"doc://com.swallow.documentation.Compute/documentation/Compute/line()":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"line"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">() -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"url":"\/documentation\/compute\/line()","type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/line()","abstract":[{"type":"text","text":"Produces the line number at which the macro is expanded."}],"title":"line()","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/stride(from:to:by:)":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"stride"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"by"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Stride","kind":"typeIdentifier","preciseIdentifier":"s:Sx6StrideQa"},{"text":") -> ","kind":"text"},{"text":"StrideTo","kind":"typeIdentifier","preciseIdentifier":"s:s8StrideToV"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/stride(from:to:by:)","url":"\/documentation\/compute\/stride(from:to:by:)","kind":"symbol","title":"stride(from:to:by:)","abstract":[{"type":"text","text":"Returns a sequence from a starting value to, but not including, an end"},{"type":"text","text":" "},{"text":"value, stepping by the specified amount.","type":"text"}],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMDMask":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SIMDMask"}],"role":"symbol","title":"SIMDMask","abstract":[],"url":"\/documentation\/compute\/simdmask","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDMask","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SIMDMask"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/!=(_:_:)-3nrcc":{"abstract":[{"text":"Returns a Boolean value indicating whether any corresponding components of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the two tuples are not equal."}],"title":"!=(_:_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"!=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"<"},{"text":"A","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"B"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"C"},{"text":", ","kind":"text"},{"text":"D","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"E","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"F","kind":"genericParameter"},{"kind":"text","text":">(("},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":", "},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"F"},{"text":"), (","kind":"text"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"D"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"text":", ","kind":"text"},{"text":"F","kind":"typeIdentifier"},{"kind":"text","text":")) -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"kind":"symbol","url":"\/documentation\/compute\/!=(_:_:)-3nrcc","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/!=(_:_:)-3nrcc","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyKeyPath":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyKeyPath","url":"\/documentation\/compute\/anykeypath","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"AnyKeyPath","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AnyKeyPath"}],"role":"symbol","kind":"symbol","abstract":[{"text":"A type-erased key path, from any root type to any resulting value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type."}],"type":"topic","title":"AnyKeyPath"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByStringLiteral":{"abstract":[{"type":"text","text":"A type that can be initialized with a string literal."}],"type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ExpressibleByStringLiteral","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringLiteral","title":"ExpressibleByStringLiteral","url":"\/documentation\/compute\/expressiblebystringliteral","navigatorTitle":[{"text":"ExpressibleByStringLiteral","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ConstructibleReferenceParentPointerTree":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ConstructibleReferenceParentPointerTree","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"ConstructibleReferenceParentPointerTree","kind":"identifier"}],"url":"\/documentation\/compute\/constructiblereferenceparentpointertree","type":"topic","role":"symbol","title":"ConstructibleReferenceParentPointerTree","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ConstructibleReferenceParentPointerTree"}],"abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/_=(_:_:)-6kwvw":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":">=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"A"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"A"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":"), ("},{"text":"A","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"B"},{"text":")) -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-6kwvw","url":"\/documentation\/compute\/_=(_:_:)-6kwvw","kind":"symbol","title":">=(_:_:)","abstract":[{"text":"Returns a Boolean value indicating whether the first tuple is ordered","type":"text"},{"text":" ","type":"text"},{"text":"after or the same as the second in a lexicographical ordering.","type":"text"}],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyHashable":{"role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyHashable","kind":"identifier"}],"abstract":[{"text":"A type-erased hashable value.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyHashable","navigatorTitle":[{"text":"AnyHashable","kind":"identifier"}],"url":"\/documentation\/compute\/anyhashable","title":"AnyHashable","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/repeatElement(_:count:)":{"url":"\/documentation\/compute\/repeatelement(_:count:)","title":"repeatElement(_:count:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"repeatElement"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"count","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Repeated","preciseIdentifier":"s:s8RepeatedV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">","kind":"text"}],"kind":"symbol","abstract":[{"type":"text","text":"Creates a collection containing the specified number of the given element."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/repeatElement(_:count:)","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/FloatingPointAggregate":{"url":"\/documentation\/compute\/floatingpointaggregate","type":"topic","navigatorTitle":[{"text":"FloatingPointAggregate","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"FloatingPointAggregate","kind":"identifier"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatingPointAggregate","title":"FloatingPointAggregate","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/CFloat":{"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"CFloat","kind":"identifier"}],"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/cfloat","navigatorTitle":[{"text":"CFloat","kind":"identifier"}],"title":"CFloat","abstract":[{"text":"The C ‘float’ type.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CFloat"},"doc://com.swallow.documentation.Compute/documentation/Compute/==(_:_:)-9hu5c":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/==(_:_:)-9hu5c","url":"\/documentation\/compute\/==(_:_:)-9hu5c","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"==","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"type":"topic","role":"symbol","abstract":[{"text":"Returns a Boolean value indicating whether the two arguments are equal.","type":"text"}],"kind":"symbol","title":"==(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/DictionaryIndex":{"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DictionaryIndex"}],"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/dictionaryindex","navigatorTitle":[{"text":"DictionaryIndex","kind":"identifier"}],"title":"DictionaryIndex","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DictionaryIndex"},"doc://com.swallow.documentation.Compute/documentation/Compute/CChar16":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CChar16","url":"\/documentation\/compute\/cchar16","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"CChar16","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[{"type":"text","text":"The C++11 ‘char16_t’ type, which has UTF-16 encoding."}],"navigatorTitle":[{"kind":"identifier","text":"CChar16"}],"kind":"symbol","title":"CChar16"},"doc://com.swallow.documentation.Compute/documentation/Compute/PlaygroundQuickLook":{"navigatorTitle":[{"text":"PlaygroundQuickLook","kind":"identifier"}],"type":"topic","deprecated":true,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PlaygroundQuickLook","abstract":[{"text":"The sum of types that can be used as a Quick Look representation.","type":"text"}],"title":"PlaygroundQuickLook","role":"symbol","url":"\/documentation\/compute\/playgroundquicklook","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"PlaygroundQuickLook"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnicodeScalarLiteralConvertible":{"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"UnicodeScalarLiteralConvertible","kind":"identifier"}],"type":"topic","deprecated":true,"kind":"symbol","role":"symbol","url":"\/documentation\/compute\/unicodescalarliteralconvertible","navigatorTitle":[{"kind":"identifier","text":"UnicodeScalarLiteralConvertible"}],"title":"UnicodeScalarLiteralConvertible","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnicodeScalarLiteralConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveTreeIterators":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"RecursiveTreeIterators","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"RecursiveTreeIterators","kind":"identifier"}],"title":"RecursiveTreeIterators","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveTreeIterators","abstract":[],"url":"\/documentation\/compute\/recursivetreeiterators","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialOf":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialOf","url":"\/documentation\/compute\/partialof","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"PartialOf","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"PartialOf"}],"kind":"symbol","title":"PartialOf"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyRandomAccessCollection":{"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"LazyRandomAccessCollection","kind":"identifier"}],"type":"topic","deprecated":true,"kind":"symbol","role":"symbol","url":"\/documentation\/compute\/lazyrandomaccesscollection","navigatorTitle":[{"kind":"identifier","text":"LazyRandomAccessCollection"}],"title":"LazyRandomAccessCollection","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyRandomAccessCollection"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawBufferPointerIterator":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawBufferPointerIterator","url":"\/documentation\/compute\/unsaferawbufferpointeriterator","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"UnsafeRawBufferPointerIterator","kind":"identifier"}],"type":"topic","role":"symbol","deprecated":true,"abstract":[],"navigatorTitle":[{"kind":"identifier","text":"UnsafeRawBufferPointerIterator"}],"kind":"symbol","title":"UnsafeRawBufferPointerIterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/_=(_:_:)-1hzxz":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"<="},{"text":" ","kind":"text"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"A"},{"kind":"text","text":", "},{"text":"B","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"C","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"D"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"E"},{"kind":"text","text":">(("},{"text":"A","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"B","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"C"},{"text":", ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"E","kind":"typeIdentifier"},{"text":"), (","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"D"},{"text":", ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":")) -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/_=(_:_:)-1hzxz","title":"<=(_:_:)","abstract":[{"text":"Returns a Boolean value indicating whether the first tuple is ordered","type":"text"},{"type":"text","text":" "},{"text":"before or the same as the second in a lexicographical ordering.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-1hzxz"},"doc://com.swallow.documentation.Compute/documentation/Compute/ManagedBufferPointer":{"type":"topic","abstract":[{"type":"text","text":"Contains a buffer object, and provides access to an instance of"},{"type":"text","text":" "},{"code":"Header","type":"codeVoice"},{"type":"text","text":" and contiguous storage for an arbitrary number of"},{"type":"text","text":" "},{"code":"Element","type":"codeVoice"},{"type":"text","text":" instances stored in that buffer."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ManagedBufferPointer","kind":"identifier"}],"kind":"symbol","role":"symbol","title":"ManagedBufferPointer","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ManagedBufferPointer","navigatorTitle":[{"kind":"identifier","text":"ManagedBufferPointer"}],"url":"\/documentation\/compute\/managedbufferpointer"},"doc://com.swallow.documentation.Compute/documentation/Compute/SetRelation":{"abstract":[],"url":"\/documentation\/compute\/setrelation","type":"topic","title":"SetRelation","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SetRelation"}],"navigatorTitle":[{"text":"SetRelation","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SetRelation","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/FlattenCollectionIndex":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenCollectionIndex","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"FlattenCollectionIndex"}],"url":"\/documentation\/compute\/flattencollectionindex","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FlattenCollectionIndex","kind":"identifier"}],"abstract":[],"deprecated":true,"title":"FlattenCollectionIndex","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/_=(_:_:)-7p28b":{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the first tuple is ordered"},{"type":"text","text":" "},{"text":"after or the same as the second in a lexicographical ordering.","type":"text"}],"url":"\/documentation\/compute\/_=(_:_:)-7p28b","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-7p28b","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":">="},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"text":"A","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"B","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"C"},{"text":">((","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"B"},{"text":", ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":"), (","kind":"text"},{"kind":"typeIdentifier","text":"A"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":")) -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"kind":"symbol","title":">=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/LosslessStringConvertible":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LosslessStringConvertible","kind":"identifier"}],"kind":"symbol","title":"LosslessStringConvertible","abstract":[{"type":"text","text":"A type that can be represented as a string in a lossless, unambiguous way."}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"LosslessStringConvertible","kind":"identifier"}],"url":"\/documentation\/compute\/losslessstringconvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/DefaultRecursiveIndex":{"navigatorTitle":[{"kind":"identifier","text":"DefaultRecursiveIndex"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultRecursiveIndex","url":"\/documentation\/compute\/defaultrecursiveindex","abstract":[],"title":"DefaultRecursiveIndex","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DefaultRecursiveIndex"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/OpaquePointer":{"role":"symbol","navigatorTitle":[{"text":"OpaquePointer","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OpaquePointer","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/OpaquePointer","type":"topic","title":"OpaquePointer","kind":"symbol","abstract":[{"type":"text","text":"A wrapper around an opaque C pointer."}],"url":"\/documentation\/compute\/opaquepointer"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyObject":{"role":"symbol","kind":"symbol","title":"AnyObject","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyObject","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"AnyObject","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"The protocol to which all classes implicitly conform."}],"url":"\/documentation\/compute\/anyobject","navigatorTitle":[{"text":"AnyObject","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/RandomAccessCollection":{"title":"RandomAccessCollection","abstract":[{"text":"A collection that supports efficient random-access index traversal.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RandomAccessCollection","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomAccessCollection","url":"\/documentation\/compute\/randomaccesscollection","navigatorTitle":[{"text":"RandomAccessCollection","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/FlattenCollection":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FlattenCollection","kind":"identifier"}],"title":"FlattenCollection","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenCollection","abstract":[],"navigatorTitle":[{"text":"FlattenCollection","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/compute\/flattencollection","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Indexable":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Indexable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Indexable"}],"url":"\/documentation\/compute\/indexable","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Indexable"}],"abstract":[],"deprecated":true,"title":"Indexable","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/==(_:_:)-w1qf":{"type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"=="},{"text":" ","kind":"text"},{"text":"((any ","kind":"text"},{"text":"Any","kind":"keyword"},{"text":".Type)?, (any ","kind":"text"},{"text":"Any","kind":"keyword"},{"text":".Type)?) -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/==(_:_:)-w1qf","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether two types are identical."}],"title":"==(_:_:)","url":"\/documentation\/compute\/==(_:_:)-w1qf"},"doc://com.swallow.documentation.Compute/documentation/Compute/abs(_:)":{"abstract":[{"text":"Returns the absolute value of the given number.","type":"text"}],"url":"\/documentation\/compute\/abs(_:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/abs(_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"abs","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","title":"abs(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/EncodingError":{"navigatorTitle":[{"text":"EncodingError","kind":"identifier"}],"role":"symbol","url":"\/documentation\/compute\/encodingerror","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"EncodingError","kind":"identifier"}],"type":"topic","title":"EncodingError","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EncodingError","abstract":[{"type":"text","text":"An error that occurs during the encoding of a value."}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnfoldFirstSequence":{"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnfoldFirstSequence"}],"type":"topic","role":"symbol","title":"UnfoldFirstSequence","abstract":[{"text":"The return type of ","type":"text"},{"code":"sequence(first:next:)","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/compute\/unfoldfirstsequence","navigatorTitle":[{"text":"UnfoldFirstSequence","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnfoldFirstSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"url":"\/documentation\/compute\/sequence","navigatorTitle":[{"kind":"identifier","text":"Sequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","title":"Sequence","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Sequence","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/IteratorSequence":{"abstract":[{"type":"text","text":"A sequence built around an iterator of type "},{"type":"codeVoice","code":"Base"},{"type":"text","text":"."}],"title":"IteratorSequence","type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/iteratorsequence","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"IteratorSequence","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorSequence","navigatorTitle":[{"text":"IteratorSequence","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/StringLiteralType":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringLiteralType","url":"\/documentation\/compute\/stringliteraltype","navigatorTitle":[{"text":"StringLiteralType","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"StringLiteralType"}],"abstract":[{"text":"The default type for an otherwise-unconstrained string literal.","type":"text"}],"type":"topic","role":"symbol","title":"StringLiteralType","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/MutableRangeReplaceableSlice":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRangeReplaceableSlice","role":"symbol","navigatorTitle":[{"text":"MutableRangeReplaceableSlice","kind":"identifier"}],"url":"\/documentation\/compute\/mutablerangereplaceableslice","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"MutableRangeReplaceableSlice","kind":"identifier"}],"abstract":[],"deprecated":true,"title":"MutableRangeReplaceableSlice","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/CUnsignedChar":{"navigatorTitle":[{"kind":"identifier","text":"CUnsignedChar"}],"type":"topic","url":"\/documentation\/compute\/cunsignedchar","kind":"symbol","role":"symbol","title":"CUnsignedChar","abstract":[{"type":"text","text":"The C ‘unsigned char’ type."}],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"CUnsignedChar","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CUnsignedChar"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableBufferPointer":{"kind":"symbol","url":"\/documentation\/compute\/unsafemutablebufferpointer","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UnsafeMutableBufferPointer","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UnsafeMutableBufferPointer"}],"abstract":[{"type":"text","text":"A nonowning collection interface to a buffer of mutable"},{"text":" ","type":"text"},{"text":"elements stored contiguously in memory.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer","title":"UnsafeMutableBufferPointer","type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD3":{"role":"symbol","navigatorTitle":[{"text":"SIMD3","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD3","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SIMD3","kind":"identifier"}],"abstract":[{"text":"A vector of three scalar values.","type":"text"}],"title":"SIMD3","url":"\/documentation\/compute\/simd3","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByStringInterpolation":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressibleByStringInterpolation"}],"kind":"symbol","title":"ExpressibleByStringInterpolation","abstract":[{"type":"text","text":"A type that can be initialized by string interpolation with a string"},{"text":" ","type":"text"},{"type":"text","text":"literal that includes expressions."}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExpressibleByStringInterpolation"}],"url":"\/documentation\/compute\/expressiblebystringinterpolation","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringInterpolation"},"doc://com.swallow.documentation.Compute/documentation/Compute/Quaternion":{"url":"\/documentation\/compute\/quaternion","navigatorTitle":[{"kind":"identifier","text":"Quaternion"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Quaternion","kind":"identifier"}],"abstract":[],"type":"topic","title":"Quaternion","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Quaternion"},"doc://com.swallow.documentation.Compute/documentation/Compute/withUnsafeMutablePointer(to:_:)":{"abstract":[{"text":"Calls the given closure with a mutable pointer to the given argument.","type":"text"}],"url":"\/documentation\/compute\/withunsafemutablepointer(to:_:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withUnsafeMutablePointer(to:_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withUnsafeMutablePointer","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":", "},{"text":"E","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Result","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","preciseIdentifier":"s:Sp","text":"UnsafeMutablePointer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"E"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}],"kind":"symbol","title":"withUnsafeMutablePointer(to:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/stride(from:through:by:)":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/stride(from:through:by:)","role":"symbol","url":"\/documentation\/compute\/stride(from:through:by:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"stride"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"through"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Sx6StrideQa","text":"Stride"},{"text":") -> ","kind":"text"},{"text":"StrideThrough","kind":"typeIdentifier","preciseIdentifier":"s:s13StrideThroughV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"abstract":[{"text":"Returns a sequence from a starting value toward, and possibly including, an end","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value, stepping by the specified amount."}],"title":"stride(from:through:by:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/InjectiveOnly":{"abstract":[],"title":"InjectiveOnly","role":"symbol","navigatorTitle":[{"text":"InjectiveOnly","kind":"identifier"}],"url":"\/documentation\/compute\/injectiveonly","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"InjectiveOnly","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/InjectiveOnly","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReversedRandomAccessCollection":{"abstract":[],"url":"\/documentation\/compute\/reversedrandomaccesscollection","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReversedRandomAccessCollection","deprecated":true,"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"ReversedRandomAccessCollection","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ReversedRandomAccessCollection"}],"title":"ReversedRandomAccessCollection"},"doc://com.swallow.documentation.Compute/documentation/Compute/LinkedList":{"url":"\/documentation\/compute\/linkedlist","abstract":[],"title":"LinkedList","role":"symbol","navigatorTitle":[{"text":"LinkedList","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LinkedList","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"LinkedList"}],"kind":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Queue":{"url":"\/documentation\/compute\/queue","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Queue","kind":"symbol","title":"Queue","role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Queue","kind":"identifier"}],"abstract":[],"navigatorTitle":[{"text":"Queue","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/__(_:_:)-9xjze":{"type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/__(_:_:)-9xjze","url":"\/documentation\/compute\/__(_:_:)-9xjze","abstract":[{"text":"Performs a nil-coalescing operation, returning the wrapped value of an","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Optional"},{"text":" instance or a default value.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"??"},{"text":" ","kind":"text"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"consuming","kind":"keyword"},{"kind":"text","text":" "},{"text":"T","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"@autoclosure ","kind":"attribute"},{"kind":"text","text":"() "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","title":"??(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequence":{"abstract":[{"text":"A sequence containing the same elements as a ","type":"text"},{"code":"Base","type":"codeVoice"},{"type":"text","text":" sequence, but"},{"text":" ","type":"text"},{"type":"text","text":"on which some operations such as "},{"type":"codeVoice","code":"map"},{"text":" and ","type":"text"},{"code":"filter","type":"codeVoice"},{"text":" are","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"implemented lazily."}],"role":"symbol","navigatorTitle":[{"text":"LazySequence","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazySequence"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequence","type":"topic","title":"LazySequence","url":"\/documentation\/compute\/lazysequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Int8"}],"url":"\/documentation\/compute\/int8","title":"Int8","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Int8"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8","abstract":[{"text":"An 8-bit signed integer value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CLongLong":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CLongLong","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CLongLong"}],"url":"\/documentation\/compute\/clonglong","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CLongLong"}],"abstract":[{"text":"The C ‘long long’ type.","type":"text"}],"title":"CLongLong","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterSequence":{"kind":"symbol","navigatorTitle":[{"text":"LazyFilterSequence","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence","abstract":[{"type":"text","text":"A sequence whose elements consist of the elements of some base"},{"type":"text","text":" "},{"type":"text","text":"sequence that also satisfy a given predicate."}],"title":"LazyFilterSequence","url":"\/documentation\/compute\/lazyfiltersequence","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"LazyFilterSequence","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyCollection":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyCollection","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyCollection","kind":"identifier"}],"url":"\/documentation\/compute\/anycollection","type":"topic","abstract":[{"text":"A type-erased wrapper over any collection with indices that","type":"text"},{"type":"text","text":" "},{"text":"support forward traversal.","type":"text"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"AnyCollection","kind":"identifier"}],"title":"AnyCollection"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileIndex":{"abstract":[],"url":"\/documentation\/compute\/lazyprefixwhileindex","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileIndex","deprecated":true,"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"LazyPrefixWhileIndex","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"LazyPrefixWhileIndex","kind":"identifier"}],"title":"LazyPrefixWhileIndex"},"doc://com.swallow.documentation.Compute/documentation/Compute/withUnsafePointer(to:_:)-35wrn":{"title":"withUnsafePointer(to:_:)","kind":"symbol","url":"\/documentation\/compute\/withunsafepointer(to:_:)-35wrn","type":"topic","abstract":[{"text":"Invokes the given closure with a pointer to the given argument.","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withUnsafePointer(to:_:)-35wrn","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withUnsafePointer"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"E","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Result","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"borrowing"},{"kind":"text","text":" "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", ("},{"preciseIdentifier":"s:SP","kind":"typeIdentifier","text":"UnsafePointer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"E"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Result"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/DirectedGraphEdge":{"abstract":[],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"DirectedGraphEdge","kind":"identifier"}],"title":"DirectedGraphEdge","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DirectedGraphEdge","kind":"symbol","url":"\/documentation\/compute\/directedgraphedge","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DirectedGraphEdge"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Mirror":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Mirror","kind":"symbol","abstract":[{"type":"text","text":"A representation of the substructure and display style of an instance of"},{"type":"text","text":" "},{"type":"text","text":"any type."}],"role":"symbol","title":"Mirror","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Mirror","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Mirror"}],"url":"\/documentation\/compute\/mirror","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/MemoryLayout":{"url":"\/documentation\/compute\/memorylayout","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MemoryLayout","title":"MemoryLayout","role":"symbol","abstract":[{"text":"The memory layout of a type, describing its size, stride, and alignment.","type":"text"}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"MemoryLayout","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"MemoryLayout"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByNilLiteral":{"role":"symbol","type":"topic","title":"ExpressibleByNilLiteral","abstract":[{"text":"A type that can be initialized using the nil literal, ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ExpressibleByNilLiteral","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByNilLiteral","navigatorTitle":[{"kind":"identifier","text":"ExpressibleByNilLiteral"}],"kind":"symbol","url":"\/documentation\/compute\/expressiblebynilliteral"},"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable":{"url":"\/documentation\/compute\/comparable","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared using the relational operators ","type":"text"},{"code":"<","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Comparable"}],"title":"Comparable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Comparable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/!=(_:_:)-754t2":{"url":"\/documentation\/compute\/!=(_:_:)-754t2","title":"!=(_:_:)","role":"symbol","type":"topic","abstract":[{"text":"Returns a Boolean value indicating whether any corresponding components of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the two tuples are not equal."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/!=(_:_:)-754t2","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"!=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"A"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":", "},{"text":"C","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"B"},{"text":", ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":"), ("},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"B"},{"text":", ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":")) -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Decodable":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Decodable","kind":"identifier"}],"title":"Decodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","abstract":[{"type":"text","text":"A type that can decode itself from an external representation."}],"url":"\/documentation\/compute\/decodable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Decodable"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/fatalError(_:file:line:)":{"url":"\/documentation\/compute\/fatalerror(_:file:line:)","abstract":[{"type":"text","text":"Unconditionally prints a given message and stops execution."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"fatalError","kind":"identifier"},{"kind":"text","text":"("},{"kind":"attribute","text":"@autoclosure "},{"text":"() -> ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Never","preciseIdentifier":"s:s5NeverO"}],"title":"fatalError(_:file:line:)","kind":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/fatalError(_:file:line:)","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/MergeSplitSequence":{"role":"symbol","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MergeSplitSequence","kind":"identifier"}],"url":"\/documentation\/compute\/mergesplitsequence","navigatorTitle":[{"kind":"identifier","text":"MergeSplitSequence"}],"abstract":[],"title":"MergeSplitSequence","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MergeSplitSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/SequenceTokenizer":{"kind":"symbol","navigatorTitle":[{"text":"SequenceTokenizer","kind":"identifier"}],"title":"SequenceTokenizer","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SequenceTokenizer","url":"\/documentation\/compute\/sequencetokenizer","abstract":[],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SequenceTokenizer","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyMapSequence":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapSequence","url":"\/documentation\/compute\/lazymapsequence","abstract":[{"type":"text","text":"A "},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":" whose elements consist of those in a "},{"type":"codeVoice","code":"Base"},{"type":"text","text":" "},{"code":"Sequence","type":"codeVoice"},{"text":" passed through a transform function returning ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These elements are computed lazily, each time they’re read, by"},{"type":"text","text":" "},{"type":"text","text":"calling the transform function on a base element."}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LazyMapSequence","kind":"identifier"}],"navigatorTitle":[{"text":"LazyMapSequence","kind":"identifier"}],"kind":"symbol","title":"LazyMapSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/TextOutputStream":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TextOutputStream"}],"kind":"symbol","title":"TextOutputStream","abstract":[{"type":"text","text":"A type that can be the target of text-streaming operations."}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"TextOutputStream","kind":"identifier"}],"url":"\/documentation\/compute\/textoutputstream","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TextOutputStream"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceParentPointerTree":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"ReferenceParentPointerTree","kind":"identifier"}],"title":"ReferenceParentPointerTree","url":"\/documentation\/compute\/referenceparentpointertree","abstract":[{"text":"A tree with a pointer to its parent.","type":"text"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ReferenceParentPointerTree"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceParentPointerTree"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileCollection":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileCollection","role":"symbol","navigatorTitle":[{"text":"LazyPrefixWhileCollection","kind":"identifier"}],"url":"\/documentation\/compute\/lazyprefixwhilecollection","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"LazyPrefixWhileCollection","kind":"identifier"}],"abstract":[{"text":"A lazy collection wrapper that includes the initial consecutive","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements of an underlying collection that satisfy a predicate."}],"title":"LazyPrefixWhileCollection","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/CVarArg":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CVarArg"}],"abstract":[{"text":"A type whose instances can be encoded, and appropriately passed, as","type":"text"},{"text":" ","type":"text"},{"text":"elements of a C ","type":"text"},{"type":"codeVoice","code":"va_list"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"CVarArg","kind":"identifier"}],"title":"CVarArg","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","url":"\/documentation\/compute\/cvararg"},"doc://com.swallow.documentation.Compute/documentation/Compute/JoinedSequence":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/JoinedSequence","title":"JoinedSequence","abstract":[{"type":"text","text":"A sequence that presents the elements of a base sequence of sequences"},{"type":"text","text":" "},{"text":"concatenated using a given separator.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"JoinedSequence","kind":"identifier"}],"url":"\/documentation\/compute\/joinedsequence","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JoinedSequence","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/!==(_:_:)":{"abstract":[],"url":"\/documentation\/compute\/!==(_:_:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/!==(_:_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"!==","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"preciseIdentifier":"s:s9AnyObjecta","kind":"typeIdentifier","text":"AnyObject"},{"text":"?, ","kind":"text"},{"text":"AnyObject","kind":"typeIdentifier","preciseIdentifier":"s:s9AnyObjecta"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"kind":"symbol","title":"!==(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeUpTo":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"PartialRangeUpTo","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/partialrangeupto","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo","abstract":[{"type":"text","text":"A partial half-open interval up to, but not including, an upper bound."}],"navigatorTitle":[{"text":"PartialRangeUpTo","kind":"identifier"}],"title":"PartialRangeUpTo"},"doc://com.swallow.documentation.Compute/documentation/Compute/ContiguousArray":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ContiguousArray","url":"\/documentation\/compute\/contiguousarray","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ContiguousArray"}],"title":"ContiguousArray","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContiguousArray"}],"role":"symbol","abstract":[{"text":"A contiguously stored array.","type":"text"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/TreeValuesTraversalSequence":{"url":"\/documentation\/compute\/treevaluestraversalsequence","navigatorTitle":[{"kind":"identifier","text":"TreeValuesTraversalSequence"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"TreeValuesTraversalSequence","kind":"identifier"}],"abstract":[],"type":"topic","title":"TreeValuesTraversalSequence","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeValuesTraversalSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD2":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SIMD2"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD2","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SIMD2"}],"abstract":[{"text":"A vector of two scalar values.","type":"text"}],"title":"SIMD2","url":"\/documentation\/compute\/simd2","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/StrideTo":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideTo","abstract":[{"type":"text","text":"A sequence of values formed by striding over a half-open interval."}],"role":"symbol","title":"StrideTo","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StrideTo","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/strideto","navigatorTitle":[{"text":"StrideTo","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/DefaultStringInterpolation":{"role":"symbol","type":"topic","title":"DefaultStringInterpolation","abstract":[{"type":"text","text":"Represents a string literal with interpolations while it is being built up."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DefaultStringInterpolation"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultStringInterpolation","navigatorTitle":[{"text":"DefaultStringInterpolation","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/defaultstringinterpolation"},"doc://com.swallow.documentation.Compute/documentation/Compute/FloatingPointRoundingRule":{"kind":"symbol","navigatorTitle":[{"text":"FloatingPointRoundingRule","kind":"identifier"}],"type":"topic","title":"FloatingPointRoundingRule","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatingPointRoundingRule","abstract":[{"type":"text","text":"A rule for rounding a floating-point number."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FloatingPointRoundingRule","kind":"identifier"}],"url":"\/documentation\/compute\/floatingpointroundingrule"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileIterator":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileIterator","role":"symbol","navigatorTitle":[{"text":"LazyPrefixWhileIterator","kind":"identifier"}],"url":"\/documentation\/compute\/lazyprefixwhileiterator","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"LazyPrefixWhileIterator","kind":"identifier"}],"abstract":[],"deprecated":true,"title":"LazyPrefixWhileIterator","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/CWideChar":{"abstract":[],"url":"\/documentation\/compute\/cwidechar","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CWideChar","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CWideChar"}],"kind":"symbol","navigatorTitle":[{"text":"CWideChar","kind":"identifier"}],"title":"CWideChar"},"doc://com.swallow.documentation.Compute/documentation/Compute/FlattenSequence":{"url":"\/documentation\/compute\/flattensequence","navigatorTitle":[{"kind":"identifier","text":"FlattenSequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence","title":"FlattenSequence","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlattenSequence"}],"type":"topic","abstract":[{"type":"text","text":"A sequence consisting of all the elements contained in each segment"},{"text":" ","type":"text"},{"text":"contained in some ","type":"text"},{"code":"Base","type":"codeVoice"},{"type":"text","text":" sequence."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Numeric":{"abstract":[{"type":"text","text":"A type with values that support multiplication."}],"kind":"symbol","url":"\/documentation\/compute\/numeric","navigatorTitle":[{"text":"Numeric","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Numeric"}],"title":"Numeric"},"doc://com.swallow.documentation.Compute/documentation/Compute/DefaultRandomAccessIndices":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultRandomAccessIndices","role":"symbol","navigatorTitle":[{"text":"DefaultRandomAccessIndices","kind":"identifier"}],"url":"\/documentation\/compute\/defaultrandomaccessindices","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DefaultRandomAccessIndices"}],"abstract":[],"deprecated":true,"title":"DefaultRandomAccessIndices","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/IndexingIterator":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IndexingIterator","title":"IndexingIterator","abstract":[{"type":"text","text":"A type that iterates over a collection using its indices."}],"kind":"symbol","navigatorTitle":[{"text":"IndexingIterator","kind":"identifier"}],"url":"\/documentation\/compute\/indexingiterator","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"IndexingIterator","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/preconditionFailure(_:file:line:)":{"abstract":[{"type":"text","text":"Indicates that a precondition was violated."}],"url":"\/documentation\/compute\/preconditionfailure(_:file:line:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/preconditionFailure(_:file:line:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"preconditionFailure","kind":"identifier"},{"kind":"text","text":"("},{"kind":"attribute","text":"@autoclosure "},{"text":"() -> ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5NeverO","text":"Never"}],"kind":"symbol","title":"preconditionFailure(_:file:line:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterBidirectionalCollection":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterBidirectionalCollection","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LazyFilterBidirectionalCollection"}],"url":"\/documentation\/compute\/lazyfilterbidirectionalcollection","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyFilterBidirectionalCollection"}],"abstract":[],"deprecated":true,"title":"LazyFilterBidirectionalCollection","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/fileID()":{"abstract":[{"type":"text","text":"Produces a unique identifier for the given source file, comprised of"},{"type":"text","text":" "},{"type":"text","text":"the module and file name."}],"url":"\/documentation\/compute\/fileid()","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/fileID()","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"fileID","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">() -> "},{"text":"T","kind":"typeIdentifier"}],"kind":"symbol","title":"fileID()"},"doc://com.swallow.documentation.Compute/documentation/Compute/StrideThrough":{"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"StrideThrough","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"StrideThrough","kind":"identifier"}],"url":"\/documentation\/compute\/stridethrough","title":"StrideThrough","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideThrough","abstract":[{"text":"A sequence of values formed by striding over a closed interval.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Range":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Range","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","url":"\/documentation\/compute\/range","abstract":[{"text":"A half-open interval from a lower bound up to, but not including, an upper","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"bound."}],"navigatorTitle":[{"text":"Range","kind":"identifier"}],"title":"Range"},"doc://com.swallow.documentation.Compute/documentation/Compute/dsohandle()":{"role":"symbol","title":"dsohandle()","url":"\/documentation\/compute\/dsohandle()","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"dsohandle","kind":"identifier"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:SV","kind":"typeIdentifier","text":"UnsafeRawPointer"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/dsohandle()","abstract":[{"text":"Produces the shared object handle for the macro expansion location.","type":"text"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyDropWhileIterator":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyDropWhileIterator","role":"symbol","navigatorTitle":[{"text":"LazyDropWhileIterator","kind":"identifier"}],"url":"\/documentation\/compute\/lazydropwhileiterator","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"LazyDropWhileIterator","kind":"identifier"}],"abstract":[],"deprecated":true,"title":"LazyDropWhileIterator","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/StrideToIterator":{"navigatorTitle":[{"text":"StrideToIterator","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StrideToIterator"}],"url":"\/documentation\/compute\/stridetoiterator","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideToIterator","abstract":[{"text":"An iterator for a ","type":"text"},{"code":"StrideTo","type":"codeVoice"},{"text":" instance.","type":"text"}],"role":"symbol","title":"StrideToIterator","type":"topic","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/file()":{"abstract":[{"type":"text","text":"Produces either the result of "},{"code":"#filePath","type":"codeVoice"},{"type":"text","text":" or "},{"code":"#file","type":"codeVoice"},{"text":", depending","type":"text"},{"type":"text","text":" "},{"text":"on whether concise file paths (SE-0274) are enabled.","type":"text"}],"url":"\/documentation\/compute\/file()","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/file()","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"file"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">() -> "},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","title":"file()"},"doc://com.swallow.documentation.Compute/documentation/Compute/transcode(_:from:to:stoppingOnError:into:)":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/transcode(_:from:to:stoppingOnError:into:)","role":"symbol","url":"\/documentation\/compute\/transcode(_:from:to:stoppingonerror:into:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"transcode"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"text":", ","kind":"text"},{"text":"InputEncoding","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"OutputEncoding","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"Input","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"InputEncoding"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"OutputEncoding"},{"text":".Type, ","kind":"text"},{"text":"stoppingOnError","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"into","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"OutputEncoding","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"CodeUnit","preciseIdentifier":"s:s16_UnicodeEncodingP8CodeUnitQa","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"text":"Translates the given input from one Unicode encoding to another by calling","type":"text"},{"type":"text","text":" "},{"text":"the given closure.","type":"text"}],"title":"transcode(_:from:to:stoppingOnError:into:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/IntegerLiteralType":{"abstract":[{"text":"The default type for an otherwise-unconstrained integer literal.","type":"text"}],"url":"\/documentation\/compute\/integerliteraltype","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IntegerLiteralType","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"IntegerLiteralType","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"IntegerLiteralType","kind":"identifier"}],"title":"IntegerLiteralType"},"doc://com.swallow.documentation.Compute/documentation/Compute/IntegerLiteralConvertible":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IntegerLiteralConvertible","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"IntegerLiteralConvertible"}],"url":"\/documentation\/compute\/integerliteralconvertible","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IntegerLiteralConvertible"}],"abstract":[],"deprecated":true,"title":"IntegerLiteralConvertible","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Codable":{"abstract":[{"type":"text","text":"A type that can convert itself into and out of an external representation."}],"url":"\/documentation\/compute\/codable","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Codable","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Codable"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Codable"}],"title":"Codable"},"doc://com.swallow.documentation.Compute/documentation/Compute/FloatingPoint":{"url":"\/documentation\/compute\/floatingpoint","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatingPoint","title":"FloatingPoint","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FloatingPoint","kind":"identifier"}],"navigatorTitle":[{"text":"FloatingPoint","kind":"identifier"}],"abstract":[{"text":"A floating-point numeric type.","type":"text"}],"kind":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/DefaultIndices":{"type":"topic","abstract":[{"type":"text","text":"A collection of indices for an arbitrary collection"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultIndices","navigatorTitle":[{"text":"DefaultIndices","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/defaultindices","role":"symbol","title":"DefaultIndices","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DefaultIndices","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/assertionFailure(_:file:line:)":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/assertionFailure(_:file:line:)","role":"symbol","url":"\/documentation\/compute\/assertionfailure(_:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"assertionFailure","kind":"identifier"},{"kind":"text","text":"("},{"kind":"attribute","text":"@autoclosure "},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":")"}],"abstract":[{"text":"Indicates that an internal consistency check failed.","type":"text"}],"title":"assertionFailure(_:file:line:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterIterator":{"abstract":[],"url":"\/documentation\/compute\/lazyfilteriterator","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterIterator","deprecated":true,"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyFilterIterator"}],"kind":"symbol","navigatorTitle":[{"text":"LazyFilterIterator","kind":"identifier"}],"title":"LazyFilterIterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/FloatingPointClassification":{"url":"\/documentation\/compute\/floatingpointclassification","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FloatingPointClassification","kind":"identifier"}],"title":"FloatingPointClassification","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatingPointClassification","abstract":[{"text":"The IEEE 754 floating-point classes.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"FloatingPointClassification","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/MutableRandomAccessSlice":{"title":"MutableRandomAccessSlice","navigatorTitle":[{"text":"MutableRandomAccessSlice","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MutableRandomAccessSlice"}],"deprecated":true,"abstract":[],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRandomAccessSlice","url":"\/documentation\/compute\/mutablerandomaccessslice","type":"topic","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReversedIndex":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReversedIndex","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ReversedIndex"}],"url":"\/documentation\/compute\/reversedindex","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReversedIndex"}],"abstract":[],"deprecated":true,"title":"ReversedIndex","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByBooleanLiteral":{"abstract":[{"type":"text","text":"A type that can be initialized with the Boolean literals "},{"type":"codeVoice","code":"true"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/compute\/expressiblebybooleanliteral","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByBooleanLiteral","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ExpressibleByBooleanLiteral"}],"kind":"symbol","navigatorTitle":[{"text":"ExpressibleByBooleanLiteral","kind":"identifier"}],"title":"ExpressibleByBooleanLiteral"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD16":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SIMD16","kind":"identifier"}],"type":"topic","title":"SIMD16","url":"\/documentation\/compute\/simd16","navigatorTitle":[{"kind":"identifier","text":"SIMD16"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD16","kind":"symbol","role":"symbol","abstract":[{"text":"A vector of 16 scalar values.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Matrix":{"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Matrix","title":"Matrix","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Matrix"}],"url":"\/documentation\/compute\/matrix","kind":"symbol","type":"topic","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"Matrix"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/print(_:separator:terminator:to:)":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/print(_:separator:terminator:to:)","role":"symbol","url":"\/documentation\/compute\/print(_:separator:terminator:to:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"print","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Target","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"keyword","text":"Any"},{"kind":"text","text":"..., "},{"text":"separator","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":", ","kind":"text"},{"text":"terminator","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Target","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Writes the textual representations of the given items into the given output","type":"text"},{"type":"text","text":" "},{"type":"text","text":"stream."}],"title":"print(_:separator:terminator:to:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/withUnsafeTemporaryAllocation(of:capacity:_:)":{"abstract":[{"text":"Provides scoped access to a buffer pointer to memory of the specified type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and with the specified capacity."}],"url":"\/documentation\/compute\/withunsafetemporaryallocation(of:capacity:_:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withUnsafeTemporaryAllocation(of:capacity:_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withUnsafeTemporaryAllocation"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"text":"of","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"capacity","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"preciseIdentifier":"s:Sr","text":"UnsafeMutableBufferPointer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"}],"kind":"symbol","title":"withUnsafeTemporaryAllocation(of:capacity:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Duration":{"abstract":[{"type":"text","text":"A representation of high precision time."}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Duration","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Duration"}],"url":"\/documentation\/compute\/duration","navigatorTitle":[{"kind":"identifier","text":"Duration"}],"title":"Duration","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/NilLiteralConvertible":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/NilLiteralConvertible","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"NilLiteralConvertible"}],"url":"\/documentation\/compute\/nilliteralconvertible","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"NilLiteralConvertible","kind":"identifier"}],"abstract":[],"deprecated":true,"title":"NilLiteralConvertible","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/FloatLiteralType":{"abstract":[{"text":"The default type for an otherwise-unconstrained floating-point literal.","type":"text"}],"url":"\/documentation\/compute\/floatliteraltype","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatLiteralType","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FloatLiteralType"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"FloatLiteralType"}],"title":"FloatLiteralType"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt":{"kind":"symbol","navigatorTitle":[{"text":"UInt","kind":"identifier"}],"type":"topic","title":"UInt","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt","abstract":[{"text":"An unsigned integer value type.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt","kind":"identifier"}],"url":"\/documentation\/compute\/uint"},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveAdjacencyMapElement":{"navigatorTitle":[{"text":"RecursiveAdjacencyMapElement","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RecursiveAdjacencyMapElement"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveAdjacencyMapElement","type":"topic","kind":"symbol","url":"\/documentation\/compute\/recursiveadjacencymapelement","title":"RecursiveAdjacencyMapElement","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawBufferPointer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawBufferPointer","type":"topic","title":"UnsafeMutableRawBufferPointer","kind":"symbol","url":"\/documentation\/compute\/unsafemutablerawbufferpointer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafeMutableRawBufferPointer"}],"role":"symbol","navigatorTitle":[{"text":"UnsafeMutableRawBufferPointer","kind":"identifier"}],"abstract":[{"text":"A mutable nonowning collection interface to the bytes in a","type":"text"},{"type":"text","text":" "},{"text":"region of memory.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryFloatingPoint":{"navigatorTitle":[{"text":"BinaryFloatingPoint","kind":"identifier"}],"type":"topic","title":"BinaryFloatingPoint","abstract":[{"text":"A radix-2 (binary) floating-point type.","type":"text"}],"url":"\/documentation\/compute\/binaryfloatingpoint","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BinaryFloatingPoint","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryFloatingPoint","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/MutableRangeReplaceableBidirectionalSlice":{"type":"topic","abstract":[],"kind":"symbol","navigatorTitle":[{"text":"MutableRangeReplaceableBidirectionalSlice","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MutableRangeReplaceableBidirectionalSlice"}],"deprecated":true,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRangeReplaceableBidirectionalSlice","title":"MutableRangeReplaceableBidirectionalSlice","role":"symbol","url":"\/documentation\/compute\/mutablerangereplaceablebidirectionalslice"},"doc://com.swallow.documentation.Compute/documentation/Compute/StringInterpolationConvertible":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringInterpolationConvertible","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"StringInterpolationConvertible"}],"url":"\/documentation\/compute\/stringinterpolationconvertible","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"StringInterpolationConvertible","kind":"identifier"}],"abstract":[],"deprecated":true,"title":"StringInterpolationConvertible","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/RawRepresentable":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RawRepresentable"}],"abstract":[{"type":"text","text":"A type that can be converted to and from an associated raw value."}],"type":"topic","title":"RawRepresentable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RawRepresentable"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RawRepresentable","url":"\/documentation\/compute\/rawrepresentable"},"doc://com.swallow.documentation.Compute/documentation/Compute/NonInjective":{"title":"NonInjective","navigatorTitle":[{"kind":"identifier","text":"NonInjective"}],"abstract":[],"role":"symbol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"NonInjective"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/NonInjective","type":"topic","url":"\/documentation\/compute\/noninjective"},"doc://com.swallow.documentation.Compute/documentation/Compute/UTF32":{"abstract":[],"url":"\/documentation\/compute\/utf32","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UTF32","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"UTF32","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"UTF32","kind":"identifier"}],"title":"UTF32"},"doc://com.swallow.documentation.Compute/documentation/Compute/DropFirstSequence":{"abstract":[{"type":"text","text":"A sequence that lazily consumes and drops "},{"type":"codeVoice","code":"n"},{"type":"text","text":" elements from an underlying"},{"text":" ","type":"text"},{"code":"Base","type":"codeVoice"},{"type":"text","text":" iterator before possibly returning the first available element."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DropFirstSequence"}],"type":"topic","role":"symbol","url":"\/documentation\/compute\/dropfirstsequence","navigatorTitle":[{"kind":"identifier","text":"DropFirstSequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DropFirstSequence","title":"DropFirstSequence","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/IndexPathEnumeratedTree":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IndexPathEnumeratedTree"}],"abstract":[],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IndexPathEnumeratedTree","url":"\/documentation\/compute\/indexpathenumeratedtree","navigatorTitle":[{"text":"IndexPathEnumeratedTree","kind":"identifier"}],"role":"symbol","title":"IndexPathEnumeratedTree"},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveArray":{"type":"topic","role":"symbol","url":"\/documentation\/compute\/recursivearray","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray","title":"RecursiveArray","abstract":[],"navigatorTitle":[{"text":"RecursiveArray","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecursiveArray"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnkeyedEncodingContainer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnkeyedEncodingContainer","url":"\/documentation\/compute\/unkeyedencodingcontainer","title":"UnkeyedEncodingContainer","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnkeyedEncodingContainer"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"UnkeyedEncodingContainer","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that provides a view into an encoder’s storage and is used to hold"},{"text":" ","type":"text"},{"text":"the encoded properties of an encodable type sequentially, without keys.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BranchingArray":{"abstract":[],"navigatorTitle":[{"kind":"identifier","text":"BranchingArray"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BranchingArray"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BranchingArray","url":"\/documentation\/compute\/branchingarray","role":"symbol","title":"BranchingArray"},"doc://com.swallow.documentation.Compute/documentation/Compute/Surjective":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Surjective","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Surjective"}],"url":"\/documentation\/compute\/surjective","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Surjective","kind":"identifier"}],"abstract":[],"title":"Surjective","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveTreeProtocol":{"abstract":[{"type":"text","text":"A tree-like data structure."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"RecursiveTreeProtocol","kind":"identifier"}],"type":"topic","title":"RecursiveTreeProtocol","navigatorTitle":[{"text":"RecursiveTreeProtocol","kind":"identifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveTreeProtocol","url":"\/documentation\/compute\/recursivetreeprotocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/-=(_:_:)":{"type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"-=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"U","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"V"},{"text":">(","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"T","preciseIdentifier":"s:7Compute2seoiyyx_q_q0_tz_x_q_q0_ttSjRzSjR_SjR0_r1_lF1TL_xmfp"},{"text":", ","kind":"text"},{"text":"U","kind":"typeIdentifier","preciseIdentifier":"s:7Compute2seoiyyx_q_q0_tz_x_q_q0_ttSjRzSjR_SjR0_r1_lF1UL_q_mfp"},{"kind":"text","text":", "},{"text":"V","preciseIdentifier":"s:7Compute2seoiyyx_q_q0_tz_x_q_q0_ttSjRzSjR_SjR0_r1_lF1VL_q0_mfp","kind":"typeIdentifier"},{"text":"), (","kind":"text"},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:7Compute2seoiyyx_q_q0_tz_x_q_q0_ttSjRzSjR_SjR0_r1_lF1TL_xmfp"},{"kind":"text","text":", "},{"preciseIdentifier":"s:7Compute2seoiyyx_q_q0_tz_x_q_q0_ttSjRzSjR_SjR0_r1_lF1UL_q_mfp","text":"U","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"V","preciseIdentifier":"s:7Compute2seoiyyx_q_q0_tz_x_q_q0_ttSjRzSjR_SjR0_r1_lF1VL_q0_mfp","kind":"typeIdentifier"},{"text":"))","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/-=(_:_:)","abstract":[],"title":"-=(_:_:)","url":"\/documentation\/compute\/-=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64":{"url":"\/documentation\/compute\/int64","title":"Int64","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int64"}],"abstract":[{"type":"text","text":"A 64-bit signed integer value"},{"text":" ","type":"text"},{"text":"type.","type":"text"}],"navigatorTitle":[{"text":"Int64","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/TreeProtocol":{"abstract":[{"type":"text","text":"A tree-like data structure."}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"TreeProtocol","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeProtocol","url":"\/documentation\/compute\/treeprotocol","title":"TreeProtocol","kind":"symbol","navigatorTitle":[{"text":"TreeProtocol","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ReversedCollection":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ReversedCollection","kind":"identifier"}],"url":"\/documentation\/compute\/reversedcollection","kind":"symbol","abstract":[{"type":"text","text":"A collection that presents the elements of its base collection"},{"text":" ","type":"text"},{"text":"in reverse order.","type":"text"}],"title":"ReversedCollection","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReversedCollection","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ReversedCollection"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/LevelOrderIterator":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LevelOrderIterator","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"LevelOrderIterator"}],"type":"topic","role":"symbol","abstract":[],"title":"LevelOrderIterator","url":"\/documentation\/compute\/levelorderiterator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LevelOrderIterator","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Stack":{"abstract":[],"url":"\/documentation\/compute\/stack","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Stack","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Stack","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Stack"}],"title":"Stack"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyCompactMapTree":{"title":"LazyCompactMapTree","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LazyCompactMapTree"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyCompactMapTree","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazyCompactMapTree"}],"url":"\/documentation\/compute\/lazycompactmaptree","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/QueueProtocol":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/QueueProtocol","role":"symbol","navigatorTitle":[{"text":"QueueProtocol","kind":"identifier"}],"url":"\/documentation\/compute\/queueprotocol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"QueueProtocol"}],"abstract":[],"title":"QueueProtocol","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/==(_:_:)-1ud2a":{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the corresponding components of"},{"type":"text","text":" "},{"type":"text","text":"two tuples are equal."}],"url":"\/documentation\/compute\/==(_:_:)-1ud2a","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/==(_:_:)-1ud2a","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"==","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"<"},{"text":"A","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"B"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"D"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"E"},{"kind":"text","text":", "},{"text":"F","kind":"genericParameter"},{"kind":"text","text":">(("},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":", ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"F","kind":"typeIdentifier"},{"text":"), (","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"E"},{"text":", ","kind":"text"},{"text":"F","kind":"typeIdentifier"},{"text":")) -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"kind":"symbol","title":"==(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/KeyPath":{"type":"topic","role":"symbol","url":"\/documentation\/compute\/keypath","title":"KeyPath","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeyPath"}],"abstract":[{"type":"text","text":"A key path from a specific root type to a specific resulting value type."}],"navigatorTitle":[{"text":"KeyPath","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyPath"},"doc://com.swallow.documentation.Compute/documentation/Compute/CollectionOfOne":{"abstract":[{"text":"A collection containing a single element.","type":"text"}],"kind":"symbol","url":"\/documentation\/compute\/collectionofone","navigatorTitle":[{"kind":"identifier","text":"CollectionOfOne"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionOfOne","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CollectionOfOne"}],"title":"CollectionOfOne"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bag":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Bag"}],"title":"Bag","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Bag"}],"abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bag","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/bag"},"doc://com.swallow.documentation.Compute/documentation/Compute/MutableBidirectionalSlice":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableBidirectionalSlice","role":"symbol","navigatorTitle":[{"text":"MutableBidirectionalSlice","kind":"identifier"}],"url":"\/documentation\/compute\/mutablebidirectionalslice","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MutableBidirectionalSlice","kind":"identifier"}],"abstract":[],"deprecated":true,"title":"MutableBidirectionalSlice","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Float32":{"abstract":[{"type":"text","text":"A 32-bit floating point type."}],"url":"\/documentation\/compute\/float32","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float32","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Float32","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Float32"}],"title":"Float32"},"doc://com.swallow.documentation.Compute/documentation/Compute/CLongDouble":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CLongDouble","role":"symbol","navigatorTitle":[{"text":"CLongDouble","kind":"identifier"}],"url":"\/documentation\/compute\/clongdouble","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"CLongDouble","kind":"identifier"}],"abstract":[],"title":"CLongDouble","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ArrayTreeChildren","kind":"identifier"}],"title":"ArrayTreeChildren","navigatorTitle":[{"text":"ArrayTreeChildren","kind":"identifier"}],"type":"topic","abstract":[],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren","url":"\/documentation\/compute\/arraytreechildren","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/EnumeratedSequence":{"url":"\/documentation\/compute\/enumeratedsequence","navigatorTitle":[{"text":"EnumeratedSequence","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EnumeratedSequence"}],"abstract":[{"text":"An enumeration of the elements of a sequence or collection.","type":"text"}],"type":"topic","title":"EnumeratedSequence","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EnumeratedSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/PrefixSequence":{"url":"\/documentation\/compute\/prefixsequence","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PrefixSequence","role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrefixSequence","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"PrefixSequence"}],"title":"PrefixSequence","abstract":[{"type":"text","text":"A sequence that only consumes up to "},{"type":"codeVoice","code":"n"},{"type":"text","text":" elements from an underlying"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Base"},{"text":" iterator.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMDScalar":{"kind":"symbol","navigatorTitle":[{"text":"SIMDScalar","kind":"identifier"}],"type":"topic","title":"SIMDScalar","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDScalar","abstract":[{"type":"text","text":"A type that can be used as an element in a SIMD vector."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SIMDScalar","kind":"identifier"}],"url":"\/documentation\/compute\/simdscalar"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BinaryInteger"}],"navigatorTitle":[{"kind":"identifier","text":"BinaryInteger"}],"url":"\/documentation\/compute\/binaryinteger","type":"topic","abstract":[{"type":"text","text":"An integer type with a binary representation."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","title":"BinaryInteger","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/SingleValueEncodingContainer":{"type":"topic","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SingleValueEncodingContainer","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SingleValueEncodingContainer","url":"\/documentation\/compute\/singlevalueencodingcontainer","navigatorTitle":[{"kind":"identifier","text":"SingleValueEncodingContainer"}],"abstract":[{"text":"A container that can support the storage and direct encoding of a single","type":"text"},{"text":" ","type":"text"},{"text":"non-keyed value.","type":"text"}],"role":"symbol","title":"SingleValueEncodingContainer"},"doc://com.swallow.documentation.Compute/documentation/Compute/_(_:_:)-4ck5h":{"abstract":[{"text":"Returns a Boolean value indicating whether the first tuple is ordered","type":"text"},{"type":"text","text":" "},{"type":"text","text":"before the second in a lexicographical ordering."}],"url":"\/documentation\/compute\/_(_:_:)-4ck5h","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-4ck5h","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"<"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"text":"A","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"B"},{"text":">((","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"kind":"text","text":"), ("},{"text":"A","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"B","kind":"typeIdentifier"},{"text":")) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"kind":"symbol","title":"<(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD64":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SIMD64"}],"abstract":[{"type":"text","text":"A vector of 64 scalar values."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD64","navigatorTitle":[{"text":"SIMD64","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/simd64","title":"SIMD64"},"doc://com.swallow.documentation.Compute/documentation/Compute/MutableRowMajorRectangularCollection":{"title":"MutableRowMajorRectangularCollection","url":"\/documentation\/compute\/mutablerowmajorrectangularcollection","role":"symbol","abstract":[],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRowMajorRectangularCollection","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"MutableRowMajorRectangularCollection","kind":"identifier"}],"navigatorTitle":[{"text":"MutableRowMajorRectangularCollection","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Weighted":{"type":"topic","url":"\/documentation\/compute\/weighted","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Weighted"}],"navigatorTitle":[{"text":"Weighted","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A weighted type.","type":"text"}],"title":"Weighted","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Weighted"},"doc://com.swallow.documentation.Compute/documentation/Compute/FlattenBidirectionalCollection":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenBidirectionalCollection","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"FlattenBidirectionalCollection"}],"url":"\/documentation\/compute\/flattenbidirectionalcollection","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"FlattenBidirectionalCollection","kind":"identifier"}],"abstract":[],"deprecated":true,"title":"FlattenBidirectionalCollection","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/MutableRecursiveSequence":{"abstract":[],"kind":"symbol","title":"MutableRecursiveSequence","url":"\/documentation\/compute\/mutablerecursivesequence","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MutableRecursiveSequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRecursiveSequence","navigatorTitle":[{"kind":"identifier","text":"MutableRecursiveSequence"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyBidirectionalCollection":{"abstract":[{"text":"A type-erased wrapper over any collection with indices that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"support bidirectional traversal."}],"navigatorTitle":[{"text":"AnyBidirectionalCollection","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyBidirectionalCollection","title":"AnyBidirectionalCollection","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AnyBidirectionalCollection","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/anybidirectionalcollection"},"doc://com.swallow.documentation.Compute/documentation/Compute/CountableClosedRange":{"abstract":[],"url":"\/documentation\/compute\/countableclosedrange","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CountableClosedRange","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CountableClosedRange"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"CountableClosedRange"}],"title":"CountableClosedRange"},"doc://com.swallow.documentation.Compute/documentation/Compute/UTF8":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UTF8","role":"symbol","navigatorTitle":[{"text":"UTF8","kind":"identifier"}],"url":"\/documentation\/compute\/utf8","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"UTF8","kind":"identifier"}],"abstract":[],"title":"UTF8","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/GraphMatch":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/graphmatch","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/GraphMatch","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"GraphMatch"}],"navigatorTitle":[{"kind":"identifier","text":"GraphMatch"}],"abstract":[{"text":"Represents a matched subgraph in the DAG.","type":"text"}],"title":"GraphMatch"},"doc://com.swallow.documentation.Compute/documentation/Compute/Zip2Sequence":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Zip2Sequence","kind":"identifier"}],"url":"\/documentation\/compute\/zip2sequence","type":"topic","title":"Zip2Sequence","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"Zip2Sequence","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Zip2Sequence","abstract":[{"type":"text","text":"A sequence of pairs built out of two underlying sequences."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyIndex":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AnyIndex","kind":"identifier"}],"url":"\/documentation\/compute\/anyindex","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIndex","role":"symbol","abstract":[{"text":"A wrapper over an underlying index that hides the specific underlying type.","type":"text"}],"navigatorTitle":[{"text":"AnyIndex","kind":"identifier"}],"type":"topic","title":"AnyIndex"},"doc://com.swallow.documentation.Compute/documentation/Compute/DirectedGraph":{"kind":"symbol","abstract":[],"title":"DirectedGraph","url":"\/documentation\/compute\/directedgraph","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"DirectedGraph","kind":"identifier"}],"navigatorTitle":[{"text":"DirectedGraph","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DirectedGraph"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set":{"abstract":[{"type":"text","text":"An unordered collection of unique elements."}],"navigatorTitle":[{"text":"Set","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set","title":"Set","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Set"}],"type":"topic","url":"\/documentation\/compute\/set"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyDropWhileIndex":{"abstract":[],"url":"\/documentation\/compute\/lazydropwhileindex","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyDropWhileIndex","deprecated":true,"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyDropWhileIndex"}],"kind":"symbol","navigatorTitle":[{"text":"LazyDropWhileIndex","kind":"identifier"}],"title":"LazyDropWhileIndex"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyDropWhileSequence":{"abstract":[{"type":"text","text":"A sequence whose elements consist of the elements that follow the initial"},{"type":"text","text":" "},{"type":"text","text":"consecutive elements of some base sequence that satisfy a given predicate."}],"role":"symbol","navigatorTitle":[{"text":"LazyDropWhileSequence","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazyDropWhileSequence"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyDropWhileSequence","type":"topic","title":"LazyDropWhileSequence","url":"\/documentation\/compute\/lazydropwhilesequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequenceProtocol":{"type":"topic","url":"\/documentation\/compute\/lazysequenceprotocol","role":"symbol","title":"LazySequenceProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"LazySequenceProtocol","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol","navigatorTitle":[{"text":"LazySequenceProtocol","kind":"identifier"}],"abstract":[{"text":"A sequence on which normally-eager sequence operations are implemented","type":"text"},{"type":"text","text":" "},{"type":"text","text":"lazily."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ExtendedGraphemeClusterType":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExtendedGraphemeClusterType","role":"symbol","navigatorTitle":[{"text":"ExtendedGraphemeClusterType","kind":"identifier"}],"url":"\/documentation\/compute\/extendedgraphemeclustertype","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ExtendedGraphemeClusterType"}],"abstract":[{"text":"The default type for an otherwise-unconstrained Unicode extended","type":"text"},{"type":"text","text":" "},{"text":"grapheme cluster literal.","type":"text"}],"title":"ExtendedGraphemeClusterType","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree":{"url":"\/documentation\/compute\/arraytree","type":"topic","title":"ArrayTree","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ArrayTree","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree","kind":"symbol","abstract":[],"role":"symbol","navigatorTitle":[{"text":"ArrayTree","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/KeyedDecodingContainerProtocol":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"KeyedDecodingContainerProtocol","kind":"identifier"}],"kind":"symbol","title":"KeyedDecodingContainerProtocol","abstract":[{"type":"text","text":"A type that provides a view into a decoder’s storage and is used to hold"},{"type":"text","text":" "},{"type":"text","text":"the encoded properties of a decodable type in a keyed manner."}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"KeyedDecodingContainerProtocol","kind":"identifier"}],"url":"\/documentation\/compute\/keyeddecodingcontainerprotocol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyedDecodingContainerProtocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/MutableWeighted":{"title":"MutableWeighted","url":"\/documentation\/compute\/mutableweighted","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableWeighted","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MutableWeighted"}],"type":"topic","kind":"symbol","abstract":[{"text":"A weighted type whose weight can be changed.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MutableWeighted"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/numericCast(_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/numericCast(_:)","type":"topic","url":"\/documentation\/compute\/numericcast(_:)","abstract":[{"text":"Returns the given integer as the equivalent value in a different integer","type":"text"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"numericCast","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"U"},{"kind":"text","text":">("},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"U","kind":"typeIdentifier"}],"kind":"symbol","title":"numericCast(_:)","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/zip(_:_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/zip(_:_:)","type":"topic","url":"\/documentation\/compute\/zip(_:_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"zip","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Sequence1"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Sequence2"},{"text":">(","kind":"text"},{"text":"Sequence1","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Sequence2"},{"text":") -> ","kind":"text"},{"text":"Zip2Sequence","kind":"typeIdentifier","preciseIdentifier":"s:s12Zip2SequenceV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Sequence1"},{"text":", ","kind":"text"},{"text":"Sequence2","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"zip(_:_:)","role":"symbol","abstract":[{"type":"text","text":"Creates a sequence of pairs built out of two underlying sequences."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeReplaceableRandomAccessSlice":{"abstract":[],"url":"\/documentation\/compute\/rangereplaceablerandomaccessslice","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableRandomAccessSlice","deprecated":true,"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"RangeReplaceableRandomAccessSlice","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"RangeReplaceableRandomAccessSlice"}],"title":"RangeReplaceableRandomAccessSlice"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnfoldSequence":{"navigatorTitle":[{"text":"UnfoldSequence","kind":"identifier"}],"kind":"symbol","role":"symbol","title":"UnfoldSequence","type":"topic","url":"\/documentation\/compute\/unfoldsequence","abstract":[{"text":"A sequence whose elements are produced via repeated applications of a","type":"text"},{"type":"text","text":" "},{"text":"closure to some mutable state.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UnfoldSequence","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnfoldSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Unmanaged":{"type":"topic","title":"Unmanaged","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"Unmanaged","kind":"identifier"}],"url":"\/documentation\/compute\/unmanaged","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unmanaged","abstract":[{"text":"A type for propagating an unmanaged object reference.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Unmanaged","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeBufferPointer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer","abstract":[{"type":"text","text":"A nonowning collection interface to a buffer of"},{"type":"text","text":" "},{"text":"elements stored contiguously in memory.","type":"text"}],"role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeBufferPointer","kind":"identifier"}],"title":"UnsafeBufferPointer","navigatorTitle":[{"kind":"identifier","text":"UnsafeBufferPointer"}],"url":"\/documentation\/compute\/unsafebufferpointer"},"doc://com.swallow.documentation.Compute/documentation/Compute/_(_:_:)-23151":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-23151","role":"symbol","url":"\/documentation\/compute\/_(_:_:)-23151","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"<","kind":"identifier"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"text":"A","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":", "},{"text":"C","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":"), (","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":")) -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"abstract":[{"text":"Returns a Boolean value indicating whether the first tuple is ordered","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"before the second in a lexicographical ordering."}],"title":"<(_:_:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Hashable"}],"title":"Hashable","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that can be hashed into a "},{"type":"codeVoice","code":"Hasher"},{"type":"text","text":" to produce an integer hash value."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","url":"\/documentation\/compute\/hashable","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyMapRandomAccessCollection":{"abstract":[],"url":"\/documentation\/compute\/lazymaprandomaccesscollection","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapRandomAccessCollection","deprecated":true,"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazyMapRandomAccessCollection"}],"kind":"symbol","navigatorTitle":[{"text":"LazyMapRandomAccessCollection","kind":"identifier"}],"title":"LazyMapRandomAccessCollection"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring":{"navigatorTitle":[{"kind":"identifier","text":"Substring"}],"url":"\/documentation\/compute\/substring","title":"Substring","abstract":[{"text":"A slice of a string.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Substring","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/__(_:_:)-1fjjj":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/__(_:_:)-1fjjj","role":"symbol","url":"\/documentation\/compute\/__(_:_:)-1fjjj","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"??","kind":"identifier"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"consuming","kind":"keyword"},{"kind":"text","text":" "},{"text":"T","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"@autoclosure ","kind":"attribute"},{"kind":"text","text":"() "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?) ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"abstract":[{"text":"Performs a nil-coalescing operation, returning the wrapped value of an","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Optional"},{"type":"text","text":" instance or a default "},{"type":"codeVoice","code":"Optional"},{"type":"text","text":" value."}],"title":"??(_:_:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/DefaultBidirectionalIndices":{"abstract":[],"url":"\/documentation\/compute\/defaultbidirectionalindices","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultBidirectionalIndices","deprecated":true,"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DefaultBidirectionalIndices"}],"kind":"symbol","navigatorTitle":[{"text":"DefaultBidirectionalIndices","kind":"identifier"}],"title":"DefaultBidirectionalIndices"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD8":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD8","title":"SIMD8","abstract":[{"text":"A vector of eight scalar values.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"SIMD8","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/simd8","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SIMD8","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/_(_:_:)-3hhjy":{"role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"<","kind":"identifier"},{"kind":"text","text":" "},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"A"},{"kind":"text","text":", "},{"text":"B","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"C","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"D"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"E"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"A"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":"), ("},{"text":"A","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"B"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":", ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":")) -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"kind":"symbol","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the first tuple is ordered"},{"text":" ","type":"text"},{"text":"before the second in a lexicographical ordering.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-3hhjy","title":"<(_:_:)","url":"\/documentation\/compute\/_(_:_:)-3hhjy"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawBufferPointerIterator":{"url":"\/documentation\/compute\/unsafemutablerawbufferpointeriterator","role":"symbol","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeMutableRawBufferPointerIterator","kind":"identifier"}],"title":"UnsafeMutableRawBufferPointerIterator","deprecated":true,"abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawBufferPointerIterator","type":"topic","navigatorTitle":[{"kind":"identifier","text":"UnsafeMutableRawBufferPointerIterator"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CollectionDifference":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CollectionDifference","kind":"identifier"}],"url":"\/documentation\/compute\/collectiondifference","type":"topic","title":"CollectionDifference","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CollectionDifference"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionDifference","abstract":[{"type":"text","text":"A collection of insertions and removals that describe the difference"},{"text":" ","type":"text"},{"text":"between two ordered collection states.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Float":{"type":"topic","abstract":[{"text":"A single-precision, floating-point value type.","type":"text"}],"url":"\/documentation\/compute\/float","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Float"}],"navigatorTitle":[{"text":"Float","kind":"identifier"}],"title":"Float"},"doc://com.swallow.documentation.Compute/documentation/Compute/Error":{"url":"\/documentation\/compute\/error","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Error"}],"navigatorTitle":[{"text":"Error","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Error","type":"topic","role":"symbol","abstract":[{"type":"text","text":"A type representing an error value that can be thrown."}],"kind":"symbol","title":"Error"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeThrough":{"title":"PartialRangeThrough","type":"topic","abstract":[{"type":"text","text":"A partial interval up to, and including, an upper bound."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PartialRangeThrough"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PartialRangeThrough"}],"kind":"symbol","url":"\/documentation\/compute\/partialrangethrough"},"doc://com.swallow.documentation.Compute/documentation/Compute/Dictionary":{"role":"symbol","title":"Dictionary","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Dictionary"}],"type":"topic","kind":"symbol","abstract":[{"text":"A collection whose elements are key-value pairs.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary","navigatorTitle":[{"text":"Dictionary","kind":"identifier"}],"url":"\/documentation\/compute\/dictionary"},"doc://com.swallow.documentation.Compute/documentation/Compute/pointwiseMax(_:_:)-2k6er":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/pointwiseMax(_:_:)-2k6er","role":"symbol","url":"\/documentation\/compute\/pointwisemax(_:_:)-2k6er","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"pointwiseMax","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"abstract":[{"text":"The lanewise maximum of two vectors.","type":"text"}],"title":"pointwiseMax(_:_:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/withUnsafeTemporaryAllocation(byteCount:alignment:_:)":{"url":"\/documentation\/compute\/withunsafetemporaryallocation(bytecount:alignment:_:)","title":"withUnsafeTemporaryAllocation(byteCount:alignment:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withUnsafeTemporaryAllocation(byteCount:alignment:_:)","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Provides scoped access to a raw buffer pointer with the specified byte count"},{"text":" ","type":"text"},{"text":"and alignment.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withUnsafeTemporaryAllocation"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"byteCount"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"alignment"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":", (","kind":"text"},{"kind":"typeIdentifier","text":"UnsafeMutableRawBufferPointer","preciseIdentifier":"s:Sw"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"}],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/MutableRecursiveTree":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MutableRecursiveTree"}],"url":"\/documentation\/compute\/mutablerecursivetree","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"MutableRecursiveTree","kind":"identifier"}],"abstract":[{"type":"text","text":"A mutable tree."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRecursiveTree","title":"MutableRecursiveTree"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRangeIndex":{"abstract":[],"url":"\/documentation\/compute\/closedrangeindex","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRangeIndex","deprecated":true,"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ClosedRangeIndex","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"ClosedRangeIndex","kind":"identifier"}],"title":"ClosedRangeIndex"},"doc://com.swallow.documentation.Compute/documentation/Compute/==(_:_:)-2htbb":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"=="},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"text":"A","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">(("},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"B"},{"text":"), (","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"B","kind":"typeIdentifier"},{"kind":"text","text":")) -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"title":"==(_:_:)","url":"\/documentation\/compute\/==(_:_:)-2htbb","abstract":[{"text":"Returns a Boolean value indicating whether the corresponding components of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"two tuples are equal."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/==(_:_:)-2htbb"},"doc://com.swallow.documentation.Compute/documentation/Compute/dump(_:to:name:indent:maxDepth:maxItems:)":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/dump(_:to:name:indent:maxDepth:maxItems:)","role":"symbol","url":"\/documentation\/compute\/dump(_:to:name:indent:maxdepth:maxitems:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dump","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"TargetStream","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TargetStream","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"name","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":"?, ","kind":"text"},{"text":"indent","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"maxDepth"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxItems"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"text":"Dumps the given object’s contents using its mirror to the specified output","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"stream."}],"title":"dump(_:to:name:indent:maxDepth:maxItems:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/SequenceParser":{"title":"SequenceParser","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SequenceParser","kind":"symbol","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SequenceParser"}],"abstract":[],"url":"\/documentation\/compute\/sequenceparser","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SequenceParser"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/_=(_:_:)-3jpod":{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the first tuple is ordered"},{"text":" ","type":"text"},{"text":"before or the same as the second in a lexicographical ordering.","type":"text"}],"url":"\/documentation\/compute\/_=(_:_:)-3jpod","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-3jpod","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"<=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"A"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":">(("},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":"), (","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"B","kind":"typeIdentifier"},{"text":")) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"kind":"symbol","title":"<=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/precondition(_:_:file:line:)":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/precondition(_:_:file:line:)","role":"symbol","url":"\/documentation\/compute\/precondition(_:_:file:line:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"precondition"},{"text":"(","kind":"text"},{"text":"@autoclosure ","kind":"attribute"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"attribute","text":"@autoclosure "},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Checks a necessary condition for making forward progress."}],"title":"precondition(_:_:file:line:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/column()":{"abstract":[{"type":"text","text":"Produces the column number at which the macro is expanded."}],"url":"\/documentation\/compute\/column()","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/column()","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"column","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">() -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","title":"column()"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafeMutablePointer"}],"url":"\/documentation\/compute\/unsafemutablepointer","type":"topic","abstract":[{"type":"text","text":"A pointer for accessing and manipulating data of a"},{"text":" ","type":"text"},{"text":"specific type.","type":"text"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnsafeMutablePointer"}],"title":"UnsafeMutablePointer"},"doc://com.swallow.documentation.Compute/documentation/Compute/BidirectionalSlice":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalSlice","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"BidirectionalSlice"}],"url":"\/documentation\/compute\/bidirectionalslice","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BidirectionalSlice"}],"abstract":[],"deprecated":true,"title":"BidirectionalSlice","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/String":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"String"}],"title":"String","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"String","kind":"identifier"}],"abstract":[{"type":"text","text":"A Unicode string value that is a collection of characters."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/string"},"doc://com.swallow.documentation.Compute/documentation/Compute/CodingUserInfoKey":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CodingUserInfoKey","navigatorTitle":[{"kind":"identifier","text":"CodingUserInfoKey"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"CodingUserInfoKey","kind":"identifier"}],"role":"symbol","type":"topic","abstract":[{"type":"text","text":"A user-defined key for providing context during encoding and decoding."}],"title":"CodingUserInfoKey","url":"\/documentation\/compute\/codinguserinfokey"},"doc://com.swallow.documentation.Compute/documentation/Compute/_=(_:_:)-16p1e":{"role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the first tuple is ordered"},{"type":"text","text":" "},{"type":"text","text":"before or the same as the second in a lexicographical ordering."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-16p1e","title":"<=(_:_:)","url":"\/documentation\/compute\/_=(_:_:)-16p1e","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"<=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"((), ()) -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/exchange(_:with:)":{"type":"topic","abstract":[{"text":"Replaces the value of a mutable value with the supplied new value,","type":"text"},{"text":" ","type":"text"},{"text":"returning the original.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/exchange(_:with:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"exchange"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"with"},{"text":": ","kind":"text"},{"text":"consuming","kind":"keyword"},{"kind":"text","text":" "},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","url":"\/documentation\/compute\/exchange(_:with:)","role":"symbol","title":"exchange(_:with:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyTree":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LazyTree","kind":"identifier"}],"kind":"symbol","title":"LazyTree","abstract":[],"role":"symbol","type":"topic","navigatorTitle":[{"text":"LazyTree","kind":"identifier"}],"url":"\/documentation\/compute\/lazytree","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyTree"},"doc://com.swallow.documentation.Compute/documentation/Compute/FloatLiteralConvertible":{"abstract":[],"url":"\/documentation\/compute\/floatliteralconvertible","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatLiteralConvertible","deprecated":true,"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FloatLiteralConvertible"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"FloatLiteralConvertible"}],"title":"FloatLiteralConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/all(_:)":{"abstract":[{"type":"text","text":"True if every lane of mask is true."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/all(_:)","kind":"symbol","type":"topic","url":"\/documentation\/compute\/all(_:)","title":"all(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"all","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Storage","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s8SIMDMaskV","kind":"typeIdentifier","text":"SIMDMask"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Storage"},{"text":">) -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyIdentifiableTreeNode":{"abstract":[],"url":"\/documentation\/compute\/anyidentifiabletreenode","title":"AnyIdentifiableTreeNode","navigatorTitle":[{"text":"AnyIdentifiableTreeNode","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIdentifiableTreeNode","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyIdentifiableTreeNode"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/debugPrint(_:separator:terminator:)":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/debugPrint(_:separator:terminator:)","role":"symbol","url":"\/documentation\/compute\/debugprint(_:separator:terminator:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"debugPrint","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"keyword","text":"Any"},{"kind":"text","text":"..., "},{"kind":"externalParam","text":"separator"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":", "},{"text":"terminator","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Writes the textual representations of the given items most suitable for"},{"type":"text","text":" "},{"text":"debugging into the standard output.","type":"text"}],"title":"debugPrint(_:separator:terminator:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Sendable","kind":"identifier"}],"title":"Sendable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","abstract":[],"url":"\/documentation\/compute\/sendable","role":"symbol","navigatorTitle":[{"text":"Sendable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/StringProtocol":{"url":"\/documentation\/compute\/stringprotocol","role":"symbol","abstract":[{"type":"text","text":"A type that can represent a string as a collection of characters."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","title":"StringProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StringProtocol","kind":"identifier"}],"navigatorTitle":[{"text":"StringProtocol","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/RectangularCollection":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"RectangularCollection","kind":"identifier"}],"title":"RectangularCollection","url":"\/documentation\/compute\/rectangularcollection","abstract":[{"type":"text","text":"A sequence whose elements are laid out in a row & column layout."}],"type":"topic","navigatorTitle":[{"text":"RectangularCollection","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RectangularCollection"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByDictionaryLiteral":{"kind":"symbol","title":"ExpressibleByDictionaryLiteral","abstract":[{"type":"text","text":"A type that can be initialized using a dictionary literal."}],"url":"\/documentation\/compute\/expressiblebydictionaryliteral","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ExpressibleByDictionaryLiteral","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByDictionaryLiteral","navigatorTitle":[{"text":"ExpressibleByDictionaryLiteral","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/!=(_:_:)-8pggn":{"abstract":[{"text":"Returns a Boolean value indicating whether the two arguments are not equal.","type":"text"}],"url":"\/documentation\/compute\/!=(_:_:)-8pggn","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/!=(_:_:)-8pggn","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"!=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"kind":"symbol","title":"!=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/min(_:_:_:_:)":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/min(_:_:_:_:)","role":"symbol","url":"\/documentation\/compute\/min(_:_:_:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"min","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"...) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Returns the least argument passed."}],"title":"min(_:_:_:_:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/FloatingPointSign":{"url":"\/documentation\/compute\/floatingpointsign","title":"FloatingPointSign","abstract":[{"text":"The sign of a floating-point value.","type":"text"}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FloatingPointSign"}],"navigatorTitle":[{"kind":"identifier","text":"FloatingPointSign"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatingPointSign","type":"topic","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/!=(_:_:)-9wy5n":{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the two arguments are not equal."}],"url":"\/documentation\/compute\/!=(_:_:)-9wy5n","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/!=(_:_:)-9wy5n","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"!=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"kind":"symbol","title":"!=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/GraphPatternBuilder":{"navigatorTitle":[{"text":"GraphPatternBuilder","kind":"identifier"}],"title":"GraphPatternBuilder","type":"topic","url":"\/documentation\/compute\/graphpatternbuilder","kind":"symbol","role":"symbol","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/GraphPatternBuilder","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"GraphPatternBuilder"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileSequence":{"type":"topic","role":"symbol","url":"\/documentation\/compute\/lazyprefixwhilesequence","title":"LazyPrefixWhileSequence","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyPrefixWhileSequence"}],"abstract":[{"type":"text","text":"A sequence whose elements consist of the initial consecutive elements of"},{"text":" ","type":"text"},{"text":"some base sequence that satisfy a given predicate.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"LazyPrefixWhileSequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/BooleanLiteralType":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BooleanLiteralType","role":"symbol","navigatorTitle":[{"text":"BooleanLiteralType","kind":"identifier"}],"url":"\/documentation\/compute\/booleanliteraltype","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"BooleanLiteralType","kind":"identifier"}],"abstract":[{"text":"The default type for an otherwise-unconstrained Boolean literal.","type":"text"}],"title":"BooleanLiteralType","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible":{"url":"\/documentation\/compute\/customstringconvertible","navigatorTitle":[{"kind":"identifier","text":"CustomStringConvertible"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomStringConvertible","kind":"identifier"}],"abstract":[{"text":"A type with a customized textual representation.","type":"text"}],"type":"topic","title":"CustomStringConvertible","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/*=(_:_:)":{"abstract":[],"url":"\/documentation\/compute\/*=(_:_:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/*=(_:_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"*=","kind":"identifier"},{"kind":"text","text":" "},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"U"},{"text":", ","kind":"text"},{"text":"V","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" ("},{"preciseIdentifier":"s:7Compute2meoiyyx_q_q0_tz_x_q_q0_ttSjRzSjR_SjR0_r1_lF1TL_xmfp","text":"T","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Compute2meoiyyx_q_q0_tz_x_q_q0_ttSjRzSjR_SjR0_r1_lF1UL_q_mfp","text":"U"},{"kind":"text","text":", "},{"preciseIdentifier":"s:7Compute2meoiyyx_q_q0_tz_x_q_q0_ttSjRzSjR_SjR0_r1_lF1VL_q0_mfp","text":"V","kind":"typeIdentifier"},{"kind":"text","text":"), ("},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:7Compute2meoiyyx_q_q0_tz_x_q_q0_ttSjRzSjR_SjR0_r1_lF1TL_xmfp"},{"text":", ","kind":"text"},{"text":"U","preciseIdentifier":"s:7Compute2meoiyyx_q_q0_tz_x_q_q0_ttSjRzSjR_SjR0_r1_lF1UL_q_mfp","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"V","kind":"typeIdentifier","preciseIdentifier":"s:7Compute2meoiyyx_q_q0_tz_x_q_q0_ttSjRzSjR_SjR0_r1_lF1VL_q0_mfp"},{"kind":"text","text":"))"}],"kind":"symbol","title":"*=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/_(_:_:)-8mgtp":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-8mgtp","role":"symbol","url":"\/documentation\/compute\/_(_:_:)-8mgtp","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"<","kind":"identifier"},{"kind":"text","text":" "},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"A"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"B"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"C"},{"text":", ","kind":"text"},{"text":"D","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"E","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"F"},{"text":">((","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":", "},{"text":"D","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"E"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"F"},{"text":"), (","kind":"text"},{"kind":"typeIdentifier","text":"A"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"D","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"F"},{"text":")) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"text":"Returns a Boolean value indicating whether the first tuple is ordered","type":"text"},{"type":"text","text":" "},{"type":"text","text":"before the second in a lexicographical ordering."}],"title":"<(_:_:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/WritableKeyPath":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/WritableKeyPath","title":"WritableKeyPath","role":"symbol","abstract":[{"text":"A key path that supports reading from and writing to the resulting value.","type":"text"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"WritableKeyPath","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"WritableKeyPath","kind":"identifier"}],"url":"\/documentation\/compute\/writablekeypath"},"doc://com.swallow.documentation.Compute/documentation/Compute/CodingKeyRepresentable":{"type":"topic","title":"CodingKeyRepresentable","abstract":[{"type":"text","text":"A type that can be converted to and from a coding key."}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"CodingKeyRepresentable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CodingKeyRepresentable","url":"\/documentation\/compute\/codingkeyrepresentable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CodingKeyRepresentable"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/SingleValueDecodingContainer":{"title":"SingleValueDecodingContainer","role":"symbol","navigatorTitle":[{"text":"SingleValueDecodingContainer","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SingleValueDecodingContainer","abstract":[{"type":"text","text":"A container that can support the storage and direct decoding of a single"},{"type":"text","text":" "},{"text":"nonkeyed value.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/singlevaluedecodingcontainer","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SingleValueDecodingContainer"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/IteratorOverOne":{"abstract":[],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"IteratorOverOne","kind":"identifier"}],"url":"\/documentation\/compute\/iteratoroverone","title":"IteratorOverOne","role":"symbol","deprecated":true,"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorOverOne","type":"topic","navigatorTitle":[{"kind":"identifier","text":"IteratorOverOne"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnicodeScalar":{"abstract":[],"url":"\/documentation\/compute\/unicodescalar","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnicodeScalar","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnicodeScalar"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnicodeScalar"}],"title":"UnicodeScalar"},"doc://com.swallow.documentation.Compute/documentation/Compute/CChar32":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CChar32","role":"symbol","navigatorTitle":[{"text":"CChar32","kind":"identifier"}],"url":"\/documentation\/compute\/cchar32","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"CChar32","kind":"identifier"}],"abstract":[{"type":"text","text":"The C++11 ‘char32_t’ type, which has UTF-32 encoding."}],"title":"CChar32","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/JoinedIterator":{"abstract":[],"url":"\/documentation\/compute\/joinediterator","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/JoinedIterator","deprecated":true,"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"JoinedIterator","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"JoinedIterator"}],"title":"JoinedIterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByUnicodeScalarLiteral":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressibleByUnicodeScalarLiteral"}],"kind":"symbol","title":"ExpressibleByUnicodeScalarLiteral","abstract":[{"text":"A type that can be initialized with a string literal containing a single","type":"text"},{"type":"text","text":" "},{"text":"Unicode scalar value.","type":"text"}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExpressibleByUnicodeScalarLiteral"}],"url":"\/documentation\/compute\/expressiblebyunicodescalarliteral","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByUnicodeScalarLiteral"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UInt8","kind":"identifier"}],"navigatorTitle":[{"text":"UInt8","kind":"identifier"}],"title":"UInt8","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8","url":"\/documentation\/compute\/uint8","kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"An 8-bit unsigned integer value"},{"text":" ","type":"text"},{"text":"type.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/RandomNumberGenerator":{"abstract":[{"text":"A type that provides uniformly distributed random data.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RandomNumberGenerator"}],"url":"\/documentation\/compute\/randomnumbergenerator","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomNumberGenerator","title":"RandomNumberGenerator","role":"symbol","type":"topic","navigatorTitle":[{"text":"RandomNumberGenerator","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CLong":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CLong","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CLong"}],"url":"\/documentation\/compute\/clong","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"CLong","kind":"identifier"}],"abstract":[],"title":"CLong","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/_(_:_:)-kqsy":{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the first tuple is ordered"},{"type":"text","text":" "},{"text":"after the second in a lexicographical ordering.","type":"text"}],"url":"\/documentation\/compute\/_(_:_:)-kqsy","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-kqsy","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":">"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"text":"A","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"B"},{"text":", ","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"D","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"E","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"F","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"A"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"D"},{"text":", ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"F"},{"text":"), (","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":", "},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"F","kind":"typeIdentifier"},{"text":")) -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"kind":"symbol","title":">(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/withoutActuallyEscaping(_:do:)":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withoutActuallyEscaping(_:do:)","role":"symbol","url":"\/documentation\/compute\/withoutactuallyescaping(_:do:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withoutActuallyEscaping"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ClosureType"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ResultType"},{"text":", ","kind":"text"},{"text":"Failure","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"ClosureType","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"do"},{"text":": (","kind":"text"},{"text":"ClosureType","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Failure"},{"kind":"text","text":") -> "},{"text":"ResultType","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Failure"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"ResultType"}],"abstract":[{"text":"Allows a nonescaping closure to temporarily be used as if it were allowed","type":"text"},{"type":"text","text":" "},{"text":"to escape.","type":"text"}],"title":"withoutActuallyEscaping(_:do:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExtendedGraphemeClusterLiteralConvertible":{"abstract":[],"url":"\/documentation\/compute\/extendedgraphemeclusterliteralconvertible","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExtendedGraphemeClusterLiteralConvertible","deprecated":true,"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExtendedGraphemeClusterLiteralConvertible","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ExtendedGraphemeClusterLiteralConvertible"}],"title":"ExtendedGraphemeClusterLiteralConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileBidirectionalCollection":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileBidirectionalCollection","role":"symbol","navigatorTitle":[{"text":"LazyPrefixWhileBidirectionalCollection","kind":"identifier"}],"url":"\/documentation\/compute\/lazyprefixwhilebidirectionalcollection","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"LazyPrefixWhileBidirectionalCollection","kind":"identifier"}],"abstract":[],"deprecated":true,"title":"LazyPrefixWhileBidirectionalCollection","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/IndexableBase":{"navigatorTitle":[{"text":"IndexableBase","kind":"identifier"}],"title":"IndexableBase","url":"\/documentation\/compute\/indexablebase","kind":"symbol","role":"symbol","deprecated":true,"type":"topic","abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IndexableBase","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IndexableBase"},"doc://com.swallow.documentation.Compute/documentation/Compute/DestructivelyMutableDirectedGraph":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DestructivelyMutableDirectedGraph","url":"\/documentation\/compute\/destructivelymutabledirectedgraph","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DestructivelyMutableDirectedGraph","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"DestructivelyMutableDirectedGraph"}],"title":"DestructivelyMutableDirectedGraph","role":"symbol","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD-swift.protocol":{"role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SIMD"}],"navigatorTitle":[{"kind":"identifier","text":"SIMD"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD-swift.protocol","abstract":[{"text":"A SIMD vector of a fixed number of elements.","type":"text"}],"title":"SIMD","url":"\/documentation\/compute\/simd-swift.protocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/DropWhileSequence":{"abstract":[{"type":"text","text":"A sequence that lazily consumes and drops "},{"type":"codeVoice","code":"n"},{"type":"text","text":" elements from an underlying"},{"type":"text","text":" "},{"type":"codeVoice","code":"Base"},{"text":" iterator before possibly returning the first available element.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"DropWhileSequence","kind":"identifier"}],"url":"\/documentation\/compute\/dropwhilesequence","title":"DropWhileSequence","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DropWhileSequence","type":"topic","navigatorTitle":[{"text":"DropWhileSequence","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyIterator":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIterator","title":"AnyIterator","url":"\/documentation\/compute\/anyiterator","navigatorTitle":[{"text":"AnyIterator","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[{"text":"A type-erased iterator of ","type":"text"},{"type":"codeVoice","code":"Element"},{"text":".","type":"text"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AnyIterator","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/SignedInteger":{"abstract":[{"type":"text","text":"An integer type that can represent both positive and negative values."}],"kind":"symbol","url":"\/documentation\/compute\/signedinteger","navigatorTitle":[{"kind":"identifier","text":"SignedInteger"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedInteger","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SignedInteger","kind":"identifier"}],"title":"SignedInteger"},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Collection"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","url":"\/documentation\/compute\/collection","abstract":[{"type":"text","text":"A sequence whose elements can be traversed multiple times,"},{"text":" ","type":"text"},{"text":"nondestructively, and accessed by an indexed subscript.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Collection"}],"title":"Collection"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyMapIterator":{"abstract":[],"url":"\/documentation\/compute\/lazymapiterator","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapIterator","deprecated":true,"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazyMapIterator"}],"kind":"symbol","navigatorTitle":[{"text":"LazyMapIterator","kind":"identifier"}],"title":"LazyMapIterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int32","kind":"identifier"}],"abstract":[{"text":"A 32-bit signed integer value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type."}],"kind":"symbol","navigatorTitle":[{"text":"Int32","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/int32","title":"Int32","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32"},"doc://com.swallow.documentation.Compute/documentation/Compute/TreeChains":{"url":"\/documentation\/compute\/treechains","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeChains","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"TreeChains","kind":"identifier"}],"title":"TreeChains","navigatorTitle":[{"kind":"identifier","text":"TreeChains"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnicodeCodec":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"UnicodeCodec","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnicodeCodec","type":"topic","url":"\/documentation\/compute\/unicodecodec","abstract":[{"text":"A Unicode encoding form that translates between Unicode scalar values and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"form-specific code units."}],"title":"UnicodeCodec","navigatorTitle":[{"kind":"identifier","text":"UnicodeCodec"}],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/unsafeDowncast(_:to:)":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/unsafeDowncast(_:to:)","role":"symbol","url":"\/documentation\/compute\/unsafedowncast(_:to:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"unsafeDowncast","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s9AnyObjecta","kind":"typeIdentifier","text":"AnyObject"},{"kind":"text","text":", "},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"text":".Type) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"abstract":[{"text":"Returns the given instance cast unconditionally to the specified type.","type":"text"}],"title":"unsafeDowncast(_:to:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByFloatLiteral":{"url":"\/documentation\/compute\/expressiblebyfloatliteral","title":"ExpressibleByFloatLiteral","navigatorTitle":[{"kind":"identifier","text":"ExpressibleByFloatLiteral"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByFloatLiteral","kind":"symbol","type":"topic","abstract":[{"text":"A type that can be initialized with a floating-point literal.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ExpressibleByFloatLiteral"}],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceTree":{"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"ReferenceTree","kind":"identifier"}],"type":"topic","title":"ReferenceTree","url":"\/documentation\/compute\/referencetree","navigatorTitle":[{"text":"ReferenceTree","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A simple reference-based tree data structure for Swift."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/sequence(state:next:)":{"abstract":[{"text":"Returns a sequence formed from repeated lazy applications of ","type":"text"},{"type":"codeVoice","code":"next"},{"type":"text","text":" to a"},{"text":" ","type":"text"},{"type":"text","text":"mutable "},{"code":"state","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/compute\/sequence(state:next:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/sequence(state:next:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"sequence"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":">("},{"text":"state","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"text":"next","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"UnfoldSequence","preciseIdentifier":"s:s14UnfoldSequenceV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","title":"sequence(state:next:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/debugPrint(_:separator:terminator:to:)":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/debugPrint(_:separator:terminator:to:)","role":"symbol","url":"\/documentation\/compute\/debugprint(_:separator:terminator:to:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"debugPrint"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Target"},{"text":">(","kind":"text"},{"kind":"keyword","text":"Any"},{"text":"..., ","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"terminator"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Target"},{"text":")","kind":"text"}],"abstract":[{"text":"Writes the textual representations of the given items most suitable for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"debugging into the given output stream."}],"title":"debugPrint(_:separator:terminator:to:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Decoder":{"title":"Decoder","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Decoder"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decoder","url":"\/documentation\/compute\/decoder","abstract":[{"type":"text","text":"A type that can decode values from a native format into in-memory"},{"type":"text","text":" "},{"type":"text","text":"representations."}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Decoder"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Encodable":{"url":"\/documentation\/compute\/encodable","navigatorTitle":[{"text":"Encodable","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Encodable","kind":"identifier"}],"abstract":[{"text":"A type that can encode itself to an external representation.","type":"text"}],"type":"topic","title":"Encodable","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable"},"doc://com.swallow.documentation.Compute/documentation/Compute/EvictingQueue":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EvictingQueue"}],"abstract":[{"text":"A prioritiy queue that evicts elements after a certain count.","type":"text"}],"url":"\/documentation\/compute\/evictingqueue","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EvictingQueue","title":"EvictingQueue","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"EvictingQueue","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/OptionSet":{"role":"symbol","url":"\/documentation\/compute\/optionset","type":"topic","abstract":[{"type":"text","text":"A type that presents a mathematical set interface to a bit set."}],"kind":"symbol","title":"OptionSet","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"OptionSet","kind":"identifier"}],"navigatorTitle":[{"text":"OptionSet","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/OptionSet"},"doc://com.swallow.documentation.Compute/documentation/Compute/Partializable":{"kind":"symbol","abstract":[{"text":"A type that can be formed by coalescing its partials.","type":"text"}],"url":"\/documentation\/compute\/partializable","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Partializable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Partializable"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Partializable"}],"title":"Partializable"},"doc://com.swallow.documentation.Compute/documentation/Compute/sequence(first:next:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/sequence(first:next:)","title":"sequence(first:next:)","role":"symbol","abstract":[{"text":"Returns a sequence formed from ","type":"text"},{"code":"first","type":"codeVoice"},{"text":" and repeated lazy applications of","type":"text"},{"text":" ","type":"text"},{"code":"next","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"sequence","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"first","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"next","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s19UnfoldFirstSequencea","text":"UnfoldFirstSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"text":">","kind":"text"}],"url":"\/documentation\/compute\/sequence(first:next:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/unsafeBitCast(_:to:)":{"abstract":[{"type":"text","text":"Returns the bits of the given instance, interpreted as having the specified"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"url":"\/documentation\/compute\/unsafebitcast(_:to:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/unsafeBitCast(_:to:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"unsafeBitCast","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"U"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"text":"U","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"U","kind":"typeIdentifier"}],"kind":"symbol","title":"unsafeBitCast(_:to:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/SetIterator":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SetIterator","role":"symbol","navigatorTitle":[{"text":"SetIterator","kind":"identifier"}],"url":"\/documentation\/compute\/setiterator","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SetIterator","kind":"identifier"}],"abstract":[],"title":"SetIterator","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/SetIndex":{"abstract":[],"url":"\/documentation\/compute\/setindex","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SetIndex","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SetIndex","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"SetIndex","kind":"identifier"}],"title":"SetIndex"},"doc://com.swallow.documentation.Compute/documentation/Compute/ResizableRecursiveSequence":{"url":"\/documentation\/compute\/resizablerecursivesequence","navigatorTitle":[{"text":"ResizableRecursiveSequence","kind":"identifier"}],"title":"ResizableRecursiveSequence","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResizableRecursiveSequence"}],"abstract":[],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ResizableRecursiveSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/assert(_:_:file:line:)":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/assert(_:_:file:line:)","role":"symbol","url":"\/documentation\/compute\/assert(_:_:file:line:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"assert","kind":"identifier"},{"kind":"text","text":"("},{"kind":"attribute","text":"@autoclosure "},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"attribute","text":"@autoclosure "},{"text":"() -> ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":")"}],"abstract":[{"text":"Performs a traditional C-style assert with an optional message.","type":"text"}],"title":"assert(_:_:file:line:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/FlattenBidirectionalCollectionIndex":{"abstract":[],"url":"\/documentation\/compute\/flattenbidirectionalcollectionindex","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenBidirectionalCollectionIndex","deprecated":true,"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"FlattenBidirectionalCollectionIndex","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"FlattenBidirectionalCollectionIndex"}],"title":"FlattenBidirectionalCollectionIndex"},"doc://com.swallow.documentation.Compute/documentation/Compute/CShort":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CShort","role":"symbol","navigatorTitle":[{"text":"CShort","kind":"identifier"}],"url":"\/documentation\/compute\/cshort","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"CShort","kind":"identifier"}],"abstract":[{"type":"text","text":"The C ‘short’ type."}],"title":"CShort","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Zip2Iterator":{"url":"\/documentation\/compute\/zip2iterator","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"Zip2Iterator","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Zip2Iterator","title":"Zip2Iterator","role":"symbol","deprecated":true,"abstract":[],"navigatorTitle":[{"text":"Zip2Iterator","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/_(_:_:)-4xg09":{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the first tuple is ordered"},{"text":" ","type":"text"},{"type":"text","text":"after the second in a lexicographical ordering."}],"url":"\/documentation\/compute\/_(_:_:)-4xg09","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-4xg09","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":">","kind":"identifier"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"A"},{"text":", ","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"text":"B","kind":"typeIdentifier"},{"text":"), (","kind":"text"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"text":"B","kind":"typeIdentifier"},{"text":")) -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"kind":"symbol","title":">(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/!=(_:_:)-4fzl6":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/!=(_:_:)-4fzl6","role":"symbol","url":"\/documentation\/compute\/!=(_:_:)-4fzl6","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"!=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"A"},{"text":", ","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"C"},{"text":", ","kind":"text"},{"text":"D","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"E","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"A"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"C"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"E"},{"text":"), (","kind":"text"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"D"},{"text":", ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":")) -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"abstract":[{"text":"Returns a Boolean value indicating whether any corresponding components of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the two tuples are not equal."}],"title":"!=(_:_:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ManagedBuffer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ManagedBuffer","url":"\/documentation\/compute\/managedbuffer","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ManagedBuffer","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ManagedBuffer"}],"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A class whose instances contain a property of type "},{"code":"Header","type":"codeVoice"},{"type":"text","text":" and raw"},{"type":"text","text":" "},{"type":"text","text":"storage for an array of "},{"type":"codeVoice","code":"Element"},{"text":", whose size is determined at","type":"text"},{"type":"text","text":" "},{"text":"instance creation.","type":"text"}],"type":"topic","title":"ManagedBuffer"},"doc://com.swallow.documentation.Compute/documentation/Compute/getVaList(_:)":{"abstract":[{"type":"text","text":"Returns a "},{"type":"codeVoice","code":"CVaListPointer"},{"type":"text","text":" that is backed by autoreleased storage, built"},{"type":"text","text":" "},{"type":"text","text":"from the given array of arguments."}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"getVaList","kind":"identifier"},{"text":"([any ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s7CVarArgP","text":"CVarArg"},{"text":"]) -> ","kind":"text"},{"kind":"typeIdentifier","text":"CVaListPointer","preciseIdentifier":"s:s14CVaListPointerV"}],"url":"\/documentation\/compute\/getvalist(_:)","type":"topic","role":"symbol","title":"getVaList(_:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/getVaList(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/_=(_:_:)-6i1ov":{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the first tuple is ordered"},{"text":" ","type":"text"},{"text":"after or the same as the second in a lexicographical ordering.","type":"text"}],"url":"\/documentation\/compute\/_=(_:_:)-6i1ov","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-6i1ov","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":">="},{"text":" ","kind":"text"},{"kind":"text","text":"<"},{"text":"A","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"B","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"D"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"E"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"C"},{"text":", ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"text":"), (","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":", "},{"text":"D","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":")) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"kind":"symbol","title":">=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnicodeScalarType":{"type":"topic","url":"\/documentation\/compute\/unicodescalartype","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnicodeScalarType"}],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"UnicodeScalarType","kind":"identifier"}],"title":"UnicodeScalarType","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnicodeScalarType","role":"symbol","abstract":[{"text":"The default type for an otherwise-unconstrained unicode scalar literal.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomPlaygroundQuickLookable":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"CustomPlaygroundQuickLookable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomPlaygroundQuickLookable","abstract":[{"text":"A type that explicitly supplies its own playground Quick Look.","type":"text"}],"deprecated":true,"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"CustomPlaygroundQuickLookable","kind":"identifier"}],"title":"CustomPlaygroundQuickLookable","url":"\/documentation\/compute\/customplaygroundquicklookable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnboundedRange_":{"type":"topic","url":"\/documentation\/compute\/unboundedrange_","role":"symbol","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnboundedRange_"}],"abstract":[{"type":"text","text":"A range expression that represents the entire range of a collection."}],"navigatorTitle":[{"kind":"identifier","text":"UnboundedRange_"}],"title":"UnboundedRange_","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnboundedRange_"},"doc://com.swallow.documentation.Compute/documentation/Compute/Result":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Result","kind":"symbol","abstract":[{"type":"text","text":"A value that represents either a success or a failure, including an"},{"type":"text","text":" "},{"type":"text","text":"associated value in each case."}],"role":"symbol","title":"Result","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"Result","kind":"identifier"}],"navigatorTitle":[{"text":"Result","kind":"identifier"}],"url":"\/documentation\/compute\/result","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/CInt":{"type":"topic","url":"\/documentation\/compute\/cint","kind":"symbol","navigatorTitle":[{"text":"CInt","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CInt"}],"title":"CInt","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CInt","role":"symbol","abstract":[{"text":"The C ‘int’ type.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyMapTree":{"navigatorTitle":[{"text":"LazyMapTree","kind":"identifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapTree","title":"LazyMapTree","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazyMapTree"}],"url":"\/documentation\/compute\/lazymaptree","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Slice":{"kind":"symbol","title":"Slice","abstract":[{"type":"text","text":"A view into a subsequence of elements of another collection."}],"url":"\/documentation\/compute\/slice","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Slice","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Slice","navigatorTitle":[{"text":"Slice","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/InstantProtocol":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/InstantProtocol","abstract":[],"url":"\/documentation\/compute\/instantprotocol","kind":"symbol","title":"InstantProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"InstantProtocol","kind":"identifier"}],"type":"topic","role":"symbol","navigatorTitle":[{"text":"InstantProtocol","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/!=(_:_:)-18co7":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/!=(_:_:)-18co7","abstract":[{"text":"Returns a Boolean value indicating whether any corresponding components of","type":"text"},{"type":"text","text":" "},{"text":"the two tuples are not equal.","type":"text"}],"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"!="},{"kind":"text","text":" "},{"kind":"text","text":"((), ()) -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"title":"!=(_:_:)","url":"\/documentation\/compute\/!=(_:_:)-18co7"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt64":{"navigatorTitle":[{"text":"UInt64","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","title":"UInt64","abstract":[{"text":"A 64-bit unsigned integer value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type."}],"url":"\/documentation\/compute\/uint64","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt64","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64"},"doc://com.swallow.documentation.Compute/documentation/Compute/ConcurrentValue":{"type":"topic","url":"\/documentation\/compute\/concurrentvalue","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ConcurrentValue"}],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ConcurrentValue"}],"deprecated":true,"title":"ConcurrentValue","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ConcurrentValue","role":"symbol","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/==(_:_:)-1hbor":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"==","kind":"identifier"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"text":"A","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"B","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"C","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"D","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"E"},{"text":">((","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"B"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":", ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":"), ("},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":", "},{"text":"D","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":")) -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the corresponding components of"},{"type":"text","text":" "},{"type":"text","text":"two tuples are equal."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/==(_:_:)-1hbor","title":"==(_:_:)","role":"symbol","url":"\/documentation\/compute\/==(_:_:)-1hbor","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer":{"kind":"symbol","type":"topic","abstract":[{"text":"A raw pointer for accessing and manipulating untyped data.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer","url":"\/documentation\/compute\/unsafemutablerawpointer","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnsafeMutableRawPointer"}],"title":"UnsafeMutableRawPointer","navigatorTitle":[{"kind":"identifier","text":"UnsafeMutableRawPointer"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD32":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SIMD32","kind":"identifier"}],"title":"SIMD32","navigatorTitle":[{"kind":"identifier","text":"SIMD32"}],"type":"topic","abstract":[{"type":"text","text":"A vector of 32 scalar values."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD32","url":"\/documentation\/compute\/simd32","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt128":{"url":"\/documentation\/compute\/uint128","type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt128","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UInt128"}],"title":"UInt128","abstract":[{"text":"A 128-bit unsigned integer type.","type":"text"}],"navigatorTitle":[{"text":"UInt128","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomPlaygroundDisplayConvertible":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"CustomPlaygroundDisplayConvertible","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomPlaygroundDisplayConvertible","abstract":[{"type":"text","text":"A type that supplies a custom description for playground logging."}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomPlaygroundDisplayConvertible"}],"title":"CustomPlaygroundDisplayConvertible","url":"\/documentation\/compute\/customplaygrounddisplayconvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/Void":{"abstract":[{"text":"The return type of functions that don’t explicitly specify a return type,","type":"text"},{"text":" ","type":"text"},{"text":"that is, an empty tuple ","type":"text"},{"type":"codeVoice","code":"()"},{"type":"text","text":"."}],"type":"topic","title":"Void","url":"\/documentation\/compute\/void","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Void"}],"navigatorTitle":[{"text":"Void","kind":"identifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Void"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterCollection":{"type":"topic","url":"\/documentation\/compute\/lazyfiltercollection","kind":"symbol","navigatorTitle":[{"text":"LazyFilterCollection","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazyFilterCollection"}],"title":"LazyFilterCollection","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterCollection","role":"symbol","abstract":[{"type":"text","text":"A lazy "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" wrapper that includes the elements of an"},{"type":"text","text":" "},{"text":"underlying collection that satisfy a predicate.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/StaticString":{"url":"\/documentation\/compute\/staticstring","navigatorTitle":[{"kind":"identifier","text":"StaticString"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StaticString"}],"abstract":[{"type":"text","text":"A string type designed to represent text that is known at compile time."}],"type":"topic","title":"StaticString","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StaticString"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMDStorage":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDStorage","kind":"symbol","abstract":[{"text":"A type that can function as storage for a SIMD vector type.","type":"text"}],"role":"symbol","title":"SIMDStorage","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"SIMDStorage","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SIMDStorage"}],"url":"\/documentation\/compute\/simdstorage","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/PriorityQueue":{"url":"\/documentation\/compute\/priorityqueue","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"A priority queue.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"PriorityQueue"}],"title":"PriorityQueue","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PriorityQueue","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"PriorityQueue","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/SystemRandomNumberGenerator":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SystemRandomNumberGenerator","title":"SystemRandomNumberGenerator","abstract":[{"type":"text","text":"The system’s default source of random data."}],"url":"\/documentation\/compute\/systemrandomnumbergenerator","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SystemRandomNumberGenerator"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SystemRandomNumberGenerator"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer":{"role":"symbol","abstract":[{"text":"A raw pointer for accessing untyped data.","type":"text"}],"title":"UnsafeRawPointer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafeRawPointer"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer","kind":"symbol","navigatorTitle":[{"text":"UnsafeRawPointer","kind":"identifier"}],"url":"\/documentation\/compute\/unsaferawpointer","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceArrayTree":{"abstract":[],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReferenceArrayTree"}],"title":"ReferenceArrayTree","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceArrayTree","navigatorTitle":[{"kind":"identifier","text":"ReferenceArrayTree"}],"role":"symbol","type":"topic","url":"\/documentation\/compute\/referencearraytree"},"doc://com.swallow.documentation.Compute/documentation/Compute/RandomAccessIndexable":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"RandomAccessIndexable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomAccessIndexable","abstract":[],"deprecated":true,"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RandomAccessIndexable"}],"title":"RandomAccessIndexable","url":"\/documentation\/compute\/randomaccessindexable"},"doc://com.swallow.documentation.Compute/documentation/Compute/_=(_:_:)-43xgn":{"role":"symbol","url":"\/documentation\/compute\/_=(_:_:)-43xgn","type":"topic","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the first tuple is ordered"},{"text":" ","type":"text"},{"type":"text","text":"after or the same as the second in a lexicographical ordering."}],"title":">=(_:_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":">="},{"kind":"text","text":" "},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"A"},{"kind":"text","text":", "},{"text":"B","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"D"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"A"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"B"},{"text":", ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":"), ("},{"text":"A","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"C"},{"text":", ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"text":")) -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-43xgn"},"doc://com.swallow.documentation.Compute/documentation/Compute/ConstructibleTree":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ConstructibleTree"}],"role":"symbol","abstract":[{"type":"text","text":"A tree that can be constructed from a value and a list of children."}],"navigatorTitle":[{"kind":"identifier","text":"ConstructibleTree"}],"title":"ConstructibleTree","type":"topic","url":"\/documentation\/compute\/constructibletree","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ConstructibleTree"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyCollection":{"title":"LazyCollection","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyCollection","abstract":[{"text":"A collection containing the same elements as a ","type":"text"},{"type":"codeVoice","code":"Base"},{"type":"text","text":" collection,"},{"text":" ","type":"text"},{"type":"text","text":"but on which some operations such as "},{"code":"map","type":"codeVoice"},{"type":"text","text":" and "},{"code":"filter","type":"codeVoice"},{"text":" are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"implemented lazily."}],"type":"topic","role":"symbol","navigatorTitle":[{"text":"LazyCollection","kind":"identifier"}],"url":"\/documentation\/compute\/lazycollection","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazyCollection"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/MutableSlice":{"type":"topic","url":"\/documentation\/compute\/mutableslice","kind":"symbol","navigatorTitle":[{"text":"MutableSlice","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"MutableSlice","kind":"identifier"}],"deprecated":true,"title":"MutableSlice","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableSlice","role":"symbol","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/TreeRepresentable":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeRepresentable","abstract":[{"type":"text","text":"A type that can be represented as a tree."}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"TreeRepresentable","kind":"identifier"}],"navigatorTitle":[{"text":"TreeRepresentable","kind":"identifier"}],"title":"TreeRepresentable","kind":"symbol","url":"\/documentation\/compute\/treerepresentable"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByIntegerLiteral":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","url":"\/documentation\/compute\/expressiblebyintegerliteral","title":"ExpressibleByIntegerLiteral","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"navigatorTitle":[{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"abstract":[{"text":"A type that can be initialized with an integer literal.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Injective":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"Injective","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Injective","abstract":[],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Injective"}],"title":"Injective","url":"\/documentation\/compute\/injective"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ClosedRange","kind":"identifier"}],"role":"symbol","title":"ClosedRange","url":"\/documentation\/compute\/closedrange","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange","abstract":[{"text":"An interval from a lower bound up to, and including, an upper bound.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"ClosedRange","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/DefaultRecursiveIndices":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultRecursiveIndices","type":"topic","url":"\/documentation\/compute\/defaultrecursiveindices","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"DefaultRecursiveIndices","kind":"identifier"}],"navigatorTitle":[{"text":"DefaultRecursiveIndices","kind":"identifier"}],"title":"DefaultRecursiveIndices","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/MutableRangeReplaceableRandomAccessSlice":{"type":"topic","url":"\/documentation\/compute\/mutablerangereplaceablerandomaccessslice","kind":"symbol","navigatorTitle":[{"text":"MutableRangeReplaceableRandomAccessSlice","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"MutableRangeReplaceableRandomAccessSlice","kind":"identifier"}],"deprecated":true,"title":"MutableRangeReplaceableRandomAccessSlice","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRangeReplaceableRandomAccessSlice","role":"symbol","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/+(_:_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"+","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"U"},{"text":", ","kind":"text"},{"text":"V","kind":"genericParameter"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:7Compute1poiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1TL_xmfp","text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Compute1poiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1UL_q_mfp","text":"U"},{"text":", ","kind":"text"},{"text":"V","preciseIdentifier":"s:7Compute1poiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1VL_q0_mfp","kind":"typeIdentifier"},{"text":"), (","kind":"text"},{"preciseIdentifier":"s:7Compute1poiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1TL_xmfp","text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"U","kind":"typeIdentifier","preciseIdentifier":"s:7Compute1poiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1UL_q_mfp"},{"kind":"text","text":", "},{"preciseIdentifier":"s:7Compute1poiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1VL_q0_mfp","kind":"typeIdentifier","text":"V"},{"kind":"text","text":")) -> ("},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:7Compute1poiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1TL_xmfp"},{"text":", ","kind":"text"},{"text":"U","kind":"typeIdentifier","preciseIdentifier":"s:7Compute1poiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1UL_q_mfp"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:7Compute1poiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1VL_q0_mfp","kind":"typeIdentifier","text":"V"},{"text":")","kind":"text"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/+(_:_:)","url":"\/documentation\/compute\/+(_:_:)","title":"+(_:_:)","type":"topic","kind":"symbol","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/DebugDescription()":{"url":"\/documentation\/compute\/debugdescription()","title":"DebugDescription()","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DebugDescription()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DebugDescription","kind":"identifier"},{"kind":"text","text":"()"}],"type":"topic","kind":"symbol","abstract":[{"text":"Converts description definitions to a debugger Type Summary.","type":"text"}],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Float16":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16","navigatorTitle":[{"kind":"identifier","text":"Float16"}],"role":"symbol","title":"Float16","url":"\/documentation\/compute\/float16","type":"topic","abstract":[{"type":"text","text":"A half-precision (16b), floating-point value type."}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Float16"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayLiteralConvertible":{"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"ArrayLiteralConvertible","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayLiteralConvertible","abstract":[],"deprecated":true,"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ArrayLiteralConvertible"}],"title":"ArrayLiteralConvertible","url":"\/documentation\/compute\/arrayliteralconvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyDAG":{"type":"topic","url":"\/documentation\/compute\/anydag","kind":"symbol","navigatorTitle":[{"text":"AnyDAG","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AnyDAG","kind":"identifier"}],"title":"AnyDAG","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyDAG","role":"symbol","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/*(_:_:)":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/*(_:_:)","abstract":[],"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"*"},{"text":" ","kind":"text"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":", ","kind":"text"},{"text":"U","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"V"},{"kind":"text","text":">(("},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:7Compute1moiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1TL_xmfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Compute1moiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1UL_q_mfp","text":"U"},{"text":", ","kind":"text"},{"text":"V","kind":"typeIdentifier","preciseIdentifier":"s:7Compute1moiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1VL_q0_mfp"},{"kind":"text","text":"), ("},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:7Compute1moiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1TL_xmfp"},{"text":", ","kind":"text"},{"text":"U","kind":"typeIdentifier","preciseIdentifier":"s:7Compute1moiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1UL_q_mfp"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Compute1moiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1VL_q0_mfp","text":"V"},{"text":")) -> (","kind":"text"},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:7Compute1moiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1TL_xmfp"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"U","preciseIdentifier":"s:7Compute1moiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1UL_q_mfp"},{"kind":"text","text":", "},{"text":"V","kind":"typeIdentifier","preciseIdentifier":"s:7Compute1moiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1VL_q0_mfp"},{"text":")","kind":"text"}],"title":"*(_:_:)","url":"\/documentation\/compute\/*(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/CountablePartialRangeFrom":{"type":"topic","abstract":[],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"CountablePartialRangeFrom"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CountablePartialRangeFrom"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CountablePartialRangeFrom","title":"CountablePartialRangeFrom","role":"symbol","url":"\/documentation\/compute\/countablepartialrangefrom"},"doc://com.swallow.documentation.Compute/documentation/Compute/EnumeratedIterator":{"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EnumeratedIterator"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EnumeratedIterator","abstract":[],"deprecated":true,"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"EnumeratedIterator","kind":"identifier"}],"url":"\/documentation\/compute\/enumeratediterator","title":"EnumeratedIterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/DecodingError":{"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DecodingError"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DecodingError","navigatorTitle":[{"text":"DecodingError","kind":"identifier"}],"type":"topic","kind":"symbol","abstract":[{"text":"An error that occurs during the decoding of a value.","type":"text"}],"url":"\/documentation\/compute\/decodingerror","title":"DecodingError"},"doc://com.swallow.documentation.Compute/documentation/Compute/withUnsafePointer(to:_:)-9fjn6":{"type":"topic","abstract":[{"text":"Invokes the given closure with a pointer to the given argument.","type":"text"}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafePointer"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"E"},{"text":", ","kind":"text"},{"text":"Result","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", ("},{"preciseIdentifier":"s:SP","kind":"typeIdentifier","text":"UnsafePointer"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withUnsafePointer(to:_:)-9fjn6","title":"withUnsafePointer(to:_:)","role":"symbol","url":"\/documentation\/compute\/withunsafepointer(to:_:)-9fjn6"},"doc://com.swallow.documentation.Compute/documentation/Compute/-(_:_:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"-","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"U"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"V"},{"text":">((","kind":"text"},{"text":"T","preciseIdentifier":"s:7Compute1soiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1TL_xmfp","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"U","preciseIdentifier":"s:7Compute1soiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1UL_q_mfp","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Compute1soiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1VL_q0_mfp","text":"V"},{"text":"), (","kind":"text"},{"text":"T","preciseIdentifier":"s:7Compute1soiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1TL_xmfp","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:7Compute1soiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1UL_q_mfp","text":"U","kind":"typeIdentifier"},{"kind":"text","text":", "},{"preciseIdentifier":"s:7Compute1soiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1VL_q0_mfp","text":"V","kind":"typeIdentifier"},{"text":")) -> (","kind":"text"},{"text":"T","preciseIdentifier":"s:7Compute1soiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1TL_xmfp","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Compute1soiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1UL_q_mfp","text":"U"},{"kind":"text","text":", "},{"text":"V","kind":"typeIdentifier","preciseIdentifier":"s:7Compute1soiyx_q_q0_tx_q_q0_t_x_q_q0_ttSjRzSjR_SjR0_r1_lF1VL_q0_mfp"},{"text":")","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/-(_:_:)","kind":"symbol","title":"-(_:_:)","type":"topic","url":"\/documentation\/compute\/-(_:_:)","role":"symbol","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/SequenceInitiableRecursiveSequence":{"abstract":[],"kind":"symbol","title":"SequenceInitiableRecursiveSequence","url":"\/documentation\/compute\/sequenceinitiablerecursivesequence","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SequenceInitiableRecursiveSequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SequenceInitiableRecursiveSequence","navigatorTitle":[{"text":"SequenceInitiableRecursiveSequence","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByExtendedGraphemeClusterLiteral":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressibleByExtendedGraphemeClusterLiteral"}],"kind":"symbol","title":"ExpressibleByExtendedGraphemeClusterLiteral","abstract":[{"type":"text","text":"A type that can be initialized with a string literal containing a single"},{"type":"text","text":" "},{"text":"extended grapheme cluster.","type":"text"}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"ExpressibleByExtendedGraphemeClusterLiteral","kind":"identifier"}],"url":"\/documentation\/compute\/expressiblebyextendedgraphemeclusterliteral","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByExtendedGraphemeClusterLiteral"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByArrayLiteral":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ExpressibleByArrayLiteral","kind":"identifier"}],"title":"ExpressibleByArrayLiteral","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByArrayLiteral","abstract":[{"type":"text","text":"A type that can be initialized using an array literal."}],"url":"\/documentation\/compute\/expressiblebyarrayliteral","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ExpressibleByArrayLiteral"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Strideable":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/strideable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Strideable"}],"navigatorTitle":[{"text":"Strideable","kind":"identifier"}],"abstract":[{"type":"text","text":"A type representing continuous, one-dimensional values that can be offset"},{"type":"text","text":" "},{"type":"text","text":"and measured."}],"title":"Strideable"},"doc://com.swallow.documentation.Compute/documentation/Compute/type(of:)":{"abstract":[{"type":"text","text":"Returns the dynamic type of a value."}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/type(of:)","title":"type(of:)","type":"topic","url":"\/documentation\/compute\/type(of:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"type"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":", "},{"text":"Metatype","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"of","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"text":"Metatype","kind":"typeIdentifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/==(_:_:)-958in":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/==(_:_:)-958in","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"==","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"((), ()) -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the corresponding components of"},{"text":" ","type":"text"},{"type":"text","text":"two tuples are equal."}],"type":"topic","url":"\/documentation\/compute\/==(_:_:)-958in","title":"==(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/_=(_:_:)-6kea2":{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the first tuple is ordered"},{"text":" ","type":"text"},{"type":"text","text":"before or the same as the second in a lexicographical ordering."}],"role":"symbol","title":"<=(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-6kea2","kind":"symbol","url":"\/documentation\/compute\/_=(_:_:)-6kea2","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"<=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"text":"A","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"B"},{"text":", ","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"D","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"B","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"text":"), (","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":")) -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafePointer":{"abstract":[{"type":"text","text":"A pointer for accessing data of a specific type."}],"type":"topic","title":"UnsafePointer","url":"\/documentation\/compute\/unsafepointer","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafePointer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafePointer"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnsafePointer"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/AdditiveArithmetic":{"type":"topic","title":"AdditiveArithmetic","abstract":[{"text":"A type with values that support addition and subtraction.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AdditiveArithmetic"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AdditiveArithmetic","url":"\/documentation\/compute\/additivearithmetic","role":"symbol","navigatorTitle":[{"text":"AdditiveArithmetic","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/isKnownUniquelyReferenced(_:)-5kvtu":{"title":"isKnownUniquelyReferenced(_:)","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"isKnownUniquelyReferenced","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"abstract":[{"text":"Returns a Boolean value indicating whether the given object is known to","type":"text"},{"type":"text","text":" "},{"text":"have a single strong reference.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/isknownuniquelyreferenced(_:)-5kvtu","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/isKnownUniquelyReferenced(_:)-5kvtu"},"doc://com.swallow.documentation.Compute/documentation/Compute/NonSurjective":{"abstract":[],"title":"NonSurjective","role":"symbol","navigatorTitle":[{"text":"NonSurjective","kind":"identifier"}],"url":"\/documentation\/compute\/nonsurjective","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"NonSurjective","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/NonSurjective","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/TreeTraversalAlgorithmType":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeTraversalAlgorithmType","title":"TreeTraversalAlgorithmType","abstract":[],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TreeTraversalAlgorithmType"}],"url":"\/documentation\/compute\/treetraversalalgorithmtype","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"TreeTraversalAlgorithmType","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeReplaceableSlice":{"abstract":[],"role":"symbol","title":"RangeReplaceableSlice","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableSlice","deprecated":true,"navigatorTitle":[{"text":"RangeReplaceableSlice","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/rangereplaceableslice","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RangeReplaceableSlice","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeBufferPointerIterator":{"title":"UnsafeBufferPointerIterator","role":"symbol","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeBufferPointerIterator","kind":"identifier"}],"abstract":[],"navigatorTitle":[{"text":"UnsafeBufferPointerIterator","kind":"identifier"}],"deprecated":true,"type":"topic","url":"\/documentation\/compute\/unsafebufferpointeriterator","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointerIterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array":{"abstract":[{"type":"text","text":"An ordered, random-access collection."}],"type":"topic","title":"Array","kind":"symbol","navigatorTitle":[{"text":"Array","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array","role":"symbol","url":"\/documentation\/compute\/array","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Array","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/DictionaryLiteral":{"abstract":[],"role":"symbol","title":"DictionaryLiteral","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DictionaryLiteral","deprecated":true,"navigatorTitle":[{"text":"DictionaryLiteral","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/dictionaryliteral","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DictionaryLiteral","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/_(_:_:)-6p1tf":{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the first tuple is ordered"},{"type":"text","text":" "},{"text":"before the second in a lexicographical ordering.","type":"text"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-6p1tf","type":"topic","url":"\/documentation\/compute\/_(_:_:)-6p1tf","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"<"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"text":"A","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"C","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"D","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"D"},{"text":"), (","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"B"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":")) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"title":"<(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/CaseIterable":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CaseIterable","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"CaseIterable","kind":"identifier"}],"abstract":[{"type":"text","text":"A type that provides a collection of all of its values."}],"navigatorTitle":[{"text":"CaseIterable","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/caseiterable","title":"CaseIterable"},"doc://com.swallow.documentation.Compute/documentation/Compute/_=(_:_:)-1n7oc":{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the first tuple is ordered"},{"type":"text","text":" "},{"text":"after or the same as the second in a lexicographical ordering.","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-1n7oc","title":">=(_:_:)","kind":"symbol","url":"\/documentation\/compute\/_=(_:_:)-1n7oc","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":">="},{"text":" ","kind":"text"},{"kind":"text","text":"<"},{"text":"A","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"C"},{"kind":"text","text":", "},{"text":"D","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"E","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"F"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"D"},{"text":", ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"F"},{"kind":"text","text":"), ("},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"text":"B","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"D","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"E","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"F"},{"kind":"text","text":")) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/MutableRectangularCollection":{"role":"symbol","url":"\/documentation\/compute\/mutablerectangularcollection","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRectangularCollection","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MutableRectangularCollection"}],"abstract":[{"type":"text","text":"A rectangular collection that supports subscript assignment."}],"navigatorTitle":[{"kind":"identifier","text":"MutableRectangularCollection"}],"kind":"symbol","title":"MutableRectangularCollection"},"doc://com.swallow.documentation.Compute/documentation/Compute/TextOutputStreamable":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TextOutputStreamable","kind":"identifier"}],"kind":"symbol","title":"TextOutputStreamable","abstract":[{"text":"A source of text-streaming operations.","type":"text"}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"TextOutputStreamable","kind":"identifier"}],"url":"\/documentation\/compute\/textoutputstreamable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TextOutputStreamable"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeFrom":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"PartialRangeFrom","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom","url":"\/documentation\/compute\/partialrangefrom","navigatorTitle":[{"kind":"identifier","text":"PartialRangeFrom"}],"abstract":[{"type":"text","text":"A partial interval extending upward from a lower bound."}],"role":"symbol","title":"PartialRangeFrom"},"doc://com.swallow.documentation.Compute/documentation/Compute/Repeated":{"title":"Repeated","abstract":[{"type":"text","text":"A collection whose elements are all identical."}],"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Repeated","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Repeated","kind":"identifier"}],"url":"\/documentation\/compute\/repeated","navigatorTitle":[{"text":"Repeated","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/error(_:)":{"fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"error","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","title":"error(_:)","role":"symbol","url":"\/documentation\/compute\/error(_:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/error(_:)","abstract":[{"type":"text","text":"Produce the given error message during compilation."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Double":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double","abstract":[{"text":"A double-precision, floating-point value type.","type":"text"}],"title":"Double","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Double","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"Double","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/compute\/double"},"doc://com.swallow.documentation.Compute/documentation/Compute/withExtendedLifetime(_:_:)-4kl68":{"title":"withExtendedLifetime(_:_:)","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withExtendedLifetime"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"E"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Result"},{"text":">(","kind":"text"},{"kind":"keyword","text":"borrowing"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", ("},{"kind":"keyword","text":"borrowing"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":"("},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Evaluates a closure while ensuring that the given instance is not destroyed"},{"type":"text","text":" "},{"type":"text","text":"before the closure returns."}],"type":"topic","url":"\/documentation\/compute\/withextendedlifetime(_:_:)-4kl68","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withExtendedLifetime(_:_:)-4kl68"},"doc://com.swallow.documentation.Compute/documentation/Compute/CVaListPointer":{"url":"\/documentation\/compute\/cvalistpointer","title":"CVaListPointer","role":"symbol","abstract":[],"navigatorTitle":[{"text":"CVaListPointer","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVaListPointer","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CVaListPointer"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/function()":{"abstract":[{"type":"text","text":"Produces a string representation of the current function name."}],"role":"symbol","title":"function()","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/function()","kind":"symbol","url":"\/documentation\/compute\/function()","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"function"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/DirectedAcyclicGraph":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DirectedAcyclicGraph","role":"symbol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DirectedAcyclicGraph","kind":"identifier"}],"abstract":[{"text":"A directed acyclic graph.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"DirectedAcyclicGraph"}],"type":"topic","url":"\/documentation\/compute\/directedacyclicgraph","title":"DirectedAcyclicGraph"},"doc://com.swallow.documentation.Compute/documentation/Compute/Identifiable":{"url":"\/documentation\/compute\/identifiable","kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Identifiable"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Identifiable"}],"abstract":[{"text":"A class of types whose instances hold the value of an entity with stable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"identity."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Identifiable","title":"Identifiable"},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveSequence":{"url":"\/documentation\/compute\/recursivesequence","navigatorTitle":[{"text":"RecursiveSequence","kind":"identifier"}],"title":"RecursiveSequence","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecursiveSequence"}],"abstract":[{"text":"A recursively traversable sequence.","type":"text"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/DirectedAcyclicGraphEdge":{"abstract":[{"type":"text","text":"An type that represents an edge in a directed acyclic graph."}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DirectedAcyclicGraphEdge","title":"DirectedAcyclicGraphEdge","navigatorTitle":[{"text":"DirectedAcyclicGraphEdge","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/directedacyclicgraphedge","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DirectedAcyclicGraphEdge","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/_=(_:_:)-7n746":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the first tuple is ordered"},{"type":"text","text":" "},{"type":"text","text":"before or the same as the second in a lexicographical ordering."}],"url":"\/documentation\/compute\/_=(_:_:)-7n746","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_=(_:_:)-7n746","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"<=","kind":"identifier"},{"kind":"text","text":" "},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"A"},{"text":", ","kind":"text"},{"text":"B","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"C"},{"kind":"text","text":", "},{"text":"D","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"E"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"F"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"A"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"D"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"text":", ","kind":"text"},{"text":"F","kind":"typeIdentifier"},{"text":"), (","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":", ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"F"},{"kind":"text","text":")) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"title":"<=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Unicode":{"url":"\/documentation\/compute\/unicode","title":"Unicode","abstract":[{"type":"text","text":"A namespace for Unicode utilities."}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"Unicode","kind":"identifier"}],"navigatorTitle":[{"text":"Unicode","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unicode"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnboundedRange":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnboundedRange","role":"symbol","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnboundedRange","kind":"identifier"}],"abstract":[{"text":"The type of an unbounded range operator.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"UnboundedRange"}],"type":"topic","url":"\/documentation\/compute\/unboundedrange","title":"UnboundedRange"},"doc://com.swallow.documentation.Compute/documentation/Compute/simd-swift.module.extension":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/simd-swift.module.extension","abstract":[],"title":"simd","type":"topic","role":"collection","url":"\/documentation\/compute\/simd-swift.module.extension","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyDropWhileCollection":{"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LazyDropWhileCollection"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyDropWhileCollection","abstract":[{"text":"A lazy wrapper that includes the elements of an underlying","type":"text"},{"text":" ","type":"text"},{"text":"collection after any initial consecutive elements that satisfy a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"predicate."}],"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyDropWhileCollection"}],"url":"\/documentation\/compute\/lazydropwhilecollection","title":"LazyDropWhileCollection"},"doc://com.swallow.documentation.Compute/documentation/Compute/withExtendedLifetime(_:_:)-6mq1":{"abstract":[{"type":"text","text":"Evaluates a closure while ensuring that the given instance is not destroyed"},{"text":" ","type":"text"},{"text":"before the closure returns.","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withExtendedLifetime(_:_:)-6mq1","title":"withExtendedLifetime(_:_:)","kind":"symbol","url":"\/documentation\/compute\/withextendedlifetime(_:_:)-6mq1","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withExtendedLifetime","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"E"},{"text":", ","kind":"text"},{"text":"Result","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"borrowing","kind":"keyword"},{"kind":"text","text":" "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", () "},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeReplaceableBidirectionalSlice":{"title":"RangeReplaceableBidirectionalSlice","role":"symbol","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RangeReplaceableBidirectionalSlice"}],"abstract":[],"navigatorTitle":[{"kind":"identifier","text":"RangeReplaceableBidirectionalSlice"}],"deprecated":true,"type":"topic","url":"\/documentation\/compute\/rangereplaceablebidirectionalslice","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableBidirectionalSlice"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"Optional","kind":"identifier"}],"url":"\/documentation\/compute\/optional","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"Optional","kind":"identifier"}],"abstract":[{"type":"text","text":"A type that represents either a wrapped value or the absence of a value."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional","title":"Optional"},"doc://com.swallow.documentation.Compute/documentation/Compute/UTF16":{"abstract":[],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UTF16","title":"UTF16","navigatorTitle":[{"text":"UTF16","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/utf16","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"UTF16"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/+=(_:_:)":{"title":"+=(_:_:)","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"+="},{"text":" ","kind":"text"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"U","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"V","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" (","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Compute2peoiyyx_q_q0_tz_x_q_q0_ttSjRzSjR_SjR0_r1_lF1TL_xmfp","text":"T"},{"kind":"text","text":", "},{"text":"U","preciseIdentifier":"s:7Compute2peoiyyx_q_q0_tz_x_q_q0_ttSjRzSjR_SjR0_r1_lF1UL_q_mfp","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"V","preciseIdentifier":"s:7Compute2peoiyyx_q_q0_tz_x_q_q0_ttSjRzSjR_SjR0_r1_lF1VL_q0_mfp","kind":"typeIdentifier"},{"text":"), (","kind":"text"},{"preciseIdentifier":"s:7Compute2peoiyyx_q_q0_tz_x_q_q0_ttSjRzSjR_SjR0_r1_lF1TL_xmfp","kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Compute2peoiyyx_q_q0_tz_x_q_q0_ttSjRzSjR_SjR0_r1_lF1UL_q_mfp","text":"U"},{"kind":"text","text":", "},{"preciseIdentifier":"s:7Compute2peoiyyx_q_q0_tz_x_q_q0_ttSjRzSjR_SjR0_r1_lF1VL_q0_mfp","kind":"typeIdentifier","text":"V"},{"kind":"text","text":"))"}],"abstract":[],"type":"topic","url":"\/documentation\/compute\/+=(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/+=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/CFloat16":{"abstract":[{"type":"text","text":"The C ‘_Float16’ type."}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CFloat16","title":"CFloat16","navigatorTitle":[{"text":"CFloat16","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/cfloat16","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"CFloat16"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/_(_:_:)-7p512":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-7p512","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":">"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"A"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"B"},{"kind":"text","text":", "},{"text":"C","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"B"},{"text":", ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":"), (","kind":"text"},{"kind":"typeIdentifier","text":"A"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"C"},{"text":")) -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the first tuple is ordered"},{"type":"text","text":" "},{"type":"text","text":"after the second in a lexicographical ordering."}],"type":"topic","url":"\/documentation\/compute\/_(_:_:)-7p512","title":">(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyDropWhileBidirectionalCollection":{"type":"topic","abstract":[],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"LazyDropWhileBidirectionalCollection"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"LazyDropWhileBidirectionalCollection","kind":"identifier"}],"deprecated":true,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyDropWhileBidirectionalCollection","title":"LazyDropWhileBidirectionalCollection","role":"symbol","url":"\/documentation\/compute\/lazydropwhilebidirectionalcollection"},"doc://com.swallow.documentation.Compute/documentation/Compute/filePath()":{"abstract":[{"type":"text","text":"Produces the complete path for the given source file."}],"role":"symbol","title":"filePath()","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/filePath()","kind":"symbol","url":"\/documentation\/compute\/filepath()","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"filePath","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">() -> "},{"kind":"typeIdentifier","text":"T"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/withUnsafeBytes(of:_:)-5zxtl":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withUnsafeBytes(of:_:)-5zxtl","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":", ","kind":"text"},{"text":"E","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"kind":"externalParam","text":"of"},{"kind":"text","text":": "},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", ("},{"text":"UnsafeRawBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SW"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Result"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"E"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/withunsafebytes(of:_:)-5zxtl","abstract":[{"type":"text","text":"Invokes the given closure with a buffer pointer covering the raw bytes of"},{"text":" ","type":"text"},{"type":"text","text":"the given argument."}],"title":"withUnsafeBytes(of:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/BidirectionalIndexable":{"title":"BidirectionalIndexable","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalIndexable"}],"abstract":[],"navigatorTitle":[{"text":"BidirectionalIndexable","kind":"identifier"}],"deprecated":true,"type":"topic","url":"\/documentation\/compute\/bidirectionalindexable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalIndexable"},"doc://com.swallow.documentation.Compute/documentation/Compute/BooleanLiteralConvertible":{"abstract":[],"role":"symbol","title":"BooleanLiteralConvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BooleanLiteralConvertible","deprecated":true,"navigatorTitle":[{"kind":"identifier","text":"BooleanLiteralConvertible"}],"kind":"symbol","url":"\/documentation\/compute\/booleanliteralconvertible","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BooleanLiteralConvertible"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyBidirectionalCollection":{"title":"LazyBidirectionalCollection","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"LazyBidirectionalCollection","kind":"identifier"}],"abstract":[],"navigatorTitle":[{"kind":"identifier","text":"LazyBidirectionalCollection"}],"deprecated":true,"type":"topic","url":"\/documentation\/compute\/lazybidirectionalcollection","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyBidirectionalCollection"},"doc://com.swallow.documentation.Compute/documentation/Compute/print(_:separator:terminator:)":{"abstract":[{"type":"text","text":"Writes the textual representations of the given items into the standard"},{"type":"text","text":" "},{"text":"output.","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/print(_:separator:terminator:)","title":"print(_:separator:terminator:)","kind":"symbol","url":"\/documentation\/compute\/print(_:separator:terminator:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"print"},{"kind":"text","text":"("},{"kind":"keyword","text":"Any"},{"text":"..., ","kind":"text"},{"kind":"externalParam","text":"separator"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"terminator"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/==(_:_:)-7lhq7":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/==(_:_:)-7lhq7","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"==","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"<"},{"text":"A","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"B"},{"kind":"text","text":", "},{"text":"C","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"D"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"A"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"B"},{"kind":"text","text":", "},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"D","kind":"typeIdentifier"},{"text":"), (","kind":"text"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"text":"B","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":")) -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"text":"Returns a Boolean value indicating whether the corresponding components of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"two tuples are equal."}],"type":"topic","url":"\/documentation\/compute\/==(_:_:)-7lhq7","title":"==(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Character":{"title":"Character","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Character","abstract":[{"type":"text","text":"A single extended grapheme cluster that approximates a user-perceived"},{"type":"text","text":" "},{"text":"character.","type":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/compute\/character","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Character"}],"navigatorTitle":[{"kind":"identifier","text":"Character"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/StringInterpolationProtocol":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StringInterpolationProtocol"}],"kind":"symbol","title":"StringInterpolationProtocol","abstract":[{"type":"text","text":"Represents the contents of a string literal with interpolations while it’s"},{"text":" ","type":"text"},{"type":"text","text":"being built up."}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"StringInterpolationProtocol","kind":"identifier"}],"url":"\/documentation\/compute\/stringinterpolationprotocol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringInterpolationProtocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/===(_:_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/===(_:_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"===","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"AnyObject","kind":"typeIdentifier","preciseIdentifier":"s:s9AnyObjecta"},{"kind":"text","text":"?, "},{"kind":"typeIdentifier","preciseIdentifier":"s:s9AnyObjecta","text":"AnyObject"},{"kind":"text","text":"?) -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"abstract":[],"role":"symbol","title":"===(_:_:)","kind":"symbol","url":"\/documentation\/compute\/===(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/!=(_:_:)-6s4z0":{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether two types are not identical."}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/!=(_:_:)-6s4z0","title":"!=(_:_:)","kind":"symbol","url":"\/documentation\/compute\/!=(_:_:)-6s4z0","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"!="},{"kind":"text","text":" "},{"kind":"text","text":"((any "},{"text":"Any","kind":"keyword"},{"kind":"text","text":".Type)?, (any "},{"text":"Any","kind":"keyword"},{"kind":"text","text":".Type)?) -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceWritableKeyPath":{"title":"ReferenceWritableKeyPath","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"ReferenceWritableKeyPath","kind":"identifier"}],"navigatorTitle":[{"text":"ReferenceWritableKeyPath","kind":"identifier"}],"url":"\/documentation\/compute\/referencewritablekeypath","abstract":[{"type":"text","text":"A key path that supports reading from and writing to the resulting value"},{"text":" ","type":"text"},{"text":"with reference semantics.","type":"text"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceWritableKeyPath","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/StaticBigInt":{"abstract":[{"text":"An immutable arbitrary-precision signed integer.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"StaticBigInt"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StaticBigInt","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StaticBigInt","url":"\/documentation\/compute\/staticbigint","kind":"symbol","title":"StaticBigInt","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bijective":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bijective","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Bijective"}],"abstract":[{"type":"text","text":"A perfect one-to-one correspondence."}],"navigatorTitle":[{"text":"Bijective","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/bijective","title":"Bijective"},"doc://com.swallow.documentation.Compute/documentation/Compute/ComplexNumeric":{"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ComplexNumeric","type":"topic","url":"\/documentation\/compute\/complexnumeric","title":"ComplexNumeric","navigatorTitle":[{"text":"ComplexNumeric","kind":"identifier"}],"abstract":[],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ComplexNumeric","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/CUnsignedLong":{"abstract":[],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CUnsignedLong","title":"CUnsignedLong","navigatorTitle":[{"text":"CUnsignedLong","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/cunsignedlong","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CUnsignedLong"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/max(_:_:_:_:)":{"title":"max(_:_:_:_:)","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"max","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"...) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"abstract":[{"text":"Returns the greatest argument passed.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/max(_:_:_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/max(_:_:_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/_(_:_:)-yktb":{"abstract":[{"text":"Returns a Boolean value indicating whether the first tuple is ordered","type":"text"},{"text":" ","type":"text"},{"text":"after the second in a lexicographical ordering.","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-yktb","title":">(_:_:)","kind":"symbol","url":"\/documentation\/compute\/_(_:_:)-yktb","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":">"},{"kind":"text","text":" "},{"kind":"text","text":"((), ()) -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeConcurrentValue":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeConcurrentValue","title":"UnsafeConcurrentValue","type":"topic","abstract":[],"role":"symbol","kind":"symbol","navigatorTitle":[{"text":"UnsafeConcurrentValue","kind":"identifier"}],"url":"\/documentation\/compute\/unsafeconcurrentvalue","deprecated":true,"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeConcurrentValue","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/_(_:_:)-3ewuy":{"title":">(_:_:)","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":">"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"A"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"B"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"C"},{"text":", ","kind":"text"},{"text":"D","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"E","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":"), (","kind":"text"},{"kind":"typeIdentifier","text":"A"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"B"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":", ","kind":"text"},{"text":"D","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":")) -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the first tuple is ordered"},{"type":"text","text":" "},{"type":"text","text":"after the second in a lexicographical ordering."}],"type":"topic","url":"\/documentation\/compute\/_(_:_:)-3ewuy","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-3ewuy"},"doc://com.swallow.documentation.Compute/documentation/Compute/SignedNumeric":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedNumeric","url":"\/documentation\/compute\/signednumeric","title":"SignedNumeric","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SignedNumeric"}],"navigatorTitle":[{"text":"SignedNumeric","kind":"identifier"}],"abstract":[{"type":"text","text":"A numeric type with a negation operation."}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomReflectable":{"url":"\/documentation\/compute\/customreflectable","role":"symbol","abstract":[{"text":"A type that explicitly supplies its own mirror.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","title":"CustomReflectable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomReflectable"}],"navigatorTitle":[{"kind":"identifier","text":"CustomReflectable"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/!=(_:_:)-7er1l":{"type":"topic","title":"!=(_:_:)","url":"\/documentation\/compute\/!=(_:_:)-7er1l","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether any corresponding components of"},{"type":"text","text":" "},{"type":"text","text":"the two tuples are not equal."}],"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"!=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"text":"A","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"B"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"A"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":"), (","kind":"text"},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"text":"B","kind":"typeIdentifier"},{"kind":"text","text":")) -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/!=(_:_:)-7er1l"},"doc://com.swallow.documentation.Compute/documentation/Compute/max(_:_:)":{"abstract":[{"type":"text","text":"Returns the greater of two comparable values."}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/max(_:_:)","title":"max(_:_:)","kind":"symbol","url":"\/documentation\/compute\/max(_:_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"max","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"T","kind":"typeIdentifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/min(_:_:)":{"role":"symbol","title":"min(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"min","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"type":"text","text":"Returns the lesser of two comparable values."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/min(_:_:)","url":"\/documentation\/compute\/min(_:_:)","kind":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/IteratorProtocol":{"url":"\/documentation\/compute\/iteratorprotocol","navigatorTitle":[{"kind":"identifier","text":"IteratorProtocol"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IteratorProtocol"}],"abstract":[{"type":"text","text":"A type that supplies the values of a sequence one at a time."}],"type":"topic","title":"IteratorProtocol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveCollection":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveCollection","abstract":[],"title":"RecursiveCollection","url":"\/documentation\/compute\/recursivecollection","navigatorTitle":[{"kind":"identifier","text":"RecursiveCollection"}],"type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecursiveCollection"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/TreeIndexPath":{"type":"topic","url":"\/documentation\/compute\/treeindexpath","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TreeIndexPath"}],"abstract":[],"navigatorTitle":[{"kind":"identifier","text":"TreeIndexPath"}],"title":"TreeIndexPath","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeIndexPath"},"doc://com.swallow.documentation.Compute/documentation/Compute/externalMacro(module:type:)":{"title":"externalMacro(module:type:)","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"externalMacro"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"module"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":", ","kind":"text"},{"text":"type","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"}],"abstract":[{"text":"Specifies the module and type name for an externally-defined macro, which","type":"text"},{"type":"text","text":" "},{"type":"text","text":"must conform to the appropriate set of "},{"code":"Macro","type":"codeVoice"},{"type":"text","text":" protocols."}],"type":"topic","url":"\/documentation\/compute\/externalmacro(module:type:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/externalMacro(module:type:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/MirrorPath":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MirrorPath","url":"\/documentation\/compute\/mirrorpath","title":"MirrorPath","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"MirrorPath","kind":"identifier"}],"navigatorTitle":[{"text":"MirrorPath","kind":"identifier"}],"abstract":[{"text":"A protocol for legitimate arguments to ","type":"text"},{"type":"codeVoice","code":"Mirror"},{"text":"’s ","type":"text"},{"code":"descendant","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"method."}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/dump(_:name:indent:maxDepth:maxItems:)":{"abstract":[{"type":"text","text":"Dumps the given object’s contents using its mirror to standard output."}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/dump(_:name:indent:maxDepth:maxItems:)","title":"dump(_:name:indent:maxDepth:maxItems:)","kind":"symbol","url":"\/documentation\/compute\/dump(_:name:indent:maxdepth:maxitems:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dump"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"text":"name","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"indent"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"maxDepth"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"maxItems"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/warning(_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/warning(_:)","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"warning"},{"kind":"text","text":"("},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Produce the given warning message during compilation."}],"type":"topic","url":"\/documentation\/compute\/warning(_:)","title":"warning(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/ObjectIdentifier":{"title":"ObjectIdentifier","navigatorTitle":[{"text":"ObjectIdentifier","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/objectidentifier","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObjectIdentifier","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ObjectIdentifier","abstract":[{"type":"text","text":"A unique identifier for a class instance or metatype."}],"role":"symbol","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Never":{"title":"Never","navigatorTitle":[{"kind":"identifier","text":"Never"}],"abstract":[{"type":"text","text":"A type that has no values and can’t be constructed."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Never"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Never","role":"symbol","type":"topic","url":"\/documentation\/compute\/never"},"doc://com.swallow.documentation.Compute/documentation/Compute/DictionaryIterator":{"abstract":[],"role":"symbol","title":"DictionaryIterator","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DictionaryIterator","navigatorTitle":[{"kind":"identifier","text":"DictionaryIterator"}],"kind":"symbol","url":"\/documentation\/compute\/dictionaryiterator","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"DictionaryIterator","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterIndex":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterIndex","role":"symbol","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyFilterIndex"}],"abstract":[],"navigatorTitle":[{"kind":"identifier","text":"LazyFilterIndex"}],"deprecated":true,"type":"topic","url":"\/documentation\/compute\/lazyfilterindex","title":"LazyFilterIndex"},"doc://com.swallow.documentation.Compute/documentation/Compute/KeyValuePairs":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeyValuePairs"}],"navigatorTitle":[{"kind":"identifier","text":"KeyValuePairs"}],"url":"\/documentation\/compute\/keyvaluepairs","title":"KeyValuePairs","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyValuePairs","role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A lightweight collection of key-value pairs."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Encoder":{"title":"Encoder","url":"\/documentation\/compute\/encoder","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Encoder","kind":"identifier"}],"abstract":[{"text":"A type that can encode values into a native format for external","type":"text"},{"type":"text","text":" "},{"type":"text","text":"representation."}],"navigatorTitle":[{"text":"Encoder","kind":"identifier"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/AutoreleasingUnsafeMutablePointer":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AutoreleasingUnsafeMutablePointer"}],"url":"\/documentation\/compute\/autoreleasingunsafemutablepointer","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A mutable pointer addressing an Objective-C reference that doesn’t own its"},{"text":" ","type":"text"},{"type":"text","text":"target."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AutoreleasingUnsafeMutablePointer","navigatorTitle":[{"text":"AutoreleasingUnsafeMutablePointer","kind":"identifier"}],"title":"AutoreleasingUnsafeMutablePointer"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsignedInteger":{"url":"\/documentation\/compute\/unsignedinteger","abstract":[{"type":"text","text":"An integer type that can represent only nonnegative values."}],"kind":"symbol","navigatorTitle":[{"text":"UnsignedInteger","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsignedInteger","title":"UnsignedInteger","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsignedInteger"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/PrimitiveGraphPatternExpression":{"url":"\/documentation\/compute\/primitivegraphpatternexpression","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PrimitiveGraphPatternExpression"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PrimitiveGraphPatternExpression"}],"title":"PrimitiveGraphPatternExpression","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PrimitiveGraphPatternExpression","abstract":[{"type":"text","text":"A primitive pattern expression for matching subgraphs in a DAG."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int16":{"title":"Int16","abstract":[{"text":"A 16-bit signed integer value","type":"text"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int16","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int16"}],"type":"topic","url":"\/documentation\/compute\/int16","navigatorTitle":[{"kind":"identifier","text":"Int16"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/pointwiseMax(_:_:)-29hn2":{"abstract":[{"type":"text","text":"The lanewise maximum of two vectors."}],"role":"symbol","title":"pointwiseMax(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/pointwiseMax(_:_:)-29hn2","kind":"symbol","url":"\/documentation\/compute\/pointwisemax(_:_:)-29hn2","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"pointwiseMax","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/withVaList(_:_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withVaList(_:_:)","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withVaList"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">([any "},{"kind":"typeIdentifier","preciseIdentifier":"s:s7CVarArgP","text":"CVarArg"},{"kind":"text","text":"], ("},{"text":"CVaListPointer","kind":"typeIdentifier","preciseIdentifier":"s:s14CVaListPointerV"},{"text":") -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"}],"abstract":[{"type":"text","text":"Invokes the given closure with a C "},{"code":"va_list","type":"codeVoice"},{"text":" argument derived from the","type":"text"},{"type":"text","text":" "},{"text":"given array of arguments.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/withvalist(_:_:)","title":"withVaList(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/CDouble":{"type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CDouble","abstract":[{"text":"The C ‘double’ type.","type":"text"}],"url":"\/documentation\/compute\/cdouble","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"CDouble","kind":"identifier"}],"navigatorTitle":[{"text":"CDouble","kind":"identifier"}],"title":"CDouble"},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"title":"Copyable","abstract":[{"type":"text","text":"A type whose values can be implicitly or explicitly copied."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Copyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","url":"\/documentation\/compute\/copyable","navigatorTitle":[{"text":"Copyable","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/DiscontiguousSlice":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DiscontiguousSlice"}],"navigatorTitle":[{"text":"DiscontiguousSlice","kind":"identifier"}],"url":"\/documentation\/compute\/discontiguousslice","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DiscontiguousSlice","title":"DiscontiguousSlice","kind":"symbol","role":"symbol","abstract":[{"text":"A collection wrapper that provides access to the elements of a collection,","type":"text"},{"text":" ","type":"text"},{"text":"indexed by a set of indices.","type":"text"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyMapCollection":{"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"Collection"},{"text":" whose elements consist of those in a ","type":"text"},{"code":"Base","type":"codeVoice"},{"type":"text","text":" "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" passed through a transform function returning "},{"type":"codeVoice","code":"Element"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"These elements are computed lazily, each time they’re read, by"},{"type":"text","text":" "},{"type":"text","text":"calling the transform function on a base element."}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapCollection","title":"LazyMapCollection","navigatorTitle":[{"text":"LazyMapCollection","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/lazymapcollection","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazyMapCollection"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/withUnsafeMutableBytes(of:_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/withUnsafeMutableBytes(of:_:)","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"withUnsafeMutableBytes"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"E","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"kind":"externalParam","text":"of"},{"text":": ","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","preciseIdentifier":"s:Sw","text":"UnsafeMutableRawBufferPointer"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Invokes the given closure with a mutable buffer pointer covering the raw"},{"text":" ","type":"text"},{"text":"bytes of the given argument.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/withunsafemutablebytes(of:_:)","title":"withUnsafeMutableBytes(of:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExtensibleRecursiveSequence":{"url":"\/documentation\/compute\/extensiblerecursivesequence","navigatorTitle":[{"kind":"identifier","text":"ExtensibleRecursiveSequence"}],"title":"ExtensibleRecursiveSequence","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExtensibleRecursiveSequence"}],"abstract":[],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExtensibleRecursiveSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/HomogenousTree":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"HomogenousTree","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/HomogenousTree","url":"\/documentation\/compute\/homogenoustree","type":"topic","abstract":[],"title":"HomogenousTree","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"HomogenousTree","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeReplaceableCollection":{"type":"topic","title":"RangeReplaceableCollection","abstract":[{"text":"A collection that supports replacement of an arbitrary subrange of elements","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with the elements of another collection."}],"url":"\/documentation\/compute\/rangereplaceablecollection","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"RangeReplaceableCollection","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableCollection","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"RangeReplaceableCollection","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomLeafReflectable":{"role":"symbol","url":"\/documentation\/compute\/customleafreflectable","type":"topic","kind":"symbol","title":"CustomLeafReflectable","abstract":[{"text":"A type that explicitly supplies its own mirror, but whose","type":"text"},{"type":"text","text":" "},{"text":"descendant classes are not represented in the mirror unless they","type":"text"},{"type":"text","text":" "},{"type":"text","text":"also override "},{"code":"customMirror","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomLeafReflectable","kind":"identifier"}],"navigatorTitle":[{"text":"CustomLeafReflectable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomLeafReflectable"},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeSet":{"abstract":[{"text":"A set of values of any comparable type, represented by ranges.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"RangeSet","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RangeSet"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeSet","url":"\/documentation\/compute\/rangeset","title":"RangeSet","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/!=(_:_:)-7ao4l":{"abstract":[{"text":"Returns a Boolean value indicating whether any corresponding components of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the two tuples are not equal."}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/!=(_:_:)-7ao4l","title":"!=(_:_:)","kind":"symbol","url":"\/documentation\/compute\/!=(_:_:)-7ao4l","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"!=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"text":"A","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"B","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"C"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"D"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"A"},{"kind":"text","text":", "},{"text":"B","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"D"},{"kind":"text","text":"), ("},{"text":"A","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"D"},{"text":")) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/any(_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/any(_:)","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"any"},{"kind":"text","text":"<"},{"text":"Storage","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s8SIMDMaskV","text":"SIMDMask","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Storage"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"True if any lane of mask is true."}],"type":"topic","url":"\/documentation\/compute\/any(_:)","title":"any(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnicodeDecodingResult":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnicodeDecodingResult","title":"UnicodeDecodingResult","abstract":[{"text":"The result of one Unicode decoding step.","type":"text"}],"type":"topic","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"UnicodeDecodingResult","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnicodeDecodingResult"}],"url":"\/documentation\/compute\/unicodedecodingresult"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyRandomAccessCollection":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyRandomAccessCollection","title":"AnyRandomAccessCollection","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyRandomAccessCollection"}],"kind":"symbol","url":"\/documentation\/compute\/anyrandomaccesscollection","abstract":[{"type":"text","text":"A type-erased wrapper over any collection with indices that"},{"type":"text","text":" "},{"text":"support random access traversal.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyRandomAccessCollection"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/DurationProtocol":{"url":"\/documentation\/compute\/durationprotocol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DurationProtocol"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DurationProtocol","title":"DurationProtocol","role":"symbol","abstract":[{"text":"A type that defines a duration for a given ","type":"text"},{"type":"codeVoice","code":"InstantProtocol"},{"text":" type.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"DurationProtocol"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/_(_:_:)-5gb41":{"abstract":[{"text":"Returns a Boolean value indicating whether the first tuple is ordered","type":"text"},{"type":"text","text":" "},{"text":"after the second in a lexicographical ordering.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/_(_:_:)-5gb41","title":">(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":">"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"text":"A","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"B","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"C"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"D"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"A"},{"text":", ","kind":"text"},{"text":"B","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"D"},{"text":"), (","kind":"text"},{"text":"A","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"B","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"D","kind":"typeIdentifier"},{"text":")) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"url":"\/documentation\/compute\/_(_:_:)-5gb41","role":"symbol","kind":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/BranchingDictionary":{"url":"\/documentation\/compute\/branchingdictionary","kind":"symbol","title":"BranchingDictionary","role":"symbol","navigatorTitle":[{"text":"BranchingDictionary","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BranchingDictionary","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BranchingDictionary"}],"abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyTree":{"navigatorTitle":[{"kind":"identifier","text":"AnyTree"}],"type":"topic","title":"AnyTree","url":"\/documentation\/compute\/anytree","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyTree"}],"abstract":[],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyTree"},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeExpression":{"abstract":[{"text":"A type that can be used to slice a collection.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"RangeExpression","kind":"identifier"}],"url":"\/documentation\/compute\/rangeexpression","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression","kind":"symbol","title":"RangeExpression","role":"symbol","type":"topic","navigatorTitle":[{"text":"RangeExpression","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CUnsignedShort":{"abstract":[{"type":"text","text":"The C ‘unsigned short’ type."}],"role":"symbol","title":"CUnsignedShort","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CUnsignedShort","navigatorTitle":[{"text":"CUnsignedShort","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/cunsignedshort","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"CUnsignedShort"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CUnsignedLongLong":{"title":"CUnsignedLongLong","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"CUnsignedLongLong","kind":"identifier"}],"abstract":[{"type":"text","text":"The C ‘unsigned long long’ type."}],"navigatorTitle":[{"kind":"identifier","text":"CUnsignedLongLong"}],"type":"topic","url":"\/documentation\/compute\/cunsignedlonglong","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CUnsignedLongLong"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceArrayTreeValueObject":{"title":"ReferenceArrayTreeValueObject","abstract":[],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ReferenceArrayTreeValueObject"}],"navigatorTitle":[{"kind":"identifier","text":"ReferenceArrayTreeValueObject"}],"url":"\/documentation\/compute\/referencearraytreevalueobject","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceArrayTreeValueObject","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomDebugStringConvertible":{"url":"\/documentation\/compute\/customdebugstringconvertible","role":"symbol","abstract":[{"text":"A type with a customized textual representation suitable for debugging","type":"text"},{"type":"text","text":" "},{"text":"purposes.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","title":"CustomDebugStringConvertible","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomDebugStringConvertible","kind":"identifier"}],"navigatorTitle":[{"text":"CustomDebugStringConvertible","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/SetAlgebra":{"role":"symbol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SetAlgebra","kind":"identifier"}],"title":"SetAlgebra","url":"\/documentation\/compute\/setalgebra","abstract":[{"text":"A type that provides mathematical set operations.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"SetAlgebra","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SetAlgebra"},"doc://com.swallow.documentation.Compute/documentation/Compute/Float64":{"abstract":[{"type":"text","text":"A 64-bit floating point type."}],"role":"symbol","title":"Float64","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float64","navigatorTitle":[{"kind":"identifier","text":"Float64"}],"kind":"symbol","url":"\/documentation\/compute\/float64","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Float64"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger":{"title":"FixedWidthInteger","kind":"symbol","navigatorTitle":[{"text":"FixedWidthInteger","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"FixedWidthInteger","kind":"identifier"}],"abstract":[{"text":"An integer type that uses a fixed size for every instance.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/fixedwidthinteger"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyCollectionProtocol":{"title":"LazyCollectionProtocol","url":"\/documentation\/compute\/lazycollectionprotocol","role":"symbol","abstract":[],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyCollectionProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazyCollectionProtocol"}],"navigatorTitle":[{"text":"LazyCollectionProtocol","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/KeyedEncodingContainerProtocol":{"abstract":[{"text":"A type that provides a view into an encoder’s storage and is used to hold","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the encoded properties of an encodable type in a keyed manner."}],"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"KeyedEncodingContainerProtocol","kind":"identifier"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"KeyedEncodingContainerProtocol","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyedEncodingContainerProtocol","url":"\/documentation\/compute\/keyedencodingcontainerprotocol","title":"KeyedEncodingContainerProtocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/readLine(strippingNewline:)":{"title":"readLine(strippingNewline:)","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"readLine","kind":"identifier"},{"text":"(","kind":"text"},{"text":"strippingNewline","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") -> "},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":"?","kind":"text"}],"abstract":[{"type":"text","text":"Returns a string read from standard input through the end of the current"},{"type":"text","text":" "},{"type":"text","text":"line or until EOF is reached."}],"type":"topic","url":"\/documentation\/compute\/readline(strippingnewline:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/readLine(strippingNewline:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hasher":{"navigatorTitle":[{"text":"Hasher","kind":"identifier"}],"abstract":[{"type":"text","text":"The universal hash function used by "},{"type":"codeVoice","code":"Set"},{"text":" and ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Hasher","kind":"identifier"}],"url":"\/documentation\/compute\/hasher","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hasher","title":"Hasher","type":"topic","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawBufferPointer":{"title":"UnsafeRawBufferPointer","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawBufferPointer","kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UnsafeRawBufferPointer","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UnsafeRawBufferPointer"}],"url":"\/documentation\/compute\/unsaferawbufferpointer","abstract":[{"type":"text","text":"A  nonowning collection interface to the bytes in a"},{"text":" ","type":"text"},{"type":"text","text":"region of memory."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","title":"UInt32","abstract":[{"type":"text","text":"A 32-bit unsigned integer value"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"UInt32","kind":"identifier"}],"url":"\/documentation\/compute\/uint32","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt32","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/EmptyIterator":{"abstract":[],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EmptyIterator","title":"EmptyIterator","deprecated":true,"navigatorTitle":[{"text":"EmptyIterator","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/emptyiterator","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EmptyIterator"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BitwiseCopyable":{"title":"BitwiseCopyable","abstract":[],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BitwiseCopyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","url":"\/documentation\/compute\/bitwisecopyable","navigatorTitle":[{"kind":"identifier","text":"BitwiseCopyable"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/pointwiseMin(_:_:)-39txi":{"url":"\/documentation\/compute\/pointwisemin(_:_:)-39txi","role":"symbol","title":"pointwiseMin(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"pointwiseMin"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/pointwiseMin(_:_:)-39txi","abstract":[{"type":"text","text":"The lanewise minimum of two vectors."}],"type":"topic","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/StringLiteralConvertible":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringLiteralConvertible","role":"symbol","title":"StringLiteralConvertible","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"StringLiteralConvertible","kind":"identifier"}],"deprecated":true,"url":"\/documentation\/compute\/stringliteralconvertible","navigatorTitle":[{"kind":"identifier","text":"StringLiteralConvertible"}],"abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/RowMajorRectangularCollection":{"url":"\/documentation\/compute\/rowmajorrectangularcollection","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"RowMajorRectangularCollection","kind":"identifier"}],"abstract":[],"kind":"symbol","navigatorTitle":[{"text":"RowMajorRectangularCollection","kind":"identifier"}],"title":"RowMajorRectangularCollection","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RowMajorRectangularCollection","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/StrideThroughIterator":{"abstract":[{"type":"text","text":"An iterator for a "},{"code":"StrideThrough","type":"codeVoice"},{"type":"text","text":" instance."}],"title":"StrideThroughIterator","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideThroughIterator","url":"\/documentation\/compute\/stridethroughiterator","role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"StrideThroughIterator"}],"navigatorTitle":[{"kind":"identifier","text":"StrideThroughIterator"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialKeyPath":{"type":"topic","navigatorTitle":[{"text":"PartialKeyPath","kind":"identifier"}],"abstract":[{"type":"text","text":"A partially type-erased key path, from a concrete root type to any"},{"text":" ","type":"text"},{"type":"text","text":"resulting value type."}],"title":"PartialKeyPath","url":"\/documentation\/compute\/partialkeypath","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialKeyPath","role":"symbol","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"PartialKeyPath"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/swap(_:_:)":{"abstract":[{"text":"Exchanges the values of the two arguments.","type":"text"}],"role":"symbol","url":"\/documentation\/compute\/swap(_:_:)","title":"swap(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/swap(_:_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"swap","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/CSignedChar":{"title":"CSignedChar","role":"symbol","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"CSignedChar","kind":"identifier"}],"abstract":[{"type":"text","text":"The C ‘signed char’ type."}],"navigatorTitle":[{"text":"CSignedChar","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/csignedchar","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CSignedChar"},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"type":"topic","title":"Equatable","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","role":"symbol","url":"\/documentation\/compute\/equatable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}]}}}