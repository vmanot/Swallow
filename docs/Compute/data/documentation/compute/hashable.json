{"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable"],"type":"inheritsFrom","title":"Inherits From"},{"title":"Inherited By","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryFloatingPoint","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatingPoint","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/InstantProtocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD-swift.protocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsignedInteger"],"type":"inheritedBy","kind":"relationships"},{"title":"Conforming Types","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyHashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyKeyPath","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AutoreleasingUnsafeMutablePointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bag\/Key","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalMap","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BranchingArray\/CommitID","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BranchingDictionary\/CommitID","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Character","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/Index","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CodingUserInfoKey","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionDifference","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionDifference\/Change","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionDifference\/Index","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ContiguousArray","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary\/Index","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DiscontiguousSlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DiscontiguousSlice\/Index","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Duration","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence\/Index","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatingPointClassification","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatingPointRoundingRule","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatingPointSign","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyPath","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Index","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LinkedList","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Matrix","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MergeSplitSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Mirror\/DisplayStyle-swift.enum","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Never","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ObjectIdentifier","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/OpaquePointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialKeyPath","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeSet","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeSet\/Ranges-swift.struct","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceWritableKeyPath","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Result","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReversedCollection\/Index","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD2","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD3","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD4","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD64","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDMask","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/Index","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/Index","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeIndexPath","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeTraversalAlgorithmType","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt128","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unicode\/CanonicalCombiningClass","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unicode\/GeneralCategory","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unicode\/NumericType","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unicode\/Scalar","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unicode\/UTF32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafePointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/WritableKeyPath"],"type":"conformingTypes","kind":"relationships"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","metadata":{"roleHeading":"Protocol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Hashable"}],"externalID":"s:SH","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"symbolKind":"protocol","role":"symbol","modules":[{"name":"Compute"}],"title":"Hashable"},"sections":[],"abstract":[{"text":"A type that can be hashed into a ","type":"text"},{"code":"Hasher","type":"codeVoice"},{"type":"text","text":" to produce an integer hash value."}],"topicSections":[{"anchor":"Instance-Properties","title":"Instance Properties","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable\/hashValue"]},{"title":"Instance Methods","anchor":"Instance-Methods","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable\/hash(into:)-v52"]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Hashable","kind":"identifier"},{"kind":"text","text":" : "},{"text":"Equatable","preciseIdentifier":"s:SQ","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","kind":"typeIdentifier"}],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"inlineContent":[{"text":"You can use any type that conforms to the ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" protocol in a set or as"},{"text":" ","type":"text"},{"type":"text","text":"a dictionary key. Many types in the standard library conform to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":":"},{"text":" ","type":"text"},{"text":"Strings, integers, floating-point and Boolean values, and even sets are","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"hashable by default. Some other types, such as optionals, arrays and ranges"},{"type":"text","text":" "},{"text":"automatically become hashable when their type arguments implement the same.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Your own custom types can be hashable as well. When you define an"},{"text":" ","type":"text"},{"type":"text","text":"enumeration without associated values, it gains "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" conformance"},{"text":" ","type":"text"},{"text":"automatically, and you can add ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":" conformance to your other custom","type":"text"},{"text":" ","type":"text"},{"text":"types by implementing the ","type":"text"},{"type":"codeVoice","code":"hash(into:)"},{"type":"text","text":" method. For structs whose stored"},{"type":"text","text":" "},{"text":"properties are all ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":", and for enum types that have all-"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" "},{"type":"text","text":"associated values, the compiler is able to provide an implementation of"},{"type":"text","text":" "},{"code":"hash(into:)","type":"codeVoice"},{"type":"text","text":" automatically."}]},{"inlineContent":[{"type":"text","text":"Hashing a value means feeding its essential components into a hash function,"},{"text":" ","type":"text"},{"type":"text","text":"represented by the "},{"type":"codeVoice","code":"Hasher"},{"text":" type. Essential components are those that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"contribute to the type’s implementation of "},{"type":"codeVoice","code":"Equatable"},{"text":". Two instances that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are equal must feed the same values to "},{"code":"Hasher","type":"codeVoice"},{"text":" in ","type":"text"},{"type":"codeVoice","code":"hash(into:)"},{"type":"text","text":", in the"},{"type":"text","text":" "},{"text":"same order.","type":"text"}],"type":"paragraph"},{"level":1,"text":"Conforming to the Hashable Protocol","type":"heading","anchor":"Conforming-to-the-Hashable-Protocol"},{"inlineContent":[{"text":"To use your own custom type in a set or as the key type of a dictionary,","type":"text"},{"text":" ","type":"text"},{"text":"add ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"text":" conformance to your type. The ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":" protocol inherits"},{"text":" ","type":"text"},{"text":"from the ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol, so you must also satisfy that protocol’s"},{"text":" ","type":"text"},{"text":"requirements.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The compiler automatically synthesizes your custom type’s "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"text","text":"requirements when you declare "},{"code":"Hashable","type":"codeVoice"},{"text":" conformance in the type’s original","type":"text"},{"type":"text","text":" "},{"type":"text","text":"declaration and your type meets these criteria:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"For a "},{"type":"codeVoice","code":"struct"},{"type":"text","text":", all its stored properties must conform to "},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For an "},{"type":"codeVoice","code":"enum"},{"type":"text","text":", all its associated values must conform to "},{"type":"codeVoice","code":"Hashable"},{"text":". (An","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":" without associated values has ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" conformance even without"},{"text":" ","type":"text"},{"text":"the declaration.)","type":"text"}]}]}]},{"inlineContent":[{"text":"To customize your type’s ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":" conformance, to adopt ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":" in a","type":"text"},{"text":" ","type":"text"},{"text":"type that doesn’t meet the criteria listed above, or to extend an existing","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type to conform to "},{"type":"codeVoice","code":"Hashable"},{"text":", implement the ","type":"text"},{"code":"hash(into:)","type":"codeVoice"},{"text":" method in your","type":"text"},{"type":"text","text":" "},{"text":"custom type.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In your ","type":"text"},{"type":"codeVoice","code":"hash(into:)"},{"type":"text","text":" implementation, call "},{"code":"combine(_:)","type":"codeVoice"},{"type":"text","text":" on the provided"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Hasher"},{"type":"text","text":" instance with the essential components of your type. To ensure"},{"type":"text","text":" "},{"type":"text","text":"that your type meets the semantic requirements of the "},{"code":"Hashable","type":"codeVoice"},{"text":" and","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocols, it’s a good idea to also customize your type’s"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" conformance to match."}]},{"inlineContent":[{"type":"text","text":"As an example, consider a "},{"code":"GridPoint","type":"codeVoice"},{"text":" type that describes a location in a","type":"text"},{"type":"text","text":" "},{"text":"grid of buttons. Here’s the initial declaration of the ","type":"text"},{"code":"GridPoint","type":"codeVoice"},{"text":" type:","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["\/\/\/ A point in an x-y coordinate system.","struct GridPoint {","    var x: Int","    var y: Int","}"]},{"inlineContent":[{"type":"text","text":"You’d like to create a set of the grid points where a user has already"},{"type":"text","text":" "},{"type":"text","text":"tapped. Because the "},{"code":"GridPoint","type":"codeVoice"},{"type":"text","text":" type is not hashable yet, it can’t be used"},{"type":"text","text":" "},{"text":"in a set. To add ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" conformance, provide an "},{"type":"codeVoice","code":"=="},{"type":"text","text":" operator function"},{"type":"text","text":" "},{"text":"and implement the ","type":"text"},{"type":"codeVoice","code":"hash(into:)"},{"type":"text","text":" method."}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["extension GridPoint: Hashable {","    static func == (lhs: GridPoint, rhs: GridPoint) -> Bool {","        return lhs.x == rhs.x && lhs.y == rhs.y","    }","","    func hash(into hasher: inout Hasher) {","        hasher.combine(x)","        hasher.combine(y)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"hash(into:)","type":"codeVoice"},{"type":"text","text":" method in this example feeds the grid point’s "},{"code":"x","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"y","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"properties into the provided hasher. These properties are the same ones"},{"text":" ","type":"text"},{"type":"text","text":"used to test for equality in the "},{"type":"codeVoice","code":"=="},{"text":" operator function.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that "},{"code":"GridPoint","type":"codeVoice"},{"type":"text","text":" conforms to the "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":" protocol, you can create a"},{"text":" ","type":"text"},{"type":"text","text":"set of previously tapped grid points."}]},{"type":"codeListing","syntax":null,"code":["var tappedPoints: Set = [GridPoint(x: 2, y: 3), GridPoint(x: 4, y: 1)]","let nextTap = GridPoint(x: 0, y: 1)","if tappedPoints.contains(nextTap) {","    print(\"Already tapped at (\\(nextTap.x), \\(nextTap.y)).\")","} else {","    tappedPoints.insert(nextTap)","    print(\"New tap detected at (\\(nextTap.x), \\(nextTap.y)).\")","}","\/\/ Prints \"New tap detected at (0, 1).\")"]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/hashable"]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceWritableKeyPath":{"title":"ReferenceWritableKeyPath","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"ReferenceWritableKeyPath","kind":"identifier"}],"navigatorTitle":[{"text":"ReferenceWritableKeyPath","kind":"identifier"}],"url":"\/documentation\/compute\/referencewritablekeypath","abstract":[{"type":"text","text":"A key path that supports reading from and writing to the resulting value"},{"text":" ","type":"text"},{"text":"with reference semantics.","type":"text"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceWritableKeyPath","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/StringProtocol":{"url":"\/documentation\/compute\/stringprotocol","role":"symbol","abstract":[{"type":"text","text":"A type that can represent a string as a collection of characters."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","title":"StringProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StringProtocol","kind":"identifier"}],"navigatorTitle":[{"text":"StringProtocol","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer":{"role":"symbol","abstract":[{"text":"A raw pointer for accessing untyped data.","type":"text"}],"title":"UnsafeRawPointer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafeRawPointer"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer","kind":"symbol","navigatorTitle":[{"text":"UnsafeRawPointer","kind":"identifier"}],"url":"\/documentation\/compute\/unsaferawpointer","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Double":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double","abstract":[{"text":"A double-precision, floating-point value type.","type":"text"}],"title":"Double","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Double","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"Double","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/compute\/double"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bag/Key":{"url":"\/documentation\/compute\/bag\/key","role":"symbol","title":"Bag.Key","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Key"}],"navigatorTitle":[{"kind":"identifier","text":"Key"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bag\/Key","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD32":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SIMD32","kind":"identifier"}],"title":"SIMD32","navigatorTitle":[{"kind":"identifier","text":"SIMD32"}],"type":"topic","abstract":[{"type":"text","text":"A vector of 32 scalar values."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD32","url":"\/documentation\/compute\/simd32","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice":{"url":"\/documentation\/compute\/arrayslice","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArraySlice"}],"conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"navigatorTitle":[{"text":"ArraySlice","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A slice of an "},{"code":"Array","type":"codeVoice"},{"type":"text","text":", "},{"code":"ContiguousArray","type":"codeVoice"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"ArraySlice"},{"text":" instance.","type":"text"}],"title":"ArraySlice","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64":{"url":"\/documentation\/compute\/int64","title":"Int64","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int64"}],"abstract":[{"type":"text","text":"A 64-bit signed integer value"},{"text":" ","type":"text"},{"text":"type.","type":"text"}],"navigatorTitle":[{"text":"Int64","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt":{"kind":"symbol","navigatorTitle":[{"text":"UInt","kind":"identifier"}],"type":"topic","title":"UInt","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt","abstract":[{"text":"An unsigned integer value type.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt","kind":"identifier"}],"url":"\/documentation\/compute\/uint"},"doc://com.swallow.documentation.Compute/documentation/Compute/DiscontiguousSlice":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"DiscontiguousSlice","kind":"identifier"}],"kind":"symbol","title":"DiscontiguousSlice","abstract":[{"type":"text","text":"A collection wrapper that provides access to the elements of a collection,"},{"text":" ","type":"text"},{"type":"text","text":"indexed by a set of indices."}],"url":"\/documentation\/compute\/discontiguousslice","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DiscontiguousSlice"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Base.Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DiscontiguousSlice"},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"type":"topic","title":"Equatable","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","role":"symbol","url":"\/documentation\/compute\/equatable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/MergeSplitSequence":{"type":"topic","navigatorTitle":[{"text":"MergeSplitSequence","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]},"abstract":[],"title":"MergeSplitSequence","url":"\/documentation\/compute\/mergesplitsequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MergeSplitSequence","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"MergeSplitSequence","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileSequence/Index":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Index"}],"kind":"symbol","title":"LazyPrefixWhileSequence.Index","abstract":[{"type":"text","text":"A position in a "},{"code":"LazyPrefixWhileCollection","type":"codeVoice"},{"type":"text","text":" or"},{"type":"text","text":" "},{"code":"LazyPrefixWhileBidirectionalCollection","type":"codeVoice"},{"type":"text","text":" instance."}],"url":"\/documentation\/compute\/lazyprefixwhilesequence\/index","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Index","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Base","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Collection","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Base.Index"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Index"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD16":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SIMD16","kind":"identifier"}],"type":"topic","title":"SIMD16","url":"\/documentation\/compute\/simd16","navigatorTitle":[{"kind":"identifier","text":"SIMD16"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD16","kind":"symbol","role":"symbol","abstract":[{"text":"A vector of 16 scalar values.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt64":{"navigatorTitle":[{"text":"UInt64","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","title":"UInt64","abstract":[{"text":"A 64-bit unsigned integer value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type."}],"url":"\/documentation\/compute\/uint64","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt64","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64"},"doc://com.swallow.documentation.Compute/documentation/Compute/CodingUserInfoKey":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CodingUserInfoKey","navigatorTitle":[{"kind":"identifier","text":"CodingUserInfoKey"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"CodingUserInfoKey","kind":"identifier"}],"role":"symbol","type":"topic","abstract":[{"type":"text","text":"A user-defined key for providing context during encoding and decoding."}],"title":"CodingUserInfoKey","url":"\/documentation\/compute\/codinguserinfokey"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Array"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"An ordered, random-access collection."}],"title":"Array","url":"\/documentation\/compute\/array","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array","role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Array","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Int8"}],"url":"\/documentation\/compute\/int8","title":"Int8","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Int8"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8","abstract":[{"text":"An 8-bit signed integer value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD64":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SIMD64"}],"abstract":[{"type":"text","text":"A vector of 64 scalar values."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD64","navigatorTitle":[{"text":"SIMD64","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/simd64","title":"SIMD64"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyHashable":{"role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyHashable","kind":"identifier"}],"abstract":[{"text":"A type-erased hashable value.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyHashable","navigatorTitle":[{"text":"AnyHashable","kind":"identifier"}],"url":"\/documentation\/compute\/anyhashable","title":"AnyHashable","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer":{"title":"UnsafeMutablePointer","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer","type":"topic","url":"\/documentation\/compute\/unsafemutablepointer","kind":"symbol","abstract":[{"text":"A pointer for accessing and manipulating data of a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specific type."}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnsafeMutablePointer"}],"navigatorTitle":[{"text":"UnsafeMutablePointer","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Pointee","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable/hashValue":{"type":"topic","role":"symbol","kind":"symbol","title":"hashValue","abstract":[{"type":"text","text":"The hash value."}],"url":"\/documentation\/compute\/hashable\/hashvalue","required":true,"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hashValue","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable\/hashValue"},"doc://com.swallow.documentation.Compute/documentation/Compute/String":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"String"}],"title":"String","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"String","kind":"identifier"}],"abstract":[{"type":"text","text":"A Unicode string value that is a collection of characters."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/string"},"doc://com.swallow.documentation.Compute/documentation/Compute/Unicode/Scalar":{"title":"Unicode.Scalar","type":"topic","kind":"symbol","navigatorTitle":[{"text":"Scalar","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Scalar","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unicode\/Scalar","abstract":[{"type":"text","text":"A Unicode scalar value."}],"role":"symbol","url":"\/documentation\/compute\/unicode\/scalar"},"doc://com.swallow.documentation.Compute/documentation/Compute/String/Index":{"abstract":[{"type":"text","text":"A position of a character or code unit in a string."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Index","kind":"identifier"}],"url":"\/documentation\/compute\/string\/index","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/Index","kind":"symbol","title":"String.Index","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Index"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Never":{"title":"Never","navigatorTitle":[{"kind":"identifier","text":"Never"}],"abstract":[{"type":"text","text":"A type that has no values and can’t be constructed."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Never"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Never","role":"symbol","type":"topic","url":"\/documentation\/compute\/never"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD8":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD8","title":"SIMD8","abstract":[{"text":"A vector of eight scalar values.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"SIMD8","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/simd8","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SIMD8","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Unicode/GeneralCategory":{"url":"\/documentation\/compute\/unicode\/generalcategory","navigatorTitle":[{"kind":"identifier","text":"GeneralCategory"}],"role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"GeneralCategory","kind":"identifier"}],"abstract":[{"type":"text","text":"The most general classification of a Unicode scalar."}],"type":"topic","title":"Unicode.GeneralCategory","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unicode\/GeneralCategory"},"doc://com.swallow.documentation.Compute/documentation/Compute/InstantProtocol":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/InstantProtocol","abstract":[],"url":"\/documentation\/compute\/instantprotocol","kind":"symbol","title":"InstantProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"InstantProtocol","kind":"identifier"}],"type":"topic","role":"symbol","navigatorTitle":[{"text":"InstantProtocol","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Optional"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Wrapped","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"A type that represents either a wrapped value or the absence of a value."}],"title":"Optional","url":"\/documentation\/compute\/optional","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional","role":"symbol","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Optional","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/FloatingPoint":{"url":"\/documentation\/compute\/floatingpoint","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatingPoint","title":"FloatingPoint","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FloatingPoint","kind":"identifier"}],"navigatorTitle":[{"text":"FloatingPoint","kind":"identifier"}],"abstract":[{"text":"A floating-point numeric type.","type":"text"}],"kind":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/Index":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/Index","title":"Set.Index","abstract":[{"type":"text","text":"The position of an element in a set."}],"url":"\/documentation\/compute\/set\/index","navigatorTitle":[{"kind":"identifier","text":"Index"}],"type":"topic","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Index","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD2":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SIMD2"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD2","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SIMD2"}],"abstract":[{"text":"A vector of two scalar values.","type":"text"}],"title":"SIMD2","url":"\/documentation\/compute\/simd2","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Range":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"Range","kind":"identifier"}],"kind":"symbol","title":"Range","abstract":[{"type":"text","text":"A half-open interval from a lower bound up to, but not including, an upper"},{"text":" ","type":"text"},{"type":"text","text":"bound."}],"url":"\/documentation\/compute\/range","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Range"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range"},"doc://com.swallow.documentation.Compute/documentation/Compute/Mirror/DisplayStyle-swift.enum":{"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"DisplayStyle","kind":"identifier"}],"role":"symbol","url":"\/documentation\/compute\/mirror\/displaystyle-swift.enum","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Mirror\/DisplayStyle-swift.enum","abstract":[{"text":"A suggestion of how a mirror’s subject is to be interpreted.","type":"text"}],"kind":"symbol","title":"Mirror.DisplayStyle","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DisplayStyle"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable/hash(into:)-v52":{"required":true,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable\/hash(into:)-v52","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"hash"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Hasher","kind":"typeIdentifier","preciseIdentifier":"s:s6HasherV"},{"kind":"text","text":")"}],"defaultImplementations":2,"title":"hash(into:)","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Hashes the essential components of this value by feeding them into the"},{"text":" ","type":"text"},{"type":"text","text":"given hasher."}],"type":"topic","url":"\/documentation\/compute\/hashable\/hash(into:)-v52"},"doc://com.swallow.documentation.Compute/documentation/Compute/BidirectionalMap":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalMap","url":"\/documentation\/compute\/bidirectionalmap","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalMap"}],"navigatorTitle":[{"text":"BidirectionalMap","kind":"identifier"}],"title":"BidirectionalMap","abstract":[{"type":"text","text":"A bidirectional map between two "},{"type":"codeVoice","code":"Hashable"},{"text":" types.","type":"text"}],"kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Left"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Right"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyKeyPath":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyKeyPath","url":"\/documentation\/compute\/anykeypath","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"AnyKeyPath","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"AnyKeyPath"}],"role":"symbol","kind":"symbol","abstract":[{"text":"A type-erased key path, from any root type to any resulting value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type."}],"type":"topic","title":"AnyKeyPath"},"doc://com.swallow.documentation.Compute/documentation/Compute/ContiguousArray":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ContiguousArray"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"A contiguously stored array."}],"title":"ContiguousArray","url":"\/documentation\/compute\/contiguousarray","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ContiguousArray","role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContiguousArray","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD4":{"role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SIMD4","kind":"identifier"}],"navigatorTitle":[{"text":"SIMD4","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD4","abstract":[{"type":"text","text":"A vector of four scalar values."}],"title":"SIMD4","url":"\/documentation\/compute\/simd4"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceTree":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ReferenceTree"}],"kind":"symbol","title":"ReferenceTree","abstract":[{"type":"text","text":"A simple reference-based tree data structure for Swift."}],"url":"\/documentation\/compute\/referencetree","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ReferenceTree","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree"},"doc://com.swallow.documentation.Compute/documentation/Compute/CollectionDifference/Change":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Change"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"ChangeElement","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"A single change to a collection."}],"title":"CollectionDifference.Change","url":"\/documentation\/compute\/collectiondifference\/change","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionDifference\/Change","role":"symbol","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Change","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BinaryInteger"}],"navigatorTitle":[{"kind":"identifier","text":"BinaryInteger"}],"url":"\/documentation\/compute\/binaryinteger","type":"topic","abstract":[{"type":"text","text":"An integer type with a binary representation."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","title":"BinaryInteger","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryFloatingPoint":{"navigatorTitle":[{"text":"BinaryFloatingPoint","kind":"identifier"}],"type":"topic","title":"BinaryFloatingPoint","abstract":[{"text":"A radix-2 (binary) floating-point type.","type":"text"}],"url":"\/documentation\/compute\/binaryfloatingpoint","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BinaryFloatingPoint","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryFloatingPoint","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Result":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"Result","kind":"identifier"}],"kind":"symbol","title":"Result","abstract":[{"type":"text","text":"A value that represents either a success or a failure, including an"},{"text":" ","type":"text"},{"type":"text","text":"associated value in each case."}],"url":"\/documentation\/compute\/result","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Result"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Success"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":", "},{"code":"Failure","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Error"},{"type":"text","text":", and "},{"code":"Failure","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Result"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer":{"kind":"symbol","type":"topic","abstract":[{"text":"A raw pointer for accessing and manipulating untyped data.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer","url":"\/documentation\/compute\/unsafemutablerawpointer","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnsafeMutableRawPointer"}],"title":"UnsafeMutableRawPointer","navigatorTitle":[{"kind":"identifier","text":"UnsafeMutableRawPointer"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Set":{"title":"Set","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Set","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Set"}],"abstract":[{"type":"text","text":"An unordered collection of unique elements."}],"conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/set"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialKeyPath":{"type":"topic","navigatorTitle":[{"text":"PartialKeyPath","kind":"identifier"}],"abstract":[{"type":"text","text":"A partially type-erased key path, from a concrete root type to any"},{"text":" ","type":"text"},{"type":"text","text":"resulting value type."}],"title":"PartialKeyPath","url":"\/documentation\/compute\/partialkeypath","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialKeyPath","role":"symbol","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"PartialKeyPath"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Matrix":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"Matrix","kind":"identifier"}],"kind":"symbol","title":"Matrix","abstract":[],"url":"\/documentation\/compute\/matrix","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Matrix","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Matrix"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt16":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UInt16","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UInt16"}],"title":"UInt16","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt16","url":"\/documentation\/compute\/uint16","kind":"symbol","role":"symbol","abstract":[{"text":"A 16-bit unsigned integer value","type":"text"},{"text":" ","type":"text"},{"text":"type.","type":"text"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/Index":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Index"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":", "},{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Strideable","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Bound.Stride"},{"type":"text","text":" conforms to "},{"code":"SignedInteger","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"A type that represents a position in the collection."}],"title":"ClosedRange.Index","url":"\/documentation\/compute\/closedrange\/index","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/Index","role":"symbol","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Index","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ReversedCollection/Index":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"Index","kind":"identifier"}],"kind":"symbol","title":"ReversedCollection.Index","abstract":[{"type":"text","text":"An index that traverses the same positions as an underlying index,"},{"text":" ","type":"text"},{"type":"text","text":"with inverted traversal direction."}],"url":"\/documentation\/compute\/reversedcollection\/index","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Index"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"code":"BidirectionalCollection","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Base.Index","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReversedCollection\/Index"},"doc://com.swallow.documentation.Compute/documentation/Compute/Unicode/UTF32":{"role":"symbol","abstract":[],"url":"\/documentation\/compute\/unicode\/utf32","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unicode\/UTF32","title":"Unicode.UTF32","type":"topic","navigatorTitle":[{"text":"UTF32","kind":"identifier"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"UTF32","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/AutoreleasingUnsafeMutablePointer":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AutoreleasingUnsafeMutablePointer"}],"url":"\/documentation\/compute\/autoreleasingunsafemutablepointer","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A mutable pointer addressing an Objective-C reference that doesn’t own its"},{"text":" ","type":"text"},{"type":"text","text":"target."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AutoreleasingUnsafeMutablePointer","navigatorTitle":[{"text":"AutoreleasingUnsafeMutablePointer","kind":"identifier"}],"title":"AutoreleasingUnsafeMutablePointer"},"doc://com.swallow.documentation.Compute/documentation/Compute/FlattenSequence/Index":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Index"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Base","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":", "},{"code":"Base.Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Base.Index"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Base.Element.Index","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"A position in a FlattenCollection"}],"title":"FlattenSequence.Index","url":"\/documentation\/compute\/flattensequence\/index","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence\/Index","role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Index","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CollectionDifference/Index":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Index"}],"kind":"symbol","title":"CollectionDifference.Index","abstract":[{"type":"text","text":"The position of a collection difference."}],"url":"\/documentation\/compute\/collectiondifference\/index","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Index","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"ChangeElement","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" and "},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":"."}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionDifference\/Index"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int32","kind":"identifier"}],"abstract":[{"text":"A 32-bit signed integer value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type."}],"kind":"symbol","navigatorTitle":[{"text":"Int32","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/int32","title":"Int32","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int16":{"title":"Int16","abstract":[{"text":"A 16-bit signed integer value","type":"text"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int16","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int16"}],"type":"topic","url":"\/documentation\/compute\/int16","navigatorTitle":[{"kind":"identifier","text":"Int16"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CollectionDifference":{"type":"topic","navigatorTitle":[{"text":"CollectionDifference","kind":"identifier"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"ChangeElement"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"abstract":[{"type":"text","text":"A collection of insertions and removals that describe the difference"},{"text":" ","type":"text"},{"type":"text","text":"between two ordered collection states."}],"title":"CollectionDifference","url":"\/documentation\/compute\/collectiondifference","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionDifference","role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CollectionDifference"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/KeyPath":{"type":"topic","role":"symbol","url":"\/documentation\/compute\/keypath","title":"KeyPath","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeyPath"}],"abstract":[{"type":"text","text":"A key path from a specific root type to a specific resulting value type."}],"navigatorTitle":[{"text":"KeyPath","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyPath"},"doc://com.swallow.documentation.Compute/documentation/Compute/SignedInteger":{"abstract":[{"type":"text","text":"An integer type that can represent both positive and negative values."}],"kind":"symbol","url":"\/documentation\/compute\/signedinteger","navigatorTitle":[{"kind":"identifier","text":"SignedInteger"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedInteger","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SignedInteger","kind":"identifier"}],"title":"SignedInteger"},"doc://com.swallow.documentation.Compute/documentation/Compute/Float":{"type":"topic","abstract":[{"text":"A single-precision, floating-point value type.","type":"text"}],"url":"\/documentation\/compute\/float","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Float"}],"navigatorTitle":[{"text":"Float","kind":"identifier"}],"title":"Float"},"doc://com.swallow.documentation.Compute/documentation/Compute/FloatingPointRoundingRule":{"kind":"symbol","navigatorTitle":[{"text":"FloatingPointRoundingRule","kind":"identifier"}],"type":"topic","title":"FloatingPointRoundingRule","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatingPointRoundingRule","abstract":[{"type":"text","text":"A rule for rounding a floating-point number."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FloatingPointRoundingRule","kind":"identifier"}],"url":"\/documentation\/compute\/floatingpointroundingrule"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafePointer":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafePointer","title":"UnsafePointer","url":"\/documentation\/compute\/unsafepointer","kind":"symbol","abstract":[{"type":"text","text":"A pointer for accessing data of a specific type."}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"UnsafePointer","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UnsafePointer"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Pointee"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeSet":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RangeSet"}],"kind":"symbol","title":"RangeSet","abstract":[{"type":"text","text":"A set of values of any comparable type, represented by ranges."}],"url":"\/documentation\/compute\/rangeset","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RangeSet","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" and "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeSet"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsignedInteger":{"url":"\/documentation\/compute\/unsignedinteger","abstract":[{"type":"text","text":"An integer type that can represent only nonnegative values."}],"kind":"symbol","navigatorTitle":[{"text":"UnsignedInteger","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsignedInteger","title":"UnsignedInteger","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsignedInteger"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/OpaquePointer":{"role":"symbol","navigatorTitle":[{"text":"OpaquePointer","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OpaquePointer","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/OpaquePointer","type":"topic","title":"OpaquePointer","kind":"symbol","abstract":[{"type":"text","text":"A wrapper around an opaque C pointer."}],"url":"\/documentation\/compute\/opaquepointer"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Hashable"}],"title":"Hashable","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that can be hashed into a "},{"type":"codeVoice","code":"Hasher"},{"type":"text","text":" to produce an integer hash value."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","url":"\/documentation\/compute\/hashable","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring":{"navigatorTitle":[{"kind":"identifier","text":"Substring"}],"url":"\/documentation\/compute\/substring","title":"Substring","abstract":[{"text":"A slice of a string.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Substring","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeSet/Ranges-swift.struct":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Ranges"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" and "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"A collection of the ranges that make up a range set."}],"title":"RangeSet.Ranges","url":"\/documentation\/compute\/rangeset\/ranges-swift.struct","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeSet\/Ranges-swift.struct","role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Ranges","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","title":"UInt32","abstract":[{"type":"text","text":"A 32-bit unsigned integer value"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"UInt32","kind":"identifier"}],"url":"\/documentation\/compute\/uint32","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt32","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ObjectIdentifier":{"title":"ObjectIdentifier","navigatorTitle":[{"text":"ObjectIdentifier","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/objectidentifier","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObjectIdentifier","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ObjectIdentifier","abstract":[{"type":"text","text":"A unique identifier for a class instance or metatype."}],"role":"symbol","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ClosedRange"}],"kind":"symbol","title":"ClosedRange","abstract":[{"type":"text","text":"An interval from a lower bound up to, and including, an upper bound."}],"url":"\/documentation\/compute\/closedrange","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ClosedRange","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" and "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange"},"doc://com.swallow.documentation.Compute/documentation/Compute/Character":{"title":"Character","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Character","abstract":[{"type":"text","text":"A single extended grapheme cluster that approximates a user-perceived"},{"type":"text","text":" "},{"text":"character.","type":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/compute\/character","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Character"}],"navigatorTitle":[{"kind":"identifier","text":"Character"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BranchingArray/CommitID":{"title":"BranchingArray.CommitID","url":"\/documentation\/compute\/branchingarray\/commitid","role":"symbol","type":"topic","abstract":[],"conformance":{"constraints":[{"type":"codeVoice","code":"Branch"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BranchingArray\/CommitID","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"CommitID","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"CommitID"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMDMask":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SIMDMask"}],"role":"symbol","title":"SIMDMask","abstract":[],"url":"\/documentation\/compute\/simdmask","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDMask","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SIMDMask"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Float16":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16","navigatorTitle":[{"kind":"identifier","text":"Float16"}],"role":"symbol","title":"Float16","url":"\/documentation\/compute\/float16","type":"topic","abstract":[{"type":"text","text":"A half-precision (16b), floating-point value type."}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Float16"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UInt8","kind":"identifier"}],"navigatorTitle":[{"text":"UInt8","kind":"identifier"}],"title":"UInt8","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8","url":"\/documentation\/compute\/uint8","kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"An 8-bit unsigned integer value"},{"text":" ","type":"text"},{"text":"type.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Unicode/NumericType":{"navigatorTitle":[{"text":"NumericType","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unicode\/NumericType","kind":"symbol","title":"Unicode.NumericType","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"NumericType","kind":"identifier"}],"url":"\/documentation\/compute\/unicode\/numerictype","role":"symbol","abstract":[{"type":"text","text":"The numeric type of a scalar."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Dictionary/Index":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Index"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Key","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":", "},{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"The position of a key-value pair in a dictionary."}],"title":"Dictionary.Index","url":"\/documentation\/compute\/dictionary\/index","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary\/Index","role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Index","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt128":{"url":"\/documentation\/compute\/uint128","type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt128","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UInt128"}],"title":"UInt128","abstract":[{"text":"A 128-bit unsigned integer type.","type":"text"}],"navigatorTitle":[{"text":"UInt128","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/TreeTraversalAlgorithmType":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeTraversalAlgorithmType","title":"TreeTraversalAlgorithmType","abstract":[],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TreeTraversalAlgorithmType"}],"url":"\/documentation\/compute\/treetraversalalgorithmtype","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"TreeTraversalAlgorithmType","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Dictionary":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Dictionary"}],"kind":"symbol","title":"Dictionary","abstract":[{"type":"text","text":"A collection whose elements are key-value pairs."}],"url":"\/documentation\/compute\/dictionary","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Dictionary","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Key","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" and "},{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary"},"doc://com.swallow.documentation.Compute/documentation/Compute/FloatingPointClassification":{"url":"\/documentation\/compute\/floatingpointclassification","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FloatingPointClassification","kind":"identifier"}],"title":"FloatingPointClassification","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatingPointClassification","abstract":[{"text":"The IEEE 754 floating-point classes.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"FloatingPointClassification","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Unicode/CanonicalCombiningClass":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unicode\/CanonicalCombiningClass","type":"topic","title":"Unicode.CanonicalCombiningClass","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"CanonicalCombiningClass","kind":"identifier"}],"navigatorTitle":[{"text":"CanonicalCombiningClass","kind":"identifier"}],"url":"\/documentation\/compute\/unicode\/canonicalcombiningclass","role":"symbol","kind":"symbol","abstract":[{"text":"The classification of a scalar used in the Canonical Ordering Algorithm","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"defined by the Unicode Standard."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int128":{"url":"\/documentation\/compute\/int128","abstract":[{"type":"text","text":"A 128-bit signed integer type."}],"title":"Int128","role":"symbol","navigatorTitle":[{"text":"Int128","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int128"}],"kind":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/TreeIndexPath":{"type":"topic","navigatorTitle":[{"text":"TreeIndexPath","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Tree"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"TreeProtocol"},{"type":"text","text":", "},{"type":"codeVoice","code":"Tree.Children"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Tree.Children.Index","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}]},"abstract":[],"title":"TreeIndexPath","url":"\/documentation\/compute\/treeindexpath","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeIndexPath","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"TreeIndexPath","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD-swift.protocol":{"role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SIMD"}],"navigatorTitle":[{"kind":"identifier","text":"SIMD"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD-swift.protocol","abstract":[{"text":"A SIMD vector of a fixed number of elements.","type":"text"}],"title":"SIMD","url":"\/documentation\/compute\/simd-swift.protocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/FloatingPointSign":{"url":"\/documentation\/compute\/floatingpointsign","title":"FloatingPointSign","abstract":[{"text":"The sign of a floating-point value.","type":"text"}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FloatingPointSign"}],"navigatorTitle":[{"kind":"identifier","text":"FloatingPointSign"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatingPointSign","type":"topic","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"ArrayTree","kind":"identifier"}],"kind":"symbol","title":"ArrayTree","abstract":[],"url":"\/documentation\/compute\/arraytree","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ArrayTree","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"T"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD3":{"role":"symbol","navigatorTitle":[{"text":"SIMD3","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD3","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SIMD3","kind":"identifier"}],"abstract":[{"text":"A vector of three scalar values.","type":"text"}],"title":"SIMD3","url":"\/documentation\/compute\/simd3","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/WritableKeyPath":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/WritableKeyPath","title":"WritableKeyPath","role":"symbol","abstract":[{"text":"A key path that supports reading from and writing to the resulting value.","type":"text"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"WritableKeyPath","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"WritableKeyPath","kind":"identifier"}],"url":"\/documentation\/compute\/writablekeypath"},"doc://com.swallow.documentation.Compute/documentation/Compute/Duration":{"abstract":[{"type":"text","text":"A representation of high precision time."}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Duration","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Duration"}],"url":"\/documentation\/compute\/duration","navigatorTitle":[{"kind":"identifier","text":"Duration"}],"title":"Duration","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/DiscontiguousSlice/Index":{"type":"topic","navigatorTitle":[{"text":"Index","kind":"identifier"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Base.Index","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"abstract":[{"type":"text","text":"A position in a "},{"code":"DiscontiguousSlice","type":"codeVoice"},{"type":"text","text":"."}],"title":"DiscontiguousSlice.Index","url":"\/documentation\/compute\/discontiguousslice\/index","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DiscontiguousSlice\/Index","role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Index"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BranchingDictionary/CommitID":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CommitID"}],"url":"\/documentation\/compute\/branchingdictionary\/commitid","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CommitID","kind":"identifier"}],"abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BranchingDictionary\/CommitID","title":"BranchingDictionary.CommitID","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Branch","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Key"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Value"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/LinkedList":{"abstract":[],"title":"LinkedList","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"LinkedList"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LinkedList","role":"symbol","url":"\/documentation\/compute\/linkedlist","navigatorTitle":[{"text":"LinkedList","kind":"identifier"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger":{"title":"FixedWidthInteger","kind":"symbol","navigatorTitle":[{"text":"FixedWidthInteger","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"FixedWidthInteger","kind":"identifier"}],"abstract":[{"text":"An integer type that uses a fixed size for every instance.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/fixedwidthinteger"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"TreeValue","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/compute\/arraytreechildren","role":"symbol","title":"ArrayTreeChildren","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ArrayTreeChildren","kind":"identifier"}],"abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ArrayTreeChildren"}],"kind":"symbol"}}}