{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/unsafemutablebufferpointer\/index(_:offsetby:limitedby:)"]}],"kind":"symbol","identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer\/index(_:offsetBy:limitedBy:)","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"index"},{"kind":"text","text":"("},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"i"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"offsetBy"},{"kind":"text","text":" "},{"kind":"internalParam","text":"n"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","kind":"typeIdentifier","text":"Int"},{"text":", ","kind":"text"},{"text":"limitedBy","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"limit","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","preciseIdentifier":"s:Si","text":"Int"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int"},{"kind":"text","text":"?"}],"platforms":["macOS"],"languages":["swift"]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A valid index of the collection.","type":"text"}]}],"name":"i"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A valid index of the collection to use as a limit. If"},{"type":"text","text":" "},{"code":"distance > 0","type":"codeVoice"},{"type":"text","text":", a limit that is less than "},{"code":"i","type":"codeVoice"},{"text":" has no effect.","type":"text"},{"text":" ","type":"text"},{"text":"Likewise, if ","type":"text"},{"code":"distance < 0","type":"codeVoice"},{"text":", a limit that is greater than ","type":"text"},{"type":"codeVoice","code":"i"},{"text":" has no","type":"text"},{"type":"text","text":" "},{"type":"text","text":"effect."}]}],"name":"limit"}],"kind":"parameters"},{"content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"inlineContent":[{"type":"text","text":"An index offset by "},{"type":"codeVoice","code":"distance"},{"type":"text","text":" from the index "},{"code":"i","type":"codeVoice"},{"type":"text","text":", unless that"},{"type":"text","text":" "},{"text":"index would be beyond ","type":"text"},{"code":"limit","type":"codeVoice"},{"type":"text","text":" in the direction of movement. In that"},{"text":" ","type":"text"},{"type":"text","text":"case, the method returns "},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"The following example obtains an index advanced four positions from a","type":"text"},{"type":"text","text":" "},{"text":"string’s starting index and then prints the character at that position.","type":"text"},{"type":"text","text":" "},{"text":"The operation doesn’t require going beyond the limiting ","type":"text"},{"type":"codeVoice","code":"s.endIndex"},{"type":"text","text":" "},{"type":"text","text":"value, so it succeeds."}]},{"type":"codeListing","syntax":null,"code":["let s = \"Swift\"","if let i = s.index(s.startIndex, offsetBy: 4, limitedBy: s.endIndex) {","    print(s[i])","}","\/\/ Prints \"t\""]},{"type":"paragraph","inlineContent":[{"text":"The next example attempts to retrieve an index six positions from","type":"text"},{"type":"text","text":" "},{"code":"s.startIndex","type":"codeVoice"},{"text":" but fails, because that distance is beyond the index","type":"text"},{"type":"text","text":" "},{"type":"text","text":"passed as "},{"type":"codeVoice","code":"limit"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let j = s.index(s.startIndex, offsetBy: 6, limitedBy: s.endIndex)","print(j)","\/\/ Prints \"nil\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value passed as "},{"type":"codeVoice","code":"distance"},{"text":" must not offset ","type":"text"},{"type":"codeVoice","code":"i"},{"type":"text","text":" beyond the bounds of"},{"type":"text","text":" "},{"type":"text","text":"the collection, unless the index passed as "},{"type":"codeVoice","code":"limit"},{"type":"text","text":" prevents offsetting"},{"type":"text","text":" "},{"text":"beyond those bounds.","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O(1) if the collection conforms to"},{"type":"text","text":" "},{"code":"RandomAccessCollection","type":"codeVoice"},{"text":"; otherwise, O(","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"k"}]},{"type":"text","text":"), where "},{"inlineContent":[{"type":"text","text":"k"}],"type":"emphasis"},{"text":" is the absolute","type":"text"},{"text":" ","type":"text"},{"text":"value of ","type":"text"},{"code":"distance","type":"codeVoice"},{"type":"text","text":"."}]}],"name":"Complexity","type":"aside","style":"note"}]}],"metadata":{"modules":[{"relatedModules":["Swift"],"name":"Compute"}],"roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"index"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"offsetBy"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"limitedBy","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":"?"}],"externalID":"s:SrsRi_zrlE5index_8offsetBy07limitedC0SiSgSi_S2itF","extendedModule":"Swift","symbolKind":"method","title":"index(_:offsetBy:limitedBy:)","role":"symbol"},"abstract":[{"type":"text","text":"Returns an index that is the specified distance from the given index,"},{"text":" ","type":"text"},{"type":"text","text":"unless that distance is beyond a given limiting index."}],"sections":[],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer\/Collection-Implementations"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableBufferPointer/index(_:offsetBy:limitedBy:)":{"title":"index(_:offsetBy:limitedBy:)","kind":"symbol","abstract":[{"type":"text","text":"Returns an index that is the specified distance from the given index,"},{"text":" ","type":"text"},{"type":"text","text":"unless that distance is beyond a given limiting index."}],"role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"index","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"offsetBy","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":", "},{"text":"limitedBy","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":"?","kind":"text"}],"url":"\/documentation\/compute\/unsafemutablebufferpointer\/index(_:offsetby:limitedby:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer\/index(_:offsetBy:limitedBy:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableBufferPointer/Collection-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer\/Collection-Implementations","kind":"article","title":"Collection Implementations","role":"collectionGroup","type":"topic","abstract":[],"url":"\/documentation\/compute\/unsafemutablebufferpointer\/collection-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableBufferPointer":{"kind":"symbol","url":"\/documentation\/compute\/unsafemutablebufferpointer","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UnsafeMutableBufferPointer","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UnsafeMutableBufferPointer"}],"abstract":[{"type":"text","text":"A nonowning collection interface to a buffer of mutable"},{"text":" ","type":"text"},{"text":"elements stored contiguously in memory.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer","title":"UnsafeMutableBufferPointer","type":"topic","role":"symbol"}}}