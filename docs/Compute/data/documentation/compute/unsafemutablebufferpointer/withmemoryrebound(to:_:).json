{"metadata":{"symbolKind":"method","externalID":"s:SrsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_Sryqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lF","role":"symbol","extendedModule":"Swift","title":"withMemoryRebound(to:_:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"withMemoryRebound","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":", ","kind":"text"},{"text":"E","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Result","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"text":".Type, (","kind":"text"},{"preciseIdentifier":"s:Sr","kind":"typeIdentifier","text":"UnsafeMutableBufferPointer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":"("},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}],"modules":[{"name":"Compute","relatedModules":["Swift"]}]},"sections":[],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer"]]},"abstract":[{"type":"text","text":"Executes the given closure while temporarily binding the memory referenced"},{"text":" ","type":"text"},{"text":"by this buffer to the given type.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withMemoryRebound","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":", ","kind":"text"},{"text":"E","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Result"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"type"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":".Type, "},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"body"},{"text":": (","kind":"text"},{"text":"UnsafeMutableBufferPointer","preciseIdentifier":"s:Sr","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":"("},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"text":" ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"E","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Error","kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":" : ~Copyable, ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":" : ~Copyable"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"type","content":[{"type":"paragraph","inlineContent":[{"text":"The type to temporarily bind the memory referenced by this","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"buffer. The type "},{"type":"codeVoice","code":"T"},{"type":"text","text":" must be layout compatible"},{"text":" ","type":"text"},{"text":"with the pointer’s ","type":"text"},{"type":"codeVoice","code":"Element"},{"text":" type.","type":"text"}]}]},{"name":"body","content":[{"inlineContent":[{"text":"A closure that takes a mutable typed buffer to the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"same memory as this buffer, only bound to type "},{"code":"T","type":"codeVoice"},{"text":". The buffer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parameter contains a number of complete instances of "},{"code":"T","type":"codeVoice"},{"type":"text","text":" based"},{"type":"text","text":" "},{"type":"text","text":"on the capacity of the original buffer and the stride of "},{"code":"Element","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"The closure’s buffer argument is valid only for the duration of the","type":"text"},{"type":"text","text":" "},{"text":"closure’s execution. If ","type":"text"},{"code":"body","type":"codeVoice"},{"text":" has a return value, that value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is also used as the return value for the "},{"code":"withMemoryRebound(to:_:)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"method."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"text":"Return Value","anchor":"return-value","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The return value, if any, of the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" closure parameter."}]}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"Use this method when you have a buffer of memory bound to one type and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you need to access that memory as a buffer of another type. Accessing"},{"type":"text","text":" "},{"type":"text","text":"memory as type "},{"code":"T","type":"codeVoice"},{"text":" requires that the memory be bound to that type. A","type":"text"},{"type":"text","text":" "},{"type":"text","text":"memory location may only be bound to one type at a time, so accessing"},{"type":"text","text":" "},{"type":"text","text":"the same memory as an unrelated type without first rebinding the memory"},{"type":"text","text":" "},{"type":"text","text":"is undefined."}]},{"inlineContent":[{"text":"The number of instances of ","type":"text"},{"code":"T","type":"codeVoice"},{"type":"text","text":" referenced by the rebound buffer may be"},{"type":"text","text":" "},{"type":"text","text":"different than the number of instances of "},{"code":"Element","type":"codeVoice"},{"type":"text","text":" referenced by the"},{"type":"text","text":" "},{"text":"original buffer. The number of instances of ","type":"text"},{"code":"T","type":"codeVoice"},{"text":" will be calculated","type":"text"},{"type":"text","text":" "},{"type":"text","text":"at runtime."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any instance of "},{"type":"codeVoice","code":"T"},{"type":"text","text":" within the re-bound region may be initialized or"},{"type":"text","text":" "},{"text":"uninitialized. Every instance of ","type":"text"},{"type":"codeVoice","code":"Pointee"},{"text":" overlapping with a given","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"instance of "},{"type":"codeVoice","code":"T"},{"type":"text","text":" should have the same initialization state (i.e."},{"type":"text","text":" "},{"type":"text","text":"initialized or uninitialized.) Accessing a "},{"code":"T","type":"codeVoice"},{"type":"text","text":" whose underlying"},{"type":"text","text":" "},{"code":"Pointee","type":"codeVoice"},{"text":" storage is in a mixed initialization state shall be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"undefined behaviour."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because this buffer’s memory is no longer bound to its "},{"code":"Element","type":"codeVoice"},{"type":"text","text":" type"},{"type":"text","text":" "},{"type":"text","text":"while the "},{"code":"body","type":"codeVoice"},{"text":" closure executes, do not access memory using the","type":"text"},{"type":"text","text":" "},{"text":"original buffer from within ","type":"text"},{"type":"codeVoice","code":"body"},{"text":". Instead, use the ","type":"text"},{"type":"codeVoice","code":"body"},{"text":" closure’s","type":"text"},{"type":"text","text":" "},{"type":"text","text":"buffer argument to access the values in memory as instances of type"},{"text":" ","type":"text"},{"code":"T","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"After executing ","type":"text"},{"type":"codeVoice","code":"body"},{"type":"text","text":", this method rebinds memory back to the original"},{"type":"text","text":" "},{"code":"Element","type":"codeVoice"},{"type":"text","text":" type."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Only use this method to rebind the buffer’s memory to a type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that is layout compatible with the currently bound "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" type."},{"text":" ","type":"text"},{"text":"The stride of the temporary type (","type":"text"},{"type":"codeVoice","code":"T"},{"text":") may be an integer multiple","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or a whole fraction of "},{"code":"Element","type":"codeVoice"},{"text":"‘s stride.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"To bind a region of memory to a type that does not match these"},{"type":"text","text":" "},{"type":"text","text":"requirements, convert the buffer to a raw buffer and use the"},{"type":"text","text":" "},{"text":"raw buffer’s ","type":"text"},{"type":"codeVoice","code":"withMemoryRebound(to:)"},{"type":"text","text":" method."},{"text":" ","type":"text"},{"text":"If ","type":"text"},{"type":"codeVoice","code":"T"},{"text":" and ","type":"text"},{"code":"Element","type":"codeVoice"},{"type":"text","text":" have different alignments, this buffer’s"},{"text":" ","type":"text"},{"type":"codeVoice","code":"baseAddress"},{"type":"text","text":" must be aligned with the larger of the two alignments."}]}],"type":"aside","name":"Note"}]}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/unsafemutablebufferpointer\/withmemoryrebound(to:_:)"]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer\/withMemoryRebound(to:_:)","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Error":{"url":"\/documentation\/compute\/error","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Error"}],"navigatorTitle":[{"text":"Error","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Error","type":"topic","role":"symbol","abstract":[{"type":"text","text":"A type representing an error value that can be thrown."}],"kind":"symbol","title":"Error"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableBufferPointer":{"kind":"symbol","url":"\/documentation\/compute\/unsafemutablebufferpointer","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UnsafeMutableBufferPointer","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UnsafeMutableBufferPointer"}],"abstract":[{"type":"text","text":"A nonowning collection interface to a buffer of mutable"},{"text":" ","type":"text"},{"text":"elements stored contiguously in memory.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer","title":"UnsafeMutableBufferPointer","type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableBufferPointer/withMemoryRebound(to:_:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withMemoryRebound","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"E","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Result","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type, ("},{"text":"UnsafeMutableBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:Sr"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":") -> "},{"text":"Result","kind":"typeIdentifier"}],"abstract":[{"text":"Executes the given closure while temporarily binding the memory referenced","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by this buffer to the given type."}],"url":"\/documentation\/compute\/unsafemutablebufferpointer\/withmemoryrebound(to:_:)","title":"withMemoryRebound(to:_:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer\/withMemoryRebound(to:_:)","type":"topic","role":"symbol"}}}