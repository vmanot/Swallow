{"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer\/withContiguousMutableStorageIfAvailable(_:)-3okf","interfaceLanguage":"swift"},"sections":[],"metadata":{"role":"symbol","extendedModule":"Swift","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withContiguousMutableStorageIfAvailable","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sr","text":"UnsafeMutableBufferPointer"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"text":"?","kind":"text"}],"title":"withContiguousMutableStorageIfAvailable(_:)","externalID":"s:Sr39withContiguousMutableStorageIfAvailableyqd__Sgqd__SryxGzKXEKlF","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"symbolKind":"method","roleHeading":"Instance Method"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/unsafemutablebufferpointer\/withcontiguousmutablestorageifavailable(_:)-3okf"]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer\/MutableCollection-Implementations"]]},"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"mutating"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withContiguousMutableStorageIfAvailable","kind":"identifier"},{"kind":"text","text":"<"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"body"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"UnsafeMutableBufferPointer","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer","preciseIdentifier":"s:Sr"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":"?"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"name":"body","content":[{"type":"paragraph","inlineContent":[{"text":"A closure that receives an in-out","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"UnsafeMutableBufferPointer"},{"text":" to the collection’s contiguous storage.","type":"text"}]}]}],"kind":"parameters"},{"content":[{"level":2,"text":"Return Value","type":"heading","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value returned from "},{"type":"codeVoice","code":"body"},{"text":", unless the collection doesn’t","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"support contiguous storage, in which case the method ignores "},{"code":"body","type":"codeVoice"},{"text":" and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}],"kind":"content"},{"content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method calls "},{"type":"codeVoice","code":"body(buffer)"},{"type":"text","text":", where "},{"type":"codeVoice","code":"buffer"},{"type":"text","text":" provides access to the"},{"type":"text","text":" "},{"type":"text","text":"contiguous mutable storage of the entire collection. If the contiguous"},{"type":"text","text":" "},{"type":"text","text":"storage doesn’t exist, the collection creates it. If the collection"},{"type":"text","text":" "},{"type":"text","text":"doesn’t support an internal representation in the form of contiguous"},{"text":" ","type":"text"},{"text":"mutable storage, this method doesn’t call ","type":"text"},{"code":"body","type":"codeVoice"},{"type":"text","text":" — it immediately"},{"text":" ","type":"text"},{"type":"text","text":"returns "},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"The optimizer can often eliminate bounds- and uniqueness-checking"},{"type":"text","text":" "},{"type":"text","text":"within an algorithm. When that fails, however, invoking the same"},{"type":"text","text":" "},{"type":"text","text":"algorithm on the "},{"code":"buffer","type":"codeVoice"},{"type":"text","text":" argument may let you trade safety for speed."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Always perform any necessary cleanup in the closure, because the"},{"type":"text","text":" "},{"type":"text","text":"method makes no guarantees about the state of the collection if the"},{"text":" ","type":"text"},{"type":"text","text":"closure throws an error. Your changes to the collection may be absent"},{"type":"text","text":" "},{"type":"text","text":"from the collection after throwing the error, because the closure could"},{"type":"text","text":" "},{"text":"receive a temporary copy rather than direct access to the collection’s","type":"text"},{"text":" ","type":"text"},{"text":"storage.","type":"text"}]},{"name":"Warning","style":"warning","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Your "},{"type":"codeVoice","code":"body"},{"text":" closure must not replace ","type":"text"},{"code":"buffer","type":"codeVoice"},{"type":"text","text":". This leads"},{"type":"text","text":" "},{"text":"to a crash in all implementations of this method within the standard","type":"text"},{"type":"text","text":" "},{"type":"text","text":"library."}]}]},{"type":"paragraph","inlineContent":[{"text":"Successive calls to this method may provide a different pointer on each","type":"text"},{"type":"text","text":" "},{"type":"text","text":"call. Don’t store "},{"code":"buffer","type":"codeVoice"},{"type":"text","text":" outside of this method."}]},{"inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" that provides its own implementation of this method"},{"type":"text","text":" "},{"type":"text","text":"must provide contiguous storage to its elements in the same order"},{"type":"text","text":" "},{"type":"text","text":"as they appear in the collection. This guarantees that it’s possible to"},{"type":"text","text":" "},{"type":"text","text":"generate contiguous mutable storage to any of its subsequences by slicing"},{"type":"text","text":" "},{"code":"buffer","type":"codeVoice"},{"type":"text","text":" with a range formed from the distances to the subsequence’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"startIndex"},{"text":" and ","type":"text"},{"code":"endIndex","type":"codeVoice"},{"text":", respectively.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"abstract":[{"text":"Executes a closure on the collection’s contiguous storage.","type":"text"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableBufferPointer/MutableCollection-Implementations":{"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer\/MutableCollection-Implementations","url":"\/documentation\/compute\/unsafemutablebufferpointer\/mutablecollection-implementations","type":"topic","title":"MutableCollection Implementations","abstract":[],"role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableBufferPointer/withContiguousMutableStorageIfAvailable(_:)-3okf":{"abstract":[{"text":"Executes a closure on the collection’s contiguous storage.","type":"text"}],"type":"topic","kind":"symbol","url":"\/documentation\/compute\/unsafemutablebufferpointer\/withcontiguousmutablestorageifavailable(_:)-3okf","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withContiguousMutableStorageIfAvailable"},{"kind":"text","text":"<"},{"text":"R","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"UnsafeMutableBufferPointer","preciseIdentifier":"s:Sr"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer\/withContiguousMutableStorageIfAvailable(_:)-3okf","title":"withContiguousMutableStorageIfAvailable(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableBufferPointer":{"kind":"symbol","url":"\/documentation\/compute\/unsafemutablebufferpointer","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UnsafeMutableBufferPointer","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UnsafeMutableBufferPointer"}],"abstract":[{"type":"text","text":"A nonowning collection interface to a buffer of mutable"},{"text":" ","type":"text"},{"text":"elements stored contiguously in memory.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer","title":"UnsafeMutableBufferPointer","type":"topic","role":"symbol"}}}