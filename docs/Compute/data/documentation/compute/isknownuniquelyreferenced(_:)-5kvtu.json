{"metadata":{"externalID":"s:s25isKnownUniquelyReferencedySbxzRlzClF","symbolKind":"func","modules":[{"name":"Compute"}],"roleHeading":"Function","title":"isKnownUniquelyReferenced(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"isKnownUniquelyReferenced","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"role":"symbol"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"kind":"symbol","variants":[{"paths":["\/documentation\/compute\/isknownuniquelyreferenced(_:)-5kvtu"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/isKnownUniquelyReferenced(_:)-5kvtu"},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"isKnownUniquelyReferenced"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"object","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":" ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":" : AnyObject"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"object","content":[{"type":"paragraph","inlineContent":[{"text":"An instance of a class. This function does ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"text":" modify","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"object"},{"type":"text","text":"; the use of "},{"type":"codeVoice","code":"inout"},{"type":"text","text":" is an implementation artifact."}]}]}]},{"content":[{"level":2,"type":"heading","anchor":"return-value","text":"Return Value"},{"inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"true"},{"text":" if ","type":"text"},{"code":"object","type":"codeVoice"},{"text":" is known to have a single strong reference;","type":"text"},{"type":"text","text":" "},{"type":"text","text":"otherwise, "},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"isKnownUniquelyReferenced(_:)"},{"text":" function is useful for implementing the","type":"text"},{"text":" ","type":"text"},{"text":"copy-on-write optimization for the deep storage of value types:","type":"text"}],"type":"paragraph"},{"code":["mutating func update(withValue value: T) {","    if !isKnownUniquelyReferenced(&myStorage) {","        myStorage = self.copiedStorage()","    }","    myStorage.update(withValue: value)","}"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use care when calling "},{"type":"codeVoice","code":"isKnownUniquelyReferenced(_:)"},{"type":"text","text":" from within a Boolean"},{"text":" ","type":"text"},{"type":"text","text":"expression. In debug builds, an instance in the left-hand side of a "},{"code":"&&","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"or "},{"type":"codeVoice","code":"||"},{"type":"text","text":" expression may still be referenced when evaluating the right-hand"},{"type":"text","text":" "},{"type":"text","text":"side, inflating the instance’s reference count. For example, this version"},{"type":"text","text":" "},{"text":"of the ","type":"text"},{"type":"codeVoice","code":"update(withValue)"},{"type":"text","text":" method will re-copy "},{"type":"codeVoice","code":"myStorage"},{"type":"text","text":" on every call:"}]},{"syntax":null,"type":"codeListing","code":["\/\/ Copies too frequently:","mutating func badUpdate(withValue value: T) {","    if myStorage.shouldCopy || !isKnownUniquelyReferenced(&myStorage) {","        myStorage = self.copiedStorage()","    }","    myStorage.update(withValue: value)","}"]},{"inlineContent":[{"text":"To avoid this behavior, swap the call ","type":"text"},{"code":"isKnownUniquelyReferenced(_:)","type":"codeVoice"},{"text":" to","type":"text"},{"type":"text","text":" "},{"text":"the left-hand side or store the result of the first expression in a local","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"constant:"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["mutating func goodUpdate(withValue value: T) {","    let shouldCopy = myStorage.shouldCopy","    if shouldCopy || !isKnownUniquelyReferenced(&myStorage) {","        myStorage = self.copiedStorage()","    }","    myStorage.update(withValue: value)","}"]},{"type":"paragraph","inlineContent":[{"code":"isKnownUniquelyReferenced(_:)","type":"codeVoice"},{"type":"text","text":" checks only for strong references to the"},{"text":" ","type":"text"},{"type":"text","text":"given object—if "},{"type":"codeVoice","code":"object"},{"type":"text","text":" has additional weak or unowned references, the"},{"type":"text","text":" "},{"type":"text","text":"result may still be "},{"code":"true","type":"codeVoice"},{"type":"text","text":". Because weak and unowned references cannot be"},{"type":"text","text":" "},{"text":"the only reference to an object, passing a weak or unowned reference as","type":"text"},{"type":"text","text":" "},{"code":"object","type":"codeVoice"},{"type":"text","text":" always results in "},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If the instance passed as ","type":"text"},{"code":"object","type":"codeVoice"},{"type":"text","text":" is being accessed by multiple threads"},{"text":" ","type":"text"},{"text":"simultaneously, this function may still return ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":". Therefore, you must"},{"type":"text","text":" "},{"type":"text","text":"only call this function from mutating methods with appropriate thread"},{"type":"text","text":" "},{"type":"text","text":"synchronization. That will ensure that "},{"type":"codeVoice","code":"isKnownUniquelyReferenced(_:)"},{"text":" ","type":"text"},{"text":"only returns ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" when there is really one accessor, or when there is a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"race condition, which is already undefined behavior."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the given object is known to"},{"type":"text","text":" "},{"type":"text","text":"have a single strong reference."}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/isKnownUniquelyReferenced(_:)-5kvtu":{"title":"isKnownUniquelyReferenced(_:)","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"isKnownUniquelyReferenced","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"abstract":[{"text":"Returns a Boolean value indicating whether the given object is known to","type":"text"},{"type":"text","text":" "},{"text":"have a single strong reference.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/isknownuniquelyreferenced(_:)-5kvtu","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/isKnownUniquelyReferenced(_:)-5kvtu"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}