{"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"Returns the elements of this sequence of sequences, concatenated."}],"sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"joined"},{"text":"() -> ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence","text":"FlattenSequence","preciseIdentifier":"s:s15FlattenSequenceV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"A flattened view of the elements of this"},{"type":"text","text":" "},{"type":"text","text":"sequence of sequences."}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, an array of three ranges is flattened so that the"},{"type":"text","text":" "},{"text":"elements of each range can be iterated in turn.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let ranges = [0..<3, 8..<10, 15..<17]","","\/\/ A for-in loop over 'ranges' accesses each range:","for range in ranges {","  print(range)","}","\/\/ Prints \"0..<3\"","\/\/ Prints \"8..<10\"","\/\/ Prints \"15..<17\"","","\/\/ Use 'joined()' to access each element of each range:","for index in ranges.joined() {","    print(index, terminator: \" \")","}","\/\/ Prints: \"0 1 2 8 9 15 16\""]}]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/joined()-1ob4c","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Sequence-Implementations"]]},"metadata":{"role":"symbol","symbolKind":"method","title":"joined()","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"joined"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s15FlattenSequenceV","text":"FlattenSequence"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"extendedModule":"Swift","externalID":"s:STsST7ElementRpzrlE6joineds15FlattenSequenceVyxGyF::SYNTHESIZED::s:s23LazyPrefixWhileSequenceV","modules":[{"name":"Compute","relatedModules":["Swift"]}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"variants":[{"paths":["\/documentation\/compute\/lazyprefixwhilesequence\/joined()-1ob4c"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","references":{"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileSequence/Sequence-Implementations":{"type":"topic","abstract":[],"title":"Sequence Implementations","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Sequence-Implementations","role":"collectionGroup","url":"\/documentation\/compute\/lazyprefixwhilesequence\/sequence-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileSequence/joined()-1ob4c":{"url":"\/documentation\/compute\/lazyprefixwhilesequence\/joined()-1ob4c","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"joined","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"FlattenSequence","preciseIdentifier":"s:s15FlattenSequenceV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"text":"Returns the elements of this sequence of sequences, concatenated.","type":"text"}],"type":"topic","title":"joined()","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/joined()-1ob4c","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileSequence":{"type":"topic","role":"symbol","url":"\/documentation\/compute\/lazyprefixwhilesequence","title":"LazyPrefixWhileSequence","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyPrefixWhileSequence"}],"abstract":[{"type":"text","text":"A sequence whose elements consist of the initial consecutive elements of"},{"text":" ","type":"text"},{"text":"some base sequence that satisfy a given predicate.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"LazyPrefixWhileSequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/FlattenSequence":{"url":"\/documentation\/compute\/flattensequence","navigatorTitle":[{"kind":"identifier","text":"FlattenSequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence","title":"FlattenSequence","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlattenSequence"}],"type":"topic","abstract":[{"type":"text","text":"A sequence consisting of all the elements contained in each segment"},{"text":" ","type":"text"},{"text":"contained in some ","type":"text"},{"code":"Base","type":"codeVoice"},{"type":"text","text":" sequence."}]}}}