{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"underestimatedCount","kind":"identifier"},{"kind":"text","text":": "},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":" { "},{"kind":"keyword","text":"get"},{"text":" }","kind":"text"}]}]},{"kind":"content","content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"The default implementation returns 0. If you provide your own"},{"text":" ","type":"text"},{"type":"text","text":"implementation, make sure to compute the value nondestructively."}],"type":"paragraph"},{"style":"note","name":"Complexity","type":"aside","content":[{"inlineContent":[{"text":"O(1), except if the sequence also conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In this case, see the documentation of "},{"code":"Collection.underestimatedCount","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/lazyprefixwhilesequence\/iterator\/underestimatedcount"]}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Iterator\/underestimatedCount"},"metadata":{"title":"underestimatedCount","modules":[{"name":"Compute","relatedModules":["Swift"]}],"role":"symbol","extendedModule":"Swift","symbolKind":"property","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"underestimatedCount","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"externalID":"s:STsE19underestimatedCountSivp::SYNTHESIZED::s:s23LazyPrefixWhileSequenceV8IteratorV","roleHeading":"Instance Property"},"abstract":[{"text":"A value less than or equal to the number of elements in the sequence,","type":"text"},{"text":" ","type":"text"},{"text":"calculated nondestructively.","type":"text"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Sequence-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Iterator\/Sequence-Implementations"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileSequence/Sequence-Implementations":{"type":"topic","abstract":[],"title":"Sequence Implementations","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Sequence-Implementations","role":"collectionGroup","url":"\/documentation\/compute\/lazyprefixwhilesequence\/sequence-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileSequence/Iterator/underestimatedCount":{"url":"\/documentation\/compute\/lazyprefixwhilesequence\/iterator\/underestimatedcount","title":"underestimatedCount","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"underestimatedCount","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Iterator\/underestimatedCount","abstract":[{"text":"A value less than or equal to the number of elements in the sequence,","type":"text"},{"text":" ","type":"text"},{"text":"calculated nondestructively.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileSequence/Iterator/Sequence-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Iterator\/Sequence-Implementations","kind":"article","type":"topic","url":"\/documentation\/compute\/lazyprefixwhilesequence\/iterator\/sequence-implementations","role":"collectionGroup","abstract":[],"title":"Sequence Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileSequence":{"type":"topic","role":"symbol","url":"\/documentation\/compute\/lazyprefixwhilesequence","title":"LazyPrefixWhileSequence","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyPrefixWhileSequence"}],"abstract":[{"type":"text","text":"A sequence whose elements consist of the initial consecutive elements of"},{"text":" ","type":"text"},{"text":"some base sequence that satisfy a given predicate.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"LazyPrefixWhileSequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileSequence/Iterator":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"type":"topic","title":"LazyPrefixWhileSequence.Iterator","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Iterator","abstract":[{"type":"text","text":"An iterator over the initial elements traversed by a base iterator that"},{"type":"text","text":" "},{"text":"satisfy a given predicate.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Iterator"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"url":"\/documentation\/compute\/lazyprefixwhilesequence\/iterator"}}}