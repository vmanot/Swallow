{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/lazyprefixwhilesequence\/iterator\/withcontiguousstorageifavailable(_:)"]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Iterator\/withContiguousStorageIfAvailable(_:)"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Sequence-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Iterator\/Sequence-Implementations"]]},"abstract":[{"text":"Executes a closure on the sequence’s contiguous storage.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withContiguousStorageIfAvailable","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"body"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:SR","text":"UnsafeBufferPointer","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"platforms":["macOS"],"languages":["swift"]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A closure that receives an ","type":"text"},{"code":"UnsafeBufferPointer","type":"codeVoice"},{"type":"text","text":" to the"},{"text":" ","type":"text"},{"type":"text","text":"sequence’s contiguous storage."}]}],"name":"body"}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"inlineContent":[{"text":"The value returned from ","type":"text"},{"code":"body","type":"codeVoice"},{"text":", unless the sequence doesn’t","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"support contiguous storage, in which case the method ignores "},{"type":"codeVoice","code":"body"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"text":"returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"}]},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"This method calls ","type":"text"},{"type":"codeVoice","code":"body(buffer)"},{"text":", where ","type":"text"},{"type":"codeVoice","code":"buffer"},{"type":"text","text":" is a pointer to the"},{"text":" ","type":"text"},{"type":"text","text":"collection’s contiguous storage. If the contiguous storage doesn’t exist,"},{"type":"text","text":" "},{"type":"text","text":"the collection creates it. If the collection doesn’t support an internal"},{"type":"text","text":" "},{"text":"representation in a form of contiguous storage, the method doesn’t call","type":"text"},{"type":"text","text":" "},{"code":"body","type":"codeVoice"},{"type":"text","text":" — it immediately returns "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The optimizer can often eliminate bounds- and uniqueness-checking","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"within an algorithm. When that fails, however, invoking the same"},{"type":"text","text":" "},{"type":"text","text":"algorithm on the "},{"type":"codeVoice","code":"buffer"},{"text":" argument may let you trade safety for speed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Successive calls to this method may provide a different pointer on each","type":"text"},{"type":"text","text":" "},{"text":"call. Don’t store ","type":"text"},{"code":"buffer","type":"codeVoice"},{"text":" outside of this method.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" that provides its own implementation of this method"},{"type":"text","text":" "},{"text":"must provide contiguous storage to its elements in the same order","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as they appear in the collection. This guarantees that it’s possible to"},{"type":"text","text":" "},{"type":"text","text":"generate contiguous mutable storage to any of its subsequences by slicing"},{"text":" ","type":"text"},{"type":"codeVoice","code":"buffer"},{"text":" with a range formed from the distances to the subsequence’s","type":"text"},{"type":"text","text":" "},{"code":"startIndex","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"endIndex"},{"type":"text","text":", respectively."}]}]}],"metadata":{"roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"withContiguousStorageIfAvailable"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"UnsafeBufferPointer","preciseIdentifier":"s:SR"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"text":"?","kind":"text"}],"modules":[{"name":"Compute","relatedModules":["Swift"]}],"title":"withContiguousStorageIfAvailable(_:)","extendedModule":"Swift","symbolKind":"method","externalID":"s:STsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF::SYNTHESIZED::s:s23LazyPrefixWhileSequenceV8IteratorV","role":"symbol"},"kind":"symbol","references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeBufferPointer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer","abstract":[{"type":"text","text":"A nonowning collection interface to a buffer of"},{"type":"text","text":" "},{"text":"elements stored contiguously in memory.","type":"text"}],"role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeBufferPointer","kind":"identifier"}],"title":"UnsafeBufferPointer","navigatorTitle":[{"kind":"identifier","text":"UnsafeBufferPointer"}],"url":"\/documentation\/compute\/unsafebufferpointer"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileSequence/Iterator":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"type":"topic","title":"LazyPrefixWhileSequence.Iterator","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Iterator","abstract":[{"type":"text","text":"An iterator over the initial elements traversed by a base iterator that"},{"type":"text","text":" "},{"text":"satisfy a given predicate.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Iterator"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"url":"\/documentation\/compute\/lazyprefixwhilesequence\/iterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileSequence/Sequence-Implementations":{"type":"topic","abstract":[],"title":"Sequence Implementations","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Sequence-Implementations","role":"collectionGroup","url":"\/documentation\/compute\/lazyprefixwhilesequence\/sequence-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileSequence/Iterator/Sequence-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Iterator\/Sequence-Implementations","kind":"article","type":"topic","url":"\/documentation\/compute\/lazyprefixwhilesequence\/iterator\/sequence-implementations","role":"collectionGroup","abstract":[],"title":"Sequence Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileSequence/Iterator/withContiguousStorageIfAvailable(_:)":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Iterator\/withContiguousStorageIfAvailable(_:)","abstract":[{"type":"text","text":"Executes a closure on the sequence’s contiguous storage."}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withContiguousStorageIfAvailable"},{"kind":"text","text":"<"},{"text":"R","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SR"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":"?","kind":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/compute\/lazyprefixwhilesequence\/iterator\/withcontiguousstorageifavailable(_:)","title":"withContiguousStorageIfAvailable(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileSequence":{"type":"topic","role":"symbol","url":"\/documentation\/compute\/lazyprefixwhilesequence","title":"LazyPrefixWhileSequence","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyPrefixWhileSequence"}],"abstract":[{"type":"text","text":"A sequence whose elements consist of the initial consecutive elements of"},{"text":" ","type":"text"},{"text":"some base sequence that satisfy a given predicate.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"LazyPrefixWhileSequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence"}}}