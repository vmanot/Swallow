{"primaryContentSections":[{"declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"&<<"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"internalParam","text":"lhs"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"rhs","kind":"internalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"name":"lhs","content":[{"type":"paragraph","inlineContent":[{"text":"The value to shift.","type":"text"}]}]},{"name":"rhs","content":[{"type":"paragraph","inlineContent":[{"text":"The number of bits to shift ","type":"text"},{"type":"codeVoice","code":"lhs"},{"text":" to the left. If ","type":"text"},{"code":"rhs","type":"codeVoice"},{"text":" is","type":"text"},{"type":"text","text":" "},{"text":"outside the range ","type":"text"},{"type":"codeVoice","code":"0..<lhs.bitWidth"},{"type":"text","text":", it is masked to produce a"},{"text":" ","type":"text"},{"text":"value within that range.","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"Use the masking left shift operator (","type":"text"},{"code":"&<<","type":"codeVoice"},{"type":"text","text":") when you need to perform a"},{"text":" ","type":"text"},{"type":"text","text":"shift and are sure that the shift amount is in the range"},{"text":" ","type":"text"},{"type":"codeVoice","code":"0..<lhs.bitWidth"},{"type":"text","text":". Before shifting, the masking left shift operator"},{"type":"text","text":" "},{"type":"text","text":"masks the shift to this range. The shift is performed using this masked"},{"type":"text","text":" "},{"type":"text","text":"value."}]},{"inlineContent":[{"type":"text","text":"The following example defines "},{"code":"x","type":"codeVoice"},{"type":"text","text":" as an instance of "},{"code":"UInt8","type":"codeVoice"},{"text":", an 8-bit,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"unsigned integer type. If you use "},{"code":"2","type":"codeVoice"},{"type":"text","text":" as the right-hand-side value in an"},{"text":" ","type":"text"},{"type":"text","text":"operation on "},{"type":"codeVoice","code":"x"},{"text":", the shift amount requires no masking.","type":"text"}],"type":"paragraph"},{"code":["let x: UInt8 = 30                 \/\/ 0b00011110","let y = x &<< 2","\/\/ y == 120                       \/\/ 0b01111000"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, if you use "},{"code":"8","type":"codeVoice"},{"type":"text","text":" as the shift amount, the method first masks the"},{"type":"text","text":" "},{"text":"shift amount to zero, and then performs the shift, resulting in no change","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the original value."}]},{"syntax":null,"code":["let z = x &<< 8","\/\/ z == 30                        \/\/ 0b00011110"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If the bit width of the shifted integer type is a power of two, masking"},{"text":" ","type":"text"},{"type":"text","text":"is performed using a bitmask; otherwise, masking is performed using a"},{"type":"text","text":" "},{"type":"text","text":"modulo operation."}],"type":"paragraph"}]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128\/FixedWidthInteger-Implementations"]]},"sections":[],"metadata":{"role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"&<<"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"symbolKind":"op","title":"&<<(_:_:)","roleHeading":"Operator","extendedModule":"Swift","modules":[{"name":"Compute","relatedModules":["Swift"]}],"externalID":"s:s17FixedWidthIntegerPsE3alloiyxx_xtFZ::SYNTHESIZED::s:s6Int128V"},"abstract":[{"type":"text","text":"Returns the result of shifting a value’s binary representation the"},{"type":"text","text":" "},{"text":"specified number of digits to the left, masking the shift amount to the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type’s bit width."}],"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128\/&__(_:_:)-lkqj"},"variants":[{"paths":["\/documentation\/compute\/int128\/&__(_:_:)-lkqj"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Int128/&__(_:_:)-lkqj":{"role":"symbol","title":"&<<(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"&<<"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128\/&__(_:_:)-lkqj","url":"\/documentation\/compute\/int128\/&__(_:_:)-lkqj","type":"topic","kind":"symbol","abstract":[{"text":"Returns the result of shifting a value’s binary representation the","type":"text"},{"type":"text","text":" "},{"text":"specified number of digits to the left, masking the shift amount to the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type’s bit width."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int128":{"url":"\/documentation\/compute\/int128","abstract":[{"type":"text","text":"A 128-bit signed integer type."}],"title":"Int128","role":"symbol","navigatorTitle":[{"text":"Int128","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int128"}],"kind":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int128/FixedWidthInteger-Implementations":{"kind":"article","role":"collectionGroup","title":"FixedWidthInteger Implementations","type":"topic","url":"\/documentation\/compute\/int128\/fixedwidthinteger-implementations","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128\/FixedWidthInteger-Implementations"}}}