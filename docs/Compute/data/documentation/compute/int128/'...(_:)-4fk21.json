{"sections":[],"metadata":{"extendedModule":"Swift","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"...","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s19PartialRangeThroughV","text":"PartialRangeThrough"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"modules":[{"relatedModules":["Swift"],"name":"Compute"}],"externalID":"s:SLsE3zzzopys19PartialRangeThroughVyxGxFZ::SYNTHESIZED::s:s6Int128V","roleHeading":"Operator","symbolKind":"op","title":"...(_:)","role":"symbol"},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/int128\/'...(_:)-4fk21"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128\/...(_:)-4fk21"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"...","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"maximum","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough","text":"PartialRangeThrough","kind":"typeIdentifier","preciseIdentifier":"s:s19PartialRangeThroughV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"parameters":[{"name":"maximum","content":[{"type":"paragraph","inlineContent":[{"text":"The upper bound for the range.","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Use the prefix closed range operator (prefix ","type":"text"},{"type":"codeVoice","code":"..."},{"type":"text","text":") to create a partial"},{"type":"text","text":" "},{"type":"text","text":"range of any type that conforms to the "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" protocol. This"},{"type":"text","text":" "},{"type":"text","text":"example creates a "},{"code":"PartialRangeThrough<Double>","type":"codeVoice"},{"text":" instance that includes","type":"text"},{"type":"text","text":" "},{"type":"text","text":"any value less than or equal to "},{"code":"5.0","type":"codeVoice"},{"type":"text","text":"."}]},{"code":["let throughFive = ...5.0","","throughFive.contains(4.0)     \/\/ true","throughFive.contains(5.0)     \/\/ true","throughFive.contains(6.0)     \/\/ false"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can use this type of partial range of a collection’s indices to","type":"text"},{"type":"text","text":" "},{"text":"represent the range from the start of the collection up to, and","type":"text"},{"type":"text","text":" "},{"text":"including, the partial range’s upper bound.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[...3])","\/\/ Prints \"[10, 20, 30, 40]\""]},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"code":"maximum","type":"codeVoice"},{"type":"text","text":" must compare equal to itself (i.e. cannot be NaN)."}]}],"style":"note","name":"Precondition","type":"aside"}]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128\/Comparable-Implementations"]]},"abstract":[{"type":"text","text":"Returns a partial range up to, and including, its upper bound."}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Int128":{"url":"\/documentation\/compute\/int128","abstract":[{"type":"text","text":"A 128-bit signed integer type."}],"title":"Int128","role":"symbol","navigatorTitle":[{"text":"Int128","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int128"}],"kind":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int128/...(_:)-4fk21":{"url":"\/documentation\/compute\/int128\/'...(_:)-4fk21","role":"symbol","abstract":[{"text":"Returns a partial range up to, and including, its upper bound.","type":"text"}],"kind":"symbol","title":"...(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"...","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"text":"PartialRangeThrough","kind":"typeIdentifier","preciseIdentifier":"s:s19PartialRangeThroughV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128\/...(_:)-4fk21","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeThrough":{"title":"PartialRangeThrough","type":"topic","abstract":[{"type":"text","text":"A partial interval up to, and including, an upper bound."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PartialRangeThrough"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PartialRangeThrough"}],"kind":"symbol","url":"\/documentation\/compute\/partialrangethrough"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int128/Comparable-Implementations":{"url":"\/documentation\/compute\/int128\/comparable-implementations","abstract":[],"kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128\/Comparable-Implementations","type":"topic","title":"Comparable Implementations"}}}