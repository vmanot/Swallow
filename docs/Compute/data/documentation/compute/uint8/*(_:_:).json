{"metadata":{"extendedModule":"Swift","modules":[{"name":"Compute","relatedModules":["Swift"]}],"role":"symbol","externalID":"s:s5UInt8V1moiyA2B_ABtFZ","roleHeading":"Operator","symbolKind":"op","title":"*(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"*","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"UInt8","kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V"},{"kind":"text","text":", "},{"text":"UInt8","preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V","text":"UInt8"}]},"abstract":[{"text":"Multiplies two values and produces their product.","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"*"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"lhs","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8"},{"kind":"text","text":", "},{"text":"rhs","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8","text":"UInt8","preciseIdentifier":"s:s5UInt8V"},{"text":") -> ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8","kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"lhs","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The first value to multiply."}]}]},{"name":"rhs","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The second value to multiply."}]}]}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"inlineContent":[{"type":"text","text":"The multiplication operator ("},{"type":"codeVoice","code":"*"},{"text":") calculates the product of its two","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"arguments. For example:"}],"type":"paragraph"},{"code":["2 * 3                   \/\/ 6","100 * 21                \/\/ 2100","-10 * 15                \/\/ -150","3.5 * 2.25              \/\/ 7.875"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You cannot use "},{"type":"codeVoice","code":"*"},{"type":"text","text":" with arguments of different types. To multiply values"},{"type":"text","text":" "},{"type":"text","text":"of different types, convert one of the values to the other value’s type."}]},{"type":"codeListing","code":["let x: Int8 = 21","let y: Int = 1000000","Int(x) * y              \/\/ 21000000"],"syntax":null},{"inlineContent":[{"type":"text","text":"The product of the two arguments must be representable in the arguments’"},{"type":"text","text":" "},{"text":"type. In the following example, the result of ","type":"text"},{"code":"21 * 21","type":"codeVoice"},{"type":"text","text":" is greater than"},{"type":"text","text":" "},{"text":"the maximum representable ","type":"text"},{"code":"Int8","type":"codeVoice"},{"text":" value:","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["x * 21                  \/\/ Overflow error"],"type":"codeListing"},{"style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"Overflow checking is not performed in "},{"type":"codeVoice","code":"-Ounchecked"},{"text":" builds.","type":"text"}],"type":"paragraph"}],"type":"aside"},{"inlineContent":[{"type":"text","text":"If you want to opt out of overflow checking and wrap the result in case"},{"type":"text","text":" "},{"type":"text","text":"of any overflow, use the overflow multiplication operator ("},{"code":"&*","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["x &* 21                \/\/ -115"]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/uint8\/*(_:_:)"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/BinaryInteger-Implementations"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/*(_:_:)"},"kind":"symbol","sections":[],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/BinaryInteger-Implementations":{"abstract":[],"title":"BinaryInteger Implementations","type":"topic","kind":"article","url":"\/documentation\/compute\/uint8\/binaryinteger-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/BinaryInteger-Implementations","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/*(_:_:)":{"kind":"symbol","type":"topic","url":"\/documentation\/compute\/uint8\/*(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"*","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"UInt8","kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V","text":"UInt8"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V","text":"UInt8"}],"abstract":[{"type":"text","text":"Multiplies two values and produces their product."}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/*(_:_:)","title":"*(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UInt8","kind":"identifier"}],"navigatorTitle":[{"text":"UInt8","kind":"identifier"}],"title":"UInt8","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8","url":"\/documentation\/compute\/uint8","kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"An 8-bit unsigned integer value"},{"text":" ","type":"text"},{"text":"type.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}