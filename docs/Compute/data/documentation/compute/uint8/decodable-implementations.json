{"variants":[{"paths":["\/documentation\/compute\/uint8\/decodable-implementations"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8"]]},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Decodable-Implementations","interfaceLanguage":"swift"},"metadata":{"title":"Decodable Implementations","role":"collectionGroup","roleHeading":"API Collection","modules":[{"name":"Compute"}]},"kind":"article","schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"topicSections":[{"title":"Initializers","anchor":"Initializers","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/init(from:)"],"generated":true},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/decode(from:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/decode(from:forKey:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/decodeIfPresent(from:)-9ircp","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/decodeIfPresent(from:)-9r6tm","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/decodeIfPresent(from:forKey:)"],"title":"Type Methods","anchor":"Type-Methods","generated":true}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/init(from:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/init(from:)","title":"init(from:)","type":"topic","abstract":[{"type":"text","text":"Creates a new instance by decoding from the given decoder."}],"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/uint8\/init(from:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"text":": any ","kind":"text"},{"text":"Decoder","kind":"typeIdentifier","preciseIdentifier":"s:s7DecoderP"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/decodeIfPresent(from:forKey:)":{"url":"\/documentation\/compute\/uint8\/decodeifpresent(from:forkey:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decodeIfPresent"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Container"},{"kind":"text","text":">("},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Container","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"forKey","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Container"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Key","preciseIdentifier":"s:s30KeyedDecodingContainerProtocolP3KeyQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"role":"symbol","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/decodeIfPresent(from:forKey:)","title":"decodeIfPresent(from:forKey:)","type":"topic","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UInt8","kind":"identifier"}],"navigatorTitle":[{"text":"UInt8","kind":"identifier"}],"title":"UInt8","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8","url":"\/documentation\/compute\/uint8","kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"An 8-bit unsigned integer value"},{"text":" ","type":"text"},{"text":"type.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/decode(from:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/decode(from:)","title":"decode(from:)","type":"topic","abstract":[],"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/uint8\/decode(from:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"decode","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Container","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Container"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/decodeIfPresent(from:)-9r6tm":{"url":"\/documentation\/compute\/uint8\/decodeifpresent(from:)-9r6tm","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decodeIfPresent"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Container"},{"text":">(","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Container","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"role":"symbol","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/decodeIfPresent(from:)-9r6tm","title":"decodeIfPresent(from:)","type":"topic","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/decodeIfPresent(from:)-9ircp":{"abstract":[],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/decodeIfPresent(from:)-9ircp","type":"topic","url":"\/documentation\/compute\/uint8\/decodeifpresent(from:)-9ircp","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"decodeIfPresent","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Container","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"Container","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"title":"decodeIfPresent(from:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/decode(from:forKey:)":{"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/decode(from:forKey:)","kind":"symbol","abstract":[],"title":"decode(from:forKey:)","url":"\/documentation\/compute\/uint8\/decode(from:forkey:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"decode","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Container","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Container","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"forKey"},{"text":": ","kind":"text"},{"text":"Container","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Key","kind":"typeIdentifier","preciseIdentifier":"s:s30KeyedDecodingContainerProtocolP3KeyQa"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}