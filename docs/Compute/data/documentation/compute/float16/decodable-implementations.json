{"sections":[],"kind":"article","variants":[{"paths":["\/documentation\/compute\/float16\/decodable-implementations"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"title":"Decodable Implementations","role":"collectionGroup","roleHeading":"API Collection","modules":[{"name":"Compute"}]},"topicSections":[{"anchor":"Initializers","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16\/init(from:)"],"generated":true,"title":"Initializers"},{"title":"Type Methods","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16\/decode(from:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16\/decode(from:forKey:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16\/decodeIfPresent(from:)-1q8zu","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16\/decodeIfPresent(from:)-45c96","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16\/decodeIfPresent(from:forKey:)"],"anchor":"Type-Methods"}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16\/Decodable-Implementations","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Float16":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16","navigatorTitle":[{"kind":"identifier","text":"Float16"}],"role":"symbol","title":"Float16","url":"\/documentation\/compute\/float16","type":"topic","abstract":[{"type":"text","text":"A half-precision (16b), floating-point value type."}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Float16"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Float16/decode(from:)":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16\/decode(from:)","abstract":[],"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"decode","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Container","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Container","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"title":"decode(from:)","kind":"symbol","url":"\/documentation\/compute\/float16\/decode(from:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Float16/decode(from:forKey:)":{"url":"\/documentation\/compute\/float16\/decode(from:forkey:)","abstract":[],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16\/decode(from:forKey:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decode"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Container"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"text":"Container","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"forKey"},{"kind":"text","text":": "},{"text":"Container","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:s30KeyedDecodingContainerProtocolP3KeyQa","text":"Key","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"type":"topic","title":"decode(from:forKey:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Float16/init(from:)":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16\/init(from:)","abstract":[{"type":"text","text":"Creates a new instance by decoding from the given decoder."}],"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"text":": any ","kind":"text"},{"text":"Decoder","preciseIdentifier":"s:s7DecoderP","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"}],"title":"init(from:)","kind":"symbol","url":"\/documentation\/compute\/float16\/init(from:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Float16/decodeIfPresent(from:forKey:)":{"url":"\/documentation\/compute\/float16\/decodeifpresent(from:forkey:)","abstract":[],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16\/decodeIfPresent(from:forKey:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decodeIfPresent"},{"kind":"text","text":"<"},{"text":"Container","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Container","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"forKey"},{"text":": ","kind":"text"},{"text":"Container","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Key","preciseIdentifier":"s:s30KeyedDecodingContainerProtocolP3KeyQa","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"text":"?","kind":"text"}],"type":"topic","title":"decodeIfPresent(from:forKey:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Float16/decodeIfPresent(from:)-45c96":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16\/decodeIfPresent(from:)-45c96","abstract":[],"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decodeIfPresent"},{"text":"<","kind":"text"},{"text":"Container","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Container","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Self","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"decodeIfPresent(from:)","kind":"symbol","url":"\/documentation\/compute\/float16\/decodeifpresent(from:)-45c96"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Float16/decodeIfPresent(from:)-1q8zu":{"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decodeIfPresent"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Container"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"from"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Container"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16\/decodeIfPresent(from:)-1q8zu","role":"symbol","url":"\/documentation\/compute\/float16\/decodeifpresent(from:)-1q8zu","type":"topic","abstract":[],"title":"decodeIfPresent(from:)"}}}