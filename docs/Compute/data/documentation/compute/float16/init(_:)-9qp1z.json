{"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"kind":"symbol","metadata":{"platforms":[{"unavailable":false,"beta":false,"introducedAt":"14.0","deprecated":false,"name":"iOS"},{"name":"macOS","beta":false,"unavailable":false,"deprecated":false,"introducedAt":"11.0"},{"introducedAt":"14.0","name":"tvOS","unavailable":false,"deprecated":false,"beta":false},{"introducedAt":"7.0","beta":false,"deprecated":false,"unavailable":false,"name":"watchOS"}],"extendedModule":"Swift","symbolKind":"init","fragments":[{"kind":"identifier","text":"init"},{"text":"?<","kind":"text"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":")"}],"roleHeading":"Initializer","modules":[{"name":"Compute","relatedModules":["Swift"]}],"externalID":"s:s7Float16VyABSgxcSyRzlufc","title":"init(_:)","role":"symbol"},"variants":[{"paths":["\/documentation\/compute\/float16\/init(_:)-9qp1z"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"?<"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"text","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"text":") ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","preciseIdentifier":"s:Sy","text":"StringProtocol","kind":"typeIdentifier"}],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"text","content":[{"inlineContent":[{"type":"text","text":"An input string to convert to a "},{"type":"codeVoice","code":"Float16?"},{"type":"text","text":" instance."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The string passed as "},{"type":"codeVoice","code":"text"},{"text":" can represent a real number in decimal or","type":"text"},{"text":" ","type":"text"},{"text":"hexadecimal format or can be in a special format representing infinity","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"or NaN (“not a number”). If "},{"code":"text","type":"codeVoice"},{"type":"text","text":" is not in a recognized format,"},{"text":" ","type":"text"},{"text":"the optional initializer will fail and return ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"text","type":"codeVoice"},{"text":" string consists of an optional","type":"text"},{"type":"text","text":" "},{"text":"plus or minus sign character (","type":"text"},{"code":"+","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"-"},{"type":"text","text":")"},{"text":" ","type":"text"},{"type":"text","text":"followed by one of the following:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"decimal string"}]},{"text":" contains a significand consisting of one","type":"text"},{"text":" ","type":"text"},{"text":"or more decimal digits that may include a decimal point:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let c = Float16(\"-1.0\")","\/\/ c == -1.0","","let d = Float16(\"28.375\")","\/\/ d == 28.375"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A decimal string may also include an exponent following the"},{"type":"text","text":" "},{"text":"significand, indicating the power of 10 by which the significand should","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"be multiplied. If included, the exponent is separated by a single"},{"type":"text","text":" "},{"type":"text","text":"character, "},{"type":"codeVoice","code":"e"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"E"},{"text":", and consists of an optional plus or minus sign","type":"text"},{"type":"text","text":" "},{"type":"text","text":"character and a sequence of decimal digits."}]},{"type":"codeListing","syntax":null,"code":["let e = Float16(\"2837.5e-2\")","\/\/ e == 28.375"]}]},{"content":[{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"hexadecimal string"}],"type":"emphasis"},{"text":" contains a significand consisting of","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"0X"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"0x"},{"text":" followed by one or more hexadecimal digits that may","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"include a decimal point."}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let f = Float16(\"0x1c.6\")","\/\/ f == 28.375"]},{"inlineContent":[{"text":"A hexadecimal string may also include an exponent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"indicating the power of 2 by which the significand should"},{"type":"text","text":" "},{"text":"be multiplied. If included, the exponent is separated by a single","type":"text"},{"type":"text","text":" "},{"text":"character, ","type":"text"},{"type":"codeVoice","code":"p"},{"text":" or ","type":"text"},{"code":"P","type":"codeVoice"},{"text":", and consists of an optional plus or minus sign","type":"text"},{"text":" ","type":"text"},{"text":"character and a sequence of decimal digits.","type":"text"}],"type":"paragraph"},{"code":["let g = Float16(\"0x1.c6p4\")","\/\/ g == 28.375"],"syntax":null,"type":"codeListing"}]},{"content":[{"inlineContent":[{"text":"The input strings ","type":"text"},{"type":"codeVoice","code":"\"inf\""},{"type":"text","text":" or "},{"code":"\"infinity\"","type":"codeVoice"},{"text":" (case insensitive)","type":"text"},{"text":" ","type":"text"},{"text":"are converted to an infinite result:","type":"text"}],"type":"paragraph"},{"code":["let i = Float16(\"inf\")","\/\/ i == Float16.infinity","","let j = Float16(\"-Infinity\")","\/\/ j == -Float16.infinity"],"syntax":null,"type":"codeListing"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An input string of "},{"type":"codeVoice","code":"\"nan\""},{"type":"text","text":" (case insensitive) is converted"},{"type":"text","text":" "},{"text":"into a ","type":"text"},{"inlineContent":[{"type":"text","text":"NaN"}],"type":"emphasis"},{"text":" value:","type":"text"}]},{"code":["let n = Float16(\"-nan\")","\/\/ n?.isNaN == true","\/\/ n?.sign == .minus"],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"A NaN string may also include a payload in parentheses following the"},{"type":"text","text":" "},{"type":"codeVoice","code":"\"nan\""},{"type":"text","text":" keyword. The payload consists of a sequence of decimal digits,"},{"type":"text","text":" "},{"type":"text","text":"or the characters "},{"code":"0X","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"0x"},{"type":"text","text":" followed by a sequence of hexadecimal"},{"text":" ","type":"text"},{"type":"text","text":"digits. If the payload contains any other characters, it is ignored."},{"text":" ","type":"text"},{"text":"If the value of the payload is larger than can be stored as the","type":"text"},{"text":" ","type":"text"},{"text":"payload of a ","type":"text"},{"code":"Float16.nan","type":"codeVoice"},{"type":"text","text":", the least significant bits are used."}],"type":"paragraph"},{"code":["let p = Float16(\"nan(0x10)\")","\/\/ p?.isNaN == true","\/\/ String(p!) == \"nan(0x10)\""],"syntax":null,"type":"codeListing"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A string in any other format than those described above"},{"text":" ","type":"text"},{"type":"text","text":"or containing additional characters"},{"type":"text","text":" "},{"text":"results in a ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" value. For example, the following conversions","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"result in "},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}]},{"syntax":null,"code":["  Float16(\" 5.0\")      \/\/ Includes whitespace","  Float16(\"±2.0\")      \/\/ Invalid character","  Float16(\"0x1.25e4\")  \/\/ Incorrect exponent format"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"A decimal or hexadecimal string is converted to a ","type":"text"},{"code":"Float16","type":"codeVoice"},{"type":"text","text":" "},{"text":"instance using the IEEE 754 roundTiesToEven (default) rounding","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"attribute."},{"text":" ","type":"text"},{"type":"text","text":"Values with absolute value smaller than "},{"type":"codeVoice","code":"Float16.leastNonzeroMagnitude"},{"type":"text","text":" "},{"type":"text","text":"are rounded to plus or minus zero."},{"type":"text","text":" "},{"text":"Values with absolute value larger than ","type":"text"},{"type":"codeVoice","code":"Float16.greatestFiniteMagnitude"},{"type":"text","text":" "},{"text":"are rounded to plus or minus infinity.","type":"text"}]},{"syntax":null,"type":"codeListing","code":["  let y = Float16(\"1.23e-9999\")","  \/\/ y == 0.0","  \/\/ y?.sign == .plus","","  let z = Float16(\"-7.89e-7206\")","  \/\/ z == -0.0","  \/\/ z?.sign == .minus","","  let r = Float16(\"1.23e17802\")","  \/\/ r == Float16.infinity","","  let s = Float16(\"-7.89e7206\")","  \/\/ s == Float16.-infinity"]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"Prior to Swift 5.4, a decimal or","type":"text"},{"text":" ","type":"text"},{"text":"hexadecimal input string whose value was too large to represent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as a finite "},{"type":"codeVoice","code":"Float16"},{"type":"text","text":" instance returned "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" instead of"},{"type":"text","text":" "},{"type":"codeVoice","code":"Float16.infinity"},{"text":".","type":"text"}]}],"style":"note","type":"aside"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16\/init(_:)-9qp1z"},"abstract":[{"text":"Creates a new instance from the given string.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16\/LosslessStringConvertible-Implementations"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Float16/init(_:)-9qp1z":{"abstract":[{"type":"text","text":"Creates a new instance from the given string."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16\/init(_:)-9qp1z","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"?<"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","type":"topic","url":"\/documentation\/compute\/float16\/init(_:)-9qp1z","kind":"symbol","title":"init(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Float16/LosslessStringConvertible-Implementations":{"url":"\/documentation\/compute\/float16\/losslessstringconvertible-implementations","title":"LosslessStringConvertible Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16\/LosslessStringConvertible-Implementations","kind":"article","type":"topic","abstract":[],"role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/StringProtocol":{"url":"\/documentation\/compute\/stringprotocol","role":"symbol","abstract":[{"type":"text","text":"A type that can represent a string as a collection of characters."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","title":"StringProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StringProtocol","kind":"identifier"}],"navigatorTitle":[{"text":"StringProtocol","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Float16":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16","navigatorTitle":[{"kind":"identifier","text":"Float16"}],"role":"symbol","title":"Float16","url":"\/documentation\/compute\/float16","type":"topic","abstract":[{"type":"text","text":"A half-precision (16b), floating-point value type."}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Float16"}]}}}