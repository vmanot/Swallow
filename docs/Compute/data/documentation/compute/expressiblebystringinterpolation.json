{"topicSections":[{"generated":true,"anchor":"Associated-Types","title":"Associated Types","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringInterpolation\/StringInterpolation"]},{"anchor":"Initializers","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringInterpolation\/init(stringInterpolation:)-95neq"],"title":"Initializers","generated":true}],"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"relationshipsSections":[{"type":"inheritsFrom","title":"Inherits From","kind":"relationships","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByExtendedGraphemeClusterLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByUnicodeScalarLiteral"]},{"kind":"relationships","type":"inheritedBy","title":"Inherited By","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol"]},{"type":"conformingTypes","title":"Conforming Types","kind":"relationships","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring"]}],"metadata":{"title":"ExpressibleByStringInterpolation","externalID":"s:s32ExpressibleByStringInterpolationP","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ExpressibleByStringInterpolation"}],"symbolKind":"protocol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ExpressibleByStringInterpolation","kind":"identifier"}],"modules":[{"name":"Compute"}],"roleHeading":"Protocol"},"kind":"symbol","abstract":[{"text":"A type that can be initialized by string interpolation with a string","type":"text"},{"type":"text","text":" "},{"text":"literal that includes expressions.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringInterpolation","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExpressibleByStringInterpolation","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"ExpressibleByStringLiteral","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringLiteral","kind":"typeIdentifier","preciseIdentifier":"s:s26ExpressibleByStringLiteralP"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"inlineContent":[{"type":"text","text":"Use string interpolation to include one or more expressions in a string"},{"type":"text","text":" "},{"text":"literal, wrapped in a set of parentheses and prefixed by a backslash. For","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"example:"}],"type":"paragraph"},{"syntax":null,"code":["let price = 2","let number = 3","let message = \"One cookie: $\\(price), \\(number) cookies: $\\(price * number).\"","print(message)","\/\/ Prints \"One cookie: $2, 3 cookies: $6.\""],"type":"codeListing"},{"type":"heading","anchor":"Extending-the-Default-Interpolation-Behavior","text":"Extending the Default Interpolation Behavior","level":1},{"type":"paragraph","inlineContent":[{"text":"Add new interpolation behavior to existing types by extending","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"DefaultStringInterpolation"},{"text":", the type that implements interpolation for","type":"text"},{"text":" ","type":"text"},{"text":"types like ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" and "},{"code":"Substring","type":"codeVoice"},{"text":", to add an overload of","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"appendInterpolation(_:)"},{"text":" with their new behavior.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information, see the "},{"code":"DefaultStringInterpolation","type":"codeVoice"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"StringInterpolationProtocol"},{"type":"text","text":" documentation."}]},{"type":"heading","anchor":"Creating-a-Type-That-Supports-the-Default-String-Interpolation","level":1,"text":"Creating a Type That Supports the Default String Interpolation"},{"inlineContent":[{"text":"To create a new type that supports string literals and interpolation, but","type":"text"},{"text":" ","type":"text"},{"text":"that doesn’t need any custom behavior, conform the type to","type":"text"},{"text":" ","type":"text"},{"code":"ExpressibleByStringInterpolation","type":"codeVoice"},{"type":"text","text":" and implement the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"init(stringLiteral: String)"},{"text":" initializer declared by the","type":"text"},{"text":" ","type":"text"},{"code":"ExpressibleByStringLiteral","type":"codeVoice"},{"text":" protocol. Swift will automatically use","type":"text"},{"text":" ","type":"text"},{"code":"DefaultStringInterpolation","type":"codeVoice"},{"type":"text","text":" as the interpolation type and provide an"},{"type":"text","text":" "},{"type":"text","text":"implementation for "},{"code":"init(stringInterpolation:)","type":"codeVoice"},{"text":" that passes the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"interpolated literal’s contents to "},{"type":"codeVoice","code":"init(stringLiteral:)"},{"text":", so you don’t","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"need to implement anything specific to this protocol."}],"type":"paragraph"},{"anchor":"Creating-a-Type-That-Supports-Custom-String-Interpolation","type":"heading","text":"Creating a Type That Supports Custom String Interpolation","level":1},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want a conforming type to differentiate between literal and"},{"type":"text","text":" "},{"text":"interpolated segments, restrict the types that can be interpolated,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"support different interpolators from the ones on "},{"code":"String","type":"codeVoice"},{"text":", or avoid","type":"text"},{"type":"text","text":" "},{"type":"text","text":"constructing a "},{"code":"String","type":"codeVoice"},{"type":"text","text":" containing the data, the type must specify a custom"},{"type":"text","text":" "},{"type":"codeVoice","code":"StringInterpolation"},{"text":" associated type. This type must conform to","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"StringInterpolationProtocol"},{"type":"text","text":" and have a matching "},{"type":"codeVoice","code":"StringLiteralType"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information, see the "},{"code":"StringInterpolationProtocol","type":"codeVoice"},{"type":"text","text":" documentation."}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/expressiblebystringinterpolation"]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByStringLiteral":{"abstract":[{"type":"text","text":"A type that can be initialized with a string literal."}],"type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ExpressibleByStringLiteral","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringLiteral","title":"ExpressibleByStringLiteral","url":"\/documentation\/compute\/expressiblebystringliteral","navigatorTitle":[{"text":"ExpressibleByStringLiteral","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByUnicodeScalarLiteral":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressibleByUnicodeScalarLiteral"}],"kind":"symbol","title":"ExpressibleByUnicodeScalarLiteral","abstract":[{"text":"A type that can be initialized with a string literal containing a single","type":"text"},{"type":"text","text":" "},{"text":"Unicode scalar value.","type":"text"}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExpressibleByUnicodeScalarLiteral"}],"url":"\/documentation\/compute\/expressiblebyunicodescalarliteral","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByUnicodeScalarLiteral"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByExtendedGraphemeClusterLiteral":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressibleByExtendedGraphemeClusterLiteral"}],"kind":"symbol","title":"ExpressibleByExtendedGraphemeClusterLiteral","abstract":[{"type":"text","text":"A type that can be initialized with a string literal containing a single"},{"type":"text","text":" "},{"text":"extended grapheme cluster.","type":"text"}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"ExpressibleByExtendedGraphemeClusterLiteral","kind":"identifier"}],"url":"\/documentation\/compute\/expressiblebyextendedgraphemeclusterliteral","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByExtendedGraphemeClusterLiteral"},"doc://com.swallow.documentation.Compute/documentation/Compute/StringProtocol":{"url":"\/documentation\/compute\/stringprotocol","role":"symbol","abstract":[{"type":"text","text":"A type that can represent a string as a collection of characters."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","title":"StringProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StringProtocol","kind":"identifier"}],"navigatorTitle":[{"text":"StringProtocol","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByStringInterpolation/StringInterpolation":{"type":"topic","abstract":[{"text":"The type each segment of a string literal containing interpolations","type":"text"},{"type":"text","text":" "},{"type":"text","text":"should be appended to."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StringInterpolation"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:s27StringInterpolationProtocolP","text":"StringInterpolationProtocol"},{"text":" = ","kind":"text"},{"text":"DefaultStringInterpolation","kind":"typeIdentifier","preciseIdentifier":"s:s26DefaultStringInterpolationV"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringInterpolation\/StringInterpolation","title":"StringInterpolation","required":true,"role":"symbol","url":"\/documentation\/compute\/expressiblebystringinterpolation\/stringinterpolation"},"doc://com.swallow.documentation.Compute/documentation/Compute/String":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"String"}],"title":"String","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"String","kind":"identifier"}],"abstract":[{"type":"text","text":"A Unicode string value that is a collection of characters."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/string"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByStringInterpolation/init(stringInterpolation:)-95neq":{"required":true,"title":"init(stringInterpolation:)","abstract":[{"type":"text","text":"Creates an instance from a string interpolation."}],"kind":"symbol","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"stringInterpolation","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:s32ExpressibleByStringInterpolationP0cD0Qa","text":"StringInterpolation","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringInterpolation\/init(stringInterpolation:)-95neq","role":"symbol","url":"\/documentation\/compute\/expressiblebystringinterpolation\/init(stringinterpolation:)-95neq","defaultImplementations":1},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByStringInterpolation":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressibleByStringInterpolation"}],"kind":"symbol","title":"ExpressibleByStringInterpolation","abstract":[{"type":"text","text":"A type that can be initialized by string interpolation with a string"},{"text":" ","type":"text"},{"type":"text","text":"literal that includes expressions."}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExpressibleByStringInterpolation"}],"url":"\/documentation\/compute\/expressiblebystringinterpolation","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringInterpolation"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring":{"navigatorTitle":[{"kind":"identifier","text":"Substring"}],"url":"\/documentation\/compute\/substring","title":"Substring","abstract":[{"text":"A slice of a string.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Substring","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}