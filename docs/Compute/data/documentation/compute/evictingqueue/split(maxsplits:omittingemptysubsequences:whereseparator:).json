{"kind":"symbol","identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EvictingQueue\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","interfaceLanguage":"swift"},"metadata":{"title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":", ","kind":"text"},{"text":"whereSeparator","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> [","kind":"text"},{"text":"ArraySlice","kind":"typeIdentifier","preciseIdentifier":"s:s10ArraySliceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":">]","kind":"text"}],"modules":[{"relatedModules":["Swift"],"name":"Compute"}],"roleHeading":"Instance Method","extendedModule":"Swift","symbolKind":"method","externalID":"s:STsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSays10ArraySliceVy7ElementQzGGSi_S2bAHKXEtKF::SYNTHESIZED::s:7Compute13EvictingQueueV"},"sections":[],"variants":[{"paths":["\/documentation\/compute\/evictingqueue\/split(maxsplits:omittingemptysubsequences:whereseparator:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"Returns the longest possible subsequences of the sequence, in order, that","type":"text"},{"type":"text","text":" "},{"text":"don’t contain elements satisfying the given predicate. Elements that are","type":"text"},{"type":"text","text":" "},{"text":"used to split the sequence are not returned as part of any subsequence.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"maxSplits"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int"},{"text":" = Int.max, ","kind":"text"},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":" = true, ","kind":"text"},{"kind":"externalParam","text":"whereSeparator"},{"kind":"text","text":" "},{"kind":"internalParam","text":"isSeparator"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","text":"Bool","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> [","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","kind":"typeIdentifier","text":"ArraySlice","preciseIdentifier":"s:s10ArraySliceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","text":"Element","kind":"typeIdentifier"},{"text":">]","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"maxSplits","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The maximum number of times to split the sequence, or one"},{"type":"text","text":" "},{"type":"text","text":"less than the number of subsequences to return. If "},{"code":"maxSplits + 1","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"subsequences are returned, the last one is a suffix of the original"},{"text":" ","type":"text"},{"text":"sequence containing the remaining elements. ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" must be","type":"text"},{"type":"text","text":" "},{"text":"greater than or equal to zero. The default value is ","type":"text"},{"code":"Int.max","type":"codeVoice"},{"text":".","type":"text"}]}]},{"name":"omittingEmptySubsequences","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"false"},{"text":", an empty subsequence is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"returned in the result for each pair of consecutive elements"},{"text":" ","type":"text"},{"type":"text","text":"satisfying the "},{"type":"codeVoice","code":"isSeparator"},{"text":" predicate and for each element at the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"start or end of the sequence satisfying the "},{"type":"codeVoice","code":"isSeparator"},{"text":" predicate.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"If "},{"type":"codeVoice","code":"true"},{"type":"text","text":", only nonempty subsequences are returned. The default"},{"type":"text","text":" "},{"text":"value is ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}]}]},{"name":"isSeparator","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if its argument should be"},{"type":"text","text":" "},{"text":"used to split the sequence; otherwise, ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}]}]}]},{"content":[{"type":"heading","level":2,"text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An array of subsequences, split from this sequence’s elements."}]}],"kind":"content"},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The following examples show the effects of the ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"type":"text","text":" parameters when splitting a string using a"},{"text":" ","type":"text"},{"type":"text","text":"closure that matches spaces. The first use of "},{"code":"split","type":"codeVoice"},{"type":"text","text":" returns each word"},{"type":"text","text":" "},{"type":"text","text":"that was originally separated by one or more spaces."}]},{"code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","print(line.split(whereSeparator: { $0 == \" \" })","          .map(String.init))","\/\/ Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"The second example passes "},{"type":"codeVoice","code":"1"},{"text":" for the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" parameter, so the"},{"type":"text","text":" "},{"type":"text","text":"original string is split just once, into two new strings."}],"type":"paragraph"},{"syntax":null,"code":["print(","   line.split(maxSplits: 1, whereSeparator: { $0 == \" \" })","                  .map(String.init))","\/\/ Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\""],"type":"codeListing"},{"inlineContent":[{"text":"The final example passes ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" for the ","type":"text"},{"type":"codeVoice","code":"allowEmptySlices"},{"type":"text","text":" parameter, so"},{"type":"text","text":" "},{"type":"text","text":"the returned array contains empty strings where spaces were repeated."}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["print(","    line.split(","        omittingEmptySubsequences: false,","        whereSeparator: { $0 == \" \" }","    ).map(String.init))","\/\/ Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""]},{"name":"Complexity","style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"O("},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":" is the length of the sequence."}],"type":"paragraph"}]}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EvictingQueue","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EvictingQueue\/Sequence-Implementations"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","role":"symbol","abstract":[{"type":"text","text":"A slice of an "},{"code":"Array","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"ContiguousArray"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"ArraySlice"},{"text":" instance.","type":"text"}],"title":"ArraySlice","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArraySlice"}],"navigatorTitle":[{"kind":"identifier","text":"ArraySlice"}],"url":"\/documentation\/compute\/arrayslice","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/EvictingQueue/Sequence-Implementations":{"role":"collectionGroup","title":"Sequence Implementations","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EvictingQueue\/Sequence-Implementations","url":"\/documentation\/compute\/evictingqueue\/sequence-implementations","kind":"article","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/EvictingQueue/split(maxSplits:omittingEmptySubsequences:whereSeparator:)":{"abstract":[{"text":"Returns the longest possible subsequences of the sequence, in order, that","type":"text"},{"text":" ","type":"text"},{"text":"don’t contain elements satisfying the given predicate. Elements that are","type":"text"},{"type":"text","text":" "},{"text":"used to split the sequence are not returned as part of any subsequence.","type":"text"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EvictingQueue\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","type":"topic","url":"\/documentation\/compute\/evictingqueue\/split(maxsplits:omittingemptysubsequences:whereseparator:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"kind":"text","text":"("},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"whereSeparator"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> ["},{"preciseIdentifier":"s:s10ArraySliceV","kind":"typeIdentifier","text":"ArraySlice"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":">]"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/EvictingQueue":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EvictingQueue"}],"abstract":[{"text":"A prioritiy queue that evicts elements after a certain count.","type":"text"}],"url":"\/documentation\/compute\/evictingqueue","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EvictingQueue","title":"EvictingQueue","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"EvictingQueue","kind":"identifier"}]}}}