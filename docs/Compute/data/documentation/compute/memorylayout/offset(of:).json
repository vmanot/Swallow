{"kind":"symbol","sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MemoryLayout\/offset(of:)","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"offset"},{"kind":"text","text":"("},{"kind":"externalParam","text":"of"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"key"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s14PartialKeyPathC","text":"PartialKeyPath"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:Si","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","kind":"typeIdentifier","text":"Int"},{"text":"?","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"key","content":[{"inlineContent":[{"type":"text","text":"A key path referring to storage that can be accessed"},{"text":" ","type":"text"},{"text":"through a value of type ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":"."}],"type":"paragraph"}]}]},{"content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"text":"The offset in bytes from a pointer to a value of type ","type":"text"},{"code":"T","type":"codeVoice"},{"text":" to a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"pointer to the storage referenced by "},{"code":"key","type":"codeVoice"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" if no such offset","type":"text"},{"text":" ","type":"text"},{"text":"is available for the storage referenced by ","type":"text"},{"type":"codeVoice","code":"key"},{"type":"text","text":". If the value is"},{"type":"text","text":" "},{"code":"nil","type":"codeVoice"},{"type":"text","text":", it can be because "},{"code":"key","type":"codeVoice"},{"type":"text","text":" is computed, has observers, requires"},{"type":"text","text":" "},{"type":"text","text":"reabstraction, or overlaps storage with other properties."}]}],"kind":"content"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use this method to find the distance in bytes that can be added"},{"type":"text","text":" "},{"type":"text","text":"to a pointer of type "},{"type":"codeVoice","code":"T"},{"type":"text","text":" to get a pointer to the property referenced by"},{"text":" ","type":"text"},{"type":"codeVoice","code":"key"},{"text":". The offset is available only if the given key refers to inline,","type":"text"},{"text":" ","type":"text"},{"text":"directly addressable storage within the in-memory representation of ","type":"text"},{"type":"codeVoice","code":"T"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"If the return value of this method is non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":", then accessing the value"},{"type":"text","text":" "},{"text":"by key path or by an offset pointer are equivalent. For example, for a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"variable "},{"type":"codeVoice","code":"root"},{"type":"text","text":" of type "},{"type":"codeVoice","code":"T"},{"text":", a key path ","type":"text"},{"type":"codeVoice","code":"key"},{"type":"text","text":" of type"},{"type":"text","text":" "},{"type":"codeVoice","code":"WritableKeyPath<T, U>"},{"text":", and a ","type":"text"},{"type":"codeVoice","code":"value"},{"type":"text","text":" of type "},{"type":"codeVoice","code":"U"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["\/\/ Mutation through the key path","root[keyPath: key] = value","","\/\/ Mutation through the offset pointer","withUnsafeMutableBytes(of: &root) { bytes in","    let offset = MemoryLayout<T>.offset(of: key)!","    let rawPointerToValue = bytes.baseAddress! + offset","    let pointerToValue = rawPointerToValue.assumingMemoryBound(to: U.self)","    pointerToValue.pointee = value","}"]},{"type":"paragraph","inlineContent":[{"text":"A property has inline, directly addressable storage when it is a stored","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"property for which no additional work is required to extract or set the"},{"text":" ","type":"text"},{"text":"value. Properties are not directly accessible if they trigger any","type":"text"},{"type":"text","text":" "},{"code":"didSet","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" accessors, perform any representation changes such"},{"text":" ","type":"text"},{"text":"as bridging or closure reabstraction, or mask the value out of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"overlapping storage as for packed bitfields. In addition, because class"},{"type":"text","text":" "},{"text":"instance properties are always stored out-of-line, their positions are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"not accessible using "},{"type":"codeVoice","code":"offset(of:)"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"For example, in the "},{"type":"codeVoice","code":"ProductCategory"},{"text":" type defined here, only","type":"text"},{"type":"text","text":" "},{"code":"\\.updateCounter","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"\\.identifier"},{"type":"text","text":", and "},{"type":"codeVoice","code":"\\.identifier.name"},{"text":" refer to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"properties with inline, directly addressable storage:"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["struct ProductCategory {","    struct Identifier {","        var name: String              \/\/ addressable","    }","","    var identifier: Identifier        \/\/ addressable","    var updateCounter: Int            \/\/ addressable","    var products: [Product] {         \/\/ not addressable: didSet handler","        didSet { updateCounter += 1 }","    }","    var productCount: Int {           \/\/ not addressable: computed property","        return products.count","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"When using ","type":"text"},{"code":"offset(of:)","type":"codeVoice"},{"text":" with a type imported from a library, don’t","type":"text"},{"type":"text","text":" "},{"text":"assume that future versions of the library will have the same behavior.","type":"text"},{"text":" ","type":"text"},{"text":"If a property is converted from a stored property to a computed","type":"text"},{"text":" ","type":"text"},{"text":"property, the result of ","type":"text"},{"code":"offset(of:)","type":"codeVoice"},{"text":" changes to ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":". That kind of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"conversion is nonbreaking in other contexts, but would trigger a runtime"},{"text":" ","type":"text"},{"type":"text","text":"error if the result of "},{"type":"codeVoice","code":"offset(of:)"},{"text":" is force-unwrapped.","type":"text"}]}]}],"metadata":{"extendedModule":"Swift","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"offset","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"of"},{"kind":"text","text":": "},{"text":"PartialKeyPath","preciseIdentifier":"s:s14PartialKeyPathC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":"?","kind":"text"}],"externalID":"s:s12MemoryLayoutO6offset2ofSiSgs14PartialKeyPathCyxG_tFZ","symbolKind":"method","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"role":"symbol","roleHeading":"Type Method","title":"offset(of:)"},"variants":[{"paths":["\/documentation\/compute\/memorylayout\/offset(of:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MemoryLayout"]]},"abstract":[{"text":"Returns the offset of an inline stored property within a type’s in-memory","type":"text"},{"type":"text","text":" "},{"type":"text","text":"representation."}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/MemoryLayout":{"url":"\/documentation\/compute\/memorylayout","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MemoryLayout","title":"MemoryLayout","role":"symbol","abstract":[{"text":"The memory layout of a type, describing its size, stride, and alignment.","type":"text"}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"MemoryLayout","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"MemoryLayout"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/MemoryLayout/offset(of:)":{"role":"symbol","title":"offset(of:)","kind":"symbol","url":"\/documentation\/compute\/memorylayout\/offset(of:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"offset"},{"kind":"text","text":"("},{"text":"of","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s14PartialKeyPathC","text":"PartialKeyPath"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MemoryLayout\/offset(of:)","type":"topic","abstract":[{"type":"text","text":"Returns the offset of an inline stored property within a type’s in-memory"},{"type":"text","text":" "},{"type":"text","text":"representation."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialKeyPath":{"type":"topic","navigatorTitle":[{"text":"PartialKeyPath","kind":"identifier"}],"abstract":[{"type":"text","text":"A partially type-erased key path, from a concrete root type to any"},{"text":" ","type":"text"},{"type":"text","text":"resulting value type."}],"title":"PartialKeyPath","url":"\/documentation\/compute\/partialkeypath","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialKeyPath","role":"symbol","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"PartialKeyPath"}]}}}