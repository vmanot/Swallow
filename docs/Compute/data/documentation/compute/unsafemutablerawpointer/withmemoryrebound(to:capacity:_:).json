{"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withMemoryRebound"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":", "},{"text":"E","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Result"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"type","kind":"internalParam"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"capacity","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"count","kind":"internalParam"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"body"},{"kind":"text","text":": ("},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer","kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":"("},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"text":" ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Error","text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":" : ~Copyable, "},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":" : ~Copyable"}],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"type","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The type to temporarily bind the memory referenced by this"},{"text":" ","type":"text"},{"type":"text","text":"pointer. This pointer must be a multiple of this type’s alignment."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The number of instances of "},{"type":"codeVoice","code":"T"},{"text":" in the re-bound region.","type":"text"}],"type":"paragraph"}],"name":"count"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes a typed pointer to the"},{"text":" ","type":"text"},{"type":"text","text":"same memory as this pointer, only bound to type "},{"type":"codeVoice","code":"T"},{"text":". The closure’s","type":"text"},{"text":" ","type":"text"},{"text":"pointer argument is valid only for the duration of the closure’s","type":"text"},{"type":"text","text":" "},{"type":"text","text":"execution. If "},{"code":"body","type":"codeVoice"},{"text":" has a return value, that value is also used as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the return value for the "},{"code":"withMemoryRebound(to:capacity:_:)","type":"codeVoice"},{"type":"text","text":" method."}]}],"name":"body"}]},{"kind":"content","content":[{"level":2,"text":"Return Value","type":"heading","anchor":"return-value"},{"inlineContent":[{"text":"The return value, if any, of the ","type":"text"},{"type":"codeVoice","code":"body"},{"type":"text","text":" closure parameter."}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this method when you have a pointer to raw memory and you need"},{"type":"text","text":" "},{"type":"text","text":"to access that memory as instances of a given type "},{"type":"codeVoice","code":"T"},{"text":". Accessing","type":"text"},{"type":"text","text":" "},{"type":"text","text":"memory as a type "},{"code":"T","type":"codeVoice"},{"type":"text","text":" requires that the memory be bound to that type. A"},{"type":"text","text":" "},{"type":"text","text":"memory location may only be bound to one type at a time, so accessing"},{"text":" ","type":"text"},{"type":"text","text":"the same memory as an unrelated type without first rebinding the memory"},{"text":" ","type":"text"},{"type":"text","text":"is undefined."}]},{"inlineContent":[{"text":"Any instance of ","type":"text"},{"code":"T","type":"codeVoice"},{"text":" within the re-bound region may be initialized or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"uninitialized. The memory underlying any individual instance of "},{"code":"T","type":"codeVoice"},{"type":"text","text":" "},{"text":"must have the same initialization state (i.e.  initialized or","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"uninitialized.) Accessing a "},{"code":"T","type":"codeVoice"},{"type":"text","text":" whose underlying memory"},{"type":"text","text":" "},{"type":"text","text":"is in a mixed initialization state shall be undefined behaviour."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following example temporarily rebinds a raw memory pointer"},{"text":" ","type":"text"},{"type":"text","text":"to "},{"code":"Int64","type":"codeVoice"},{"text":", then modifies the signed integer.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let pointer: UnsafeMutableRawPointer = fetchValue()","pointer.withMemoryRebound(to: Int64.self, capacity: 1) {","    $0.pointee.negate()","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"After executing "},{"type":"codeVoice","code":"body"},{"text":", this method rebinds memory back to its original","type":"text"},{"type":"text","text":" "},{"type":"text","text":"binding state. This can be unbound memory, or bound to a different type."}]},{"name":"Note","style":"note","type":"aside","content":[{"inlineContent":[{"text":"The region of memory starting at this pointer must match the","type":"text"},{"type":"text","text":" "},{"text":"alignment of ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":" (as reported by "},{"type":"codeVoice","code":"MemoryLayout<T>.alignment"},{"text":").","type":"text"},{"text":" ","type":"text"},{"text":"That is, ","type":"text"},{"type":"codeVoice","code":"Int(bitPattern: self) % MemoryLayout<T>.alignment"},{"text":" ","type":"text"},{"text":"must equal zero.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The region of memory starting at this pointer may have been"},{"type":"text","text":" "},{"text":"bound to a type. If that is the case, then ","type":"text"},{"code":"T","type":"codeVoice"},{"text":" must be","type":"text"},{"text":" ","type":"text"},{"text":"layout compatible with the type to which the memory has been bound.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This requirement does not apply if the region of memory"},{"text":" ","type":"text"},{"text":"has not been bound to any type.","type":"text"}]}],"name":"Note","type":"aside","style":"note"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer"]]},"variants":[{"paths":["\/documentation\/compute\/unsafemutablerawpointer\/withmemoryrebound(to:capacity:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/withMemoryRebound(to:capacity:_:)","interfaceLanguage":"swift"},"metadata":{"symbolKind":"method","extendedModule":"Swift","title":"withMemoryRebound(to:capacity:_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withMemoryRebound","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"E","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"capacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"E"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}],"roleHeading":"Instance Method","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"role":"symbol","externalID":"s:Sv17withMemoryRebound2to8capacity_q0_xm_Siq0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF"},"sections":[],"abstract":[{"type":"text","text":"Executes the given closure while temporarily binding memory to"},{"type":"text","text":" "},{"type":"text","text":"the specified number of instances of type "},{"type":"codeVoice","code":"T"},{"text":".","type":"text"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/withMemoryRebound(to:capacity:_:)":{"abstract":[{"type":"text","text":"Executes the given closure while temporarily binding memory to"},{"type":"text","text":" "},{"type":"text","text":"the specified number of instances of type "},{"type":"codeVoice","code":"T"},{"type":"text","text":"."}],"type":"topic","url":"\/documentation\/compute\/unsafemutablerawpointer\/withmemoryrebound(to:capacity:_:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/withMemoryRebound(to:capacity:_:)","title":"withMemoryRebound(to:capacity:_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withMemoryRebound","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"E"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Result"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"capacity","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":", (","kind":"text"},{"text":"UnsafeMutablePointer","kind":"typeIdentifier","preciseIdentifier":"s:Sp"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"E"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Error":{"url":"\/documentation\/compute\/error","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Error"}],"navigatorTitle":[{"text":"Error","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Error","type":"topic","role":"symbol","abstract":[{"type":"text","text":"A type representing an error value that can be thrown."}],"kind":"symbol","title":"Error"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafeMutablePointer"}],"url":"\/documentation\/compute\/unsafemutablepointer","type":"topic","abstract":[{"type":"text","text":"A pointer for accessing and manipulating data of a"},{"text":" ","type":"text"},{"text":"specific type.","type":"text"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnsafeMutablePointer"}],"title":"UnsafeMutablePointer"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer":{"kind":"symbol","type":"topic","abstract":[{"text":"A raw pointer for accessing and manipulating untyped data.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer","url":"\/documentation\/compute\/unsafemutablerawpointer","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnsafeMutableRawPointer"}],"title":"UnsafeMutableRawPointer","navigatorTitle":[{"kind":"identifier","text":"UnsafeMutableRawPointer"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}