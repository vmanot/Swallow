{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/initializeMemory(as:from:count:)"},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"attribute","text":"@discardableResult"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"initializeMemory"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"as","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"type","kind":"internalParam"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":".Type, "},{"text":"from","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"source","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SP","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafePointer","kind":"typeIdentifier","text":"UnsafePointer"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"count"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The type to bind this memory to."}],"type":"paragraph"}],"name":"type"},{"content":[{"type":"paragraph","inlineContent":[{"text":"A pointer to the values to copy. The memory in the region","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"source..<(source + count)"},{"type":"text","text":" must be initialized to type "},{"type":"codeVoice","code":"T"},{"type":"text","text":" and must"},{"text":" ","type":"text"},{"type":"text","text":"not overlap the destination region."}]}],"name":"source"},{"name":"count","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The number of copies of "},{"type":"codeVoice","code":"value"},{"type":"text","text":" to copy into memory. "},{"type":"codeVoice","code":"count"},{"type":"text","text":" "},{"text":"must not be negative.","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"text":"Return Value","level":2,"type":"heading","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A typed pointer to the memory referenced by this raw pointer."}]}]},{"content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"inlineContent":[{"type":"text","text":"The memory referenced by this pointer must be uninitialized or"},{"text":" ","type":"text"},{"type":"text","text":"initialized to a trivial type, and must be properly aligned for"},{"text":" ","type":"text"},{"type":"text","text":"accessing "},{"type":"codeVoice","code":"T"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following example allocates enough raw memory to hold four instances"},{"text":" ","type":"text"},{"text":"of ","type":"text"},{"type":"codeVoice","code":"Int8"},{"type":"text","text":", and then uses the "},{"type":"codeVoice","code":"initializeMemory(as:from:count:)"},{"text":" method","type":"text"},{"type":"text","text":" "},{"text":"to initialize the allocated memory.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let count = 4","let bytesPointer = UnsafeMutableRawPointer.allocate(","        byteCount: count * MemoryLayout<Int8>.stride,","        alignment: MemoryLayout<Int8>.alignment)","let values: [Int8] = [1, 2, 3, 4]","let int8Pointer = values.withUnsafeBufferPointer { buffer in","    return bytesPointer.initializeMemory(as: Int8.self,","              from: buffer.baseAddress!,","              count: buffer.count)","}","\/\/ int8Pointer.pointee == 1","\/\/ (int8Pointer + 3).pointee == 4","","\/\/ After using 'int8Pointer':","int8Pointer.deallocate()"],"syntax":null},{"inlineContent":[{"text":"After calling this method on a raw pointer ","type":"text"},{"type":"codeVoice","code":"p"},{"text":", the region starting at","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"p"},{"text":" and continuing up to ","type":"text"},{"code":"p + count * MemoryLayout<T>.stride","type":"codeVoice"},{"text":" is bound","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to type "},{"type":"codeVoice","code":"T"},{"text":" and initialized. If ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":" is a nontrivial type, you must"},{"text":" ","type":"text"},{"type":"text","text":"eventually deinitialize or move from the values in this region to avoid"},{"text":" ","type":"text"},{"text":"leaks. The instances in the region ","type":"text"},{"code":"source..<(source + count)","type":"codeVoice"},{"text":" are","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"unaffected."}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"extendedModule":"Swift","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"initializeMemory","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"as"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":".Type, "},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UnsafePointer","kind":"typeIdentifier","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":") -> ","kind":"text"},{"text":"UnsafeMutablePointer","kind":"typeIdentifier","preciseIdentifier":"s:Sp"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"modules":[{"name":"Compute","relatedModules":["Swift"]}],"externalID":"s:Sv16initializeMemory2as4from5countSpyxGxm_SPyxGSitlF","roleHeading":"Instance Method","symbolKind":"method","title":"initializeMemory(as:from:count:)","role":"symbol"},"variants":[{"paths":["\/documentation\/compute\/unsafemutablerawpointer\/initializememory(as:from:count:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","sections":[],"abstract":[{"type":"text","text":"Initializes the memory referenced by this pointer with the values"},{"type":"text","text":" "},{"type":"text","text":"starting at the given pointer, binds the memory to the values’ type, and"},{"type":"text","text":" "},{"type":"text","text":"returns a typed pointer to the initialized memory."}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/initializeMemory(as:from:count:)":{"type":"topic","url":"\/documentation\/compute\/unsafemutablerawpointer\/initializememory(as:from:count:)","title":"initializeMemory(as:from:count:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/initializeMemory(as:from:count:)","role":"symbol","abstract":[{"text":"Initializes the memory referenced by this pointer with the values","type":"text"},{"type":"text","text":" "},{"text":"starting at the given pointer, binds the memory to the values’ type, and","type":"text"},{"text":" ","type":"text"},{"text":"returns a typed pointer to the initialized memory.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"initializeMemory","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type, "},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UnsafePointer","kind":"typeIdentifier","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":") -> ","kind":"text"},{"text":"UnsafeMutablePointer","kind":"typeIdentifier","preciseIdentifier":"s:Sp"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer":{"kind":"symbol","type":"topic","abstract":[{"text":"A raw pointer for accessing and manipulating untyped data.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer","url":"\/documentation\/compute\/unsafemutablerawpointer","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnsafeMutableRawPointer"}],"title":"UnsafeMutableRawPointer","navigatorTitle":[{"kind":"identifier","text":"UnsafeMutableRawPointer"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafeMutablePointer"}],"url":"\/documentation\/compute\/unsafemutablepointer","type":"topic","abstract":[{"type":"text","text":"A pointer for accessing and manipulating data of a"},{"text":" ","type":"text"},{"text":"specific type.","type":"text"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnsafeMutablePointer"}],"title":"UnsafeMutablePointer"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafePointer":{"abstract":[{"type":"text","text":"A pointer for accessing data of a specific type."}],"type":"topic","title":"UnsafePointer","url":"\/documentation\/compute\/unsafepointer","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafePointer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafePointer"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnsafePointer"}],"kind":"symbol"}}}