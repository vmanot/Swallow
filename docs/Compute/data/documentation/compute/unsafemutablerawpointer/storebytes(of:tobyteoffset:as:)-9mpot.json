{"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer"]]},"abstract":[{"type":"text","text":"Stores the given value’s bytes into raw memory at the specified offset."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"storeBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"of","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"value","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"text":"toByteOffset","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"offset","kind":"internalParam"},{"kind":"text","text":": "},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":" = 0, "},{"text":"as","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"type"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":".Type)"}],"languages":["swift"],"platforms":["macOS"]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value to store as raw bytes."}]}],"name":"value"},{"content":[{"inlineContent":[{"type":"text","text":"The offset from this pointer, in bytes. "},{"type":"codeVoice","code":"offset"},{"text":" must be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"nonnegative. The default is zero."}],"type":"paragraph"}],"name":"offset"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of "},{"code":"value","type":"codeVoice"},{"text":".","type":"text"}]}],"name":"type"}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type "},{"type":"codeVoice","code":"T"},{"text":" to be stored must be a trivial type. The memory","type":"text"},{"type":"text","text":" "},{"type":"text","text":"must also be uninitialized, initialized to "},{"type":"codeVoice","code":"T"},{"type":"text","text":", or initialized to"},{"type":"text","text":" "},{"type":"text","text":"another trivial type that is layout compatible with "},{"code":"T","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"After calling ","type":"text"},{"code":"storeBytes(of:toByteOffset:as:)","type":"codeVoice"},{"type":"text","text":", the memory is"},{"text":" ","type":"text"},{"type":"text","text":"initialized to the raw bytes of "},{"code":"value","type":"codeVoice"},{"type":"text","text":". If the memory is bound to a"},{"type":"text","text":" "},{"type":"text","text":"type "},{"type":"codeVoice","code":"U"},{"text":" that is layout compatible with ","type":"text"},{"code":"T","type":"codeVoice"},{"type":"text","text":", then it contains a value of"},{"type":"text","text":" "},{"text":"type ","type":"text"},{"code":"U","type":"codeVoice"},{"type":"text","text":". Calling "},{"code":"storeBytes(of:toByteOffset:as:)","type":"codeVoice"},{"type":"text","text":" does not change the"},{"text":" ","type":"text"},{"type":"text","text":"bound type of the memory."}],"type":"paragraph"},{"name":"Note","type":"aside","content":[{"inlineContent":[{"text":"A trivial type can be copied with just a bit-for-bit copy without","type":"text"},{"type":"text","text":" "},{"text":"any indirection or reference-counting operations. Generally, native","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Swift types that do not contain strong or weak references or other"},{"text":" ","type":"text"},{"type":"text","text":"forms of indirection are trivial, as are imported C structs and enums."}],"type":"paragraph"}],"style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to store into memory a copy of a value of a type that isn’t"},{"type":"text","text":" "},{"text":"trivial, you cannot use the ","type":"text"},{"type":"codeVoice","code":"storeBytes(of:toByteOffset:as:)"},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"Instead, you must know either initialize the memory or,"},{"text":" ","type":"text"},{"type":"text","text":"if you know the memory was already bound to "},{"code":"type","type":"codeVoice"},{"text":", assign to the memory.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, to replace a value stored in a raw pointer "},{"code":"p","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"codeVoice","code":"U"},{"text":" is the current type and ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":" is the new type, use a typed"},{"text":" ","type":"text"},{"text":"pointer to access and deinitialize the current value before initializing","type":"text"},{"type":"text","text":" "},{"text":"the memory with a new value:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let typedPointer = p.bindMemory(to: U.self, capacity: 1)","typedPointer.deinitialize(count: 1)","p.initializeMemory(as: T.self, repeating: newValue, count: 1)"]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/unsafemutablerawpointer\/storebytes(of:tobyteoffset:as:)-9mpot"]}],"metadata":{"modules":[{"relatedModules":["Swift"],"name":"Compute"}],"symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"storeBytes","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"of","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"toByteOffset","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":".Type)"}],"externalID":"s:Sv10storeBytes2of12toByteOffset2asyx_SixmtlF","extendedModule":"Swift","role":"symbol","title":"storeBytes(of:toByteOffset:as:)","roleHeading":"Instance Method"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/storeBytes(of:toByteOffset:as:)-9mpot"},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","sections":[],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/storeBytes(of:toByteOffset:as:)-9mpot":{"type":"topic","title":"storeBytes(of:toByteOffset:as:)","url":"\/documentation\/compute\/unsafemutablerawpointer\/storebytes(of:tobyteoffset:as:)-9mpot","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/storeBytes(of:toByteOffset:as:)-9mpot","role":"symbol","abstract":[{"type":"text","text":"Stores the given value’s bytes into raw memory at the specified offset."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"storeBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"of","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"toByteOffset"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":", ","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type)","kind":"text"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer":{"kind":"symbol","type":"topic","abstract":[{"text":"A raw pointer for accessing and manipulating untyped data.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer","url":"\/documentation\/compute\/unsafemutablerawpointer","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnsafeMutableRawPointer"}],"title":"UnsafeMutableRawPointer","navigatorTitle":[{"kind":"identifier","text":"UnsafeMutableRawPointer"}]}}}