{"sections":[],"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"initializeMemory"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"as","kind":"externalParam"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"repeating"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"text":"count","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sp","text":"UnsafeMutablePointer"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"externalID":"s:Sv16initializeMemory2as9repeating5countSpyxGxm_xSitlF","extendedModule":"Swift","modules":[{"name":"Compute","relatedModules":["Swift"]}],"title":"initializeMemory(as:repeating:count:)","role":"symbol","roleHeading":"Instance Method","symbolKind":"method"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/initializeMemory(as:repeating:count:)","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/unsafemutablerawpointer\/initializememory(as:repeating:count:)"]}],"kind":"symbol","abstract":[{"type":"text","text":"Initializes the memory referenced by this pointer with the given value,"},{"type":"text","text":" "},{"type":"text","text":"binds the memory to the value’s type, and returns a typed pointer to the"},{"type":"text","text":" "},{"type":"text","text":"initialized memory."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"@discardableResult"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"initializeMemory","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"as"},{"kind":"text","text":" "},{"kind":"internalParam","text":"type"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"text":".Type, ","kind":"text"},{"text":"repeating","kind":"externalParam"},{"kind":"text","text":" "},{"text":"repeatedValue","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"count"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int"},{"kind":"text","text":") -> "},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer","kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}]}]},{"parameters":[{"name":"type","content":[{"inlineContent":[{"type":"text","text":"The type to bind this memory to."}],"type":"paragraph"}]},{"name":"repeatedValue","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The instance to copy into memory."}]}]},{"content":[{"inlineContent":[{"text":"The number of copies of ","type":"text"},{"type":"codeVoice","code":"value"},{"type":"text","text":" to copy into memory. "},{"code":"count","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"must not be negative."}],"type":"paragraph"}],"name":"count"}],"kind":"parameters"},{"content":[{"text":"Return Value","anchor":"return-value","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"A typed pointer to the memory referenced by this raw pointer."}],"type":"paragraph"}],"kind":"content"},{"content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The memory referenced by this pointer must be uninitialized or"},{"text":" ","type":"text"},{"type":"text","text":"initialized to a trivial type, and must be properly aligned for"},{"type":"text","text":" "},{"text":"accessing ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The following example allocates enough raw memory to hold four instances","type":"text"},{"type":"text","text":" "},{"text":"of ","type":"text"},{"type":"codeVoice","code":"Int8"},{"type":"text","text":", and then uses the "},{"code":"initializeMemory(as:repeating:count:)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"method to initialize the allocated memory."}]},{"type":"codeListing","syntax":null,"code":["let count = 4","let bytesPointer = UnsafeMutableRawPointer.allocate(","        byteCount: count * MemoryLayout<Int8>.stride,","        alignment: MemoryLayout<Int8>.alignment)","let int8Pointer = bytesPointer.initializeMemory(","        as: Int8.self, repeating: 0, count: count)","","\/\/ After using 'int8Pointer':","int8Pointer.deallocate()"]},{"inlineContent":[{"text":"After calling this method on a raw pointer ","type":"text"},{"code":"p","type":"codeVoice"},{"type":"text","text":", the region starting at"},{"type":"text","text":" "},{"code":"self","type":"codeVoice"},{"text":" and continuing up to ","type":"text"},{"type":"codeVoice","code":"p + count * MemoryLayout<T>.stride"},{"type":"text","text":" is bound"},{"type":"text","text":" "},{"type":"text","text":"to type "},{"type":"codeVoice","code":"T"},{"type":"text","text":" and initialized. If "},{"type":"codeVoice","code":"T"},{"type":"text","text":" is a nontrivial type, you must"},{"type":"text","text":" "},{"text":"eventually deinitialize or move from the values in this region to avoid","type":"text"},{"type":"text","text":" "},{"text":"leaks.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafeMutablePointer"}],"url":"\/documentation\/compute\/unsafemutablepointer","type":"topic","abstract":[{"type":"text","text":"A pointer for accessing and manipulating data of a"},{"text":" ","type":"text"},{"text":"specific type.","type":"text"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnsafeMutablePointer"}],"title":"UnsafeMutablePointer"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/initializeMemory(as:repeating:count:)":{"type":"topic","title":"initializeMemory(as:repeating:count:)","url":"\/documentation\/compute\/unsafemutablerawpointer\/initializememory(as:repeating:count:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/initializeMemory(as:repeating:count:)","role":"symbol","abstract":[{"text":"Initializes the memory referenced by this pointer with the given value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"binds the memory to the value’s type, and returns a typed pointer to the"},{"text":" ","type":"text"},{"type":"text","text":"initialized memory."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"initializeMemory"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"text":".Type, ","kind":"text"},{"text":"repeating","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"count"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sp","text":"UnsafeMutablePointer"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer":{"kind":"symbol","type":"topic","abstract":[{"text":"A raw pointer for accessing and manipulating untyped data.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer","url":"\/documentation\/compute\/unsafemutablerawpointer","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnsafeMutableRawPointer"}],"title":"UnsafeMutableRawPointer","navigatorTitle":[{"kind":"identifier","text":"UnsafeMutableRawPointer"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"}}}