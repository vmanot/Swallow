{"metadata":{"role":"symbol","modules":[{"name":"Compute","relatedModules":["Swift"]}],"extendedModule":"Swift","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"bindMemory"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"capacity"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sp","text":"UnsafeMutablePointer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"text":">","kind":"text"}],"title":"bindMemory(to:capacity:)","roleHeading":"Instance Method","externalID":"s:Sv10bindMemory2to8capacitySpyxGxm_SitRi_zlF"},"sections":[],"abstract":[{"type":"text","text":"Binds the memory to the specified type and returns a typed pointer to the"},{"type":"text","text":" "},{"type":"text","text":"bound memory."}],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"@discardableResult","kind":"attribute"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"bindMemory"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"to"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"type"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"text":".Type, ","kind":"text"},{"text":"capacity","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"count"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer","preciseIdentifier":"s:Sp","text":"UnsafeMutablePointer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":" : ~Copyable"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The type "},{"type":"codeVoice","code":"T"},{"text":" to bind the memory to.","type":"text"}]}],"name":"type"},{"content":[{"inlineContent":[{"type":"text","text":"The amount of memory to bind to type "},{"code":"T","type":"codeVoice"},{"type":"text","text":", counted as instances"},{"type":"text","text":" "},{"text":"of ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"count"}]},{"kind":"content","content":[{"text":"Return Value","anchor":"return-value","level":2,"type":"heading"},{"inlineContent":[{"text":"A typed pointer to the newly bound memory. The memory in this","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"region is bound to "},{"code":"T","type":"codeVoice"},{"type":"text","text":", but has not been modified in any other way."},{"type":"text","text":" "},{"type":"text","text":"The number of bytes in this region is"},{"type":"text","text":" "},{"code":"count * MemoryLayout<T>.stride","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"bindMemory(to:capacity:)"},{"type":"text","text":" method to bind the memory referenced"},{"text":" ","type":"text"},{"text":"by this pointer to the type ","type":"text"},{"code":"T","type":"codeVoice"},{"text":". The memory must be uninitialized or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"initialized to a type that is layout compatible with "},{"type":"codeVoice","code":"T"},{"type":"text","text":". If the memory"},{"type":"text","text":" "},{"type":"text","text":"is uninitialized, it is still uninitialized after being bound to "},{"type":"codeVoice","code":"T"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"In this example, 100 bytes of raw memory are allocated for the pointer"},{"text":" ","type":"text"},{"code":"bytesPointer","type":"codeVoice"},{"type":"text","text":", and then the first four bytes are bound to the "},{"code":"Int8","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"type."}],"type":"paragraph"},{"code":["let count = 4","let bytesPointer = UnsafeMutableRawPointer.allocate(","        byteCount: 100,","        alignment: MemoryLayout<Int8>.alignment)","let int8Pointer = bytesPointer.bindMemory(to: Int8.self, capacity: count)"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"After calling ","type":"text"},{"type":"codeVoice","code":"bindMemory(to:capacity:)"},{"text":", the first four bytes of the","type":"text"},{"text":" ","type":"text"},{"text":"memory referenced by ","type":"text"},{"code":"bytesPointer","type":"codeVoice"},{"type":"text","text":" are bound to the "},{"code":"Int8","type":"codeVoice"},{"type":"text","text":" type, though"},{"text":" ","type":"text"},{"type":"text","text":"they remain uninitialized. The remainder of the allocated region is"},{"text":" ","type":"text"},{"text":"unbound raw memory. All 100 bytes of memory must eventually be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"deallocated."}]},{"style":"warning","type":"aside","content":[{"inlineContent":[{"text":"A memory location may only be bound to one type at a time. The","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"behavior of accessing memory as a type unrelated to its bound type is"},{"text":" ","type":"text"},{"type":"text","text":"undefined."}],"type":"paragraph"}],"name":"Warning"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/unsafemutablerawpointer\/bindmemory(to:capacity:)"]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/bindMemory(to:capacity:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer"]]},"kind":"symbol","references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer":{"kind":"symbol","type":"topic","abstract":[{"text":"A raw pointer for accessing and manipulating untyped data.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer","url":"\/documentation\/compute\/unsafemutablerawpointer","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnsafeMutableRawPointer"}],"title":"UnsafeMutableRawPointer","navigatorTitle":[{"kind":"identifier","text":"UnsafeMutableRawPointer"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/bindMemory(to:capacity:)":{"type":"topic","abstract":[{"text":"Binds the memory to the specified type and returns a typed pointer to the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"bound memory."}],"url":"\/documentation\/compute\/unsafemutablerawpointer\/bindmemory(to:capacity:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/bindMemory(to:capacity:)","title":"bindMemory(to:capacity:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"bindMemory","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"capacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafeMutablePointer"}],"url":"\/documentation\/compute\/unsafemutablepointer","type":"topic","abstract":[{"type":"text","text":"A pointer for accessing and manipulating data of a"},{"text":" ","type":"text"},{"text":"specific type.","type":"text"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnsafeMutablePointer"}],"title":"UnsafeMutablePointer"}}}