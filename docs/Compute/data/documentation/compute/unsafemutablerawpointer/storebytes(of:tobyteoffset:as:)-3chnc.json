{"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer"]]},"metadata":{"externalID":"s:Sv10storeBytes2of12toByteOffset2asyx_Sixmts15BitwiseCopyableRzlF","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"roleHeading":"Instance Method","symbolKind":"method","role":"symbol","extendedModule":"Swift","title":"storeBytes(of:toByteOffset:as:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"storeBytes","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"of","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"toByteOffset"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"as"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type)"}]},"abstract":[{"type":"text","text":"Stores the given value’s bytes into raw memory at the specified offset."}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"storeBytes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"of"},{"text":" ","kind":"text"},{"text":"value","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"text":"toByteOffset","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"offset"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":" = 0, ","kind":"text"},{"kind":"externalParam","text":"as"},{"text":" ","kind":"text"},{"text":"type","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":".Type) ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"BitwiseCopyable","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","preciseIdentifier":"s:s15BitwiseCopyableP"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The value to store as raw bytes.","type":"text"}]}],"name":"value"},{"name":"offset","content":[{"inlineContent":[{"type":"text","text":"The offset from this pointer, in bytes. "},{"type":"codeVoice","code":"offset"},{"type":"text","text":" must be"},{"type":"text","text":" "},{"text":"nonnegative. The default is zero.","type":"text"}],"type":"paragraph"}]},{"name":"type","content":[{"type":"paragraph","inlineContent":[{"text":"The type of ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":"."}]}]}]},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"The type ","type":"text"},{"code":"T","type":"codeVoice"},{"type":"text","text":" to be stored must be a trivial type. The memory"},{"text":" ","type":"text"},{"text":"must also be uninitialized, initialized to ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":", or initialized to"},{"text":" ","type":"text"},{"text":"another trivial type that is layout compatible with ","type":"text"},{"type":"codeVoice","code":"T"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"After calling ","type":"text"},{"code":"storeBytes(of:toByteOffset:as:)","type":"codeVoice"},{"text":", the memory is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"initialized to the raw bytes of "},{"code":"value","type":"codeVoice"},{"type":"text","text":". If the memory is bound to a"},{"text":" ","type":"text"},{"type":"text","text":"type "},{"type":"codeVoice","code":"U"},{"text":" that is layout compatible with ","type":"text"},{"type":"codeVoice","code":"T"},{"text":", then it contains a value of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type "},{"type":"codeVoice","code":"U"},{"type":"text","text":". Calling "},{"code":"storeBytes(of:toByteOffset:as:)","type":"codeVoice"},{"text":" does not change the","type":"text"},{"type":"text","text":" "},{"text":"bound type of the memory.","type":"text"}],"type":"paragraph"},{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"A trivial type can be copied with just a bit-for-bit copy without"},{"text":" ","type":"text"},{"type":"text","text":"any indirection or reference-counting operations. Generally, native"},{"type":"text","text":" "},{"text":"Swift types that do not contain strong or weak references or other","type":"text"},{"type":"text","text":" "},{"type":"text","text":"forms of indirection are trivial, as are imported C structs and enums."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to store into memory a copy of a value of a type that isn’t"},{"type":"text","text":" "},{"type":"text","text":"trivial, you cannot use the "},{"type":"codeVoice","code":"storeBytes(of:toByteOffset:as:)"},{"text":" method.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Instead, you must know either initialize the memory or,"},{"type":"text","text":" "},{"text":"if you know the memory was already bound to ","type":"text"},{"type":"codeVoice","code":"type"},{"text":", assign to the memory.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"For example, to replace a value stored in a raw pointer "},{"type":"codeVoice","code":"p"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"codeVoice","code":"U"},{"type":"text","text":" is the current type and "},{"type":"codeVoice","code":"T"},{"text":" is the new type, use a typed","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"pointer to access and deinitialize the current value before initializing"},{"type":"text","text":" "},{"type":"text","text":"the memory with a new value:"}]},{"syntax":null,"code":["let typedPointer = p.bindMemory(to: U.self, capacity: 1)","typedPointer.deinitialize(count: 1)","p.initializeMemory(as: T.self, repeating: newValue, count: 1)"],"type":"codeListing"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/unsafemutablerawpointer\/storebytes(of:tobyteoffset:as:)-3chnc"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/storeBytes(of:toByteOffset:as:)-3chnc"},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"kind":"symbol","references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/storeBytes(of:toByteOffset:as:)-3chnc":{"abstract":[{"type":"text","text":"Stores the given value’s bytes into raw memory at the specified offset."}],"type":"topic","url":"\/documentation\/compute\/unsafemutablerawpointer\/storebytes(of:tobyteoffset:as:)-3chnc","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/storeBytes(of:toByteOffset:as:)-3chnc","title":"storeBytes(of:toByteOffset:as:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"storeBytes","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"of"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"toByteOffset","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"as","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"text":".Type)","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BitwiseCopyable":{"title":"BitwiseCopyable","abstract":[],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BitwiseCopyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","url":"\/documentation\/compute\/bitwisecopyable","navigatorTitle":[{"kind":"identifier","text":"BitwiseCopyable"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer":{"kind":"symbol","type":"topic","abstract":[{"text":"A raw pointer for accessing and manipulating untyped data.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer","url":"\/documentation\/compute\/unsafemutablerawpointer","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnsafeMutableRawPointer"}],"title":"UnsafeMutableRawPointer","navigatorTitle":[{"kind":"identifier","text":"UnsafeMutableRawPointer"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"}}}