{"metadata":{"roleHeading":"Class","title":"ReferenceTree","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ReferenceTree"}],"modules":[{"name":"Compute"}],"role":"symbol","symbolKind":"class","externalID":"s:7Compute13ReferenceTreeC","navigatorTitle":[{"text":"ReferenceTree","kind":"identifier"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/referencetree"]}],"relationshipsSections":[{"kind":"relationships","type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/HomogenousTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveTreeProtocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceParentPointerTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeProtocol"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"kind":"symbol","identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/init(_:children:)"],"title":"Initializers","anchor":"Initializers","generated":true},{"title":"Instance Properties","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/children-swift.property","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/element","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/parent","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/value"],"generated":true,"anchor":"Instance-Properties"},{"generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/addChild(_:)"],"anchor":"Instance-Methods","title":"Instance Methods"},{"title":"Type Aliases","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/Children-swift.typealias"],"generated":true,"anchor":"Type-Aliases"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/CustomStringConvertible-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/Decodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/Encodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/HomogenousTree-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/RecursiveTreeProtocol-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/TreeProtocol-Implementations"],"title":"Default Implementations","anchor":"Default-Implementations","generated":true}],"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"text":"A simple reference-based tree data structure for Swift.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"final","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ReferenceTree","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Element","kind":"genericParameter"},{"kind":"text","text":">"}]}]},{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This structure is "},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"text":" a value type.","type":"text"}]}]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceTree/Encodable-Implementations":{"title":"Encodable Implementations","type":"topic","url":"\/documentation\/compute\/referencetree\/encodable-implementations","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/Encodable-Implementations","abstract":[],"kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/Decodable":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Decodable"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/decodable","abstract":[{"text":"A type that can decode itself from an external representation.","type":"text"}],"navigatorTitle":[{"text":"Decodable","kind":"identifier"}],"title":"Decodable","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Decodable"},{"text":".","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceTree/RecursiveTreeProtocol-Implementations":{"title":"RecursiveTreeProtocol Implementations","url":"\/documentation\/compute\/referencetree\/recursivetreeprotocol-implementations","role":"collectionGroup","type":"topic","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/RecursiveTreeProtocol-Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceTree/HomogenousTree-Implementations":{"kind":"article","url":"\/documentation\/compute\/referencetree\/homogenoustree-implementations","title":"HomogenousTree Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/HomogenousTree-Implementations","abstract":[],"role":"collectionGroup","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/HomogenousTree":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"HomogenousTree","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/HomogenousTree","url":"\/documentation\/compute\/homogenoustree","type":"topic","abstract":[],"title":"HomogenousTree","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"HomogenousTree","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible":{"abstract":[{"type":"text","text":"A type with a customized textual representation."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CustomStringConvertible"}],"type":"topic","title":"CustomStringConvertible","role":"symbol","url":"\/documentation\/compute\/customstringconvertible","kind":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","navigatorTitle":[{"text":"CustomStringConvertible","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceTree/CustomStringConvertible-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/CustomStringConvertible-Implementations","kind":"article","title":"CustomStringConvertible Implementations","abstract":[],"url":"\/documentation\/compute\/referencetree\/customstringconvertible-implementations","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Encodable":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":".","type":"text"}]},"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","navigatorTitle":[{"kind":"identifier","text":"Encodable"}],"kind":"symbol","abstract":[{"type":"text","text":"A type that can encode itself to an external representation."}],"title":"Encodable","url":"\/documentation\/compute\/encodable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Encodable"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Copyable","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/copyable","abstract":[{"text":"A type whose values can be implicitly or explicitly copied.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Copyable"}],"title":"Copyable","conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceTree/Hashable-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/Hashable-Implementations","url":"\/documentation\/compute\/referencetree\/hashable-implementations","title":"Hashable Implementations","type":"topic","kind":"article","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceTree":{"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"ReferenceTree","kind":"identifier"}],"type":"topic","title":"ReferenceTree","url":"\/documentation\/compute\/referencetree","navigatorTitle":[{"text":"ReferenceTree","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A simple reference-based tree data structure for Swift."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceTree/Decodable-Implementations":{"type":"topic","title":"Decodable Implementations","url":"\/documentation\/compute\/referencetree\/decodable-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/Decodable-Implementations","kind":"article","role":"collectionGroup","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"kind":"symbol","abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"title":"Equatable","url":"\/documentation\/compute\/equatable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceTree/value":{"url":"\/documentation\/compute\/referencetree\/value","title":"value","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/value","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"value"},{"text":": ","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:7Compute13ReferenceTreeC7Elementxmfp"}],"abstract":[{"type":"text","text":"The value stored in the current node."}],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Hashable","kind":"identifier"}],"role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[{"text":"A type that can be hashed into a ","type":"text"},{"type":"codeVoice","code":"Hasher"},{"text":" to produce an integer hash value.","type":"text"}],"type":"topic","title":"Hashable","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"url":"\/documentation\/compute\/hashable","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceTree/addChild(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"addChild","kind":"identifier"},{"kind":"text","text":"("},{"text":"ReferenceTree","preciseIdentifier":"s:7Compute13ReferenceTreeC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Element","preciseIdentifier":"s:7Compute13ReferenceTreeC7Elementxmfp","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/addChild(_:)","kind":"symbol","title":"addChild(_:)","abstract":[],"url":"\/documentation\/compute\/referencetree\/addchild(_:)","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceTree/init(_:children:)":{"url":"\/documentation\/compute\/referencetree\/init(_:children:)","title":"init(_:children:)","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/init(_:children:)","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:7Compute13ReferenceTreeC7Elementxmfp"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"children"},{"text":": ","kind":"text"},{"text":"Children","kind":"typeIdentifier","preciseIdentifier":"s:7Compute13ReferenceTreeC8Childrena"},{"kind":"text","text":")"}],"abstract":[],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceTree/Equatable-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/Equatable-Implementations","kind":"article","title":"Equatable Implementations","abstract":[],"url":"\/documentation\/compute\/referencetree\/equatable-implementations","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceParentPointerTree":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"ReferenceParentPointerTree","kind":"identifier"}],"title":"ReferenceParentPointerTree","url":"\/documentation\/compute\/referenceparentpointertree","abstract":[{"text":"A tree with a pointer to its parent.","type":"text"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ReferenceParentPointerTree"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceParentPointerTree"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceTree/element":{"url":"\/documentation\/compute\/referencetree\/element","title":"element","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/element","kind":"symbol","fragments":[{"kind":"keyword","text":"let"},{"text":" ","kind":"text"},{"text":"element","kind":"identifier"},{"kind":"text","text":": "},{"text":"Element","preciseIdentifier":"s:7Compute13ReferenceTreeC7Elementxmfp","kind":"typeIdentifier"}],"abstract":[],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceTree/parent":{"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"parent","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Compute13ReferenceTreeC","kind":"typeIdentifier","text":"ReferenceTree"},{"text":"<","kind":"text"},{"text":"Element","preciseIdentifier":"s:7Compute13ReferenceTreeC7Elementxmfp","kind":"typeIdentifier"},{"text":">?","kind":"text"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/parent","kind":"symbol","title":"parent","abstract":[],"url":"\/documentation\/compute\/referencetree\/parent","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceTree/TreeProtocol-Implementations":{"url":"\/documentation\/compute\/referencetree\/treeprotocol-implementations","title":"TreeProtocol Implementations","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/TreeProtocol-Implementations","kind":"article","abstract":[],"role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceTree/children-swift.property":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"children"},{"text":": ","kind":"text"},{"text":"Children","kind":"typeIdentifier","preciseIdentifier":"s:7Compute13ReferenceTreeC8Childrena"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/children-swift.property","kind":"symbol","title":"children","abstract":[{"text":"The children of the current node.","type":"text"}],"url":"\/documentation\/compute\/referencetree\/children-swift.property","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveTreeProtocol":{"abstract":[{"type":"text","text":"A tree-like data structure."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"RecursiveTreeProtocol","kind":"identifier"}],"type":"topic","title":"RecursiveTreeProtocol","navigatorTitle":[{"text":"RecursiveTreeProtocol","kind":"identifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveTreeProtocol","url":"\/documentation\/compute\/recursivetreeprotocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceTree/Children-swift.typealias":{"url":"\/documentation\/compute\/referencetree\/children-swift.typealias","title":"ReferenceTree.Children","navigatorTitle":[{"kind":"identifier","text":"Children"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree\/Children-swift.typealias","kind":"symbol","type":"topic","abstract":[{"text":"The type of sequence that represents the children of a node in the tree.","type":"text"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Children"}],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/TreeProtocol":{"abstract":[{"type":"text","text":"A tree-like data structure."}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"TreeProtocol","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeProtocol","url":"\/documentation\/compute\/treeprotocol","title":"TreeProtocol","kind":"symbol","navigatorTitle":[{"text":"TreeProtocol","kind":"identifier"}]}}}