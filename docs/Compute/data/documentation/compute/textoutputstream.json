{"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"kind":"symbol","topicSections":[{"anchor":"Instance-Methods","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TextOutputStream\/write(_:)"],"generated":true,"title":"Instance Methods"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"TextOutputStream","kind":"identifier"}],"languages":["swift"]}]},{"content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You can send the output of the standard library’s ","type":"text"},{"type":"codeVoice","code":"print(_:to:)"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"code":"dump(_:to:)","type":"codeVoice"},{"type":"text","text":" functions to an instance of a type that conforms to the"},{"type":"text","text":" "},{"code":"TextOutputStream","type":"codeVoice"},{"text":" protocol instead of to standard output. Swift’s","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" type conforms to "},{"type":"codeVoice","code":"TextOutputStream"},{"text":" already, so you can capture","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the output from "},{"type":"codeVoice","code":"print(_:to:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"dump(_:to:)"},{"text":" in a string instead of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"logging it to standard output."}]},{"code":["var s = \"\"","for n in 1...5 {","    print(n, terminator: \"\", to: &s)","}","\/\/ s == \"12345\""],"syntax":null,"type":"codeListing"},{"anchor":"Conforming-to-the-TextOutputStream-Protocol","text":"Conforming to the TextOutputStream Protocol","level":1,"type":"heading"},{"inlineContent":[{"type":"text","text":"To make your custom type conform to the "},{"code":"TextOutputStream","type":"codeVoice"},{"text":" protocol,","type":"text"},{"type":"text","text":" "},{"text":"implement the required ","type":"text"},{"type":"codeVoice","code":"write(_:)"},{"type":"text","text":" method. Functions that use a"},{"type":"text","text":" "},{"code":"TextOutputStream","type":"codeVoice"},{"text":" target may call ","type":"text"},{"code":"write(_:)","type":"codeVoice"},{"text":" multiple times per writing","type":"text"},{"text":" ","type":"text"},{"text":"operation.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"As an example, here’s an implementation of an output stream that converts","type":"text"},{"type":"text","text":" "},{"type":"text","text":"any input to its plain ASCII representation before sending it to standard"},{"type":"text","text":" "},{"type":"text","text":"output."}]},{"syntax":null,"code":["struct ASCIILogger: TextOutputStream {","    mutating func write(_ string: String) {","        let ascii = string.unicodeScalars.lazy.map { scalar in","            scalar == \"\\n\"","              ? \"\\n\"","              : scalar.escaped(asASCII: true)","        }","        print(ascii.joined(separator: \"\"), terminator: \"\")","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"ASCIILogger"},{"type":"text","text":" type’s "},{"code":"write(_:)","type":"codeVoice"},{"type":"text","text":" method processes its string input by"},{"type":"text","text":" "},{"text":"escaping each Unicode scalar, with the exception of ","type":"text"},{"type":"codeVoice","code":"\"\\n\""},{"type":"text","text":" line returns."},{"text":" ","type":"text"},{"text":"By sending the output of the ","type":"text"},{"type":"codeVoice","code":"print(_:to:)"},{"type":"text","text":" function to an instance of"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ASCIILogger"},{"type":"text","text":", you invoke its "},{"code":"write(_:)","type":"codeVoice"},{"text":" method.","type":"text"}],"type":"paragraph"},{"code":["let s = \"Hearts ♡ and Diamonds ♢\"","print(s)","\/\/ Prints \"Hearts ♡ and Diamonds ♢\"","","var asciiLogger = ASCIILogger()","print(s, to: &asciiLogger)","\/\/ Prints \"Hearts \\u{2661} and Diamonds \\u{2662}\""],"syntax":null,"type":"codeListing"}],"kind":"content"}],"sections":[],"variants":[{"paths":["\/documentation\/compute\/textoutputstream"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TextOutputStream"},"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"title":"TextOutputStream","roleHeading":"Protocol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"TextOutputStream","kind":"identifier"}],"modules":[{"name":"Compute"}],"navigatorTitle":[{"text":"TextOutputStream","kind":"identifier"}],"symbolKind":"protocol","role":"symbol","externalID":"s:s16TextOutputStreamP"},"abstract":[{"text":"A type that can be the target of text-streaming operations.","type":"text"}],"relationshipsSections":[{"title":"Inherited By","type":"inheritedBy","kind":"relationships","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol"]},{"kind":"relationships","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultStringInterpolation","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring"],"type":"conformingTypes","title":"Conforming Types"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring":{"navigatorTitle":[{"kind":"identifier","text":"Substring"}],"url":"\/documentation\/compute\/substring","title":"Substring","abstract":[{"text":"A slice of a string.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Substring","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/StringProtocol":{"url":"\/documentation\/compute\/stringprotocol","role":"symbol","abstract":[{"type":"text","text":"A type that can represent a string as a collection of characters."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","title":"StringProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StringProtocol","kind":"identifier"}],"navigatorTitle":[{"text":"StringProtocol","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/String":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"String"}],"title":"String","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"String","kind":"identifier"}],"abstract":[{"type":"text","text":"A Unicode string value that is a collection of characters."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/string"},"doc://com.swallow.documentation.Compute/documentation/Compute/TextOutputStream/write(_:)":{"kind":"symbol","required":true,"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"write"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Appends the given string to the stream."}],"title":"write(_:)","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TextOutputStream\/write(_:)","url":"\/documentation\/compute\/textoutputstream\/write(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/TextOutputStream":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TextOutputStream"}],"kind":"symbol","title":"TextOutputStream","abstract":[{"type":"text","text":"A type that can be the target of text-streaming operations."}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"TextOutputStream","kind":"identifier"}],"url":"\/documentation\/compute\/textoutputstream","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TextOutputStream"},"doc://com.swallow.documentation.Compute/documentation/Compute/DefaultStringInterpolation":{"role":"symbol","type":"topic","title":"DefaultStringInterpolation","abstract":[{"type":"text","text":"Represents a string literal with interpolations while it is being built up."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DefaultStringInterpolation"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultStringInterpolation","navigatorTitle":[{"text":"DefaultStringInterpolation","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/defaultstringinterpolation"}}}