{"sections":[],"kind":"symbol","abstract":[{"text":"A half-open interval from a lower bound up to, but not including, an upper","type":"text"},{"type":"text","text":" "},{"type":"text","text":"bound."}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"@frozen","kind":"attribute"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Range","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Bound","kind":"genericParameter"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"Bound","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Comparable","preciseIdentifier":"s:SL","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"You create a "},{"type":"codeVoice","code":"Range"},{"text":" instance by using the half-open range operator","type":"text"},{"type":"text","text":" "},{"text":"(","type":"text"},{"code":"..<","type":"codeVoice"},{"type":"text","text":")."}]},{"type":"codeListing","syntax":null,"code":["let underFive = 0.0..<5.0"]},{"inlineContent":[{"text":"You can use a ","type":"text"},{"type":"codeVoice","code":"Range"},{"text":" instance to quickly check if a value is contained in","type":"text"},{"text":" ","type":"text"},{"text":"a particular range of values. For example:","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["underFive.contains(3.14)","\/\/ true","underFive.contains(6.28)","\/\/ false","underFive.contains(5.0)","\/\/ false"]},{"inlineContent":[{"code":"Range","type":"codeVoice"},{"text":" instances can represent an empty interval, unlike ","type":"text"},{"type":"codeVoice","code":"ClosedRange"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let empty = 0.0..<0.0","empty.contains(0.0)","\/\/ false","empty.isEmpty","\/\/ true"]},{"anchor":"Using-a-Range-as-a-Collection-of-Consecutive-Values","level":2,"text":"Using a Range as a Collection of Consecutive Values","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"When a range uses integers as its lower and upper bounds, or any other type","type":"text"},{"type":"text","text":" "},{"text":"that conforms to the ","type":"text"},{"type":"codeVoice","code":"Strideable"},{"text":" protocol with an integer stride, you can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"use that range in a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop or with any sequence or collection"},{"type":"text","text":" "},{"type":"text","text":"method. The elements of the range are the consecutive values from its"},{"text":" ","type":"text"},{"type":"text","text":"lower bound up to, but not including, its upper bound."}]},{"syntax":null,"type":"codeListing","code":["for n in 3..<5 {","    print(n)","}","\/\/ Prints \"3\"","\/\/ Prints \"4\""]},{"inlineContent":[{"type":"text","text":"Because floating-point types such as "},{"code":"Float","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Double","type":"codeVoice"},{"type":"text","text":" are their own"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Stride"},{"type":"text","text":" types, they cannot be used as the bounds of a countable range. If"},{"type":"text","text":" "},{"type":"text","text":"you need to iterate over consecutive floating-point values, see the"},{"type":"text","text":" "},{"code":"stride(from:to:by:)","type":"codeVoice"},{"type":"text","text":" function."}],"type":"paragraph"}]}],"topicSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/init(_:)-35b1j","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/init(_:)-79g1a","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/init(uncheckedBounds:)"],"generated":true,"title":"Initializers","anchor":"Initializers"},{"generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/isEmpty","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/lowerBound","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/upperBound"],"anchor":"Instance-Properties","title":"Instance Properties"},{"title":"Instance Methods","anchor":"Instance-Methods","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/clamped(to:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/contains(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/overlaps(_:)-7osha","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/overlaps(_:)-9fkb2"],"generated":true},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/BidirectionalCollection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/Collection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/CustomDebugStringConvertible-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/CustomReflectable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/CustomStringConvertible-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/Decodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/Encodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/RangeExpression-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/Sequence-Implementations"],"anchor":"Default-Implementations","generated":true,"title":"Default Implementations"}],"relationshipsSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomAccessCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","doc:\/\/com.swallow.documentation.Compute\/7Swallow27BoundInitiableRangeProtocolP","doc:\/\/com.swallow.documentation.Compute\/7Swallow9CountableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22ExclusiveRangeProtocolP","doc:\/\/com.swallow.documentation.Compute\/7Swallow13RangeProtocolP"],"type":"conformsTo","kind":"relationships","title":"Conforms To"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/range"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"role":"symbol","modules":[{"name":"Compute"}],"title":"Range","navigatorTitle":[{"text":"Range","kind":"identifier"}],"externalID":"s:Sn","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Range"}],"symbolKind":"struct","roleHeading":"Structure"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range"},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"abstract":[],"title":"Sendable","url":"\/documentation\/compute\/sendable","navigatorTitle":[{"text":"Sendable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Sendable"}],"kind":"symbol","type":"topic","role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"text":" and ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/RandomAccessCollection":{"role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Strideable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Bound.Stride"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"SignedInteger"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"A collection that supports efficient random-access index traversal."}],"url":"\/documentation\/compute\/randomaccesscollection","title":"RandomAccessCollection","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"RandomAccessCollection","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomAccessCollection","navigatorTitle":[{"kind":"identifier","text":"RandomAccessCollection"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/init(_:)-79g1a":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/init(_:)-79g1a","abstract":[{"type":"text","text":"Creates an instance equivalent to the given "},{"code":"ClosedRange","type":"codeVoice"},{"text":".","type":"text"}],"title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:SN","text":"ClosedRange","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Bound","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"url":"\/documentation\/compute\/range\/init(_:)-79g1a","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Strideable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Bound.Stride"},{"type":"text","text":" conforms to "},{"code":"SignedInteger","type":"codeVoice"},{"text":".","type":"text"}]},"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"url":"\/documentation\/compute\/sequence","type":"topic","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Sequence"}],"navigatorTitle":[{"text":"Sequence","kind":"identifier"}],"conformance":{"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Strideable"},{"type":"text","text":" and "},{"code":"Bound.Stride","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"SignedInteger","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"title":"Sequence","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow22ExclusiveRangeProtocolP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22ExclusiveRangeProtocolP","title":"Swallow.ExclusiveRangeProtocol","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/Encodable-Implementations":{"role":"collectionGroup","title":"Encodable Implementations","kind":"article","url":"\/documentation\/compute\/range\/encodable-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/Encodable-Implementations","type":"topic","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Encodable":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","abstract":[{"type":"text","text":"A type that can encode itself to an external representation."}],"url":"\/documentation\/compute\/encodable","title":"Encodable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Encodable"}],"navigatorTitle":[{"kind":"identifier","text":"Encodable"}],"role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Encodable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/CustomStringConvertible-Implementations":{"abstract":[],"kind":"article","title":"CustomStringConvertible Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/CustomStringConvertible-Implementations","role":"collectionGroup","type":"topic","url":"\/documentation\/compute\/range\/customstringconvertible-implementations"},"doc://com.swallow.documentation.Compute/7Swallow27BoundInitiableRangeProtocolP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow27BoundInitiableRangeProtocolP","title":"Swallow.BoundInitiableRangeProtocol","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible":{"abstract":[{"text":"A type with a customized textual representation.","type":"text"}],"title":"CustomStringConvertible","url":"\/documentation\/compute\/customstringconvertible","navigatorTitle":[{"kind":"identifier","text":"CustomStringConvertible"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomStringConvertible","kind":"identifier"}],"kind":"symbol","type":"topic","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/Hashable-Implementations":{"type":"topic","kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/Hashable-Implementations","abstract":[],"title":"Hashable Implementations","url":"\/documentation\/compute\/range\/hashable-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/upperBound":{"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"text":"upperBound","kind":"identifier"},{"kind":"text","text":": "},{"text":"Bound","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/upperBound","url":"\/documentation\/compute\/range\/upperbound","role":"symbol","type":"topic","kind":"symbol","abstract":[],"title":"upperBound"},"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable":{"url":"\/documentation\/compute\/comparable","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared using the relational operators ","type":"text"},{"code":"<","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Comparable"}],"title":"Comparable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Comparable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/7Swallow9CountableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow9CountableP","title":"Swallow.Countable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/overlaps(_:)-9fkb2":{"role":"symbol","url":"\/documentation\/compute\/range\/overlaps(_:)-9fkb2","title":"overlaps(_:)","abstract":[],"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"overlaps","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:SN","text":"ClosedRange","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":">) -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"kind":"symbol","conformance":{"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/overlaps(_:)-9fkb2"},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/clamped(to:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/clamped(to:)","kind":"symbol","type":"topic","url":"\/documentation\/compute\/range\/clamped(to:)","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"abstract":[{"type":"text","text":"Returns a copy of this range clamped to the given limiting range."}],"title":"clamped(to:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"clamped"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"text":"Range","kind":"typeIdentifier","preciseIdentifier":"s:Sn"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:Sn","text":"Range","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/Equatable-Implementations":{"title":"Equatable Implementations","url":"\/documentation\/compute\/range\/equatable-implementations","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/Equatable-Implementations","role":"collectionGroup","abstract":[],"kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/compute\/copyable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","title":"Copyable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Copyable"}],"navigatorTitle":[{"text":"Copyable","kind":"identifier"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"abstract":[{"type":"text","text":"A type whose values can be implicitly or explicitly copied."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/isEmpty":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"isEmpty","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"type":"topic","role":"symbol","url":"\/documentation\/compute\/range\/isempty","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/isEmpty","title":"isEmpty","abstract":[{"type":"text","text":"A Boolean value indicating whether the range contains no elements."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/init(_:)-35b1j":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/init(_:)-35b1j","title":"init(_:)","kind":"symbol","abstract":[{"text":"Now that Range is conditionally a collection when Bound: Strideable,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"CountableRange is no longer needed. This is a deprecated initializer"},{"text":" ","type":"text"},{"type":"text","text":"for any remaining uses of Range(countableRange)."}],"role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"code":"Strideable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Bound.Stride","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"SignedInteger","type":"codeVoice"},{"type":"text","text":"."}]},"deprecated":true,"url":"\/documentation\/compute\/range\/init(_:)-35b1j","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:Sn","text":"Range"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"text":">)","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/BidirectionalCollection-Implementations":{"type":"topic","abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/BidirectionalCollection-Implementations","title":"BidirectionalCollection Implementations","role":"collectionGroup","url":"\/documentation\/compute\/range\/bidirectionalcollection-implementations"},"doc://com.swallow.documentation.Compute/7Swallow13RangeProtocolP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow13RangeProtocolP","title":"Swallow.RangeProtocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/CustomDebugStringConvertible-Implementations":{"type":"topic","role":"collectionGroup","title":"CustomDebugStringConvertible Implementations","url":"\/documentation\/compute\/range\/customdebugstringconvertible-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/CustomDebugStringConvertible-Implementations","kind":"article","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/init(uncheckedBounds:)":{"kind":"symbol","title":"init(uncheckedBounds:)","role":"symbol","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"uncheckedBounds"},{"text":": (lower","kind":"text"},{"text":": ","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"kind":"text","text":", upper"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bound"},{"text":"))","kind":"text"}],"url":"\/documentation\/compute\/range\/init(uncheckedbounds:)","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/init(uncheckedBounds:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomDebugStringConvertible":{"url":"\/documentation\/compute\/customdebugstringconvertible","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":"."}]},"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A type with a customized textual representation suitable for debugging"},{"text":" ","type":"text"},{"text":"purposes.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","title":"CustomDebugStringConvertible","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomDebugStringConvertible"}],"navigatorTitle":[{"text":"CustomDebugStringConvertible","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Range":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Range","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","url":"\/documentation\/compute\/range","abstract":[{"text":"A half-open interval from a lower bound up to, but not including, an upper","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"bound."}],"navigatorTitle":[{"text":"Range","kind":"identifier"}],"title":"Range"},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/Sequence-Implementations":{"abstract":[],"type":"topic","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/Sequence-Implementations","title":"Sequence Implementations","url":"\/documentation\/compute\/range\/sequence-implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomReflectable":{"role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"abstract":[{"text":"A type that explicitly supplies its own mirror.","type":"text"}],"url":"\/documentation\/compute\/customreflectable","title":"CustomReflectable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomReflectable","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","navigatorTitle":[{"kind":"identifier","text":"CustomReflectable"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection":{"url":"\/documentation\/compute\/collection","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Strideable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Bound.Stride"},{"text":" conforms to ","type":"text"},{"code":"SignedInteger","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A sequence whose elements can be traversed multiple times,"},{"type":"text","text":" "},{"type":"text","text":"nondestructively, and accessed by an indexed subscript."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","title":"Collection","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Collection"}],"navigatorTitle":[{"text":"Collection","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/contains(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"contains"},{"kind":"text","text":"("},{"text":"Bound","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"type":"topic","title":"contains(_:)","url":"\/documentation\/compute\/range\/contains(_:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/contains(_:)","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the given element is contained"},{"text":" ","type":"text"},{"text":"within the range.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/Collection-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/Collection-Implementations","url":"\/documentation\/compute\/range\/collection-implementations","type":"topic","abstract":[],"role":"collectionGroup","title":"Collection Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/BidirectionalCollection":{"url":"\/documentation\/compute\/bidirectionalcollection","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Strideable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Bound.Stride"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"SignedInteger"},{"text":".","type":"text"}]},"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A collection that supports backward as well as forward traversal."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalCollection","title":"BidirectionalCollection","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BidirectionalCollection"}],"navigatorTitle":[{"kind":"identifier","text":"BidirectionalCollection"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/lowerBound":{"fragments":[{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"text":"lowerBound","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Bound","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/lowerBound","title":"lowerBound","role":"symbol","abstract":[],"type":"topic","url":"\/documentation\/compute\/range\/lowerbound","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"url":"\/documentation\/compute\/equatable","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","title":"Equatable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}],"navigatorTitle":[{"text":"Equatable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeExpression":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression","abstract":[{"text":"A type that can be used to slice a collection.","type":"text"}],"url":"\/documentation\/compute\/rangeexpression","title":"RangeExpression","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RangeExpression"}],"navigatorTitle":[{"text":"RangeExpression","kind":"identifier"}],"role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/overlaps(_:)-7osha":{"url":"\/documentation\/compute\/range\/overlaps(_:)-7osha","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"overlaps","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:Sn","text":"Range","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Bound","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"role":"symbol","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether this range and the given range"},{"text":" ","type":"text"},{"text":"contain an element in common.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/overlaps(_:)-7osha","title":"overlaps(_:)","type":"topic","kind":"symbol","conformance":{"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/RangeExpression-Implementations":{"role":"collectionGroup","title":"RangeExpression Implementations","kind":"article","url":"\/documentation\/compute\/range\/rangeexpression-implementations","type":"topic","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/RangeExpression-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Decodable":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/compute\/decodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","title":"Decodable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Decodable","kind":"identifier"}],"navigatorTitle":[{"text":"Decodable","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"text":" and ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":".","type":"text"}]},"abstract":[{"type":"text","text":"A type that can decode itself from an external representation."}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/Decodable-Implementations":{"title":"Decodable Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/Decodable-Implementations","kind":"article","role":"collectionGroup","type":"topic","abstract":[],"url":"\/documentation\/compute\/range\/decodable-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Range/CustomReflectable-Implementations":{"type":"topic","kind":"article","abstract":[],"role":"collectionGroup","title":"CustomReflectable Implementations","url":"\/documentation\/compute\/range\/customreflectable-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range\/CustomReflectable-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"url":"\/documentation\/compute\/hashable","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","role":"symbol","title":"Hashable","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Hashable","kind":"identifier"}],"abstract":[{"type":"text","text":"A type that can be hashed into a "},{"type":"codeVoice","code":"Hasher"},{"text":" to produce an integer hash value.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"Hashable","kind":"identifier"}]}}}