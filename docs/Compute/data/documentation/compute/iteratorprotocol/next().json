{"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"mutating"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"next","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol\/Element","preciseIdentifier":"s:St7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":"?","kind":"text"}]}]},{"kind":"content","content":[{"text":"Return Value","level":2,"type":"heading","anchor":"return-value"},{"inlineContent":[{"type":"text","text":"The next element in the underlying sequence, if a next element"},{"type":"text","text":" "},{"type":"text","text":"exists; otherwise, "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Repeatedly calling this method returns, in order, all the elements of the"},{"type":"text","text":" "},{"type":"text","text":"underlying sequence. As soon as the sequence has run out of elements, all"},{"type":"text","text":" "},{"text":"subsequent calls return ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"You must not call this method if any other copy of this iterator has been","type":"text"},{"type":"text","text":" "},{"type":"text","text":"advanced with a call to its "},{"type":"codeVoice","code":"next()"},{"text":" method.","type":"text"}]},{"inlineContent":[{"text":"The following example shows how an iterator can be used explicitly to","type":"text"},{"text":" ","type":"text"},{"text":"emulate a ","type":"text"},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop. First, retrieve a sequence’s iterator, and"},{"type":"text","text":" "},{"type":"text","text":"then call the iterator’s "},{"type":"codeVoice","code":"next()"},{"text":" method until it returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["let numbers = [2, 3, 5, 7]","var numbersIterator = numbers.makeIterator()","","while let num = numbersIterator.next() {","    print(num)","}","\/\/ Prints \"2\"","\/\/ Prints \"3\"","\/\/ Prints \"5\"","\/\/ Prints \"7\""],"type":"codeListing","syntax":null}],"kind":"content"}],"sections":[],"variants":[{"paths":["\/documentation\/compute\/iteratorprotocol\/next()"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Advances to the next element and returns it, or "},{"type":"codeVoice","code":"nil"},{"text":" if no next element","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"exists."}],"metadata":{"role":"symbol","title":"next()","required":true,"symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"next"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:St7ElementQa"},{"kind":"text","text":"?"}],"roleHeading":"Instance Method","externalID":"s:St4next7ElementQzSgyF","modules":[{"name":"Compute"}]},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol\/next()","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/IteratorProtocol":{"url":"\/documentation\/compute\/iteratorprotocol","navigatorTitle":[{"kind":"identifier","text":"IteratorProtocol"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IteratorProtocol"}],"abstract":[{"type":"text","text":"A type that supplies the values of a sequence one at a time."}],"type":"topic","title":"IteratorProtocol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/IteratorProtocol/next()":{"url":"\/documentation\/compute\/iteratorprotocol\/next()","abstract":[{"type":"text","text":"Advances to the next element and returns it, or "},{"code":"nil","type":"codeVoice"},{"text":" if no next element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"exists."}],"type":"topic","required":true,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol\/next()","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"next"},{"kind":"text","text":"() -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:St7ElementQa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?"}],"role":"symbol","title":"next()"},"doc://com.swallow.documentation.Compute/documentation/Compute/IteratorProtocol/Element":{"fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"text":"Element","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/iteratorprotocol\/element","abstract":[{"text":"The type of element traversed by the iterator.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol\/Element","title":"Element","kind":"symbol","required":true,"role":"symbol"}}}