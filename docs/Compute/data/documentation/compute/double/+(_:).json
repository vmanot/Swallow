{"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"+","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"x","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"text":"The given argument without any changes.","type":"text"}]}]},{"content":[{"level":2,"type":"heading","anchor":"discussion","text":"Discussion"},{"inlineContent":[{"text":"You can use the unary plus operator (","type":"text"},{"type":"codeVoice","code":"+"},{"type":"text","text":") to provide symmetry in your"},{"text":" ","type":"text"},{"type":"text","text":"code for positive numbers when also using the unary minus operator."}],"type":"paragraph"},{"syntax":null,"code":["let x = -21","let y = +21","\/\/ x == -21","\/\/ y == 21"],"type":"codeListing"}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double\/+(_:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double\/AdditiveArithmetic-Implementations"]]},"variants":[{"paths":["\/documentation\/compute\/double\/+(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"metadata":{"extendedModule":"Swift","roleHeading":"Operator","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"+"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"externalID":"s:s18AdditiveArithmeticPsE1popyxxFZ::SYNTHESIZED::s:Sd","modules":[{"name":"Compute","relatedModules":["Swift"]}],"title":"+(_:)","role":"symbol","symbolKind":"op"},"abstract":[{"text":"Returns the given number unchanged.","type":"text"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Double/+(_:)":{"type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double\/+(_:)","abstract":[{"type":"text","text":"Returns the given number unchanged."}],"kind":"symbol","title":"+(_:)","url":"\/documentation\/compute\/double\/+(_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"+","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Double/AdditiveArithmetic-Implementations":{"type":"topic","abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double\/AdditiveArithmetic-Implementations","title":"AdditiveArithmetic Implementations","role":"collectionGroup","url":"\/documentation\/compute\/double\/additivearithmetic-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Double":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double","abstract":[{"text":"A double-precision, floating-point value type.","type":"text"}],"title":"Double","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Double","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"Double","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/compute\/double"}}}