{"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double\/BinaryFloatingPoint-Implementations"]]},"kind":"symbol","abstract":[{"text":"Returns a random value within the specified range, using the given","type":"text"},{"text":" ","type":"text"},{"text":"generator as a source for randomness.","type":"text"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"random","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"in"},{"text":" ","kind":"text"},{"text":"range","kind":"internalParam"},{"kind":"text","text":": "},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","preciseIdentifier":"s:Sn","text":"Range","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">, ","kind":"text"},{"text":"using","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"generator"},{"text":": ","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":" "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomNumberGenerator","kind":"typeIdentifier","preciseIdentifier":"s:SG","text":"RandomNumberGenerator"}],"platforms":["macOS"],"languages":["swift"]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The range in which to create a random value."},{"type":"text","text":" "},{"type":"codeVoice","code":"range"},{"type":"text","text":" must be finite and non-empty."}]}],"name":"range"},{"content":[{"inlineContent":[{"text":"The random number generator to use when creating the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"new random value."}],"type":"paragraph"}],"name":"generator"}],"kind":"parameters"},{"content":[{"level":2,"type":"heading","anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A random value within the bounds of "},{"type":"codeVoice","code":"range"},{"type":"text","text":"."}]}],"kind":"content"},{"kind":"content","content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"Use this method to generate a floating-point value within a specific"},{"type":"text","text":" "},{"type":"text","text":"range when you are using a custom random number generator. This example"},{"type":"text","text":" "},{"type":"text","text":"creates three new values in the range "},{"code":"10.0 ..< 20.0","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["for _ in 1...3 {","    print(Double.random(in: 10.0 ..< 20.0, using: &myGenerator))","}","\/\/ Prints \"18.1900709259179\"","\/\/ Prints \"14.2286325689993\"","\/\/ Prints \"13.1485686260762\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"random(in:using:)","type":"codeVoice"},{"type":"text","text":" static method chooses a random value from a"},{"text":" ","type":"text"},{"text":"continuous uniform distribution in ","type":"text"},{"code":"range","type":"codeVoice"},{"type":"text","text":", and then converts that value"},{"type":"text","text":" "},{"text":"to the nearest representable value in this type. Depending on the size","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and span of "},{"type":"codeVoice","code":"range"},{"type":"text","text":", some concrete values may be represented more"},{"text":" ","type":"text"},{"type":"text","text":"frequently than others."}]},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"The algorithm used to create random values may change in a future","type":"text"},{"text":" ","type":"text"},{"text":"version of Swift. If youâ€™re passing a generator that results in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"same sequence of floating-point values each time you run your program,"},{"text":" ","type":"text"},{"text":"that sequence may change when your program is compiled using a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"different version of Swift."}]}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double\/random(in:using:)-1m6gd"},"metadata":{"extendedModule":"Swift","role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"RawSignificand","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"FixedWidthInteger"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"title":"random(in:using:)","roleHeading":"Type Method","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"random","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"in"},{"text":": ","kind":"text"},{"text":"Range","preciseIdentifier":"s:Sn","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"using","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"modules":[{"relatedModules":["Swift"],"name":"Compute"}],"symbolKind":"method","externalID":"s:SBss17FixedWidthInteger14RawSignificandRpzrlE6random2in5usingxSnyxG_qd__ztSGRd__lFZ::SYNTHESIZED::s:Sd"},"variants":[{"paths":["\/documentation\/compute\/double\/random(in:using:)-1m6gd"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Double/BinaryFloatingPoint-Implementations":{"kind":"article","type":"topic","role":"collectionGroup","url":"\/documentation\/compute\/double\/binaryfloatingpoint-implementations","abstract":[],"title":"BinaryFloatingPoint Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double\/BinaryFloatingPoint-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Double/random(in:using:)-1m6gd":{"title":"random(in:using:)","type":"topic","kind":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"RawSignificand","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"FixedWidthInteger"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","url":"\/documentation\/compute\/double\/random(in:using:)-1m6gd","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"random","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"in","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Range","kind":"typeIdentifier","preciseIdentifier":"s:Sn"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"using","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double\/random(in:using:)-1m6gd","abstract":[{"type":"text","text":"Returns a random value within the specified range, using the given"},{"text":" ","type":"text"},{"text":"generator as a source for randomness.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Double":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double","abstract":[{"text":"A double-precision, floating-point value type.","type":"text"}],"title":"Double","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Double","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"Double","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/compute\/double"},"doc://com.swallow.documentation.Compute/documentation/Compute/RandomNumberGenerator":{"abstract":[{"text":"A type that provides uniformly distributed random data.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RandomNumberGenerator"}],"url":"\/documentation\/compute\/randomnumbergenerator","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomNumberGenerator","title":"RandomNumberGenerator","role":"symbol","type":"topic","navigatorTitle":[{"text":"RandomNumberGenerator","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Range":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Range","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","url":"\/documentation\/compute\/range","abstract":[{"text":"A half-open interval from a lower bound up to, but not including, an upper","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"bound."}],"navigatorTitle":[{"text":"Range","kind":"identifier"}],"title":"Range"}}}