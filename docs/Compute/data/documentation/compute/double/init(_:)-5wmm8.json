{"abstract":[{"type":"text","text":"Creates a new instance from the given string."}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double\/LosslessStringConvertible-Implementations"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"?<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"text","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"text":") ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:Sy","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","kind":"typeIdentifier","text":"StringProtocol"}]}]},{"kind":"parameters","parameters":[{"name":"text","content":[{"inlineContent":[{"type":"text","text":"An input string to convert to a "},{"type":"codeVoice","code":"Double?"},{"text":" instance.","type":"text"}],"type":"paragraph"}]}]},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"inlineContent":[{"text":"The string passed as ","type":"text"},{"code":"text","type":"codeVoice"},{"text":" can represent a real number in decimal or","type":"text"},{"type":"text","text":" "},{"text":"hexadecimal format or can be in a special format representing infinity","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or NaN (“not a number”). If "},{"type":"codeVoice","code":"text"},{"type":"text","text":" is not in a recognized format,"},{"type":"text","text":" "},{"type":"text","text":"the optional initializer will fail and return "},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"code":"text","type":"codeVoice"},{"type":"text","text":" string consists of an optional"},{"text":" ","type":"text"},{"type":"text","text":"plus or minus sign character ("},{"type":"codeVoice","code":"+"},{"type":"text","text":" or "},{"code":"-","type":"codeVoice"},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"followed by one of the following:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"decimal string","type":"text"}],"type":"emphasis"},{"text":" contains a significand consisting of one","type":"text"},{"text":" ","type":"text"},{"text":"or more decimal digits that may include a decimal point:","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["let c = Double(\"-1.0\")","\/\/ c == -1.0","","let d = Double(\"28.375\")","\/\/ d == 28.375"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A decimal string may also include an exponent following the"},{"text":" ","type":"text"},{"type":"text","text":"significand, indicating the power of 10 by which the significand should"},{"type":"text","text":" "},{"type":"text","text":"be multiplied. If included, the exponent is separated by a single"},{"text":" ","type":"text"},{"type":"text","text":"character, "},{"code":"e","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"E"},{"type":"text","text":", and consists of an optional plus or minus sign"},{"type":"text","text":" "},{"type":"text","text":"character and a sequence of decimal digits."}]},{"syntax":null,"type":"codeListing","code":["let e = Double(\"2837.5e-2\")","\/\/ e == 28.375"]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"hexadecimal string","type":"text"}],"type":"emphasis"},{"type":"text","text":" contains a significand consisting of"},{"text":" ","type":"text"},{"code":"0X","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"0x"},{"type":"text","text":" followed by one or more hexadecimal digits that may"},{"type":"text","text":" "},{"type":"text","text":"include a decimal point."}]},{"syntax":null,"code":["let f = Double(\"0x1c.6\")","\/\/ f == 28.375"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"A hexadecimal string may also include an exponent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"indicating the power of 2 by which the significand should"},{"type":"text","text":" "},{"text":"be multiplied. If included, the exponent is separated by a single","type":"text"},{"type":"text","text":" "},{"text":"character, ","type":"text"},{"type":"codeVoice","code":"p"},{"type":"text","text":" or "},{"type":"codeVoice","code":"P"},{"text":", and consists of an optional plus or minus sign","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"character and a sequence of decimal digits."}]},{"syntax":null,"code":["let g = Double(\"0x1.c6p4\")","\/\/ g == 28.375"],"type":"codeListing"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The input strings ","type":"text"},{"type":"codeVoice","code":"\"inf\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"infinity\""},{"type":"text","text":" (case insensitive)"},{"text":" ","type":"text"},{"type":"text","text":"are converted to an infinite result:"}]},{"code":["let i = Double(\"inf\")","\/\/ i == Double.infinity","","let j = Double(\"-Infinity\")","\/\/ j == -Double.infinity"],"syntax":null,"type":"codeListing"}]},{"content":[{"inlineContent":[{"type":"text","text":"An input string of "},{"code":"\"nan\"","type":"codeVoice"},{"text":" (case insensitive) is converted","type":"text"},{"text":" ","type":"text"},{"text":"into a ","type":"text"},{"inlineContent":[{"text":"NaN","type":"text"}],"type":"emphasis"},{"type":"text","text":" value:"}],"type":"paragraph"},{"syntax":null,"code":["let n = Double(\"-nan\")","\/\/ n?.isNaN == true","\/\/ n?.sign == .minus"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A NaN string may also include a payload in parentheses following the"},{"text":" ","type":"text"},{"code":"\"nan\"","type":"codeVoice"},{"type":"text","text":" keyword. The payload consists of a sequence of decimal digits,"},{"type":"text","text":" "},{"type":"text","text":"or the characters "},{"type":"codeVoice","code":"0X"},{"type":"text","text":" or "},{"type":"codeVoice","code":"0x"},{"text":" followed by a sequence of hexadecimal","type":"text"},{"type":"text","text":" "},{"text":"digits. If the payload contains any other characters, it is ignored.","type":"text"},{"type":"text","text":" "},{"text":"If the value of the payload is larger than can be stored as the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"payload of a "},{"type":"codeVoice","code":"Double.nan"},{"text":", the least significant bits are used.","type":"text"}]},{"code":["let p = Double(\"nan(0x10)\")","\/\/ p?.isNaN == true","\/\/ String(p!) == \"nan(0x10)\""],"syntax":null,"type":"codeListing"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"A string in any other format than those described above"},{"type":"text","text":" "},{"text":"or containing additional characters","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"results in a "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" value. For example, the following conversions"},{"type":"text","text":" "},{"text":"result in ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["  Double(\" 5.0\")      \/\/ Includes whitespace","  Double(\"±2.0\")      \/\/ Invalid character","  Double(\"0x1.25e4\")  \/\/ Incorrect exponent format"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"A decimal or hexadecimal string is converted to a "},{"type":"codeVoice","code":"Double"},{"text":" ","type":"text"},{"type":"text","text":"instance using the IEEE 754 roundTiesToEven (default) rounding"},{"text":" ","type":"text"},{"type":"text","text":"attribute."},{"type":"text","text":" "},{"text":"Values with absolute value smaller than ","type":"text"},{"type":"codeVoice","code":"Double.leastNonzeroMagnitude"},{"text":" ","type":"text"},{"type":"text","text":"are rounded to plus or minus zero."},{"type":"text","text":" "},{"text":"Values with absolute value larger than ","type":"text"},{"type":"codeVoice","code":"Double.greatestFiniteMagnitude"},{"text":" ","type":"text"},{"text":"are rounded to plus or minus infinity.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["  let y = Double(\"1.23e-9999\")","  \/\/ y == 0.0","  \/\/ y?.sign == .plus","","  let z = Double(\"-7.89e-7206\")","  \/\/ z == -0.0","  \/\/ z?.sign == .minus","","  let r = Double(\"1.23e17802\")","  \/\/ r == Double.infinity","","  let s = Double(\"-7.89e7206\")","  \/\/ s == Double.-infinity"]},{"name":"Note","style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"Prior to Swift 5.4, a decimal or"},{"text":" ","type":"text"},{"text":"hexadecimal input string whose value was too large to represent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as a finite "},{"code":"Double","type":"codeVoice"},{"type":"text","text":" instance returned "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" instead of"},{"type":"text","text":" "},{"type":"codeVoice","code":"Double.infinity"},{"text":".","type":"text"}],"type":"paragraph"}]}]}],"sections":[],"variants":[{"paths":["\/documentation\/compute\/double\/init(_:)-5wmm8"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double\/init(_:)-5wmm8"},"metadata":{"roleHeading":"Initializer","modules":[{"name":"Compute","relatedModules":["Swift"]}],"externalID":"s:SdySdSgxcSyRzlufc","role":"symbol","symbolKind":"init","extendedModule":"Swift","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"?<"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"init(_:)"},"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Double/LosslessStringConvertible-Implementations":{"abstract":[],"url":"\/documentation\/compute\/double\/losslessstringconvertible-implementations","type":"topic","role":"collectionGroup","title":"LosslessStringConvertible Implementations","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double\/LosslessStringConvertible-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/StringProtocol":{"url":"\/documentation\/compute\/stringprotocol","role":"symbol","abstract":[{"type":"text","text":"A type that can represent a string as a collection of characters."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","title":"StringProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StringProtocol","kind":"identifier"}],"navigatorTitle":[{"text":"StringProtocol","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Double":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double","abstract":[{"text":"A double-precision, floating-point value type.","type":"text"}],"title":"Double","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Double","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"Double","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/compute\/double"},"doc://com.swallow.documentation.Compute/documentation/Compute/Double/init(_:)-5wmm8":{"abstract":[{"text":"Creates a new instance from the given string.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double\/init(_:)-5wmm8","title":"init(_:)","url":"\/documentation\/compute\/double\/init(_:)-5wmm8","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","kind":"symbol"}}}