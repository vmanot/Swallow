{"schemaVersion":{"major":0,"minor":3,"patch":0},"topicSections":[{"anchor":"Structures","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/Words-swift.struct"],"generated":true,"title":"Structures"},{"title":"Operators","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/!=(_:_:)-3acpm","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/&=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/&__=(_:_:)-5hags","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/&__=(_:_:)-69f19","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/*=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/+=(_:_:)-6565m","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/-=(_:_:)-8rwbe","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/==(_:_:)-366en","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/_(_:_:)-9v225","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/_=(_:_:)-22lsj","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/_=(_:_:)-2p0vs","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/_=(_:_:)-4bs9t","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/_=(_:_:)-85oek"],"anchor":"Operators","generated":true},{"title":"Initializers","generated":true,"anchor":"Initializers","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/init(_:)-117g","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/init(_:)-8jtgk","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/init(_:)-9lrzt","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/init(bitPattern:)-3qf8b","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/init(bitPattern:)-7sd72","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/init(bitPattern:)-9qvv7","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/init(bitPattern:)-gk5x","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/init(exactly:)-9cl5x","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/init(exactly:)-9ve7w","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/init(exactly:)-wmyv"]},{"generated":true,"anchor":"Instance-Properties","title":"Instance Properties","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/byteSwapped","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/leadingZeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/nonzeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/trailingZeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/words-swift.property"]},{"title":"Instance Methods","generated":true,"anchor":"Instance-Methods","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/addingReportingOverflow(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/dividedReportingOverflow(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/dividingFullWidth(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/multipliedFullWidth(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/multipliedReportingOverflow(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/remainderReportingOverflow(dividingBy:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/signum()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/subtractingReportingOverflow(_:)"]},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/IntegerLiteralType","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/Magnitude-swift.typealias","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/Stride"],"generated":true,"anchor":"Type-Aliases","title":"Type Aliases"},{"title":"Type Properties","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/bitWidth-swift.type.property"],"generated":true,"anchor":"Type-Properties"},{"anchor":"Default-Implementations","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/AdditiveArithmetic-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/BinaryInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/Comparable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/CustomReflectable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/Decodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/Encodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/ExpressibleByIntegerLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/FixedWidthInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/SIMDScalar-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/Strideable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/UnsignedInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/_CustomPlaygroundQuickLookable-Implementations"],"title":"Default Implementations"}],"relationshipsSections":[{"type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AdditiveArithmetic","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDScalar","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","doc:\/\/com.swallow.documentation.Compute\/7Swallow18AdditionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow21AnyCodableConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22ApproximatelyEquatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20ArithmeticOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16BooleanInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7BoundedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18BoundedRandomnableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18ByteOrderSwappableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow14CoderPrimitiveP","doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataDecodableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataEncodableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiscreteP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20DiscreteOrContinuousP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18DivisionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22FloatingPointInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow9InitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16IntegerInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow24MultiplicationOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableAdditionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow27MutableArithmeticOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableDivisionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow31MutableMultiplicationOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow28MutableSubtractionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow15NativeWordSizedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow6NumberP","doc:\/\/com.swallow.documentation.Compute\/7Swallow17NumberConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow15NumberInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow11RandomnableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow26ShouldNotBeDecodedFromBoolP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22SignedIntegerInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16SignedOrUnsignedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow21SubtractionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP","doc:\/\/com.swallow.documentation.Compute\/7Swallow8UnsignedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow24UnsignedIntegerInitiableP","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsignedInteger"],"title":"Conforms To"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt"},"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"@frozen"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UInt"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"text":"On 32-bit platforms, ","type":"text"},{"code":"UInt","type":"codeVoice"},{"type":"text","text":" is the same size as "},{"type":"codeVoice","code":"UInt32"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"on 64-bit platforms, "},{"type":"codeVoice","code":"UInt"},{"text":" is the same size as ","type":"text"},{"code":"UInt64","type":"codeVoice"},{"text":".","type":"text"}]}]}],"metadata":{"role":"symbol","roleHeading":"Structure","externalID":"s:Su","modules":[{"name":"Compute"}],"title":"UInt","symbolKind":"struct","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UInt"}],"navigatorTitle":[{"text":"UInt","kind":"identifier"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/uint"]}],"kind":"symbol","abstract":[{"type":"text","text":"An unsigned integer value type."}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"references":{"doc://com.swallow.documentation.Compute/7Swallow16BooleanInitiableP":{"title":"Swallow.BooleanInitiable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16BooleanInitiableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/dividingFullWidth(_:)":{"abstract":[{"type":"text","text":"Returns a tuple containing the quotient and remainder of dividing the"},{"type":"text","text":" "},{"type":"text","text":"given value by this value."}],"role":"symbol","kind":"symbol","title":"dividingFullWidth(_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/dividingFullWidth(_:)","url":"\/documentation\/compute\/uint\/dividingfullwidth(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"dividingFullWidth","kind":"identifier"},{"text":"((high","kind":"text"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":", low"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Su9Magnitudea","text":"Magnitude"},{"kind":"text","text":")) -> (quotient"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":", remainder"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":")","kind":"text"}],"type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow13DataEncodableP":{"type":"unresolvable","title":"Swallow.DataEncodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataEncodableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/*=(_:_:)":{"role":"symbol","title":"*=(_:_:)","kind":"symbol","type":"topic","abstract":[{"text":"Multiplies two values and stores the result in the left-hand-side","type":"text"},{"text":" ","type":"text"},{"text":"variable.","type":"text"}],"url":"\/documentation\/compute\/uint\/*=(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/*=(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"*=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}]},"doc://com.swallow.documentation.Compute/7Swallow18AdditionOperatableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18AdditionOperatableP","title":"Swallow.AdditionOperatable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/init(bitPattern:)-3qf8b":{"role":"symbol","url":"\/documentation\/compute\/uint\/init(bitpattern:)-3qf8b","type":"topic","title":"init(bitPattern:)","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"text":"P","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"bitPattern","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"kind":"text","text":"?)"}],"abstract":[{"text":"Creates a new value with the bit pattern of the given pointer.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/init(bitPattern:)-3qf8b"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/BinaryInteger-Implementations":{"kind":"article","url":"\/documentation\/compute\/uint\/binaryinteger-implementations","title":"BinaryInteger Implementations","role":"collectionGroup","type":"topic","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/BinaryInteger-Implementations"},"doc://com.swallow.documentation.Compute/7Swallow9InitiableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow9InitiableP","title":"Swallow.Initiable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/AdditiveArithmetic":{"type":"topic","title":"AdditiveArithmetic","abstract":[{"text":"A type with values that support addition and subtraction.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AdditiveArithmetic"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AdditiveArithmetic","url":"\/documentation\/compute\/additivearithmetic","role":"symbol","navigatorTitle":[{"text":"AdditiveArithmetic","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Sendable","kind":"identifier"}],"title":"Sendable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","abstract":[],"url":"\/documentation\/compute\/sendable","role":"symbol","navigatorTitle":[{"text":"Sendable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"type":"topic","title":"Equatable","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","role":"symbol","url":"\/documentation\/compute\/equatable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BitwiseCopyable":{"title":"BitwiseCopyable","abstract":[],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BitwiseCopyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","url":"\/documentation\/compute\/bitwisecopyable","navigatorTitle":[{"kind":"identifier","text":"BitwiseCopyable"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/Magnitude-swift.typealias":{"abstract":[{"type":"text","text":"A type that can represent the absolute value of any possible value of"},{"text":" ","type":"text"},{"type":"text","text":"this type."}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Magnitude","kind":"identifier"}],"url":"\/documentation\/compute\/uint\/magnitude-swift.typealias","title":"UInt.Magnitude","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/Magnitude-swift.typealias","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Magnitude"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/Stride":{"abstract":[{"text":"A type that represents the distance between two values.","type":"text"}],"role":"symbol","kind":"symbol","title":"UInt.Stride","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/Stride","url":"\/documentation\/compute\/uint\/stride","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Stride"}],"navigatorTitle":[{"text":"Stride","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/init(_:)-8jtgk":{"type":"topic","url":"\/documentation\/compute\/uint\/init(_:)-8jtgk","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/init(_:)-8jtgk","title":"init(_:)","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"Float","kind":"typeIdentifier","preciseIdentifier":"s:Sf"},{"text":")","kind":"text"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow20ByteTupleConvertibleP":{"type":"unresolvable","title":"Swallow.ByteTupleConvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Strideable":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/strideable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Strideable"}],"navigatorTitle":[{"text":"Strideable","kind":"identifier"}],"abstract":[{"type":"text","text":"A type representing continuous, one-dimensional values that can be offset"},{"type":"text","text":" "},{"type":"text","text":"and measured."}],"title":"Strideable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/_=(_:_:)-2p0vs":{"url":"\/documentation\/compute\/uint\/_=(_:_:)-2p0vs","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"^=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"type":"topic","title":"^=(_:_:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/_=(_:_:)-2p0vs","abstract":[{"text":"Stores the result of performing a bitwise XOR operation on the two given","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values in the left-hand-side variable."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"title":"Copyable","abstract":[{"type":"text","text":"A type whose values can be implicitly or explicitly copied."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Copyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","url":"\/documentation\/compute\/copyable","navigatorTitle":[{"text":"Copyable","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow18ByteOrderSwappableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18ByteOrderSwappableP","title":"Swallow.ByteOrderSwappable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/&=(_:_:)":{"kind":"symbol","title":"&=(_:_:)","url":"\/documentation\/compute\/uint\/&=(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/&=(_:_:)","type":"topic","role":"symbol","abstract":[{"text":"Stores the result of performing a bitwise AND operation on the two given","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"values in the left-hand-side variable."}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"&=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":")"}]},"doc://com.swallow.documentation.Compute/7Swallow18BoundedRandomnableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18BoundedRandomnableP","title":"Swallow.BoundedRandomnable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow13DataDecodableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataDecodableP","title":"Swallow.DataDecodable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/_CustomPlaygroundQuickLookable-Implementations":{"type":"topic","abstract":[],"kind":"article","title":"_CustomPlaygroundQuickLookable Implementations","role":"collectionGroup","url":"\/documentation\/compute\/uint\/_customplaygroundquicklookable-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/_CustomPlaygroundQuickLookable-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/nonzeroBitCount":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/nonzeroBitCount","type":"topic","kind":"symbol","title":"nonzeroBitCount","role":"symbol","url":"\/documentation\/compute\/uint\/nonzerobitcount","abstract":[{"type":"text","text":"The number of bits equal to 1 in this value’s binary representation."}],"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"nonzeroBitCount"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/-=(_:_:)-8rwbe":{"url":"\/documentation\/compute\/uint\/-=(_:_:)-8rwbe","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/-=(_:_:)-8rwbe","kind":"symbol","title":"-=(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"-="},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":", "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Subtracts the second value from the first and stores the difference in the"},{"type":"text","text":" "},{"text":"left-hand-side variable.","type":"text"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/FixedWidthInteger-Implementations":{"kind":"article","title":"FixedWidthInteger Implementations","url":"\/documentation\/compute\/uint\/fixedwidthinteger-implementations","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/FixedWidthInteger-Implementations","abstract":[],"role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/dividedReportingOverflow(by:)":{"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dividedReportingOverflow"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> (partialValue"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", overflow"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":")"}],"title":"dividedReportingOverflow(by:)","url":"\/documentation\/compute\/uint\/dividedreportingoverflow(by:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/dividedReportingOverflow(by:)","abstract":[{"type":"text","text":"Returns the quotient obtained by dividing this value by the given value,"},{"type":"text","text":" "},{"type":"text","text":"along with a Boolean value indicating whether overflow occurred in the"},{"text":" ","type":"text"},{"text":"operation.","type":"text"}],"role":"symbol","kind":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow8UnsignedP":{"type":"unresolvable","title":"Swallow.Unsigned","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow8UnsignedP"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/Hashable-Implementations":{"kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/Hashable-Implementations","abstract":[],"type":"topic","url":"\/documentation\/compute\/uint\/hashable-implementations","title":"Hashable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/init(bitPattern:)-gk5x":{"url":"\/documentation\/compute\/uint\/init(bitpattern:)-gk5x","kind":"symbol","title":"init(bitPattern:)","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/init(bitPattern:)-gk5x","abstract":[{"type":"text","text":"Creates an integer that captures the full value of the given object"},{"text":" ","type":"text"},{"text":"identifier.","type":"text"}],"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"bitPattern","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ObjectIdentifier","preciseIdentifier":"s:SO","kind":"typeIdentifier"},{"kind":"text","text":")"}]},"doc://com.swallow.documentation.Compute/7Swallow24MultiplicationOperatableP":{"type":"unresolvable","title":"Swallow.MultiplicationOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow24MultiplicationOperatableP"},"doc://com.swallow.documentation.Compute/7Swallow27MutableArithmeticOperatableP":{"type":"unresolvable","title":"Swallow.MutableArithmeticOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow27MutableArithmeticOperatableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/init(_:)-117g":{"type":"topic","abstract":[],"title":"init(_:)","url":"\/documentation\/compute\/uint\/init(_:)-117g","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sd","text":"Double"},{"kind":"text","text":")"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/init(_:)-117g","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Encodable":{"url":"\/documentation\/compute\/encodable","navigatorTitle":[{"text":"Encodable","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Encodable","kind":"identifier"}],"abstract":[{"text":"A type that can encode itself to an external representation.","type":"text"}],"type":"topic","title":"Encodable","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/byteSwapped":{"type":"topic","url":"\/documentation\/compute\/uint\/byteswapped","abstract":[{"type":"text","text":"A representation of this integer with the byte order swapped."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/byteSwapped","title":"byteSwapped","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"byteSwapped","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow31MutableMultiplicationOperatableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow31MutableMultiplicationOperatableP","type":"unresolvable","title":"Swallow.MutableMultiplicationOperatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BinaryInteger"}],"navigatorTitle":[{"kind":"identifier","text":"BinaryInteger"}],"url":"\/documentation\/compute\/binaryinteger","type":"topic","abstract":[{"type":"text","text":"An integer type with a binary representation."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","title":"BinaryInteger","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomReflectable":{"url":"\/documentation\/compute\/customreflectable","role":"symbol","abstract":[{"text":"A type that explicitly supplies its own mirror.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","title":"CustomReflectable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomReflectable"}],"navigatorTitle":[{"kind":"identifier","text":"CustomReflectable"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/trailingZeroBitCount":{"url":"\/documentation\/compute\/uint\/trailingzerobitcount","title":"trailingZeroBitCount","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/trailingZeroBitCount","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"The number of trailing zeros in this value’s binary representation."}],"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"trailingZeroBitCount","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow24UnsignedIntegerInitiableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow24UnsignedIntegerInitiableP","type":"unresolvable","title":"Swallow.UnsignedIntegerInitiable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/leadingZeroBitCount":{"role":"symbol","abstract":[{"text":"The number of leading zeros in this value’s binary representation.","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"leadingZeroBitCount","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/leadingZeroBitCount","url":"\/documentation\/compute\/uint\/leadingzerobitcount","title":"leadingZeroBitCount","type":"topic","kind":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow20DiscreteOrContinuousP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20DiscreteOrContinuousP","type":"unresolvable","title":"Swallow.DiscreteOrContinuous"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/init(exactly:)-9ve7w":{"title":"init(exactly:)","url":"\/documentation\/compute\/uint\/init(exactly:)-9ve7w","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/init(exactly:)-9ve7w","role":"symbol","abstract":[{"text":"Creates an integer from the given floating-point value, if it can be","type":"text"},{"text":" ","type":"text"},{"text":"represented exactly.","type":"text"}],"kind":"symbol","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"?(","kind":"text"},{"kind":"externalParam","text":"exactly"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sf","text":"Float"},{"text":")","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/+=(_:_:)-6565m":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/+=(_:_:)-6565m","abstract":[{"type":"text","text":"Adds two values and stores the result in the left-hand-side variable."}],"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"+="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","url":"\/documentation\/compute\/uint\/+=(_:_:)-6565m","title":"+=(_:_:)","role":"symbol","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/remainderReportingOverflow(dividingBy:)":{"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"remainderReportingOverflow"},{"kind":"text","text":"("},{"kind":"externalParam","text":"dividingBy"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":") -> (partialValue","kind":"text"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", overflow","kind":"text"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Returns the remainder after dividing this value by the given value, along"},{"type":"text","text":" "},{"type":"text","text":"with a Boolean value indicating whether overflow occurred during division."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/remainderReportingOverflow(dividingBy:)","url":"\/documentation\/compute\/uint\/remainderreportingoverflow(dividingby:)","title":"remainderReportingOverflow(dividingBy:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow22ApproximatelyEquatableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22ApproximatelyEquatableP","type":"unresolvable","title":"Swallow.ApproximatelyEquatable"},"doc://com.swallow.documentation.Compute/7Swallow8DiscreteP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiscreteP","type":"unresolvable","title":"Swallow.Discrete"},"doc://com.swallow.documentation.Compute/7Swallow25MutableDivisionOperatableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableDivisionOperatableP","type":"unresolvable","title":"Swallow.MutableDivisionOperatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMDScalar":{"kind":"symbol","navigatorTitle":[{"text":"SIMDScalar","kind":"identifier"}],"type":"topic","title":"SIMDScalar","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDScalar","abstract":[{"type":"text","text":"A type that can be used as an element in a SIMD vector."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SIMDScalar","kind":"identifier"}],"url":"\/documentation\/compute\/simdscalar"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/_(_:_:)-9v225":{"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"<"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":", ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"type":"topic","role":"symbol","title":"<(_:_:)","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the value of the first"},{"type":"text","text":" "},{"type":"text","text":"argument is less than that of the second argument."}],"url":"\/documentation\/compute\/uint\/_(_:_:)-9v225","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/_(_:_:)-9v225"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/init(exactly:)-9cl5x":{"url":"\/documentation\/compute\/uint\/init(exactly:)-9cl5x","abstract":[{"type":"text","text":"Creates an integer from the given floating-point value, if it can be"},{"text":" ","type":"text"},{"text":"represented exactly.","type":"text"}],"title":"init(exactly:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/init(exactly:)-9cl5x","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?("},{"text":"exactly","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sd","text":"Double","kind":"typeIdentifier"},{"kind":"text","text":")"}],"kind":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Decodable":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Decodable","kind":"identifier"}],"title":"Decodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","abstract":[{"type":"text","text":"A type that can decode itself from an external representation."}],"url":"\/documentation\/compute\/decodable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Decodable"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible":{"url":"\/documentation\/compute\/customstringconvertible","navigatorTitle":[{"kind":"identifier","text":"CustomStringConvertible"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomStringConvertible","kind":"identifier"}],"abstract":[{"text":"A type with a customized textual representation.","type":"text"}],"type":"topic","title":"CustomStringConvertible","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible"},"doc://com.swallow.documentation.Compute/7Swallow26ShouldNotBeDecodedFromBoolP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow26ShouldNotBeDecodedFromBoolP","type":"unresolvable","title":"Swallow.ShouldNotBeDecodedFromBool"},"doc://com.swallow.documentation.Compute/7Swallow17NumberConvertibleP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow17NumberConvertibleP","type":"unresolvable","title":"Swallow.NumberConvertible"},"doc://com.swallow.documentation.Compute/7Swallow20ArithmeticOperatableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20ArithmeticOperatableP","title":"Swallow.ArithmeticOperatable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/addingReportingOverflow(_:)":{"url":"\/documentation\/compute\/uint\/addingreportingoverflow(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"addingReportingOverflow","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") -> (partialValue"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", overflow","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"type":"topic","abstract":[{"type":"text","text":"Returns the sum of this value and the given value, along with a Boolean"},{"type":"text","text":" "},{"text":"value indicating whether overflow occurred in the operation.","type":"text"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/addingReportingOverflow(_:)","title":"addingReportingOverflow(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt":{"kind":"symbol","navigatorTitle":[{"text":"UInt","kind":"identifier"}],"type":"topic","title":"UInt","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt","abstract":[{"text":"An unsigned integer value type.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt","kind":"identifier"}],"url":"\/documentation\/compute\/uint"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/bitWidth-swift.type.property":{"type":"topic","url":"\/documentation\/compute\/uint\/bitwidth-swift.type.property","abstract":[{"text":"The number of bits used for the underlying binary representation of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values of this type."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/bitWidth-swift.type.property","title":"bitWidth","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"bitWidth"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow21SubtractionOperatableP":{"type":"unresolvable","title":"Swallow.SubtractionOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21SubtractionOperatableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/CustomReflectable-Implementations":{"title":"CustomReflectable Implementations","url":"\/documentation\/compute\/uint\/customreflectable-implementations","role":"collectionGroup","type":"topic","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/CustomReflectable-Implementations","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/signum()":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"signum","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/signum()","url":"\/documentation\/compute\/uint\/signum()","role":"symbol","type":"topic","kind":"symbol","title":"signum()","abstract":[{"text":"Returns ","type":"text"},{"type":"codeVoice","code":"-1"},{"text":" if this value is negative and ","type":"text"},{"type":"codeVoice","code":"1"},{"type":"text","text":" if it’s positive;"},{"text":" ","type":"text"},{"text":"otherwise, ","type":"text"},{"type":"codeVoice","code":"0"},{"type":"text","text":"."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/SIMDScalar-Implementations":{"kind":"article","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/SIMDScalar-Implementations","url":"\/documentation\/compute\/uint\/simdscalar-implementations","abstract":[],"role":"collectionGroup","title":"SIMDScalar Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/init(bitPattern:)-7sd72":{"type":"topic","url":"\/documentation\/compute\/uint\/init(bitpattern:)-7sd72","abstract":[{"type":"text","text":"Creates a new value with the bit pattern of the given pointer."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/init(bitPattern:)-7sd72","title":"init(bitPattern:)","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"bitPattern"},{"text":": ","kind":"text"},{"text":"OpaquePointer","kind":"typeIdentifier","preciseIdentifier":"s:s13OpaquePointerV"},{"kind":"text","text":"?)"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow28MutableSubtractionOperatableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow28MutableSubtractionOperatableP","title":"Swallow.MutableSubtractionOperatable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/multipliedFullWidth(by:)":{"type":"topic","url":"\/documentation\/compute\/uint\/multipliedfullwidth(by:)","abstract":[{"text":"Returns a tuple containing the high and low parts of the result of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"multiplying this value by the given value."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/multipliedFullWidth(by:)","title":"multipliedFullWidth(by:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"multipliedFullWidth"},{"kind":"text","text":"("},{"text":"by","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> (high"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":", low"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Su9Magnitudea","kind":"typeIdentifier","text":"Magnitude"},{"text":")","kind":"text"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/Encodable-Implementations":{"type":"topic","title":"Encodable Implementations","url":"\/documentation\/compute\/uint\/encodable-implementations","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/Encodable-Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/init(_:)-9lrzt":{"type":"topic","title":"init(_:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"preciseIdentifier":"s:s7Float16V","text":"Float16","kind":"typeIdentifier"},{"kind":"text","text":")"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/init(_:)-9lrzt","url":"\/documentation\/compute\/uint\/init(_:)-9lrzt","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Creates an integer from the given floating-point value, rounding toward"},{"text":" ","type":"text"},{"text":"zero.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LosslessStringConvertible":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LosslessStringConvertible","kind":"identifier"}],"kind":"symbol","title":"LosslessStringConvertible","abstract":[{"type":"text","text":"A type that can be represented as a string in a lossless, unambiguous way."}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"LosslessStringConvertible","kind":"identifier"}],"url":"\/documentation\/compute\/losslessstringconvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible"},"doc://com.swallow.documentation.Compute/7Swallow7BoundedP":{"type":"unresolvable","title":"Swallow.Bounded","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7BoundedP"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/==(_:_:)-366en":{"type":"topic","url":"\/documentation\/compute\/uint\/==(_:_:)-366en","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether two values are equal."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/==(_:_:)-366en","title":"==(_:_:)","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"=="},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger":{"title":"FixedWidthInteger","kind":"symbol","navigatorTitle":[{"text":"FixedWidthInteger","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"FixedWidthInteger","kind":"identifier"}],"abstract":[{"text":"An integer type that uses a fixed size for every instance.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/fixedwidthinteger"},"doc://com.swallow.documentation.Compute/7Swallow16SignedOrUnsignedP":{"type":"unresolvable","title":"Swallow.SignedOrUnsigned","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16SignedOrUnsignedP"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/init(exactly:)-wmyv":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/init(exactly:)-wmyv","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?("},{"text":"exactly","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s7Float16V","kind":"typeIdentifier","text":"Float16"},{"kind":"text","text":")"}],"kind":"symbol","abstract":[{"text":"Creates an integer from the given floating-point value, if it can be","type":"text"},{"text":" ","type":"text"},{"text":"represented exactly.","type":"text"}],"type":"topic","title":"init(exactly:)","role":"symbol","url":"\/documentation\/compute\/uint\/init(exactly:)-wmyv"},"doc://com.swallow.documentation.Compute/7Swallow22SignedIntegerInitiableP":{"title":"Swallow.SignedIntegerInitiable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22SignedIntegerInitiableP"},"doc://com.swallow.documentation.Compute/7Swallow7TrivialP":{"title":"Swallow.Trivial","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/multipliedReportingOverflow(by:)":{"url":"\/documentation\/compute\/uint\/multipliedreportingoverflow(by:)","kind":"symbol","title":"multipliedReportingOverflow(by:)","role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/multipliedReportingOverflow(by:)","abstract":[{"type":"text","text":"Returns the product of this value and the given value, along with a"},{"text":" ","type":"text"},{"type":"text","text":"Boolean value indicating whether overflow occurred in the operation."}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"multipliedReportingOverflow","kind":"identifier"},{"kind":"text","text":"("},{"text":"by","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") -> (partialValue","kind":"text"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":", overflow","kind":"text"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}]},"doc://com.swallow.documentation.Compute/7Swallow15NumberInitiableP":{"title":"Swallow.NumberInitiable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow15NumberInitiableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/Comparable-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/Comparable-Implementations","abstract":[],"kind":"article","url":"\/documentation\/compute\/uint\/comparable-implementations","type":"topic","title":"Comparable Implementations","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/IntegerLiteralType":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IntegerLiteralType"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/IntegerLiteralType","url":"\/documentation\/compute\/uint\/integerliteraltype","role":"symbol","type":"topic","navigatorTitle":[{"text":"IntegerLiteralType","kind":"identifier"}],"kind":"symbol","title":"UInt.IntegerLiteralType","abstract":[{"type":"text","text":"A type that represents an integer literal."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/Equatable-Implementations":{"title":"Equatable Implementations","kind":"article","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/Equatable-Implementations","role":"collectionGroup","url":"\/documentation\/compute\/uint\/equatable-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/subtractingReportingOverflow(_:)":{"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/subtractingReportingOverflow(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"subtractingReportingOverflow","kind":"identifier"},{"kind":"text","text":"("},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") -> (partialValue"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", overflow","kind":"text"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"type":"topic","url":"\/documentation\/compute\/uint\/subtractingreportingoverflow(_:)","title":"subtractingReportingOverflow(_:)","kind":"symbol","abstract":[{"type":"text","text":"Returns the difference obtained by subtracting the given value from this"},{"text":" ","type":"text"},{"type":"text","text":"value, along with a Boolean value indicating whether overflow occurred in"},{"type":"text","text":" "},{"type":"text","text":"the operation."}]},"doc://com.swallow.documentation.Compute/7Swallow21AnyCodableConvertibleP":{"type":"unresolvable","title":"Swallow.AnyCodableConvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21AnyCodableConvertibleP"},"doc://com.swallow.documentation.Compute/7Swallow15NativeWordSizedP":{"type":"unresolvable","title":"Swallow.NativeWordSized","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow15NativeWordSizedP"},"doc://com.swallow.documentation.Compute/7Swallow18DivisionOperatableP":{"title":"Swallow.DivisionOperatable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18DivisionOperatableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Hashable"}],"title":"Hashable","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that can be hashed into a "},{"type":"codeVoice","code":"Hasher"},{"type":"text","text":" to produce an integer hash value."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","url":"\/documentation\/compute\/hashable","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow16IntegerInitiableP":{"type":"unresolvable","title":"Swallow.IntegerInitiable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16IntegerInitiableP"},"doc://com.swallow.documentation.Compute/7Swallow11RandomnableP":{"title":"Swallow.Randomnable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow11RandomnableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/ExpressibleByIntegerLiteral-Implementations":{"abstract":[],"kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/ExpressibleByIntegerLiteral-Implementations","type":"topic","url":"\/documentation\/compute\/uint\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/&__=(_:_:)-5hags":{"url":"\/documentation\/compute\/uint\/&__=(_:_:)-5hags","title":"&<<=(_:_:)","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/&__=(_:_:)-5hags","abstract":[{"text":"Returns the result of shifting a value’s binary representation the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specified number of digits to the left, masking the shift amount to the"},{"text":" ","type":"text"},{"type":"text","text":"type’s bit width, and stores the result in the left-hand-side variable."}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"&<<=","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/!=(_:_:)-3acpm":{"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"!=","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"type":"topic","role":"symbol","title":"!=(_:_:)","abstract":[],"url":"\/documentation\/compute\/uint\/!=(_:_:)-3acpm","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/!=(_:_:)-3acpm"},"doc://com.swallow.documentation.Compute/7Swallow6NumberP":{"type":"unresolvable","title":"Swallow.Number","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow6NumberP"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/_=(_:_:)-4bs9t":{"kind":"symbol","abstract":[{"text":"Stores the result of performing a bitwise OR operation on the two given","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"values in the left-hand-side variable."}],"url":"\/documentation\/compute\/uint\/_=(_:_:)-4bs9t","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"|="},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":")","kind":"text"}],"title":"|=(_:_:)","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/_=(_:_:)-4bs9t"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/UnsignedInteger-Implementations":{"title":"UnsignedInteger Implementations","kind":"article","type":"topic","abstract":[],"url":"\/documentation\/compute\/uint\/unsignedinteger-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/UnsignedInteger-Implementations","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/Numeric":{"abstract":[{"type":"text","text":"A type with values that support multiplication."}],"kind":"symbol","url":"\/documentation\/compute\/numeric","navigatorTitle":[{"text":"Numeric","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Numeric"}],"title":"Numeric"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/AdditiveArithmetic-Implementations":{"abstract":[],"kind":"article","title":"AdditiveArithmetic Implementations","role":"collectionGroup","url":"\/documentation\/compute\/uint\/additivearithmetic-implementations","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/AdditiveArithmetic-Implementations"},"doc://com.swallow.documentation.Compute/7Swallow14CoderPrimitiveP":{"type":"unresolvable","title":"Swallow.CoderPrimitive","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow14CoderPrimitiveP"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/Decodable-Implementations":{"role":"collectionGroup","type":"topic","title":"Decodable Implementations","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/Decodable-Implementations","kind":"article","url":"\/documentation\/compute\/uint\/decodable-implementations"},"doc://com.swallow.documentation.Compute/7Swallow22FloatingPointInitiableP":{"title":"Swallow.FloatingPointInitiable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22FloatingPointInitiableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/CVarArg":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CVarArg"}],"abstract":[{"text":"A type whose instances can be encoded, and appropriately passed, as","type":"text"},{"text":" ","type":"text"},{"text":"elements of a C ","type":"text"},{"type":"codeVoice","code":"va_list"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"CVarArg","kind":"identifier"}],"title":"CVarArg","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","url":"\/documentation\/compute\/cvararg"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/Words-swift.struct":{"url":"\/documentation\/compute\/uint\/words-swift.struct","abstract":[{"text":"A type that represents the words of this integer.","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Words"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/Words-swift.struct","title":"UInt.Words","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Words","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/init(bitPattern:)-9qvv7":{"type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"bitPattern","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/init(bitPattern:)-9qvv7","url":"\/documentation\/compute\/uint\/init(bitpattern:)-9qvv7","abstract":[{"type":"text","text":"Creates a new instance with the same memory representation as the given"},{"text":" ","type":"text"},{"text":"value.","type":"text"}],"kind":"symbol","title":"init(bitPattern:)","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/_=(_:_:)-85oek":{"title":"%=(_:_:)","role":"symbol","kind":"symbol","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"%=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":")","kind":"text"}],"url":"\/documentation\/compute\/uint\/_=(_:_:)-85oek","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/_=(_:_:)-85oek","abstract":[{"type":"text","text":"Divides the first value by the second and stores the remainder in the"},{"text":" ","type":"text"},{"type":"text","text":"left-hand-side variable."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByIntegerLiteral":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","url":"\/documentation\/compute\/expressiblebyintegerliteral","title":"ExpressibleByIntegerLiteral","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"navigatorTitle":[{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"abstract":[{"text":"A type that can be initialized with an integer literal.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/&__=(_:_:)-69f19":{"abstract":[{"type":"text","text":"Calculates the result of shifting a value’s binary representation the"},{"type":"text","text":" "},{"type":"text","text":"specified number of digits to the right, masking the shift amount to the"},{"text":" ","type":"text"},{"text":"type’s bit width, and stores the result in the left-hand-side variable.","type":"text"}],"role":"symbol","kind":"symbol","title":"&>>=(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/&__=(_:_:)-69f19","url":"\/documentation\/compute\/uint\/&__=(_:_:)-69f19","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"&>>=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsignedInteger":{"url":"\/documentation\/compute\/unsignedinteger","abstract":[{"type":"text","text":"An integer type that can represent only nonnegative values."}],"kind":"symbol","navigatorTitle":[{"text":"UnsignedInteger","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsignedInteger","title":"UnsignedInteger","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsignedInteger"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/Strideable-Implementations":{"kind":"article","title":"Strideable Implementations","type":"topic","url":"\/documentation\/compute\/uint\/strideable-implementations","role":"collectionGroup","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/Strideable-Implementations"},"doc://com.swallow.documentation.Compute/7Swallow25MutableAdditionOperatableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableAdditionOperatableP","title":"Swallow.MutableAdditionOperatable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/words-swift.property":{"abstract":[{"text":"A collection containing the words of this value’s binary","type":"text"},{"type":"text","text":" "},{"type":"text","text":"representation, in order from the least significant to most significant."}],"role":"symbol","kind":"symbol","title":"words","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/words-swift.property","url":"\/documentation\/compute\/uint\/words-swift.property","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"words","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":".","kind":"text"},{"text":"Words","kind":"typeIdentifier","preciseIdentifier":"s:Su5WordsV"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/_=(_:_:)-22lsj":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/_=(_:_:)-22lsj","url":"\/documentation\/compute\/uint\/_=(_:_:)-22lsj","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"\/=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":")","kind":"text"}],"kind":"symbol","role":"symbol","title":"\/=(_:_:)","type":"topic","abstract":[{"type":"text","text":"Divides the first value by the second and stores the quotient in the"},{"type":"text","text":" "},{"text":"left-hand-side variable.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable":{"url":"\/documentation\/compute\/comparable","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared using the relational operators ","type":"text"},{"code":"<","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Comparable"}],"title":"Comparable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Comparable","kind":"identifier"}]}}}