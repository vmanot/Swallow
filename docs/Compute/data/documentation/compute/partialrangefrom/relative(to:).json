{"metadata":{"role":"symbol","title":"relative(to:)","symbolKind":"method","externalID":"s:s16PartialRangeFromV8relative2toSnyxGqd___t5IndexQyd__RszSlRd__lF","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"relative"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"C"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"C"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sn","kind":"typeIdentifier","text":"Range"},{"kind":"text","text":"<"},{"text":"Bound","kind":"typeIdentifier"},{"text":">","kind":"text"}],"extendedModule":"Swift","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}]},"roleHeading":"Instance Method"},"kind":"symbol","sections":[],"abstract":[{"type":"text","text":"Returns the range of indices described by this range expression within"},{"text":" ","type":"text"},{"text":"the given collection.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom\/RangeExpression-Implementations"]]},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"relative","kind":"identifier"},{"kind":"text","text":"<"},{"text":"C","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"to","kind":"externalParam"},{"kind":"text","text":" "},{"text":"collection","kind":"internalParam"},{"kind":"text","text":": "},{"text":"C","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","kind":"typeIdentifier","preciseIdentifier":"s:Sn","text":"Range"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Bound"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Bound"},{"text":" == ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":".","kind":"text"},{"text":"Index","preciseIdentifier":"s:Sl5IndexQa","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection\/Index","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl","text":"Collection","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"text":"The collection to evaluate this range expression","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in relation to."}],"type":"paragraph"}],"name":"collection"}]},{"kind":"content","content":[{"level":2,"text":"Return Value","type":"heading","anchor":"return-value"},{"inlineContent":[{"text":"A range suitable for slicing ","type":"text"},{"type":"codeVoice","code":"collection"},{"text":". The returned range","type":"text"},{"type":"text","text":" "},{"text":"is ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"type":"text","text":" guaranteed to be inside the bounds of "},{"type":"codeVoice","code":"collection"},{"text":". Callers","type":"text"},{"type":"text","text":" "},{"type":"text","text":"should apply the same preconditions to the return value as they would"},{"type":"text","text":" "},{"text":"to a range provided directly by the user.","type":"text"}],"type":"paragraph"}]},{"content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"You can use the "},{"type":"codeVoice","code":"relative(to:)"},{"type":"text","text":" method to convert a range expression,"},{"text":" ","type":"text"},{"type":"text","text":"which could be missing one or both of its endpoints, into a concrete"},{"text":" ","type":"text"},{"type":"text","text":"range that is bounded on both sides. The following example uses this"},{"type":"text","text":" "},{"type":"text","text":"method to convert a partial range up to "},{"type":"codeVoice","code":"4"},{"type":"text","text":" into a half-open range,"},{"type":"text","text":" "},{"type":"text","text":"using an array instance to add the range’s lower bound."}],"type":"paragraph"},{"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","let upToFour = ..<4","","let r1 = upToFour.relative(to: numbers)","\/\/ r1 == 0..<4"],"type":"codeListing","syntax":null},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"r1"},{"type":"text","text":" range is bounded on the lower end by "},{"code":"0","type":"codeVoice"},{"type":"text","text":" because that is the"},{"text":" ","type":"text"},{"text":"starting index of the ","type":"text"},{"type":"codeVoice","code":"numbers"},{"text":" array. When the collection passed to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"relative(to:)"},{"text":" starts with a different index, that index is used as the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"lower bound instead. The next example creates a slice of "},{"type":"codeVoice","code":"numbers"},{"type":"text","text":" "},{"type":"text","text":"starting at index "},{"code":"2","type":"codeVoice"},{"text":", and then uses the slice with ","type":"text"},{"code":"relative(to:)","type":"codeVoice"},{"type":"text","text":" to"},{"type":"text","text":" "},{"text":"convert ","type":"text"},{"code":"upToFour","type":"codeVoice"},{"text":" to a concrete range.","type":"text"}],"type":"paragraph"},{"code":["let numbersSuffix = numbers[2...]","\/\/ numbersSuffix == [30, 40, 50, 60, 70]","","let r2 = upToFour.relative(to: numbersSuffix)","\/\/ r2 == 2..<4"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this method only if you need the concrete range it produces. To"},{"type":"text","text":" "},{"text":"access a slice of a collection using a range expression, use the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"collection’s generic subscript that uses a range expression as its"},{"type":"text","text":" "},{"text":"parameter.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let numbersPrefix = numbers[upToFour]","\/\/ numbersPrefix == [10, 20, 30, 40]"]}],"kind":"content"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom\/relative(to:)","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/partialrangefrom\/relative(to:)"]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Range":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Range","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","url":"\/documentation\/compute\/range","abstract":[{"text":"A half-open interval from a lower bound up to, but not including, an upper","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"bound."}],"navigatorTitle":[{"text":"Range","kind":"identifier"}],"title":"Range"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeFrom/relative(to:)":{"conformance":{"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom\/relative(to:)","type":"topic","abstract":[{"type":"text","text":"Returns the range of indices described by this range expression within"},{"type":"text","text":" "},{"type":"text","text":"the given collection."}],"title":"relative(to:)","kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"relative"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Range","kind":"typeIdentifier","preciseIdentifier":"s:Sn"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/compute\/partialrangefrom\/relative(to:)"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeFrom":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"PartialRangeFrom","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom","url":"\/documentation\/compute\/partialrangefrom","navigatorTitle":[{"kind":"identifier","text":"PartialRangeFrom"}],"abstract":[{"type":"text","text":"A partial interval extending upward from a lower bound."}],"role":"symbol","title":"PartialRangeFrom"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeFrom/RangeExpression-Implementations":{"kind":"article","role":"collectionGroup","abstract":[],"url":"\/documentation\/compute\/partialrangefrom\/rangeexpression-implementations","title":"RangeExpression Implementations","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom\/RangeExpression-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection/Index":{"url":"\/documentation\/compute\/collection\/index","required":true,"role":"symbol","title":"Index","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Index","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"Comparable","preciseIdentifier":"s:SL","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"A type that represents a position in the collection."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection\/Index","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Collection"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","url":"\/documentation\/compute\/collection","abstract":[{"type":"text","text":"A sequence whose elements can be traversed multiple times,"},{"text":" ","type":"text"},{"text":"nondestructively, and accessed by an indexed subscript.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Collection"}],"title":"Collection"}}}