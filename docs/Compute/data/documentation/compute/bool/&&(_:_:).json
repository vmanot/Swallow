{"metadata":{"role":"symbol","extendedModule":"Swift","title":"&&(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"&&"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":", ","kind":"text"},{"text":"@autoclosure ","kind":"attribute"},{"kind":"text","text":"() "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"externalID":"s:Sb2aaoiyS2b_SbyKXKtKFZ","modules":[{"name":"Compute","relatedModules":["Swift"]}],"roleHeading":"Operator","symbolKind":"op"},"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"&&","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"lhs","kind":"internalParam"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"text":", ","kind":"text"},{"text":"rhs","kind":"internalParam"},{"kind":"text","text":": "},{"text":"@autoclosure ","kind":"attribute"},{"kind":"text","text":"() "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","text":"Bool"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"lhs","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The left-hand side of the operation."}]}]},{"name":"rhs","content":[{"type":"paragraph","inlineContent":[{"text":"The right-hand side of the operation.","type":"text"}]}]}]},{"content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The logical AND operator ("},{"code":"&&","type":"codeVoice"},{"text":") combines two Boolean values and returns","type":"text"},{"type":"text","text":" "},{"code":"true","type":"codeVoice"},{"type":"text","text":" if both of the values are "},{"type":"codeVoice","code":"true"},{"text":". If either of the values is","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"false"},{"text":", the operator returns ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"This operator uses short-circuit evaluation: The left-hand side ("},{"type":"codeVoice","code":"lhs"},{"type":"text","text":") is"},{"text":" ","type":"text"},{"type":"text","text":"evaluated first, and the right-hand side ("},{"code":"rhs","type":"codeVoice"},{"text":") is evaluated only if","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"lhs"},{"type":"text","text":" evaluates to "},{"type":"codeVoice","code":"true"},{"type":"text","text":". For example:"}],"type":"paragraph"},{"code":["let measurements = [7.44, 6.51, 4.74, 5.88, 6.27, 6.12, 7.76]","let sum = measurements.reduce(0, +)","","if measurements.count > 0 && sum \/ Double(measurements.count) < 6.5 {","    print(\"Average measurement is less than 6.5\")","}","\/\/ Prints \"Average measurement is less than 6.5\""],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"In this example, "},{"code":"lhs","type":"codeVoice"},{"type":"text","text":" tests whether "},{"type":"codeVoice","code":"measurements.count"},{"text":" is greater than","type":"text"},{"text":" ","type":"text"},{"text":"zero. Evaluation of the ","type":"text"},{"type":"codeVoice","code":"&&"},{"type":"text","text":" operator is one of the following:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"When ","type":"text"},{"type":"codeVoice","code":"measurements.count"},{"type":"text","text":" is equal to zero, "},{"type":"codeVoice","code":"lhs"},{"type":"text","text":" evaluates to "},{"type":"codeVoice","code":"false"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"codeVoice","code":"rhs"},{"type":"text","text":" is not evaluated, preventing a divide-by-zero error in the"},{"type":"text","text":" "},{"text":"expression ","type":"text"},{"type":"codeVoice","code":"sum \/ Double(measurements.count)"},{"type":"text","text":". The result of the"},{"type":"text","text":" "},{"text":"operation is ","type":"text"},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"When ","type":"text"},{"type":"codeVoice","code":"measurements.count"},{"text":" is greater than zero, ","type":"text"},{"type":"codeVoice","code":"lhs"},{"type":"text","text":" evaluates to"},{"text":" ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"rhs"},{"text":" is evaluated. The result of evaluating ","type":"text"},{"type":"codeVoice","code":"rhs"},{"text":" is the","type":"text"},{"text":" ","type":"text"},{"text":"result of the ","type":"text"},{"type":"codeVoice","code":"&&"},{"text":" operation.","type":"text"}]}]}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool"]]},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/&&(_:_:)","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/bool\/&&(_:_:)"]}],"kind":"symbol","abstract":[{"type":"text","text":"Performs a logical AND operation on two Boolean values."}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Bool/&&(_:_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/&&(_:_:)","title":"&&(_:_:)","role":"symbol","type":"topic","url":"\/documentation\/compute\/bool\/&&(_:_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"&&"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", ","kind":"text"},{"text":"@autoclosure ","kind":"attribute"},{"text":"() ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"text":"Performs a logical AND operation on two Boolean values.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"}}}