{"variants":[{"paths":["\/documentation\/compute\/error"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"A type representing an error value that can be thrown."}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Error"},"sections":[],"metadata":{"symbolKind":"protocol","navigatorTitle":[{"kind":"identifier","text":"Error"}],"externalID":"s:s5ErrorP","role":"symbol","roleHeading":"Protocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Error"}],"modules":[{"name":"Compute"}],"title":"Error"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"relationshipsSections":[{"kind":"relationships","title":"Inherits From","type":"inheritsFrom","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable"]},{"title":"Conforming Types","kind":"relationships","type":"conformingTypes","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DecodingError","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EncodingError","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Never"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Error"},{"kind":"text","text":" : "},{"text":"Sendable","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","preciseIdentifier":"s:s8SendableP"}]}]},{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"Any type that declares conformance to the ","type":"text"},{"code":"Error","type":"codeVoice"},{"text":" protocol can be used to","type":"text"},{"text":" ","type":"text"},{"text":"represent an error in Swift’s error handling system. Because the ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":" ","type":"text"},{"text":"protocol has no requirements of its own, you can declare conformance on","type":"text"},{"text":" ","type":"text"},{"text":"any custom type you create.","type":"text"}]},{"type":"heading","text":"Using Enumerations as Errors","anchor":"Using-Enumerations-as-Errors","level":1},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s enumerations are well suited to represent simple errors. Create an"},{"type":"text","text":" "},{"type":"text","text":"enumeration that conforms to the "},{"type":"codeVoice","code":"Error"},{"text":" protocol with a case for each","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"possible error. If there are additional details about the error that could"},{"text":" ","type":"text"},{"text":"be helpful for recovery, use associated values to include that","type":"text"},{"type":"text","text":" "},{"text":"information.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The following example shows an ","type":"text"},{"type":"codeVoice","code":"IntParsingError"},{"text":" enumeration that captures","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"two different kinds of errors that can occur when parsing an integer from"},{"type":"text","text":" "},{"text":"a string: overflow, where the value represented by the string is too large","type":"text"},{"type":"text","text":" "},{"text":"for the integer data type, and invalid input, where nonnumeric characters","type":"text"},{"text":" ","type":"text"},{"text":"are found within the input.","type":"text"}]},{"type":"codeListing","code":["enum IntParsingError: Error {","    case overflow","    case invalidInput(Character)","}"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"invalidInput"},{"text":" case includes the invalid character as an associated","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value."}]},{"inlineContent":[{"type":"text","text":"The next code sample shows a possible extension to the "},{"type":"codeVoice","code":"Int"},{"text":" type that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parses the integer value of a "},{"code":"String","type":"codeVoice"},{"type":"text","text":" instance, throwing an error when"},{"text":" ","type":"text"},{"type":"text","text":"there is a problem during parsing."}],"type":"paragraph"},{"code":["extension Int {","    init(validating input: String) throws {","        \/\/ ...","        let c = _nextCharacter(from: input)","        if !_isValid(c) {","            throw IntParsingError.invalidInput(c)","        }","        \/\/ ...","    }","}"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"When calling the new ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":" initializer within a "},{"type":"codeVoice","code":"do"},{"text":" statement, you can use","type":"text"},{"text":" ","type":"text"},{"text":"pattern matching to match specific cases of your custom error type and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"access their associated values, as in the example below."}]},{"code":["do {","    let price = try Int(validating: \"$100\")","} catch IntParsingError.invalidInput(let invalid) {","    print(\"Invalid character: '\\(invalid)'\")","} catch IntParsingError.overflow {","    print(\"Overflow error\")","} catch {","    print(\"Other error\")","}","\/\/ Prints \"Invalid character: '$'\""],"syntax":null,"type":"codeListing"},{"anchor":"Including-More-Data-in-Errors","level":1,"text":"Including More Data in Errors","type":"heading"},{"inlineContent":[{"type":"text","text":"Sometimes you may want different error states to include the same common"},{"text":" ","type":"text"},{"type":"text","text":"data, such as the position in a file or some of your application’s state."},{"type":"text","text":" "},{"text":"When you do, use a structure to represent errors. The following example","type":"text"},{"text":" ","type":"text"},{"text":"uses a structure to represent an error when parsing an XML document,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including the line and column numbers where the error occurred:"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["struct XMLParsingError: Error {","    enum ErrorKind {","        case invalidCharacter","        case mismatchedTag","        case internalError","    }","","    let line: Int","    let column: Int","    let kind: ErrorKind","}","","func parse(_ source: String) throws -> XMLDoc {","    \/\/ ...","    throw XMLParsingError(line: 19, column: 5, kind: .mismatchedTag)","    \/\/ ...","}"]},{"inlineContent":[{"text":"Once again, use pattern matching to conditionally catch errors. Here’s how","type":"text"},{"text":" ","type":"text"},{"text":"you can catch any ","type":"text"},{"type":"codeVoice","code":"XMLParsingError"},{"type":"text","text":" errors thrown by the "},{"type":"codeVoice","code":"parse(_:)"},{"text":" ","type":"text"},{"text":"function:","type":"text"}],"type":"paragraph"},{"code":["do {","    let xmlDoc = try parse(myXMLData)","} catch let e as XMLParsingError {","    print(\"Parsing error: \\(e.kind) [\\(e.line):\\(e.column)]\")","} catch {","    print(\"Other error: \\(error)\")","}","\/\/ Prints \"Parsing error: mismatchedTag [19:5]\""],"type":"codeListing","syntax":null}],"kind":"content"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/DecodingError":{"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DecodingError"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DecodingError","navigatorTitle":[{"text":"DecodingError","kind":"identifier"}],"type":"topic","kind":"symbol","abstract":[{"text":"An error that occurs during the decoding of a value.","type":"text"}],"url":"\/documentation\/compute\/decodingerror","title":"DecodingError"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Sendable","kind":"identifier"}],"title":"Sendable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","abstract":[],"url":"\/documentation\/compute\/sendable","role":"symbol","navigatorTitle":[{"text":"Sendable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Never":{"title":"Never","navigatorTitle":[{"kind":"identifier","text":"Never"}],"abstract":[{"type":"text","text":"A type that has no values and can’t be constructed."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Never"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Never","role":"symbol","type":"topic","url":"\/documentation\/compute\/never"},"doc://com.swallow.documentation.Compute/documentation/Compute/EncodingError":{"navigatorTitle":[{"text":"EncodingError","kind":"identifier"}],"role":"symbol","url":"\/documentation\/compute\/encodingerror","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"EncodingError","kind":"identifier"}],"type":"topic","title":"EncodingError","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EncodingError","abstract":[{"type":"text","text":"An error that occurs during the encoding of a value."}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Error":{"url":"\/documentation\/compute\/error","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Error"}],"navigatorTitle":[{"text":"Error","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Error","type":"topic","role":"symbol","abstract":[{"type":"text","text":"A type representing an error value that can be thrown."}],"kind":"symbol","title":"Error"}}}