{"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"@frozen","kind":"attribute"},{"text":" ","kind":"text"},{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UInt8"}],"platforms":["macOS"]}]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"abstract":[{"text":"An 8-bit unsigned integer value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type."}],"metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"UInt8","kind":"identifier"}],"role":"symbol","title":"UInt8","navigatorTitle":[{"kind":"identifier","text":"UInt8"}],"roleHeading":"Structure","symbolKind":"struct","externalID":"s:s5UInt8V","modules":[{"name":"Compute"}]},"kind":"symbol","sections":[],"topicSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Words-swift.struct"],"generated":true,"anchor":"Structures","title":"Structures"},{"title":"Operators","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/!=(_:_:)-6oort","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/&=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/&__=(_:_:)-172l7","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/&__=(_:_:)-5wuaw","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/*=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/+=(_:_:)-3ty60","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/-=(_:_:)-7lsmu","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/==(_:_:)-54y88","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/_(_:_:)-140g8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/_=(_:_:)-12hmo","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/_=(_:_:)-23lmz","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/_=(_:_:)-56yu9","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/_=(_:_:)-7a5f0"],"anchor":"Operators","generated":true},{"generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/init(_:)-4e13y","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/init(_:)-8hqkq","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/init(_:)-qdzq","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/init(ascii:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/init(bitPattern:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/init(exactly:)-1ljfr","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/init(exactly:)-4mc0a","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/init(exactly:)-7wsjq"],"anchor":"Initializers","title":"Initializers"},{"anchor":"Instance-Properties","title":"Instance Properties","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/byteSwapped","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/leadingZeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/nonzeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/trailingZeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/words-swift.property"]},{"generated":true,"anchor":"Instance-Methods","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/addingReportingOverflow(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/dividedReportingOverflow(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/dividingFullWidth(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/multipliedFullWidth(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/multipliedReportingOverflow(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/remainderReportingOverflow(dividingBy:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/signum()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/subtractingReportingOverflow(_:)"],"title":"Instance Methods"},{"generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/IntegerLiteralType","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Magnitude-swift.typealias","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Stride"],"title":"Type Aliases","anchor":"Type-Aliases"},{"generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/bitWidth-swift.type.property"],"title":"Type Properties","anchor":"Type-Properties"},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/AdditiveArithmetic-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/BinaryInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Comparable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/CustomReflectable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Decodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Encodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/ExpressibleByIntegerLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/FixedWidthInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/SIMDScalar-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Strideable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/UnsignedInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/_CustomPlaygroundQuickLookable-Implementations"],"anchor":"Default-Implementations"}],"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/com.swallow.documentation.Compute\/10Accelerate10BNNSScalarP","doc:\/\/com.swallow.documentation.Compute\/10Accelerate23vDSP_IntegerConvertableP","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AdditiveArithmetic","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDScalar","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","doc:\/\/com.swallow.documentation.Compute\/7Swallow18AdditionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22ApproximatelyEquatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20ArithmeticOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow21BitPatternConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16BooleanInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7BoundedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18BoundedRandomnableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18ByteOrderSwappableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow14CoderPrimitiveP","doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataDecodableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataEncodableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiscreteP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20DiscreteOrContinuousP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18DivisionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22FloatingPointInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow9InitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16IntegerInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow24MultiplicationOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableAdditionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow27MutableArithmeticOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableDivisionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow31MutableMultiplicationOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow28MutableSubtractionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow6NumberP","doc:\/\/com.swallow.documentation.Compute\/7Swallow17NumberConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow15NumberInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow11RandomnableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow26ShouldNotBeDecodedFromBoolP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22SignedIntegerInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16SignedOrUnsignedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow21SubtractionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP","doc:\/\/com.swallow.documentation.Compute\/7Swallow8UnsignedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow24UnsignedIntegerInitiableP","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsignedInteger"],"title":"Conforms To","kind":"relationships"}],"variants":[{"paths":["\/documentation\/compute\/uint8"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/_=(_:_:)-56yu9":{"url":"\/documentation\/compute\/uint8\/_=(_:_:)-56yu9","kind":"symbol","abstract":[{"type":"text","text":"Stores the result of performing a bitwise OR operation on the two given"},{"type":"text","text":" "},{"text":"values in the left-hand-side variable.","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/_=(_:_:)-56yu9","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"|="},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"UInt8","preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"UInt8","kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V"},{"text":")","kind":"text"}],"type":"topic","title":"|=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMDScalar":{"kind":"symbol","navigatorTitle":[{"text":"SIMDScalar","kind":"identifier"}],"type":"topic","title":"SIMDScalar","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDScalar","abstract":[{"type":"text","text":"A type that can be used as an element in a SIMD vector."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SIMDScalar","kind":"identifier"}],"url":"\/documentation\/compute\/simdscalar"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/nonzeroBitCount":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/nonzeroBitCount","abstract":[{"text":"The number of bits equal to 1 in this value’s binary representation.","type":"text"}],"kind":"symbol","title":"nonzeroBitCount","role":"symbol","url":"\/documentation\/compute\/uint8\/nonzerobitcount","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"nonzeroBitCount"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow16IntegerInitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16IntegerInitiableP","title":"Swallow.IntegerInitiable"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/Stride":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Stride","url":"\/documentation\/compute\/uint8\/stride","title":"UInt8.Stride","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Stride"}],"navigatorTitle":[{"text":"Stride","kind":"identifier"}],"abstract":[{"type":"text","text":"A type that represents the distance between two values."}],"kind":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow13DataEncodableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataEncodableP","title":"Swallow.DataEncodable"},"doc://com.swallow.documentation.Compute/7Swallow22FloatingPointInitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22FloatingPointInitiableP","title":"Swallow.FloatingPointInitiable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/init(ascii:)":{"abstract":[{"text":"Construct with value ","type":"text"},{"code":"v.value","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"ascii"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s7UnicodeO","text":"Unicode","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Scalar","preciseIdentifier":"s:s7UnicodeO6ScalarV","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/compute\/uint8\/init(ascii:)","title":"init(ascii:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/init(ascii:)","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/multipliedFullWidth(by:)":{"abstract":[{"type":"text","text":"Returns a tuple containing the high and low parts of the result of"},{"type":"text","text":" "},{"type":"text","text":"multiplying this value by the given value."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"multipliedFullWidth","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"by"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V","text":"UInt8"},{"kind":"text","text":") -> (high"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"},{"text":", low","kind":"text"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier","text":"UInt8"},{"text":".","kind":"text"},{"text":"Magnitude","kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V9Magnitudea"},{"kind":"text","text":")"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/multipliedFullWidth(by:)","type":"topic","url":"\/documentation\/compute\/uint8\/multipliedfullwidth(by:)","role":"symbol","title":"multipliedFullWidth(by:)"},"doc://com.swallow.documentation.Compute/7Swallow25MutableDivisionOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableDivisionOperatableP","title":"Swallow.MutableDivisionOperatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Hashable"}],"title":"Hashable","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that can be hashed into a "},{"type":"codeVoice","code":"Hasher"},{"type":"text","text":" to produce an integer hash value."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","url":"\/documentation\/compute\/hashable","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow24UnsignedIntegerInitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow24UnsignedIntegerInitiableP","title":"Swallow.UnsignedIntegerInitiable"},"doc://com.swallow.documentation.Compute/documentation/Compute/CVarArg":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CVarArg"}],"abstract":[{"text":"A type whose instances can be encoded, and appropriately passed, as","type":"text"},{"text":" ","type":"text"},{"text":"elements of a C ","type":"text"},{"type":"codeVoice","code":"va_list"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"CVarArg","kind":"identifier"}],"title":"CVarArg","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","url":"\/documentation\/compute\/cvararg"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BinaryInteger"}],"navigatorTitle":[{"kind":"identifier","text":"BinaryInteger"}],"url":"\/documentation\/compute\/binaryinteger","type":"topic","abstract":[{"type":"text","text":"An integer type with a binary representation."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","title":"BinaryInteger","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/init(_:)-4e13y":{"role":"symbol","abstract":[{"text":"Creates an integer from the given floating-point value, rounding toward","type":"text"},{"type":"text","text":" "},{"text":"zero.","type":"text"}],"kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:s7Float16V","text":"Float16"},{"text":")","kind":"text"}],"type":"topic","title":"init(_:)","url":"\/documentation\/compute\/uint8\/init(_:)-4e13y","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/init(_:)-4e13y"},"doc://com.swallow.documentation.Compute/7Swallow11RandomnableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow11RandomnableP","title":"Swallow.Randomnable"},"doc://com.swallow.documentation.Compute/7Swallow21SubtractionOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21SubtractionOperatableP","title":"Swallow.SubtractionOperatable"},"doc://com.swallow.documentation.Compute/7Swallow18DivisionOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18DivisionOperatableP","title":"Swallow.DivisionOperatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomReflectable":{"url":"\/documentation\/compute\/customreflectable","role":"symbol","abstract":[{"text":"A type that explicitly supplies its own mirror.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","title":"CustomReflectable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomReflectable"}],"navigatorTitle":[{"kind":"identifier","text":"CustomReflectable"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsignedInteger":{"url":"\/documentation\/compute\/unsignedinteger","abstract":[{"type":"text","text":"An integer type that can represent only nonnegative values."}],"kind":"symbol","navigatorTitle":[{"text":"UnsignedInteger","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsignedInteger","title":"UnsignedInteger","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsignedInteger"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/init(_:)-8hqkq":{"title":"init(_:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/init(_:)-8hqkq","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:Sd","text":"Double","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/compute\/uint8\/init(_:)-8hqkq","abstract":[],"type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow8DiscreteP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiscreteP","title":"Swallow.Discrete"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/init(bitPattern:)":{"role":"symbol","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"bitPattern","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s4Int8V","text":"Int8","kind":"typeIdentifier"},{"kind":"text","text":")"}],"title":"init(bitPattern:)","url":"\/documentation\/compute\/uint8\/init(bitpattern:)","abstract":[{"type":"text","text":"Creates a new instance with the same memory representation as the given"},{"type":"text","text":" "},{"type":"text","text":"value."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/init(bitPattern:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/*=(_:_:)":{"role":"symbol","type":"topic","title":"*=(_:_:)","abstract":[{"type":"text","text":"Multiplies two values and stores the result in the left-hand-side"},{"text":" ","type":"text"},{"type":"text","text":"variable."}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"*=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V","text":"UInt8"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V","text":"UInt8"},{"kind":"text","text":")"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/*=(_:_:)","kind":"symbol","url":"\/documentation\/compute\/uint8\/*=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/Encodable-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Encodable-Implementations","url":"\/documentation\/compute\/uint8\/encodable-implementations","type":"topic","title":"Encodable Implementations","abstract":[],"kind":"article"},"doc://com.swallow.documentation.Compute/7Swallow27MutableArithmeticOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow27MutableArithmeticOperatableP","title":"Swallow.MutableArithmeticOperatable"},"doc://com.swallow.documentation.Compute/10Accelerate10BNNSScalarP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Accelerate10BNNSScalarP","title":"Accelerate.BNNSScalar"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/UnsignedInteger-Implementations":{"abstract":[],"kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/UnsignedInteger-Implementations","type":"topic","url":"\/documentation\/compute\/uint8\/unsignedinteger-implementations","title":"UnsignedInteger Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/-=(_:_:)-7lsmu":{"type":"topic","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"-=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V","text":"UInt8"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s5UInt8V","text":"UInt8","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"-=(_:_:)","url":"\/documentation\/compute\/uint8\/-=(_:_:)-7lsmu","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/-=(_:_:)-7lsmu","kind":"symbol","abstract":[{"type":"text","text":"Subtracts the second value from the first and stores the difference in the"},{"type":"text","text":" "},{"type":"text","text":"left-hand-side variable."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/dividingFullWidth(_:)":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Returns a tuple containing the quotient and remainder of dividing the"},{"text":" ","type":"text"},{"type":"text","text":"given value by this value."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/dividingFullWidth(_:)","title":"dividingFullWidth(_:)","url":"\/documentation\/compute\/uint8\/dividingfullwidth(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dividingFullWidth"},{"kind":"text","text":"((high"},{"kind":"text","text":": "},{"text":"UInt8","kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V"},{"text":", low","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"},{"text":".","kind":"text"},{"preciseIdentifier":"s:s5UInt8V9Magnitudea","kind":"typeIdentifier","text":"Magnitude"},{"text":")) -> (quotient","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"},{"text":", remainder","kind":"text"},{"text":": ","kind":"text"},{"text":"UInt8","preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LosslessStringConvertible":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LosslessStringConvertible","kind":"identifier"}],"kind":"symbol","title":"LosslessStringConvertible","abstract":[{"type":"text","text":"A type that can be represented as a string in a lossless, unambiguous way."}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"LosslessStringConvertible","kind":"identifier"}],"url":"\/documentation\/compute\/losslessstringconvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible"},"doc://com.swallow.documentation.Compute/7Swallow6NumberP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow6NumberP","type":"unresolvable","title":"Swallow.Number"},"doc://com.swallow.documentation.Compute/documentation/Compute/BitwiseCopyable":{"title":"BitwiseCopyable","abstract":[],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BitwiseCopyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","url":"\/documentation\/compute\/bitwisecopyable","navigatorTitle":[{"kind":"identifier","text":"BitwiseCopyable"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/Comparable-Implementations":{"url":"\/documentation\/compute\/uint8\/comparable-implementations","kind":"article","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Comparable-Implementations","type":"topic","title":"Comparable Implementations"},"doc://com.swallow.documentation.Compute/7Swallow20ByteTupleConvertibleP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP","type":"unresolvable","title":"Swallow.ByteTupleConvertible"},"doc://com.swallow.documentation.Compute/7Swallow26ShouldNotBeDecodedFromBoolP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow26ShouldNotBeDecodedFromBoolP","type":"unresolvable","title":"Swallow.ShouldNotBeDecodedFromBool"},"doc://com.swallow.documentation.Compute/7Swallow8UnsignedP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow8UnsignedP","type":"unresolvable","title":"Swallow.Unsigned"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/+=(_:_:)-3ty60":{"type":"topic","title":"+=(_:_:)","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"+=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UInt8","kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s5UInt8V","text":"UInt8","kind":"typeIdentifier"},{"kind":"text","text":")"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/+=(_:_:)-3ty60","abstract":[{"type":"text","text":"Adds two values and stores the result in the left-hand-side variable."}],"url":"\/documentation\/compute\/uint8\/+=(_:_:)-3ty60"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible":{"url":"\/documentation\/compute\/customstringconvertible","navigatorTitle":[{"kind":"identifier","text":"CustomStringConvertible"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomStringConvertible","kind":"identifier"}],"abstract":[{"text":"A type with a customized textual representation.","type":"text"}],"type":"topic","title":"CustomStringConvertible","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByIntegerLiteral":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","url":"\/documentation\/compute\/expressiblebyintegerliteral","title":"ExpressibleByIntegerLiteral","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"navigatorTitle":[{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"abstract":[{"text":"A type that can be initialized with an integer literal.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/IntegerLiteralType":{"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"IntegerLiteralType","kind":"identifier"}],"title":"UInt8.IntegerLiteralType","url":"\/documentation\/compute\/uint8\/integerliteraltype","role":"symbol","navigatorTitle":[{"text":"IntegerLiteralType","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/IntegerLiteralType","kind":"symbol","abstract":[{"type":"text","text":"A type that represents an integer literal."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/bitWidth-swift.type.property":{"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"bitWidth","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"abstract":[{"text":"The number of bits used for the underlying binary representation of","type":"text"},{"type":"text","text":" "},{"text":"values of this type.","type":"text"}],"type":"topic","title":"bitWidth","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/bitWidth-swift.type.property","url":"\/documentation\/compute\/uint8\/bitwidth-swift.type.property"},"doc://com.swallow.documentation.Compute/documentation/Compute/Decodable":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Decodable","kind":"identifier"}],"title":"Decodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","abstract":[{"type":"text","text":"A type that can decode itself from an external representation."}],"url":"\/documentation\/compute\/decodable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Decodable"}]},"doc://com.swallow.documentation.Compute/7Swallow22ApproximatelyEquatableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22ApproximatelyEquatableP","type":"unresolvable","title":"Swallow.ApproximatelyEquatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/AdditiveArithmetic-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/AdditiveArithmetic-Implementations","title":"AdditiveArithmetic Implementations","url":"\/documentation\/compute\/uint8\/additivearithmetic-implementations","kind":"article","abstract":[],"type":"topic","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/==(_:_:)-54y88":{"url":"\/documentation\/compute\/uint8\/==(_:_:)-54y88","title":"==(_:_:)","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/==(_:_:)-54y88","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether two values are equal."}],"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"=="},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"UInt8","preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"preciseIdentifier":"s:s5UInt8V","text":"UInt8","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/AdditiveArithmetic":{"type":"topic","title":"AdditiveArithmetic","abstract":[{"text":"A type with values that support addition and subtraction.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AdditiveArithmetic"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AdditiveArithmetic","url":"\/documentation\/compute\/additivearithmetic","role":"symbol","navigatorTitle":[{"text":"AdditiveArithmetic","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/BinaryInteger-Implementations":{"abstract":[],"title":"BinaryInteger Implementations","type":"topic","kind":"article","url":"\/documentation\/compute\/uint8\/binaryinteger-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/BinaryInteger-Implementations","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/init(_:)-qdzq":{"type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Float","kind":"typeIdentifier","preciseIdentifier":"s:Sf"},{"text":")","kind":"text"}],"title":"init(_:)","url":"\/documentation\/compute\/uint8\/init(_:)-qdzq","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/init(_:)-qdzq","kind":"symbol","abstract":[]},"doc://com.swallow.documentation.Compute/7Swallow25MutableAdditionOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableAdditionOperatableP","title":"Swallow.MutableAdditionOperatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/!=(_:_:)-6oort":{"abstract":[],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"!=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"UInt8","preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"role":"symbol","url":"\/documentation\/compute\/uint8\/!=(_:_:)-6oort","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/!=(_:_:)-6oort","title":"!=(_:_:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/10Accelerate23vDSP_IntegerConvertableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Accelerate23vDSP_IntegerConvertableP","title":"Accelerate.vDSP_IntegerConvertable"},"doc://com.swallow.documentation.Compute/7Swallow7BoundedP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7BoundedP","title":"Swallow.Bounded"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/Strideable-Implementations":{"abstract":[],"title":"Strideable Implementations","role":"collectionGroup","url":"\/documentation\/compute\/uint8\/strideable-implementations","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Strideable-Implementations","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/&=(_:_:)":{"type":"topic","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"&="},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UInt8","preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"},{"kind":"text","text":")"}],"title":"&=(_:_:)","url":"\/documentation\/compute\/uint8\/&=(_:_:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/&=(_:_:)","kind":"symbol","abstract":[{"type":"text","text":"Stores the result of performing a bitwise AND operation on the two given"},{"text":" ","type":"text"},{"text":"values in the left-hand-side variable.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/&__=(_:_:)-5wuaw":{"kind":"symbol","title":"&<<=(_:_:)","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"&<<=","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier","text":"UInt8"},{"kind":"text","text":", "},{"text":"UInt8","kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V"},{"kind":"text","text":")"}],"url":"\/documentation\/compute\/uint8\/&__=(_:_:)-5wuaw","role":"symbol","abstract":[{"text":"Returns the result of shifting a value’s binary representation the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specified number of digits to the left, masking the shift amount to the"},{"type":"text","text":" "},{"type":"text","text":"type’s bit width, and stores the result in the left-hand-side variable."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/&__=(_:_:)-5wuaw"},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"title":"Copyable","abstract":[{"type":"text","text":"A type whose values can be implicitly or explicitly copied."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Copyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","url":"\/documentation\/compute\/copyable","navigatorTitle":[{"text":"Copyable","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow18BoundedRandomnableP":{"title":"Swallow.BoundedRandomnable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18BoundedRandomnableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/trailingZeroBitCount":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"trailingZeroBitCount"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"url":"\/documentation\/compute\/uint8\/trailingzerobitcount","abstract":[{"text":"The number of trailing zeros in this value’s binary representation.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/trailingZeroBitCount","role":"symbol","title":"trailingZeroBitCount","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/init(exactly:)-4mc0a":{"type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?("},{"text":"exactly","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sf","text":"Float"},{"text":")","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/init(exactly:)-4mc0a","kind":"symbol","abstract":[{"type":"text","text":"Creates an integer from the given floating-point value, if it can be"},{"type":"text","text":" "},{"text":"represented exactly.","type":"text"}],"url":"\/documentation\/compute\/uint8\/init(exactly:)-4mc0a","role":"symbol","title":"init(exactly:)"},"doc://com.swallow.documentation.Compute/7Swallow18AdditionOperatableP":{"title":"Swallow.AdditionOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18AdditionOperatableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/init(exactly:)-1ljfr":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/init(exactly:)-1ljfr","title":"init(exactly:)","role":"symbol","abstract":[{"type":"text","text":"Creates an integer from the given floating-point value, if it can be"},{"text":" ","type":"text"},{"text":"represented exactly.","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?("},{"text":"exactly","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Double","preciseIdentifier":"s:Sd"},{"text":")","kind":"text"}],"url":"\/documentation\/compute\/uint8\/init(exactly:)-1ljfr"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/_(_:_:)-140g8":{"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"<","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"UInt8","preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"preciseIdentifier":"s:s5UInt8V","text":"UInt8","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"kind":"symbol","url":"\/documentation\/compute\/uint8\/_(_:_:)-140g8","role":"symbol","title":"<(_:_:)","abstract":[{"text":"Returns a Boolean value indicating whether the value of the first","type":"text"},{"type":"text","text":" "},{"type":"text","text":"argument is less than that of the second argument."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/_(_:_:)-140g8"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger":{"title":"FixedWidthInteger","kind":"symbol","navigatorTitle":[{"text":"FixedWidthInteger","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"FixedWidthInteger","kind":"identifier"}],"abstract":[{"text":"An integer type that uses a fixed size for every instance.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/fixedwidthinteger"},"doc://com.swallow.documentation.Compute/7Swallow20ArithmeticOperatableP":{"title":"Swallow.ArithmeticOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20ArithmeticOperatableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/addingReportingOverflow(_:)":{"url":"\/documentation\/compute\/uint8\/addingreportingoverflow(_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/addingReportingOverflow(_:)","kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Returns the sum of this value and the given value, along with a Boolean"},{"text":" ","type":"text"},{"text":"value indicating whether overflow occurred in the operation.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"addingReportingOverflow","kind":"identifier"},{"kind":"text","text":"("},{"text":"UInt8","kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V"},{"text":") -> (partialValue","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"},{"text":", overflow","kind":"text"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"addingReportingOverflow(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/_=(_:_:)-23lmz":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/_=(_:_:)-23lmz","abstract":[{"text":"Stores the result of performing a bitwise XOR operation on the two given","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values in the left-hand-side variable."}],"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"^="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"UInt8","kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V","text":"UInt8"},{"text":")","kind":"text"}],"type":"topic","kind":"symbol","title":"^=(_:_:)","url":"\/documentation\/compute\/uint8\/_=(_:_:)-23lmz"},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"type":"topic","title":"Equatable","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","role":"symbol","url":"\/documentation\/compute\/equatable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/7Swallow16SignedOrUnsignedP":{"title":"Swallow.SignedOrUnsigned","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16SignedOrUnsignedP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow31MutableMultiplicationOperatableP":{"title":"Swallow.MutableMultiplicationOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow31MutableMultiplicationOperatableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/ExpressibleByIntegerLiteral-Implementations":{"title":"ExpressibleByIntegerLiteral Implementations","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/ExpressibleByIntegerLiteral-Implementations","url":"\/documentation\/compute\/uint8\/expressiblebyintegerliteral-implementations","kind":"article","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/7Swallow13DataDecodableP":{"title":"Swallow.DataDecodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataDecodableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/signum()":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/signum()","abstract":[{"type":"text","text":"Returns "},{"type":"codeVoice","code":"-1"},{"text":" if this value is negative and ","type":"text"},{"code":"1","type":"codeVoice"},{"type":"text","text":" if it’s positive;"},{"text":" ","type":"text"},{"type":"text","text":"otherwise, "},{"type":"codeVoice","code":"0"},{"text":".","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"signum","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier","text":"UInt8"}],"kind":"symbol","role":"symbol","type":"topic","title":"signum()","url":"\/documentation\/compute\/uint8\/signum()"},"doc://com.swallow.documentation.Compute/7Swallow18ByteOrderSwappableP":{"title":"Swallow.ByteOrderSwappable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18ByteOrderSwappableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Sendable","kind":"identifier"}],"title":"Sendable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","abstract":[],"url":"\/documentation\/compute\/sendable","role":"symbol","navigatorTitle":[{"text":"Sendable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UInt8","kind":"identifier"}],"navigatorTitle":[{"text":"UInt8","kind":"identifier"}],"title":"UInt8","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8","url":"\/documentation\/compute\/uint8","kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"An 8-bit unsigned integer value"},{"text":" ","type":"text"},{"text":"type.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/leadingZeroBitCount":{"type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"leadingZeroBitCount"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"title":"leadingZeroBitCount","url":"\/documentation\/compute\/uint8\/leadingzerobitcount","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/leadingZeroBitCount","kind":"symbol","abstract":[{"text":"The number of leading zeros in this value’s binary representation.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/_=(_:_:)-12hmo":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/_=(_:_:)-12hmo","title":"%=(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"%="},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:s5UInt8V","text":"UInt8","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier","text":"UInt8"},{"text":")","kind":"text"}],"url":"\/documentation\/compute\/uint8\/_=(_:_:)-12hmo","abstract":[{"type":"text","text":"Divides the first value by the second and stores the remainder in the"},{"text":" ","type":"text"},{"text":"left-hand-side variable.","type":"text"}],"kind":"symbol","type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/Equatable-Implementations":{"abstract":[],"kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Equatable-Implementations","type":"topic","url":"\/documentation\/compute\/uint8\/equatable-implementations","title":"Equatable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/Decodable-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Decodable-Implementations","kind":"article","role":"collectionGroup","type":"topic","url":"\/documentation\/compute\/uint8\/decodable-implementations","abstract":[],"title":"Decodable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Encodable":{"url":"\/documentation\/compute\/encodable","navigatorTitle":[{"text":"Encodable","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Encodable","kind":"identifier"}],"abstract":[{"text":"A type that can encode itself to an external representation.","type":"text"}],"type":"topic","title":"Encodable","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/words-swift.property":{"url":"\/documentation\/compute\/uint8\/words-swift.property","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/words-swift.property","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"words"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"},{"kind":"text","text":"."},{"text":"Words","kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V5WordsV"}],"abstract":[{"type":"text","text":"A collection containing the words of this value’s binary"},{"type":"text","text":" "},{"type":"text","text":"representation, in order from the least significant to most significant."}],"title":"words","type":"topic","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow22SignedIntegerInitiableP":{"title":"Swallow.SignedIntegerInitiable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22SignedIntegerInitiableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/remainderReportingOverflow(dividingBy:)":{"title":"remainderReportingOverflow(dividingBy:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"remainderReportingOverflow","kind":"identifier"},{"kind":"text","text":"("},{"text":"dividingBy","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V","text":"UInt8"},{"text":") -> (partialValue","kind":"text"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s5UInt8V","text":"UInt8","kind":"typeIdentifier"},{"kind":"text","text":", overflow"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/remainderReportingOverflow(dividingBy:)","kind":"symbol","abstract":[{"type":"text","text":"Returns the remainder after dividing this value by the given value, along"},{"text":" ","type":"text"},{"text":"with a Boolean value indicating whether overflow occurred during division.","type":"text"}],"role":"symbol","url":"\/documentation\/compute\/uint8\/remainderreportingoverflow(dividingby:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/multipliedReportingOverflow(by:)":{"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"multipliedReportingOverflow","kind":"identifier"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt8","kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V"},{"kind":"text","text":") -> (partialValue"},{"kind":"text","text":": "},{"text":"UInt8","preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier"},{"text":", overflow","kind":"text"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"multipliedReportingOverflow(by:)","url":"\/documentation\/compute\/uint8\/multipliedreportingoverflow(by:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/multipliedReportingOverflow(by:)","kind":"symbol","abstract":[{"text":"Returns the product of this value and the given value, along with a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Boolean value indicating whether overflow occurred in the operation."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/byteSwapped":{"type":"topic","title":"byteSwapped","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"byteSwapped","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/byteSwapped","abstract":[{"type":"text","text":"A representation of this integer with the byte order swapped."}],"url":"\/documentation\/compute\/uint8\/byteswapped"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/&__=(_:_:)-172l7":{"title":"&>>=(_:_:)","abstract":[{"type":"text","text":"Calculates the result of shifting a value’s binary representation the"},{"type":"text","text":" "},{"type":"text","text":"specified number of digits to the right, masking the shift amount to the"},{"text":" ","type":"text"},{"type":"text","text":"type’s bit width, and stores the result in the left-hand-side variable."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/&__=(_:_:)-172l7","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"&>>=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier","text":"UInt8"},{"text":", ","kind":"text"},{"text":"UInt8","kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V"},{"text":")","kind":"text"}],"type":"topic","kind":"symbol","url":"\/documentation\/compute\/uint8\/&__=(_:_:)-172l7"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/Magnitude-swift.typealias":{"navigatorTitle":[{"kind":"identifier","text":"Magnitude"}],"abstract":[{"type":"text","text":"A type that can represent the absolute value of any possible value of"},{"type":"text","text":" "},{"type":"text","text":"this type."}],"type":"topic","title":"UInt8.Magnitude","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Magnitude"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Magnitude-swift.typealias","url":"\/documentation\/compute\/uint8\/magnitude-swift.typealias"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/_CustomPlaygroundQuickLookable-Implementations":{"type":"topic","title":"_CustomPlaygroundQuickLookable Implementations","url":"\/documentation\/compute\/uint8\/_customplaygroundquicklookable-implementations","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/_CustomPlaygroundQuickLookable-Implementations","kind":"article","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/Words-swift.struct":{"abstract":[{"type":"text","text":"A type that represents the words of this integer."}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Words","kind":"identifier"}],"url":"\/documentation\/compute\/uint8\/words-swift.struct","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Words-swift.struct","title":"UInt8.Words","role":"symbol","type":"topic","navigatorTitle":[{"text":"Words","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/Hashable-Implementations":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Hashable-Implementations","abstract":[],"role":"collectionGroup","title":"Hashable Implementations","kind":"article","url":"\/documentation\/compute\/uint8\/hashable-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/SIMDScalar-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/SIMDScalar-Implementations","title":"SIMDScalar Implementations","kind":"article","abstract":[],"role":"collectionGroup","type":"topic","url":"\/documentation\/compute\/uint8\/simdscalar-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/subtractingReportingOverflow(_:)":{"type":"topic","role":"symbol","url":"\/documentation\/compute\/uint8\/subtractingreportingoverflow(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"subtractingReportingOverflow","kind":"identifier"},{"kind":"text","text":"("},{"text":"UInt8","kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V"},{"text":") -> (partialValue","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V","text":"UInt8"},{"kind":"text","text":", overflow"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"subtractingReportingOverflow(_:)","abstract":[{"type":"text","text":"Returns the difference obtained by subtracting the given value from this"},{"text":" ","type":"text"},{"text":"value, along with a Boolean value indicating whether overflow occurred in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the operation."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/subtractingReportingOverflow(_:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/FixedWidthInteger-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/FixedWidthInteger-Implementations","title":"FixedWidthInteger Implementations","kind":"article","role":"collectionGroup","abstract":[],"url":"\/documentation\/compute\/uint8\/fixedwidthinteger-implementations","type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow28MutableSubtractionOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow28MutableSubtractionOperatableP","title":"Swallow.MutableSubtractionOperatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable":{"url":"\/documentation\/compute\/comparable","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared using the relational operators ","type":"text"},{"code":"<","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Comparable"}],"title":"Comparable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Comparable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/_=(_:_:)-7a5f0":{"role":"symbol","type":"topic","url":"\/documentation\/compute\/uint8\/_=(_:_:)-7a5f0","title":"\/=(_:_:)","abstract":[{"text":"Divides the first value by the second and stores the quotient in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"left-hand-side variable."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/_=(_:_:)-7a5f0","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"\/=","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UInt8","kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V","text":"UInt8"},{"text":")","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Numeric":{"abstract":[{"type":"text","text":"A type with values that support multiplication."}],"kind":"symbol","url":"\/documentation\/compute\/numeric","navigatorTitle":[{"text":"Numeric","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Numeric"}],"title":"Numeric"},"doc://com.swallow.documentation.Compute/7Swallow21BitPatternConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21BitPatternConvertibleP","title":"Swallow.BitPatternConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/Strideable":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/strideable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Strideable"}],"navigatorTitle":[{"text":"Strideable","kind":"identifier"}],"abstract":[{"type":"text","text":"A type representing continuous, one-dimensional values that can be offset"},{"type":"text","text":" "},{"type":"text","text":"and measured."}],"title":"Strideable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/CustomReflectable-Implementations":{"kind":"article","title":"CustomReflectable Implementations","type":"topic","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/CustomReflectable-Implementations","url":"\/documentation\/compute\/uint8\/customreflectable-implementations","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/7Swallow15NumberInitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow15NumberInitiableP","title":"Swallow.NumberInitiable"},"doc://com.swallow.documentation.Compute/7Swallow24MultiplicationOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow24MultiplicationOperatableP","title":"Swallow.MultiplicationOperatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/dividedReportingOverflow(by:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/dividedReportingOverflow(by:)","kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dividedReportingOverflow"},{"kind":"text","text":"("},{"text":"by","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier","text":"UInt8"},{"text":") -> (partialValue","kind":"text"},{"text":": ","kind":"text"},{"text":"UInt8","kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V"},{"text":", overflow","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":")"}],"title":"dividedReportingOverflow(by:)","abstract":[{"text":"Returns the quotient obtained by dividing this value by the given value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"along with a Boolean value indicating whether overflow occurred in the"},{"type":"text","text":" "},{"text":"operation.","type":"text"}],"role":"symbol","url":"\/documentation\/compute\/uint8\/dividedreportingoverflow(by:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/init(exactly:)-7wsjq":{"abstract":[{"text":"Creates an integer from the given floating-point value, if it can be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"represented exactly."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/init(exactly:)-7wsjq","title":"init(exactly:)","role":"symbol","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"?(","kind":"text"},{"kind":"externalParam","text":"exactly"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s7Float16V","kind":"typeIdentifier","text":"Float16"},{"kind":"text","text":")"}],"url":"\/documentation\/compute\/uint8\/init(exactly:)-7wsjq","kind":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow16BooleanInitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16BooleanInitiableP","title":"Swallow.BooleanInitiable"},"doc://com.swallow.documentation.Compute/7Swallow14CoderPrimitiveP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow14CoderPrimitiveP","title":"Swallow.CoderPrimitive"},"doc://com.swallow.documentation.Compute/7Swallow20DiscreteOrContinuousP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20DiscreteOrContinuousP","title":"Swallow.DiscreteOrContinuous"},"doc://com.swallow.documentation.Compute/7Swallow7TrivialP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP","title":"Swallow.Trivial"},"doc://com.swallow.documentation.Compute/7Swallow9InitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow9InitiableP","title":"Swallow.Initiable"},"doc://com.swallow.documentation.Compute/7Swallow17NumberConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow17NumberConvertibleP","title":"Swallow.NumberConvertible"}}}