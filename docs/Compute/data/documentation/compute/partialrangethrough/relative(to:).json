{"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/partialrangethrough\/relative(to:)"]}],"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"relative","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":") -> ","kind":"text"},{"text":"Range","kind":"typeIdentifier","preciseIdentifier":"s:Sn"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"text":">","kind":"text"}],"role":"symbol","extendedModule":"Swift","externalID":"s:s19PartialRangeThroughV8relative2toSnyxGqd___t5IndexQyd__RszSlRd__lF","symbolKind":"method","title":"relative(to:)","modules":[{"name":"Compute","relatedModules":["Swift"]}],"roleHeading":"Instance Method"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough\/relative(to:)"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough\/RangeExpression-Implementations"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"relative"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"to","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"collection"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":") -> ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","kind":"typeIdentifier","text":"Range","preciseIdentifier":"s:Sn"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":" == "},{"text":"C","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection\/Index","text":"Index","preciseIdentifier":"s:Sl5IndexQa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":" : "},{"text":"Collection","kind":"typeIdentifier","preciseIdentifier":"s:Sl","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"name":"collection","content":[{"inlineContent":[{"text":"The collection to evaluate this range expression","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in relation to."}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"text":"Return Value","type":"heading","anchor":"return-value"},{"inlineContent":[{"type":"text","text":"A range suitable for slicing "},{"type":"codeVoice","code":"collection"},{"text":". The returned range","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"text":" guaranteed to be inside the bounds of ","type":"text"},{"type":"codeVoice","code":"collection"},{"type":"text","text":". Callers"},{"text":" ","type":"text"},{"type":"text","text":"should apply the same preconditions to the return value as they would"},{"type":"text","text":" "},{"text":"to a range provided directly by the user.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"text":"You can use the ","type":"text"},{"type":"codeVoice","code":"relative(to:)"},{"type":"text","text":" method to convert a range expression,"},{"type":"text","text":" "},{"type":"text","text":"which could be missing one or both of its endpoints, into a concrete"},{"text":" ","type":"text"},{"type":"text","text":"range that is bounded on both sides. The following example uses this"},{"text":" ","type":"text"},{"type":"text","text":"method to convert a partial range up to "},{"type":"codeVoice","code":"4"},{"type":"text","text":" into a half-open range,"},{"text":" ","type":"text"},{"text":"using an array instance to add the range’s lower bound.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","let upToFour = ..<4","","let r1 = upToFour.relative(to: numbers)","\/\/ r1 == 0..<4"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"r1","type":"codeVoice"},{"type":"text","text":" range is bounded on the lower end by "},{"code":"0","type":"codeVoice"},{"type":"text","text":" because that is the"},{"text":" ","type":"text"},{"type":"text","text":"starting index of the "},{"type":"codeVoice","code":"numbers"},{"text":" array. When the collection passed to","type":"text"},{"type":"text","text":" "},{"code":"relative(to:)","type":"codeVoice"},{"text":" starts with a different index, that index is used as the","type":"text"},{"type":"text","text":" "},{"text":"lower bound instead. The next example creates a slice of ","type":"text"},{"code":"numbers","type":"codeVoice"},{"text":" ","type":"text"},{"text":"starting at index ","type":"text"},{"type":"codeVoice","code":"2"},{"text":", and then uses the slice with ","type":"text"},{"type":"codeVoice","code":"relative(to:)"},{"type":"text","text":" to"},{"type":"text","text":" "},{"text":"convert ","type":"text"},{"code":"upToFour","type":"codeVoice"},{"type":"text","text":" to a concrete range."}]},{"type":"codeListing","syntax":null,"code":["let numbersSuffix = numbers[2...]","\/\/ numbersSuffix == [30, 40, 50, 60, 70]","","let r2 = upToFour.relative(to: numbersSuffix)","\/\/ r2 == 2..<4"]},{"inlineContent":[{"type":"text","text":"Use this method only if you need the concrete range it produces. To"},{"text":" ","type":"text"},{"text":"access a slice of a collection using a range expression, use the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"collection’s generic subscript that uses a range expression as its"},{"text":" ","type":"text"},{"text":"parameter.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let numbersPrefix = numbers[upToFour]","\/\/ numbersPrefix == [10, 20, 30, 40]"]}]}],"abstract":[{"text":"Returns the range of indices described by this range expression within","type":"text"},{"type":"text","text":" "},{"text":"the given collection.","type":"text"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Collection":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Collection"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","url":"\/documentation\/compute\/collection","abstract":[{"type":"text","text":"A sequence whose elements can be traversed multiple times,"},{"text":" ","type":"text"},{"text":"nondestructively, and accessed by an indexed subscript.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Collection"}],"title":"Collection"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeThrough/RangeExpression-Implementations":{"role":"collectionGroup","kind":"article","title":"RangeExpression Implementations","url":"\/documentation\/compute\/partialrangethrough\/rangeexpression-implementations","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough\/RangeExpression-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection/Index":{"url":"\/documentation\/compute\/collection\/index","required":true,"role":"symbol","title":"Index","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Index","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"Comparable","preciseIdentifier":"s:SL","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"A type that represents a position in the collection."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection\/Index","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeThrough":{"title":"PartialRangeThrough","type":"topic","abstract":[{"type":"text","text":"A partial interval up to, and including, an upper bound."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PartialRangeThrough"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PartialRangeThrough"}],"kind":"symbol","url":"\/documentation\/compute\/partialrangethrough"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeThrough/relative(to:)":{"title":"relative(to:)","abstract":[{"text":"Returns the range of indices described by this range expression within","type":"text"},{"text":" ","type":"text"},{"text":"the given collection.","type":"text"}],"role":"symbol","kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"relative"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":") -> ","kind":"text"},{"text":"Range","kind":"typeIdentifier","preciseIdentifier":"s:Sn"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough\/relative(to:)","type":"topic","url":"\/documentation\/compute\/partialrangethrough\/relative(to:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Range":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Range","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","url":"\/documentation\/compute\/range","abstract":[{"text":"A half-open interval from a lower bound up to, but not including, an upper","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"bound."}],"navigatorTitle":[{"text":"Range","kind":"identifier"}],"title":"Range"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}