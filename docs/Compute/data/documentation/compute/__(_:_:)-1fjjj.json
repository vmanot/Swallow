{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/__(_:_:)-1fjjj"]}],"sections":[],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/__(_:_:)-1fjjj","interfaceLanguage":"swift"},"metadata":{"symbolKind":"op","title":"??(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"??","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"consuming","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?, "},{"text":"@autoclosure ","kind":"attribute"},{"text":"() ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"text":"?) ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":"?","kind":"text"}],"externalID":"s:s2qqoiyxSgABn_AByKXKtKRi_zlF","modules":[{"name":"Compute"}],"role":"symbol","roleHeading":"Operator"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"text":"Performs a nil-coalescing operation, returning the wrapped value of an","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Optional"},{"text":" instance or a default ","type":"text"},{"code":"Optional","type":"codeVoice"},{"text":" value.","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"??","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"internalParam","text":"optional"},{"kind":"text","text":": "},{"kind":"keyword","text":"consuming"},{"kind":"text","text":" "},{"text":"T","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"internalParam","text":"defaultValue"},{"text":": ","kind":"text"},{"text":"@autoclosure ","kind":"attribute"},{"text":"() ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?) "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":"? ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":" : ~Copyable","kind":"text"}]}],"kind":"declarations"},{"parameters":[{"name":"optional","content":[{"type":"paragraph","inlineContent":[{"text":"An optional value.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"A value to use as a default. ","type":"text"},{"code":"defaultValue","type":"codeVoice"},{"text":" and","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"optional"},{"type":"text","text":" have the same type."}],"type":"paragraph"}],"name":"defaultValue"}],"kind":"parameters"},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"A nil-coalescing operation unwraps the left-hand side if it has a value, or"},{"text":" ","type":"text"},{"text":"returns the right-hand side as a default. The result of this operation","type":"text"},{"type":"text","text":" "},{"text":"will be the same type as its arguments.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This operator uses short-circuit evaluation: "},{"type":"codeVoice","code":"optional"},{"text":" is checked first,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"code":"defaultValue","type":"codeVoice"},{"type":"text","text":" is evaluated only if "},{"code":"optional","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":". For example:","type":"text"}],"type":"paragraph"},{"code":["let goodNumber = Int(\"100\") ?? Int(\"42\")","print(goodNumber)","\/\/ Prints \"Optional(100)\"","","let notSoGoodNumber = Int(\"invalid-input\") ?? Int(\"42\")","print(notSoGoodNumber)","\/\/ Prints \"Optional(42)\""],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, "},{"type":"codeVoice","code":"goodNumber"},{"text":" is assigned a value of ","type":"text"},{"code":"100","type":"codeVoice"},{"text":" because","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Int(\"100\")"},{"type":"text","text":" succeeds in returning a non-"},{"code":"nil","type":"codeVoice"},{"text":" result. When","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"notSoGoodNumber"},{"text":" is initialized, ","type":"text"},{"type":"codeVoice","code":"Int(\"invalid-input\")"},{"type":"text","text":" fails and returns"},{"text":" ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":", and so "},{"type":"codeVoice","code":"Int(\"42\")"},{"type":"text","text":" is called to supply a default value."}]},{"inlineContent":[{"type":"text","text":"Because the result of this nil-coalescing operation is itself an optional"},{"type":"text","text":" "},{"type":"text","text":"value, you can chain default values by using "},{"type":"codeVoice","code":"??"},{"type":"text","text":" multiple times. The"},{"type":"text","text":" "},{"type":"text","text":"first optional value that isnâ€™t "},{"type":"codeVoice","code":"nil"},{"text":" stops the chain and becomes the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"result of the whole expression. The next example tries to find the correct"},{"type":"text","text":" "},{"type":"text","text":"text for a greeting in two separate dictionaries before falling back to a"},{"text":" ","type":"text"},{"text":"static default.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let greeting = userPrefs[greetingKey] ??","    defaults[greetingKey] ?? \"Greetings!\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"code":"userPrefs[greetingKey]","type":"codeVoice"},{"text":" has a value, that value is assigned to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"greeting"},{"type":"text","text":". If not, any value in "},{"code":"defaults[greetingKey]","type":"codeVoice"},{"text":" will succeed, and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"if not that, "},{"type":"codeVoice","code":"greeting"},{"type":"text","text":" will be set to the non-optional default value,"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\"Greetings!\""},{"type":"text","text":"."}]}]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/__(_:_:)-1fjjj":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/__(_:_:)-1fjjj","role":"symbol","url":"\/documentation\/compute\/__(_:_:)-1fjjj","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"??","kind":"identifier"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"consuming","kind":"keyword"},{"kind":"text","text":" "},{"text":"T","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"@autoclosure ","kind":"attribute"},{"kind":"text","text":"() "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?) ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"abstract":[{"text":"Performs a nil-coalescing operation, returning the wrapped value of an","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Optional"},{"type":"text","text":" instance or a default "},{"type":"codeVoice","code":"Optional"},{"type":"text","text":" value."}],"title":"??(_:_:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}