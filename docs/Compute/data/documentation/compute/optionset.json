{"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"externalID":"s:s9OptionSetP","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"OptionSet"}],"modules":[{"name":"Compute"}],"role":"symbol","title":"OptionSet","symbolKind":"protocol","navigatorTitle":[{"kind":"identifier","text":"OptionSet"}],"roleHeading":"Protocol"},"relationshipsSections":[{"kind":"relationships","type":"inheritsFrom","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByArrayLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RawRepresentable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SetAlgebra"],"title":"Inherits From"}],"sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"OptionSet","kind":"identifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RawRepresentable","text":"RawRepresentable","preciseIdentifier":"s:SY"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"SetAlgebra","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SetAlgebra","preciseIdentifier":"s:s10SetAlgebraP"}]}],"kind":"declarations"},{"content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"You use the "},{"code":"OptionSet","type":"codeVoice"},{"text":" protocol to represent bitset types, where","type":"text"},{"text":" ","type":"text"},{"text":"individual bits represent members of a set. Adopting this protocol in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"your custom types lets you perform set-related operations such as"},{"text":" ","type":"text"},{"type":"text","text":"membership tests, unions, and intersections on those types. What’s more,"},{"type":"text","text":" "},{"text":"when implemented using specific criteria, adoption of this protocol","type":"text"},{"type":"text","text":" "},{"type":"text","text":"requires no extra work on your part."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When creating an option set, include a "},{"type":"codeVoice","code":"rawValue"},{"type":"text","text":" property in your type"},{"type":"text","text":" "},{"type":"text","text":"declaration. For your type to automatically receive default implementations"},{"type":"text","text":" "},{"type":"text","text":"for set-related operations, the "},{"type":"codeVoice","code":"rawValue"},{"text":" property must be of a type that","type":"text"},{"type":"text","text":" "},{"text":"conforms to the ","type":"text"},{"code":"FixedWidthInteger","type":"codeVoice"},{"type":"text","text":" protocol, such as "},{"type":"codeVoice","code":"Int"},{"text":" or ","type":"text"},{"code":"UInt8","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Next, create unique options as static properties of your custom type using","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"unique powers of two (1, 2, 4, 8, 16, and so forth) for each individual"},{"text":" ","type":"text"},{"type":"text","text":"property’s raw value so that each property can be represented by a single"},{"text":" ","type":"text"},{"type":"text","text":"bit of the type’s raw value."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, consider a custom type called "},{"code":"ShippingOptions","type":"codeVoice"},{"type":"text","text":" that is an"},{"type":"text","text":" "},{"text":"option set of the possible ways to ship a customer’s purchase.","type":"text"},{"type":"text","text":" "},{"code":"ShippingOptions","type":"codeVoice"},{"type":"text","text":" includes a "},{"type":"codeVoice","code":"rawValue"},{"type":"text","text":" property of type "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" that stores"},{"text":" ","type":"text"},{"type":"text","text":"the bit mask of available shipping options. The static members "},{"type":"codeVoice","code":"nextDay"},{"type":"text","text":","},{"type":"text","text":" "},{"code":"secondDay","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"priority"},{"type":"text","text":", and "},{"type":"codeVoice","code":"standard"},{"type":"text","text":" are unique, individual options."}],"type":"paragraph"},{"syntax":null,"code":["struct ShippingOptions: OptionSet {","    let rawValue: Int","","    static let nextDay    = ShippingOptions(rawValue: 1 << 0)","    static let secondDay  = ShippingOptions(rawValue: 1 << 1)","    static let priority   = ShippingOptions(rawValue: 1 << 2)","    static let standard   = ShippingOptions(rawValue: 1 << 3)","","    static let express: ShippingOptions = [.nextDay, .secondDay]","    static let all: ShippingOptions = [.express, .priority, .standard]","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Declare additional preconfigured option set values as static properties"},{"type":"text","text":" "},{"text":"initialized with an array literal containing other option values. In the","type":"text"},{"type":"text","text":" "},{"text":"example, because the ","type":"text"},{"code":"express","type":"codeVoice"},{"type":"text","text":" static property is assigned an array"},{"type":"text","text":" "},{"text":"literal with the ","type":"text"},{"type":"codeVoice","code":"nextDay"},{"type":"text","text":" and "},{"type":"codeVoice","code":"secondDay"},{"text":" options, it will contain those","type":"text"},{"type":"text","text":" "},{"type":"text","text":"two elements."}],"type":"paragraph"},{"anchor":"Using-an-Option-Set-Type","level":1,"type":"heading","text":"Using an Option Set Type"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you need to create an instance of an option set, assign one of the"},{"text":" ","type":"text"},{"type":"text","text":"type’s static members to your variable or constant. Alternatively, to"},{"type":"text","text":" "},{"type":"text","text":"create an option set instance with multiple members, assign an array"},{"type":"text","text":" "},{"type":"text","text":"literal with multiple static members of the option set. To create an empty"},{"type":"text","text":" "},{"text":"instance, assign an empty array literal to your variable.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let singleOption: ShippingOptions = .priority","let multipleOptions: ShippingOptions = [.nextDay, .secondDay, .priority]","let noOptions: ShippingOptions = []"]},{"inlineContent":[{"type":"text","text":"Use set-related operations to check for membership and to add or remove"},{"type":"text","text":" "},{"text":"members from an instance of your custom option set type. The following","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"example shows how you can determine free shipping options based on a"},{"type":"text","text":" "},{"type":"text","text":"customer’s purchase price:"}],"type":"paragraph"},{"syntax":null,"code":["let purchasePrice = 87.55","","var freeOptions: ShippingOptions = []","if purchasePrice > 50 {","    freeOptions.insert(.priority)","}","","if freeOptions.contains(.priority) {","    print(\"You've earned free priority shipping!\")","} else {","    print(\"Add more to your cart for free priority shipping!\")","}","\/\/ Prints \"You've earned free priority shipping!\""],"type":"codeListing"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/optionset"]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/OptionSet","interfaceLanguage":"swift"},"topicSections":[{"title":"Associated Types","generated":true,"anchor":"Associated-Types","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/OptionSet\/Element"]},{"title":"Initializers","generated":true,"anchor":"Initializers","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/OptionSet\/init(rawValue:)"]}],"abstract":[{"type":"text","text":"A type that presents a mathematical set interface to a bit set."}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByArrayLiteral":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ExpressibleByArrayLiteral","kind":"identifier"}],"title":"ExpressibleByArrayLiteral","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByArrayLiteral","abstract":[{"type":"text","text":"A type that can be initialized using an array literal."}],"url":"\/documentation\/compute\/expressiblebyarrayliteral","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ExpressibleByArrayLiteral"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/OptionSet/init(rawValue:)":{"required":true,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/OptionSet\/init(rawValue:)","type":"topic","title":"init(rawValue:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"rawValue"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"RawValue","kind":"typeIdentifier","preciseIdentifier":"s:SY8RawValueQa"},{"text":")","kind":"text"}],"url":"\/documentation\/compute\/optionset\/init(rawvalue:)","role":"symbol","kind":"symbol","abstract":[{"text":"Creates a new option set from the given raw value.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/RawRepresentable":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RawRepresentable"}],"abstract":[{"type":"text","text":"A type that can be converted to and from an associated raw value."}],"type":"topic","title":"RawRepresentable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"RawRepresentable"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RawRepresentable","url":"\/documentation\/compute\/rawrepresentable"},"doc://com.swallow.documentation.Compute/documentation/Compute/OptionSet":{"role":"symbol","url":"\/documentation\/compute\/optionset","type":"topic","abstract":[{"type":"text","text":"A type that presents a mathematical set interface to a bit set."}],"kind":"symbol","title":"OptionSet","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"OptionSet","kind":"identifier"}],"navigatorTitle":[{"text":"OptionSet","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/OptionSet"},"doc://com.swallow.documentation.Compute/documentation/Compute/OptionSet/Element":{"role":"symbol","kind":"symbol","type":"topic","required":true,"title":"Element","abstract":[{"type":"text","text":"The element type of the option set."}],"fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Element"},{"kind":"text","text":" = "},{"kind":"typeIdentifier","text":"Self"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/OptionSet\/Element","url":"\/documentation\/compute\/optionset\/element"},"doc://com.swallow.documentation.Compute/documentation/Compute/SetAlgebra":{"role":"symbol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SetAlgebra","kind":"identifier"}],"title":"SetAlgebra","url":"\/documentation\/compute\/setalgebra","abstract":[{"text":"A type that provides mathematical set operations.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"SetAlgebra","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SetAlgebra"},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"type":"topic","title":"Equatable","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","role":"symbol","url":"\/documentation\/compute\/equatable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}]}}}