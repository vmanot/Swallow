{"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"enumerated"},{"text":"() -> ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EnumeratedSequence","kind":"typeIdentifier","preciseIdentifier":"s:s18EnumeratedSequenceV","text":"EnumeratedSequence"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A sequence of pairs enumerating the sequence."}]}]},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"This example enumerates the characters of the string “Swift” and prints","type":"text"},{"type":"text","text":" "},{"text":"each character along with its place in the string.","type":"text"}]},{"code":["for (n, c) in \"Swift\".enumerated() {","    print(\"\\(n): '\\(c)'\")","}","\/\/ Prints \"0: 'S'\"","\/\/ Prints \"1: 'w'\"","\/\/ Prints \"2: 'i'\"","\/\/ Prints \"3: 'f'\"","\/\/ Prints \"4: 't'\""],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"When you enumerate a collection, the integer part of each pair is a counter"},{"text":" ","type":"text"},{"text":"for the enumeration, but is not necessarily the index of the paired value.","type":"text"},{"text":" ","type":"text"},{"text":"These counters can be used as indices only in instances of zero-based,","type":"text"},{"text":" ","type":"text"},{"text":"integer-indexed collections, such as ","type":"text"},{"code":"Array","type":"codeVoice"},{"type":"text","text":" and "},{"code":"ContiguousArray","type":"codeVoice"},{"type":"text","text":". For"},{"text":" ","type":"text"},{"type":"text","text":"other collections the counters may be out of range or of the wrong type"},{"type":"text","text":" "},{"text":"to use as an index. To iterate over the elements of a collection with its","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"indices, use the "},{"type":"codeVoice","code":"zip(_:_:)"},{"text":" function.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This example iterates over the indices and elements of a set, building a","type":"text"},{"text":" ","type":"text"},{"text":"list consisting of indices of names with five or fewer letters.","type":"text"}]},{"syntax":null,"code":["let names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]","var shorterIndices: [Set<String>.Index] = []","for (i, name) in zip(names.indices, names) {","    if name.count <= 5 {","        shorterIndices.append(i)","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Now that the ","type":"text"},{"type":"codeVoice","code":"shorterIndices"},{"text":" array holds the indices of the shorter","type":"text"},{"type":"text","text":" "},{"type":"text","text":"names in the "},{"code":"names","type":"codeVoice"},{"text":" set, you can use those indices to access elements in","type":"text"},{"type":"text","text":" "},{"text":"the set.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["for i in shorterIndices {","    print(names[i])","}","\/\/ Prints \"Sofia\"","\/\/ Prints \"Mateo\""]},{"type":"aside","style":"note","name":"Complexity","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O(1)"}]}]}]}],"variants":[{"paths":["\/documentation\/compute\/anyrandomaccesscollection\/enumerated()"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyRandomAccessCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyRandomAccessCollection\/Sequence-Implementations"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"extendedModule":"Swift","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"enumerated"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s18EnumeratedSequenceV","text":"EnumeratedSequence"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","roleHeading":"Instance Method","modules":[{"name":"Compute","relatedModules":["Swift"]}],"title":"enumerated()","externalID":"s:STsE10enumerateds18EnumeratedSequenceVyxGyF::SYNTHESIZED::s:s25AnyRandomAccessCollectionV"},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyRandomAccessCollection\/enumerated()","interfaceLanguage":"swift"},"sections":[],"abstract":[{"text":"Returns a sequence of pairs (","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"type":"text","text":", "},{"inlineContent":[{"type":"text","text":"x"}],"type":"emphasis"},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":" represents a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"consecutive integer starting at zero and "},{"inlineContent":[{"type":"text","text":"x"}],"type":"emphasis"},{"text":" represents an element of","type":"text"},{"type":"text","text":" "},{"text":"the sequence.","type":"text"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/AnyRandomAccessCollection":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyRandomAccessCollection","title":"AnyRandomAccessCollection","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyRandomAccessCollection"}],"kind":"symbol","url":"\/documentation\/compute\/anyrandomaccesscollection","abstract":[{"type":"text","text":"A type-erased wrapper over any collection with indices that"},{"type":"text","text":" "},{"text":"support random access traversal.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyRandomAccessCollection"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/EnumeratedSequence":{"url":"\/documentation\/compute\/enumeratedsequence","navigatorTitle":[{"text":"EnumeratedSequence","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EnumeratedSequence"}],"abstract":[{"text":"An enumeration of the elements of a sequence or collection.","type":"text"}],"type":"topic","title":"EnumeratedSequence","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EnumeratedSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyRandomAccessCollection/enumerated()":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"enumerated"},{"text":"() -> ","kind":"text"},{"text":"EnumeratedSequence","kind":"typeIdentifier","preciseIdentifier":"s:s18EnumeratedSequenceV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyRandomAccessCollection\/enumerated()","abstract":[{"text":"Returns a sequence of pairs (","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":", "},{"inlineContent":[{"text":"x","type":"text"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":" represents a","type":"text"},{"type":"text","text":" "},{"text":"consecutive integer starting at zero and ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"type":"text","text":" represents an element of"},{"text":" ","type":"text"},{"type":"text","text":"the sequence."}],"title":"enumerated()","role":"symbol","url":"\/documentation\/compute\/anyrandomaccesscollection\/enumerated()"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyRandomAccessCollection/Sequence-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyRandomAccessCollection\/Sequence-Implementations","title":"Sequence Implementations","role":"collectionGroup","kind":"article","url":"\/documentation\/compute\/anyrandomaccesscollection\/sequence-implementations","abstract":[],"type":"topic"}}}