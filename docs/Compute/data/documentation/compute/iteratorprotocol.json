{"metadata":{"modules":[{"name":"Compute"}],"externalID":"s:St","title":"IteratorProtocol","roleHeading":"Protocol","symbolKind":"protocol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IteratorProtocol"}],"navigatorTitle":[{"kind":"identifier","text":"IteratorProtocol"}]},"kind":"symbol","abstract":[{"text":"A type that supplies the values of a sequence one at a time.","type":"text"}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol"},"schemaVersion":{"major":0,"minor":3,"patch":0},"topicSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol\/Element"],"title":"Associated Types","anchor":"Associated-Types","generated":true},{"anchor":"Instance-Methods","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol\/next()"],"title":"Instance Methods"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"IteratorProtocol","kind":"identifier"},{"kind":"text","text":"<"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol\/Element","text":"Element","preciseIdentifier":"s:St7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":">"}]}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"IteratorProtocol","type":"codeVoice"},{"text":" protocol is tightly linked with the ","type":"text"},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":" "},{"type":"text","text":"protocol. Sequences provide access to their elements by creating an"},{"type":"text","text":" "},{"text":"iterator, which keeps track of its iteration process and returns one","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"element at a time as it advances through the sequence."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Whenever you use a "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop with an array, set, or any other"},{"text":" ","type":"text"},{"text":"collection or sequence, you’re using that type’s iterator. Swift uses a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sequence’s or collection’s iterator internally to enable the "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" "},{"type":"text","text":"loop language construct."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using a sequence’s iterator directly gives you access to the same elements"},{"type":"text","text":" "},{"type":"text","text":"in the same order as iterating over that sequence using a "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"text":" loop.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example, you might typically use a "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"text":" loop to print each of","type":"text"},{"type":"text","text":" "},{"text":"the elements in an array.","type":"text"}]},{"syntax":null,"type":"codeListing","code":["let animals = [\"Antelope\", \"Butterfly\", \"Camel\", \"Dolphin\"]","for animal in animals {","    print(animal)","}","\/\/ Prints \"Antelope\"","\/\/ Prints \"Butterfly\"","\/\/ Prints \"Camel\"","\/\/ Prints \"Dolphin\""]},{"inlineContent":[{"text":"Behind the scenes, Swift uses the ","type":"text"},{"type":"codeVoice","code":"animals"},{"text":" array’s iterator to loop over","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the contents of the array."}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["var animalIterator = animals.makeIterator()","while let animal = animalIterator.next() {","    print(animal)","}","\/\/ Prints \"Antelope\"","\/\/ Prints \"Butterfly\"","\/\/ Prints \"Camel\"","\/\/ Prints \"Dolphin\""]},{"inlineContent":[{"type":"text","text":"The call to "},{"type":"codeVoice","code":"animals.makeIterator()"},{"type":"text","text":" returns an instance of the array’s"},{"text":" ","type":"text"},{"type":"text","text":"iterator. Next, the "},{"code":"while","type":"codeVoice"},{"type":"text","text":" loop calls the iterator’s "},{"type":"codeVoice","code":"next()"},{"type":"text","text":" method"},{"text":" ","type":"text"},{"text":"repeatedly, binding each element that is returned to ","type":"text"},{"code":"animal","type":"codeVoice"},{"type":"text","text":" and exiting"},{"type":"text","text":" "},{"text":"when the ","type":"text"},{"code":"next()","type":"codeVoice"},{"type":"text","text":" method returns "},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","level":1,"anchor":"Using-Iterators-Directly","text":"Using Iterators Directly"},{"type":"paragraph","inlineContent":[{"text":"You rarely need to use iterators directly, because a ","type":"text"},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop is the"},{"type":"text","text":" "},{"type":"text","text":"more idiomatic approach to traversing a sequence in Swift. Some"},{"type":"text","text":" "},{"type":"text","text":"algorithms, however, may call for direct iterator use."}]},{"type":"paragraph","inlineContent":[{"text":"One example is the ","type":"text"},{"type":"codeVoice","code":"reduce1(_:)"},{"type":"text","text":" method. Similar to the "},{"code":"reduce(_:_:)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"method defined in the standard library, which takes an initial value and a"},{"text":" ","type":"text"},{"type":"text","text":"combining closure, "},{"code":"reduce1(_:)","type":"codeVoice"},{"type":"text","text":" uses the first element of the sequence as"},{"type":"text","text":" "},{"type":"text","text":"the initial value."}]},{"inlineContent":[{"text":"Here’s an implementation of the ","type":"text"},{"type":"codeVoice","code":"reduce1(_:)"},{"type":"text","text":" method. The sequence’s"},{"type":"text","text":" "},{"text":"iterator is used directly to retrieve the initial value before looping","type":"text"},{"type":"text","text":" "},{"type":"text","text":"over the rest of the sequence."}],"type":"paragraph"},{"syntax":null,"code":["extension Sequence {","    func reduce1(","        _ nextPartialResult: (Element, Element) -> Element","    ) -> Element?","    {","        var i = makeIterator()","        guard var accumulated = i.next() else {","            return nil","        }","","        while let element = i.next() {","            accumulated = nextPartialResult(accumulated, element)","        }","        return accumulated","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"reduce1(_:)"},{"text":" method makes certain kinds of sequence operations","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"simpler. Here’s how to find the longest string in a sequence, using the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"animals"},{"type":"text","text":" array introduced earlier as an example:"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let longestAnimal = animals.reduce1 { current, element in","    if current.count > element.count {","        return current","    } else {","        return element","    }","}","print(longestAnimal)","\/\/ Prints Optional(\"Butterfly\")"]},{"type":"heading","level":1,"anchor":"Using-Multiple-Iterators","text":"Using Multiple Iterators"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Whenever you use multiple iterators (or "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"text":" loops) over a single","type":"text"},{"type":"text","text":" "},{"text":"sequence, be sure you know that the specific sequence supports repeated","type":"text"},{"type":"text","text":" "},{"text":"iteration, either because you know its concrete type or because the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sequence is also constrained to the "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"text":"Obtain each separate iterator from separate calls to the sequence’s","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"makeIterator()"},{"text":" method rather than by copying. Copying an iterator is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"safe, but advancing one copy of an iterator by calling its "},{"type":"codeVoice","code":"next()"},{"text":" method","type":"text"},{"type":"text","text":" "},{"text":"may invalidate other copies of that iterator. ","type":"text"},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"type":"codeVoice","code":"in"},{"text":" loops are safe in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"this regard."}]},{"text":"Adding IteratorProtocol Conformance to Your Type","anchor":"Adding-IteratorProtocol-Conformance-to-Your-Type","level":1,"type":"heading"},{"inlineContent":[{"type":"text","text":"Implementing an iterator that conforms to "},{"type":"codeVoice","code":"IteratorProtocol"},{"type":"text","text":" is simple."},{"text":" ","type":"text"},{"text":"Declare a ","type":"text"},{"type":"codeVoice","code":"next()"},{"type":"text","text":" method that advances one step in the related sequence"},{"type":"text","text":" "},{"text":"and returns the current element. When the sequence has been exhausted, the","type":"text"},{"text":" ","type":"text"},{"code":"next()","type":"codeVoice"},{"text":" method returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, consider a custom "},{"type":"codeVoice","code":"Countdown"},{"type":"text","text":" sequence. You can initialize the"},{"type":"text","text":" "},{"code":"Countdown","type":"codeVoice"},{"type":"text","text":" sequence with a starting integer and then iterate over the"},{"type":"text","text":" "},{"text":"count down to zero. The ","type":"text"},{"code":"Countdown","type":"codeVoice"},{"type":"text","text":" structure’s definition is short: It"},{"text":" ","type":"text"},{"type":"text","text":"contains only the starting count and the "},{"type":"codeVoice","code":"makeIterator()"},{"type":"text","text":" method required"},{"text":" ","type":"text"},{"text":"by the ","type":"text"},{"type":"codeVoice","code":"Sequence"},{"text":" protocol.","type":"text"}]},{"code":["struct Countdown: Sequence {","    let start: Int","","    func makeIterator() -> CountdownIterator {","        return CountdownIterator(self)","    }","}"],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"The "},{"code":"makeIterator()","type":"codeVoice"},{"text":" method returns another custom type, an iterator named","type":"text"},{"type":"text","text":" "},{"code":"CountdownIterator","type":"codeVoice"},{"text":". The ","type":"text"},{"type":"codeVoice","code":"CountdownIterator"},{"type":"text","text":" type keeps track of both the"},{"type":"text","text":" "},{"code":"Countdown","type":"codeVoice"},{"type":"text","text":" sequence that it’s iterating and the number of times it has"},{"type":"text","text":" "},{"type":"text","text":"returned a value."}],"type":"paragraph"},{"code":["struct CountdownIterator: IteratorProtocol {","    let countdown: Countdown","    var times = 0","","    init(_ countdown: Countdown) {","        self.countdown = countdown","    }","","    mutating func next() -> Int? {","        let nextNumber = countdown.start - times","        guard nextNumber > 0","            else { return nil }","","        times += 1","        return nextNumber","    }","}"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each time the "},{"code":"next()","type":"codeVoice"},{"text":" method is called on a ","type":"text"},{"type":"codeVoice","code":"CountdownIterator"},{"text":" instance,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it calculates the new next value, checks to see whether it has reached"},{"text":" ","type":"text"},{"type":"text","text":"zero, and then returns either the number, or "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" if the iterator is"},{"text":" ","type":"text"},{"type":"text","text":"finished returning elements of the sequence."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Creating and iterating over a "},{"code":"Countdown","type":"codeVoice"},{"type":"text","text":" sequence uses a"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CountdownIterator"},{"text":" to handle the iteration.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let threeTwoOne = Countdown(start: 3)","for count in threeTwoOne {","    print(\"\\(count)...\")","}","\/\/ Prints \"3...\"","\/\/ Prints \"2...\"","\/\/ Prints \"1...\""]}]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"relationshipsSections":[{"kind":"relationships","type":"conformingTypes","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionOfOne\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary\/Keys-swift.struct\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary\/Values-swift.struct\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DropWhileSequence\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EmptyCollection\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EnumeratedSequence\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IndexingIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/JoinedSequence\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyDropWhileSequence\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapSequence\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LevelOrderIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LinkedList","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LinkedList\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PrefixSequence\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PriorityQueue","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveTreeIterators\/DepthFirstIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReversedCollection\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideThroughIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideToIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/UTF16View\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/UnicodeScalarView\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnfoldSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawBufferPointer\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Zip2Sequence\/Iterator"],"title":"Conforming Types"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/iteratorprotocol"]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Dictionary/Keys-swift.struct/Iterator":{"abstract":[{"type":"text","text":"A type that provides the collection’s iteration interface and"},{"type":"text","text":" "},{"text":"encapsulates its iteration state.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Iterator","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary\/Keys-swift.struct\/Iterator","title":"Dictionary.Keys.Iterator","url":"\/documentation\/compute\/dictionary\/keys-swift.struct\/iterator","kind":"symbol","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Key","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"navigatorTitle":[{"text":"Iterator","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LinkedList":{"url":"\/documentation\/compute\/linkedlist","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"LinkedList","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]},"abstract":[],"kind":"symbol","navigatorTitle":[{"text":"LinkedList","kind":"identifier"}],"title":"LinkedList","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LinkedList","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/StrideThroughIterator":{"url":"\/documentation\/compute\/stridethroughiterator","navigatorTitle":[{"kind":"identifier","text":"StrideThroughIterator"}],"abstract":[{"type":"text","text":"An iterator for a "},{"code":"StrideThrough","type":"codeVoice"},{"type":"text","text":" instance."}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StrideThroughIterator"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideThroughIterator","kind":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Strideable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","title":"StrideThroughIterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer":{"abstract":[{"type":"text","text":"A pointer for accessing and manipulating data of a"},{"text":" ","type":"text"},{"type":"text","text":"specific type."}],"url":"\/documentation\/compute\/unsafemutablepointer","conformance":{"constraints":[{"type":"codeVoice","code":"Pointee"},{"type":"text","text":" is "},{"type":"codeVoice","code":"__sFILE"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"navigatorTitle":[{"kind":"identifier","text":"UnsafeMutablePointer"}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeMutablePointer","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer","title":"UnsafeMutablePointer","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeFrom/Iterator":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Iterator"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom\/Iterator","url":"\/documentation\/compute\/partialrangefrom\/iterator","navigatorTitle":[{"text":"Iterator","kind":"identifier"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Strideable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Bound.Stride"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"SignedInteger"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"abstract":[{"type":"text","text":"The iterator for a "},{"type":"codeVoice","code":"PartialRangeFrom"},{"text":" instance.","type":"text"}],"role":"symbol","title":"PartialRangeFrom.Iterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/EmptyCollection/Iterator":{"url":"\/documentation\/compute\/emptycollection\/iterator","navigatorTitle":[{"text":"Iterator","kind":"identifier"}],"abstract":[{"type":"text","text":"An iterator that never produces an element."}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Iterator"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EmptyCollection\/Iterator","kind":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" and "},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":"."}]},"role":"symbol","title":"EmptyCollection.Iterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyMapSequence/Iterator":{"abstract":[{"text":"A type that provides the sequence’s iteration interface and","type":"text"},{"type":"text","text":" "},{"text":"encapsulates its iteration state.","type":"text"}],"url":"\/documentation\/compute\/lazymapsequence\/iterator","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Base","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sequence","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Iterator"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapSequence\/Iterator","title":"LazyMapSequence.Iterator","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/IteratorProtocol":{"url":"\/documentation\/compute\/iteratorprotocol","navigatorTitle":[{"kind":"identifier","text":"IteratorProtocol"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IteratorProtocol"}],"abstract":[{"type":"text","text":"A type that supplies the values of a sequence one at a time."}],"type":"topic","title":"IteratorProtocol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveTreeIterators/DepthFirstIterator":{"navigatorTitle":[{"kind":"identifier","text":"DepthFirstIterator"}],"title":"RecursiveTreeIterators.DepthFirstIterator","abstract":[],"url":"\/documentation\/compute\/recursivetreeiterators\/depthfirstiterator","role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveTreeIterators\/DepthFirstIterator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DepthFirstIterator"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/IndexingIterator":{"url":"\/documentation\/compute\/indexingiterator","navigatorTitle":[{"kind":"identifier","text":"IndexingIterator"}],"abstract":[{"type":"text","text":"A type that iterates over a collection using its indices."}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IndexingIterator"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IndexingIterator","kind":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Elements","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"text":".","type":"text"}]},"role":"symbol","title":"IndexingIterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/String/Iterator":{"title":"String.Iterator","kind":"symbol","abstract":[{"type":"text","text":"A type that provides the collection’s iteration interface and"},{"text":" ","type":"text"},{"text":"encapsulates its iteration state.","type":"text"}],"url":"\/documentation\/compute\/string\/iterator","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Iterator"}],"navigatorTitle":[{"text":"Iterator","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/Iterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawBufferPointer/Iterator":{"title":"UnsafeRawBufferPointer.Iterator","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawBufferPointer\/Iterator","kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Iterator","kind":"identifier"}],"navigatorTitle":[{"text":"Iterator","kind":"identifier"}],"url":"\/documentation\/compute\/unsaferawbufferpointer\/iterator","abstract":[{"text":"An iterator over the bytes viewed by a raw buffer pointer.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/DropWhileSequence/Iterator":{"role":"symbol","title":"DropWhileSequence.Iterator","kind":"symbol","abstract":[{"text":"A type that provides the sequence’s iteration interface and","type":"text"},{"type":"text","text":" "},{"text":"encapsulates its iteration state.","type":"text"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Base","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sequence","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"navigatorTitle":[{"text":"Iterator","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DropWhileSequence\/Iterator","url":"\/documentation\/compute\/dropwhilesequence\/iterator","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Iterator","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyIterator":{"abstract":[{"text":"A type-erased iterator of ","type":"text"},{"type":"codeVoice","code":"Element"},{"type":"text","text":"."}],"url":"\/documentation\/compute\/anyiterator","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"navigatorTitle":[{"text":"AnyIterator","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AnyIterator","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIterator","title":"AnyIterator","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileSequence/Iterator":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"type":"topic","title":"LazyPrefixWhileSequence.Iterator","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Iterator","abstract":[{"type":"text","text":"An iterator over the initial elements traversed by a base iterator that"},{"type":"text","text":" "},{"text":"satisfy a given predicate.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Iterator"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"url":"\/documentation\/compute\/lazyprefixwhilesequence\/iterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/PriorityQueue":{"navigatorTitle":[{"text":"PriorityQueue","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PriorityQueue","url":"\/documentation\/compute\/priorityqueue","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"PriorityQueue","kind":"identifier"}],"type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"T"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}]},"title":"PriorityQueue","kind":"symbol","abstract":[{"type":"text","text":"A priority queue."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyDropWhileSequence/Iterator":{"url":"\/documentation\/compute\/lazydropwhilesequence\/iterator","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Iterator","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"role":"symbol","abstract":[{"text":"An iterator over the elements traversed by a base iterator that follow the","type":"text"},{"type":"text","text":" "},{"text":"initial consecutive elements that satisfy a given predicate.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyDropWhileSequence\/Iterator","title":"LazyDropWhileSequence.Iterator","type":"topic","kind":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/IteratorSequence":{"url":"\/documentation\/compute\/iteratorsequence","navigatorTitle":[{"text":"IteratorSequence","kind":"identifier"}],"abstract":[{"text":"A sequence built around an iterator of type ","type":"text"},{"code":"Base","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IteratorSequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorSequence","kind":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"IteratorProtocol"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"role":"symbol","title":"IteratorSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnfoldSequence":{"navigatorTitle":[{"text":"UnfoldSequence","kind":"identifier"}],"kind":"symbol","role":"symbol","title":"UnfoldSequence","type":"topic","url":"\/documentation\/compute\/unfoldsequence","abstract":[{"text":"A sequence whose elements are produced via repeated applications of a","type":"text"},{"type":"text","text":" "},{"text":"closure to some mutable state.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UnfoldSequence","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnfoldSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/IteratorProtocol/Element":{"fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"text":"Element","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/iteratorprotocol\/element","abstract":[{"text":"The type of element traversed by the iterator.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol\/Element","title":"Element","kind":"symbol","required":true,"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/String/UnicodeScalarView/Iterator":{"title":"String.UnicodeScalarView.Iterator","abstract":[{"type":"text","text":"A type that provides the collection’s iteration interface and"},{"text":" ","type":"text"},{"type":"text","text":"encapsulates its iteration state."}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Iterator"}],"navigatorTitle":[{"text":"Iterator","kind":"identifier"}],"url":"\/documentation\/compute\/string\/unicodescalarview\/iterator","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/UnicodeScalarView\/Iterator","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Dictionary/Iterator":{"title":"Dictionary.Iterator","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary\/Iterator","type":"topic","url":"\/documentation\/compute\/dictionary\/iterator","kind":"symbol","abstract":[{"text":"An iterator over the members of a ","type":"text"},{"type":"codeVoice","code":"Dictionary<Key, Value>"},{"text":".","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Iterator"}],"navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Key"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":", "},{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/LevelOrderIterator":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LevelOrderIterator","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"LevelOrderIterator"}],"type":"topic","role":"symbol","abstract":[],"title":"LevelOrderIterator","url":"\/documentation\/compute\/levelorderiterator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LevelOrderIterator","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Dictionary/Values-swift.struct/Iterator":{"type":"topic","kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Key"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}]},"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Iterator"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary\/Values-swift.struct\/Iterator","abstract":[{"text":"A type that provides the collection’s iteration interface and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"encapsulates its iteration state."}],"title":"Dictionary.Values.Iterator","navigatorTitle":[{"text":"Iterator","kind":"identifier"}],"url":"\/documentation\/compute\/dictionary\/values-swift.struct\/iterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/String/UTF16View/Iterator":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/UTF16View\/Iterator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Iterator","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/string\/utf16view\/iterator","abstract":[{"text":"A type that provides the collection’s iteration interface and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"encapsulates its iteration state."}],"navigatorTitle":[{"text":"Iterator","kind":"identifier"}],"title":"String.UTF16View.Iterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/CollectionOfOne/Iterator":{"abstract":[{"type":"text","text":"An iterator that produces one or zero instances of an element."}],"url":"\/documentation\/compute\/collectionofone\/iterator","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":"."}]},"navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Iterator"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionOfOne\/Iterator","title":"CollectionOfOne.Iterator","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/PrefixSequence/Iterator":{"kind":"symbol","type":"topic","abstract":[{"text":"A type that provides the sequence’s iteration interface and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"encapsulates its iteration state."}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Iterator","kind":"identifier"}],"url":"\/documentation\/compute\/prefixsequence\/iterator","navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PrefixSequence\/Iterator","conformance":{"constraints":[{"type":"codeVoice","code":"Base"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"title":"PrefixSequence.Iterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/FlattenSequence/Iterator":{"kind":"symbol","type":"topic","abstract":[{"text":"A type that provides the sequence’s iteration interface and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"encapsulates its iteration state."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence\/Iterator","title":"FlattenSequence.Iterator","navigatorTitle":[{"text":"Iterator","kind":"identifier"}],"conformance":{"constraints":[{"code":"Base","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Base.Element"},{"text":" conforms to ","type":"text"},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Iterator"}],"url":"\/documentation\/compute\/flattensequence\/iterator","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/EnumeratedSequence/Iterator":{"url":"\/documentation\/compute\/enumeratedsequence\/iterator","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EnumeratedSequence\/Iterator","title":"EnumeratedSequence.Iterator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Iterator","kind":"identifier"}],"conformance":{"constraints":[{"code":"Base","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"type":"topic","abstract":[{"type":"text","text":"The iterator for "},{"code":"EnumeratedSequence","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/JoinedSequence/Iterator":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Iterator","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/JoinedSequence\/Iterator","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Base","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Base.Element"},{"type":"text","text":" conforms to "},{"code":"Sequence","type":"codeVoice"},{"text":".","type":"text"}]},"title":"JoinedSequence.Iterator","type":"topic","role":"symbol","abstract":[{"type":"text","text":"An iterator that presents the elements of the sequences traversed"},{"text":" ","type":"text"},{"text":"by a base iterator, concatenated using a given separator.","type":"text"}],"url":"\/documentation\/compute\/joinedsequence\/iterator","navigatorTitle":[{"text":"Iterator","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/LinkedList/Iterator":{"url":"\/documentation\/compute\/linkedlist\/iterator","navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Iterator"}],"abstract":[{"type":"text","text":"A type that provides the collection’s iteration interface and"},{"type":"text","text":" "},{"type":"text","text":"encapsulates its iteration state."}],"type":"topic","title":"LinkedList.Iterator","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LinkedList\/Iterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/IteratorProtocol/next()":{"url":"\/documentation\/compute\/iteratorprotocol\/next()","abstract":[{"type":"text","text":"Advances to the next element and returns it, or "},{"code":"nil","type":"codeVoice"},{"text":" if no next element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"exists."}],"type":"topic","required":true,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol\/next()","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"next"},{"kind":"text","text":"() -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:St7ElementQa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?"}],"role":"symbol","title":"next()"},"doc://com.swallow.documentation.Compute/documentation/Compute/Zip2Sequence/Iterator":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Zip2Sequence\/Iterator","abstract":[{"text":"An iterator for ","type":"text"},{"code":"Zip2Sequence","type":"codeVoice"},{"text":".","type":"text"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Sequence1"},{"text":" conforms to ","type":"text"},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Sequence2"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sequence"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"Zip2Sequence.Iterator","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Iterator","kind":"identifier"}],"url":"\/documentation\/compute\/zip2sequence\/iterator","navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"role":"symbol","kind":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterSequence/Iterator":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator","abstract":[{"text":"An iterator over the elements traversed by some base iterator that also","type":"text"},{"type":"text","text":" "},{"text":"satisfy a given predicate.","type":"text"}],"title":"LazyFilterSequence.Iterator","url":"\/documentation\/compute\/lazyfiltersequence\/iterator","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Iterator"}],"conformance":{"constraints":[{"code":"Base","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/Iterator":{"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Iterator","kind":"identifier"}],"abstract":[{"type":"text","text":"An iterator over the members of a "},{"code":"Set<Element>","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/Iterator","type":"topic","title":"Set.Iterator","navigatorTitle":[{"text":"Iterator","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/set\/iterator","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReversedCollection/Iterator":{"title":"ReversedCollection.Iterator","abstract":[{"type":"text","text":"A type that provides the sequence’s iteration interface and"},{"type":"text","text":" "},{"text":"encapsulates its iteration state.","type":"text"}],"url":"\/documentation\/compute\/reversedcollection\/iterator","kind":"symbol","type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"BidirectionalCollection"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReversedCollection\/Iterator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Iterator","kind":"identifier"}],"navigatorTitle":[{"text":"Iterator","kind":"identifier"}],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/StrideToIterator":{"abstract":[{"type":"text","text":"An iterator for a "},{"code":"StrideTo","type":"codeVoice"},{"type":"text","text":" instance."}],"url":"\/documentation\/compute\/stridetoiterator","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Strideable"},{"type":"text","text":"."}]},"navigatorTitle":[{"text":"StrideToIterator","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"StrideToIterator"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideToIterator","title":"StrideToIterator","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeBufferPointer/Iterator":{"url":"\/documentation\/compute\/unsafebufferpointer\/iterator","navigatorTitle":[{"text":"Iterator","kind":"identifier"}],"abstract":[{"text":"An iterator for the elements in the buffer referenced by an","type":"text"},{"type":"text","text":" "},{"code":"UnsafeBufferPointer","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"UnsafeMutableBufferPointer"},{"type":"text","text":" instance."}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Iterator","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer\/Iterator","kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":"."}]},"role":"symbol","title":"UnsafeBufferPointer.Iterator"}}}