{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable"},"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"roleHeading":"Protocol","title":"Decodable","role":"symbol","navigatorTitle":[{"text":"Decodable","kind":"identifier"}],"externalID":"s:Se","modules":[{"name":"Compute"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Decodable","kind":"identifier"}],"symbolKind":"protocol"},"topicSections":[{"title":"Initializers","anchor":"Initializers","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable\/init(from:)-8ezpn"],"generated":true}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Decodable","kind":"identifier"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"}],"sections":[],"kind":"symbol","relationshipsSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD-swift.protocol"],"type":"inheritedBy","kind":"relationships","title":"Inherited By"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalMap","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Character","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionDifference","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionDifference\/Change","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ContiguousArray","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Duration","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatingPointRoundingRule","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LinkedList","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Matrix","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Never","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD2","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD3","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD4","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD64","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDMask","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt128","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unicode\/Scalar"],"kind":"relationships","title":"Conforming Types","type":"conformingTypes"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/decodable"]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"abstract":[{"type":"text","text":"A type that can decode itself from an external representation."}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Double":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double","abstract":[{"text":"A double-precision, floating-point value type.","type":"text"}],"title":"Double","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Double","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"Double","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/compute\/double"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceTree":{"abstract":[{"type":"text","text":"A simple reference-based tree data structure for Swift."}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree","title":"ReferenceTree","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ReferenceTree","kind":"identifier"}],"url":"\/documentation\/compute\/referencetree","navigatorTitle":[{"text":"ReferenceTree","kind":"identifier"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Decodable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Never":{"title":"Never","navigatorTitle":[{"kind":"identifier","text":"Never"}],"abstract":[{"type":"text","text":"A type that has no values and canâ€™t be constructed."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Never"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Never","role":"symbol","type":"topic","url":"\/documentation\/compute\/never"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeFrom":{"title":"PartialRangeFrom","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom","abstract":[{"text":"A partial interval extending upward from a lower bound.","type":"text"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"PartialRangeFrom"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"PartialRangeFrom","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" and "},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":"."}]},"url":"\/documentation\/compute\/partialrangefrom","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD2":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SIMD2"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD2","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SIMD2"}],"abstract":[{"text":"A vector of two scalar values.","type":"text"}],"title":"SIMD2","url":"\/documentation\/compute\/simd2","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int32","kind":"identifier"}],"abstract":[{"text":"A 32-bit signed integer value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type."}],"kind":"symbol","navigatorTitle":[{"text":"Int32","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/int32","title":"Int32","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64":{"url":"\/documentation\/compute\/int64","title":"Int64","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int64"}],"abstract":[{"type":"text","text":"A 64-bit signed integer value"},{"text":" ","type":"text"},{"text":"type.","type":"text"}],"navigatorTitle":[{"text":"Int64","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Decodable/init(from:)-8ezpn":{"required":true,"url":"\/documentation\/compute\/decodable\/init(from:)-8ezpn","abstract":[{"type":"text","text":"Creates a new instance by decoding from the given decoder."}],"kind":"symbol","role":"symbol","defaultImplementations":1,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable\/init(from:)-8ezpn","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"from","kind":"externalParam"},{"text":": any ","kind":"text"},{"text":"Decoder","kind":"typeIdentifier","preciseIdentifier":"s:s7DecoderP"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"type":"topic","title":"init(from:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD-swift.protocol":{"role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SIMD"}],"navigatorTitle":[{"kind":"identifier","text":"SIMD"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD-swift.protocol","abstract":[{"text":"A SIMD vector of a fixed number of elements.","type":"text"}],"title":"SIMD","url":"\/documentation\/compute\/simd-swift.protocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/LinkedList":{"title":"LinkedList","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LinkedList","abstract":[],"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"LinkedList"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LinkedList"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Decodable","type":"codeVoice"},{"text":".","type":"text"}]},"url":"\/documentation\/compute\/linkedlist","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/String":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"String"}],"title":"String","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"String","kind":"identifier"}],"abstract":[{"type":"text","text":"A Unicode string value that is a collection of characters."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/string"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD4":{"role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SIMD4","kind":"identifier"}],"navigatorTitle":[{"text":"SIMD4","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD4","abstract":[{"type":"text","text":"A vector of four scalar values."}],"title":"SIMD4","url":"\/documentation\/compute\/simd4"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD8":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD8","title":"SIMD8","abstract":[{"text":"A vector of eight scalar values.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"SIMD8","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/simd8","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SIMD8","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Int8"}],"url":"\/documentation\/compute\/int8","title":"Int8","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Int8"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8","abstract":[{"text":"An 8-bit signed integer value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Array":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Array"}],"abstract":[{"text":"An ordered, random-access collection.","type":"text"}],"navigatorTitle":[{"text":"Array","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":".","type":"text"}]},"title":"Array","url":"\/documentation\/compute\/array","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Matrix":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Matrix"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","navigatorTitle":[{"text":"Matrix","kind":"identifier"}],"title":"Matrix","url":"\/documentation\/compute\/matrix","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Matrix","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD3":{"role":"symbol","navigatorTitle":[{"text":"SIMD3","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD3","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SIMD3","kind":"identifier"}],"abstract":[{"text":"A vector of three scalar values.","type":"text"}],"title":"SIMD3","url":"\/documentation\/compute\/simd3","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt":{"kind":"symbol","navigatorTitle":[{"text":"UInt","kind":"identifier"}],"type":"topic","title":"UInt","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt","abstract":[{"text":"An unsigned integer value type.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt","kind":"identifier"}],"url":"\/documentation\/compute\/uint"},"doc://com.swallow.documentation.Compute/documentation/Compute/CollectionDifference/Change":{"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Change"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionDifference\/Change","kind":"symbol","url":"\/documentation\/compute\/collectiondifference\/change","navigatorTitle":[{"text":"Change","kind":"identifier"}],"role":"symbol","abstract":[{"text":"A single change to a collection.","type":"text"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"ChangeElement","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Decodable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":"."}]},"title":"CollectionDifference.Change"},"doc://com.swallow.documentation.Compute/documentation/Compute/Float":{"type":"topic","abstract":[{"text":"A single-precision, floating-point value type.","type":"text"}],"url":"\/documentation\/compute\/float","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Float"}],"navigatorTitle":[{"text":"Float","kind":"identifier"}],"title":"Float"},"doc://com.swallow.documentation.Compute/documentation/Compute/Duration":{"abstract":[{"type":"text","text":"A representation of high precision time."}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Duration","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Duration"}],"url":"\/documentation\/compute\/duration","navigatorTitle":[{"kind":"identifier","text":"Duration"}],"title":"Duration","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Character":{"title":"Character","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Character","abstract":[{"type":"text","text":"A single extended grapheme cluster that approximates a user-perceived"},{"type":"text","text":" "},{"text":"character.","type":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/compute\/character","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Character"}],"navigatorTitle":[{"kind":"identifier","text":"Character"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt16":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UInt16","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UInt16"}],"title":"UInt16","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt16","url":"\/documentation\/compute\/uint16","kind":"symbol","role":"symbol","abstract":[{"text":"A 16-bit unsigned integer value","type":"text"},{"text":" ","type":"text"},{"text":"type.","type":"text"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Decodable":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Decodable","kind":"identifier"}],"title":"Decodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","abstract":[{"type":"text","text":"A type that can decode itself from an external representation."}],"url":"\/documentation\/compute\/decodable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Decodable"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BidirectionalMap":{"title":"BidirectionalMap","abstract":[{"type":"text","text":"A bidirectional map between two "},{"type":"codeVoice","code":"Hashable"},{"text":" types.","type":"text"}],"url":"\/documentation\/compute\/bidirectionalmap","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BidirectionalMap"}],"kind":"symbol","type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Left","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Left"},{"type":"text","text":" conforms to "},{"code":"Encodable","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Left"},{"text":" conforms to ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Right"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Right"},{"text":" conforms to ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Right"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalMap","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"BidirectionalMap"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Range":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Range","kind":"identifier"}],"abstract":[{"text":"A half-open interval from a lower bound up to, but not including, an upper","type":"text"},{"type":"text","text":" "},{"type":"text","text":"bound."}],"navigatorTitle":[{"text":"Range","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"Range","url":"\/documentation\/compute\/range","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int16":{"title":"Int16","abstract":[{"text":"A 16-bit signed integer value","type":"text"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int16","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int16"}],"type":"topic","url":"\/documentation\/compute\/int16","navigatorTitle":[{"kind":"identifier","text":"Int16"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Float16":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16","navigatorTitle":[{"kind":"identifier","text":"Float16"}],"role":"symbol","title":"Float16","url":"\/documentation\/compute\/float16","type":"topic","abstract":[{"type":"text","text":"A half-precision (16b), floating-point value type."}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Float16"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int128":{"url":"\/documentation\/compute\/int128","abstract":[{"type":"text","text":"A 128-bit signed integer type."}],"title":"Int128","role":"symbol","navigatorTitle":[{"text":"Int128","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int128"}],"kind":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt64":{"navigatorTitle":[{"text":"UInt64","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","title":"UInt64","abstract":[{"text":"A 64-bit unsigned integer value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type."}],"url":"\/documentation\/compute\/uint64","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt64","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeThrough":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PartialRangeThrough"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Decodable"},{"text":".","type":"text"}]},"type":"topic","navigatorTitle":[{"text":"PartialRangeThrough","kind":"identifier"}],"title":"PartialRangeThrough","url":"\/documentation\/compute\/partialrangethrough","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough","abstract":[{"text":"A partial interval up to, and including, an upper bound.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UInt8","kind":"identifier"}],"navigatorTitle":[{"text":"UInt8","kind":"identifier"}],"title":"UInt8","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8","url":"\/documentation\/compute\/uint8","kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"An 8-bit unsigned integer value"},{"text":" ","type":"text"},{"text":"type.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CollectionDifference":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"CollectionDifference","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionDifference","kind":"symbol","url":"\/documentation\/compute\/collectiondifference","navigatorTitle":[{"text":"CollectionDifference","kind":"identifier"}],"role":"symbol","abstract":[{"text":"A collection of insertions and removals that describe the difference","type":"text"},{"text":" ","type":"text"},{"text":"between two ordered collection states.","type":"text"}],"conformance":{"constraints":[{"type":"codeVoice","code":"ChangeElement"},{"text":" conforms to ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"title":"CollectionDifference"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Set","kind":"identifier"}],"abstract":[{"text":"An unordered collection of unique elements.","type":"text"}],"navigatorTitle":[{"text":"Set","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set","conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Decodable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"title":"Set","url":"\/documentation\/compute\/set","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional":{"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"Optional","kind":"identifier"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Wrapped"},{"text":" conforms to ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":".","type":"text"}]},"type":"topic","navigatorTitle":[{"text":"Optional","kind":"identifier"}],"title":"Optional","url":"\/documentation\/compute\/optional","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional","abstract":[{"text":"A type that represents either a wrapped value or the absence of a value.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Unicode/Scalar":{"title":"Unicode.Scalar","type":"topic","kind":"symbol","navigatorTitle":[{"text":"Scalar","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Scalar","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unicode\/Scalar","abstract":[{"type":"text","text":"A Unicode scalar value."}],"role":"symbol","url":"\/documentation\/compute\/unicode\/scalar"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD64":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SIMD64"}],"abstract":[{"type":"text","text":"A vector of 64 scalar values."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD64","navigatorTitle":[{"text":"SIMD64","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/simd64","title":"SIMD64"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt128":{"url":"\/documentation\/compute\/uint128","type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt128","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UInt128"}],"title":"UInt128","abstract":[{"text":"A 128-bit unsigned integer type.","type":"text"}],"navigatorTitle":[{"text":"UInt128","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMDMask":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SIMDMask"}],"role":"symbol","title":"SIMDMask","abstract":[],"url":"\/documentation\/compute\/simdmask","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDMask","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SIMDMask"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD16":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SIMD16","kind":"identifier"}],"type":"topic","title":"SIMD16","url":"\/documentation\/compute\/simd16","navigatorTitle":[{"kind":"identifier","text":"SIMD16"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD16","kind":"symbol","role":"symbol","abstract":[{"text":"A vector of 16 scalar values.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Dictionary":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Dictionary","kind":"identifier"}],"abstract":[{"text":"A collection whose elements are key-value pairs.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Dictionary"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Key","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":", "},{"code":"Key","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Decodable"},{"text":".","type":"text"}]},"title":"Dictionary","url":"\/documentation\/compute\/dictionary","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","title":"UInt32","abstract":[{"type":"text","text":"A 32-bit unsigned integer value"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"UInt32","kind":"identifier"}],"url":"\/documentation\/compute\/uint32","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt32","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeUpTo":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PartialRangeUpTo","kind":"identifier"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Decodable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"type":"topic","navigatorTitle":[{"text":"PartialRangeUpTo","kind":"identifier"}],"title":"PartialRangeUpTo","url":"\/documentation\/compute\/partialrangeupto","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo","abstract":[{"text":"A partial half-open interval up to, but not including, an upper bound.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ClosedRange"}],"abstract":[{"text":"An interval from a lower bound up to, and including, an upper bound.","type":"text"}],"navigatorTitle":[{"text":"ClosedRange","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":"."}]},"title":"ClosedRange","url":"\/documentation\/compute\/closedrange","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD32":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SIMD32","kind":"identifier"}],"title":"SIMD32","navigatorTitle":[{"kind":"identifier","text":"SIMD32"}],"type":"topic","abstract":[{"type":"text","text":"A vector of 32 scalar values."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD32","url":"\/documentation\/compute\/simd32","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/FloatingPointRoundingRule":{"kind":"symbol","navigatorTitle":[{"text":"FloatingPointRoundingRule","kind":"identifier"}],"type":"topic","title":"FloatingPointRoundingRule","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FloatingPointRoundingRule","abstract":[{"type":"text","text":"A rule for rounding a floating-point number."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FloatingPointRoundingRule","kind":"identifier"}],"url":"\/documentation\/compute\/floatingpointroundingrule"},"doc://com.swallow.documentation.Compute/documentation/Compute/ContiguousArray":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ContiguousArray"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":"."}]},"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ContiguousArray"}],"title":"ContiguousArray","url":"\/documentation\/compute\/contiguousarray","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ContiguousArray","abstract":[{"text":"A contiguously stored array.","type":"text"}]}}}