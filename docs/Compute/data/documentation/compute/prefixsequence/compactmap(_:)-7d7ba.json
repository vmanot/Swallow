{"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"compactMap","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ElementOfResult"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"transform"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"ElementOfResult","kind":"typeIdentifier"},{"text":"?) ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> [","kind":"text"},{"text":"ElementOfResult","kind":"typeIdentifier"},{"text":"]","kind":"text"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"A closure that accepts an element of this"},{"text":" ","type":"text"},{"text":"sequence as its argument and returns an optional value.","type":"text"}],"type":"paragraph"}],"name":"transform"}]},{"content":[{"anchor":"return-value","text":"Return Value","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"An array of the non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" results of calling "},{"code":"transform","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"with each element of the sequence."}]}],"kind":"content"},{"content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"inlineContent":[{"text":"Use this method to receive an array of non-optional values when your","type":"text"},{"type":"text","text":" "},{"type":"text","text":"transformation produces an optional value."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, note the difference in the result of using "},{"code":"map","type":"codeVoice"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"compactMap"},{"type":"text","text":" with a transformation that returns an optional "},{"code":"Int","type":"codeVoice"},{"text":" value.","type":"text"}]},{"syntax":null,"type":"codeListing","code":["let possibleNumbers = [\"1\", \"2\", \"three\", \"\/\/\/4\/\/\/\", \"5\"]","","let mapped: [Int?] = possibleNumbers.map { str in Int(str) }","\/\/ [1, 2, nil, nil, 5]","","let compactMapped: [Int] = possibleNumbers.compactMap { str in Int(str) }","\/\/ [1, 2, 5]"]},{"style":"note","type":"aside","name":"Complexity","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":"), where "},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":" is the length of this sequence.","type":"text"}]}]}],"kind":"content"}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/prefixsequence\/compactmap(_:)-7d7ba"]}],"sections":[],"metadata":{"extendedModule":"Swift","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"compactMap"},{"kind":"text","text":"<"},{"text":"ElementOfResult","kind":"genericParameter"},{"kind":"text","text":">(("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"ElementOfResult","kind":"typeIdentifier"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"ElementOfResult"},{"text":"]","kind":"text"}],"role":"symbol","roleHeading":"Instance Method","modules":[{"name":"Compute","relatedModules":["Swift"]}],"title":"compactMap(_:)","externalID":"s:STsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlF::SYNTHESIZED::s:s14PrefixSequenceV"},"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PrefixSequence\/compactMap(_:)-7d7ba","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PrefixSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PrefixSequence\/Sequence-Implementations"]]},"abstract":[{"text":"Returns an array containing the non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" results of calling the given","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"transformation with each element of this sequence."}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/PrefixSequence/compactMap(_:)-7d7ba":{"url":"\/documentation\/compute\/prefixsequence\/compactmap(_:)-7d7ba","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PrefixSequence\/compactMap(_:)-7d7ba","kind":"symbol","title":"compactMap(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"compactMap"},{"text":"<","kind":"text"},{"text":"ElementOfResult","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"ElementOfResult"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"rethrows"},{"text":" -> [","kind":"text"},{"kind":"typeIdentifier","text":"ElementOfResult"},{"text":"]","kind":"text"}],"abstract":[{"text":"Returns an array containing the non-","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" results of calling the given"},{"text":" ","type":"text"},{"text":"transformation with each element of this sequence.","type":"text"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequenceâ€™s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/PrefixSequence/Sequence-Implementations":{"url":"\/documentation\/compute\/prefixsequence\/sequence-implementations","kind":"article","type":"topic","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PrefixSequence\/Sequence-Implementations","title":"Sequence Implementations","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/PrefixSequence":{"url":"\/documentation\/compute\/prefixsequence","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PrefixSequence","role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrefixSequence","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"PrefixSequence"}],"title":"PrefixSequence","abstract":[{"type":"text","text":"A sequence that only consumes up to "},{"type":"codeVoice","code":"n"},{"type":"text","text":" elements from an underlying"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Base"},{"text":" iterator.","type":"text"}]}}}