{"metadata":{"title":"init(_:radix:)","symbolKind":"init","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"roleHeading":"Initializer","externalID":"s:s17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufc","extendedModule":"Swift","fragments":[{"text":"init","kind":"identifier"},{"text":"?<","kind":"text"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"text":", ","kind":"text"},{"text":"radix","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":")"}],"role":"symbol"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"?<"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"text","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"text":"radix","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":" = 10) ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sy","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","text":"StringProtocol","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The ASCII representation of a number in the radix passed as","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"radix"},{"text":".","type":"text"}]}],"name":"text"},{"name":"radix","content":[{"inlineContent":[{"text":"The radix, or base, to use for converting ","type":"text"},{"type":"codeVoice","code":"text"},{"type":"text","text":" to an integer"},{"type":"text","text":" "},{"type":"text","text":"value. "},{"type":"codeVoice","code":"radix"},{"text":" must be in the range ","type":"text"},{"type":"codeVoice","code":"2...36"},{"text":". The default is 10.","type":"text"}],"type":"paragraph"}]}]},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"inlineContent":[{"text":"The string passed as ","type":"text"},{"type":"codeVoice","code":"text"},{"type":"text","text":" may begin with a plus or minus sign character"},{"text":" ","type":"text"},{"text":"(","type":"text"},{"type":"codeVoice","code":"+"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"-"},{"text":"), followed by one or more numeric digits (","type":"text"},{"type":"codeVoice","code":"0-9"},{"type":"text","text":") or letters"},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"a-z"},{"type":"text","text":" or "},{"type":"codeVoice","code":"A-Z"},{"type":"text","text":"). Parsing of the string is case insensitive."}],"type":"paragraph"},{"code":["let x = Int(\"123\")","\/\/ x == 123","","let y = Int(\"-123\", radix: 8)","\/\/ y == -83","let y = Int(\"+123\", radix: 8)","\/\/ y == +83","","let z = Int(\"07b\", radix: 16)","\/\/ z == 123"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If "},{"code":"text","type":"codeVoice"},{"type":"text","text":" is in an invalid format or contains characters that are out of"},{"type":"text","text":" "},{"text":"bounds for the given ","type":"text"},{"type":"codeVoice","code":"radix"},{"text":", or if the value it denotes in the given","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"radix"},{"text":" is not representable, the result is ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":". For example, the"},{"type":"text","text":" "},{"type":"text","text":"following conversions result in "},{"type":"codeVoice","code":"nil"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["Int(\" 100\")                       \/\/ Includes whitespace","Int(\"21-50\")                      \/\/ Invalid format","Int(\"ff6600\")                     \/\/ Characters out of bounds","Int(\"zzzzzzzzzzzzz\", radix: 36)   \/\/ Out of range"]}]}],"kind":"symbol","sections":[],"abstract":[{"text":"Creates a new integer value from the given string and radix.","type":"text"}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/init(_:radix:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/fixedwidthinteger\/init(_:radix:)"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/init(_:radix:)":{"fragments":[{"kind":"identifier","text":"init"},{"text":"?<","kind":"text"},{"kind":"genericParameter","text":"S"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"kind":"externalParam","text":"radix"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":")","kind":"text"}],"role":"symbol","kind":"symbol","abstract":[{"text":"Creates a new integer value from the given string and radix.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/init(_:radix:)","title":"init(_:radix:)","type":"topic","url":"\/documentation\/compute\/fixedwidthinteger\/init(_:radix:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/StringProtocol":{"url":"\/documentation\/compute\/stringprotocol","role":"symbol","abstract":[{"type":"text","text":"A type that can represent a string as a collection of characters."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","title":"StringProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StringProtocol","kind":"identifier"}],"navigatorTitle":[{"text":"StringProtocol","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger":{"title":"FixedWidthInteger","kind":"symbol","navigatorTitle":[{"text":"FixedWidthInteger","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"FixedWidthInteger","kind":"identifier"}],"abstract":[{"text":"An integer type that uses a fixed size for every instance.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/fixedwidthinteger"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"}}}