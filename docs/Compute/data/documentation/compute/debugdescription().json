{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/debugdescription()"]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Converts description definitions to a debugger Type Summary.","type":"text"}],"kind":"symbol","sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DebugDescription()"},"metadata":{"title":"DebugDescription()","symbolKind":"macro","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DebugDescription"},{"text":"()","kind":"text"}],"externalID":"s:s16DebugDescriptionyycfm","role":"symbol","roleHeading":"Macro","modules":[{"name":"Compute"}]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(member) "},{"text":"@attached","kind":"attribute"},{"kind":"text","text":"(memberAttribute) "},{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"DebugDescription","kind":"identifier"},{"text":"()","kind":"text"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"overview","type":"heading"},{"inlineContent":[{"text":"This macro converts compatible description implementations written in Swift","type":"text"},{"type":"text","text":" "},{"text":"to an LLDB format known as a Type Summary. A Type Summary is LLDB’s","type":"text"},{"type":"text","text":" "},{"type":"text","text":"equivalent to "},{"code":"debugDescription","type":"codeVoice"},{"text":", with the distinction that it does not","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"execute code inside the debugged process. By avoiding code execution,"},{"text":" ","type":"text"},{"type":"text","text":"descriptions can be produced faster, without potential side effects, and"},{"text":" ","type":"text"},{"type":"text","text":"shown in situations where code execution is not performed, such as the"},{"type":"text","text":" "},{"type":"text","text":"variable list of an IDE."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider this an example. This "},{"code":"Team","type":"codeVoice"},{"text":" struct has a ","type":"text"},{"code":"debugDescription","type":"codeVoice"},{"text":" which","type":"text"},{"type":"text","text":" "},{"text":"summarizes some key details, such as the team’s name. The debugger only","type":"text"},{"text":" ","type":"text"},{"text":"computes this string on demand - typically via the ","type":"text"},{"type":"codeVoice","code":"po"},{"text":" command. By applying","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"DebugDescription"},{"text":" macro, a matching Type Summary is constructed. This","type":"text"},{"type":"text","text":" "},{"type":"text","text":"allows the user to show a string like “Rams [11-2]”, without executing"},{"text":" ","type":"text"},{"type":"codeVoice","code":"debugDescription"},{"text":". This improves the usability, performance, and","type":"text"},{"text":" ","type":"text"},{"text":"reliability of the debugging experience.","type":"text"}]},{"code":["@DebugDescription","struct Team: CustomDebugStringConvertible {","   var name: String","   var wins, losses: Int","","   var debugDescription: String {","       \"\\(name) [\\(wins)-\\(losses)]\"","   }","}"],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"The "},{"code":"DebugDescription","type":"codeVoice"},{"text":" macro supports both ","type":"text"},{"type":"codeVoice","code":"debugDescription"},{"type":"text","text":", "},{"type":"codeVoice","code":"description"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"as well as a third option: a property named "},{"code":"lldbDescription","type":"codeVoice"},{"text":". The first","type":"text"},{"text":" ","type":"text"},{"text":"two are implemented when conforming to the ","type":"text"},{"type":"codeVoice","code":"CustomDebugStringConvertible"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"codeVoice","code":"CustomStringConvertible"},{"type":"text","text":" protocols. The additional "},{"type":"codeVoice","code":"lldbDescription"},{"text":" ","type":"text"},{"text":"property is useful when both ","type":"text"},{"code":"debugDescription","type":"codeVoice"},{"type":"text","text":" and "},{"code":"description","type":"codeVoice"},{"type":"text","text":" are"},{"type":"text","text":" "},{"text":"implemented, but don’t meet the requirements of the ","type":"text"},{"type":"codeVoice","code":"DebugDescription"},{"text":" ","type":"text"},{"type":"text","text":"macro. If "},{"code":"lldbDescription","type":"codeVoice"},{"text":" is implemented, ","type":"text"},{"code":"DebugDescription","type":"codeVoice"},{"type":"text","text":" choose it"},{"type":"text","text":" "},{"type":"text","text":"over "},{"type":"codeVoice","code":"debugDescription"},{"type":"text","text":" and "},{"type":"codeVoice","code":"description"},{"text":". Likewise, ","type":"text"},{"type":"codeVoice","code":"debugDescription"},{"type":"text","text":" is"},{"text":" ","type":"text"},{"text":"preferred over ","type":"text"},{"code":"description","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Description Requirements","anchor":"Description-Requirements","type":"heading","level":3},{"inlineContent":[{"text":"The description implementation has the following requirements:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"The body of the description implementation must a single string","type":"text"},{"type":"text","text":" "},{"text":"expression. String concatenation is not supported, use string interpolation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"instead."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"String interpolation can reference stored properties only, functions calls"},{"text":" ","type":"text"},{"type":"text","text":"and other arbitrary computation are not supported. Of note, conditional"},{"text":" ","type":"text"},{"text":"logic and computed properties are not supported.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Overloaded string interpolation cannot be used.","type":"text"}]}]}]}]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/DebugDescription()":{"url":"\/documentation\/compute\/debugdescription()","title":"DebugDescription()","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DebugDescription()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DebugDescription","kind":"identifier"},{"kind":"text","text":"()"}],"type":"topic","kind":"symbol","abstract":[{"text":"Converts description definitions to a debugger Type Summary.","type":"text"}],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}