{"relationshipsSections":[{"type":"inheritsFrom","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByExtendedGraphemeClusterLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByUnicodeScalarLiteral"],"title":"Inherits From","kind":"relationships"},{"title":"Inherited By","type":"inheritedBy","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringInterpolation","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol"],"kind":"relationships"},{"title":"Conforming Types","kind":"relationships","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StaticString","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring"],"type":"conformingTypes"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"sections":[],"topicSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringLiteral\/StringLiteralType"],"generated":true,"title":"Associated Types","anchor":"Associated-Types"},{"generated":true,"anchor":"Initializers","title":"Initializers","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringLiteral\/init(stringLiteral:)"]}],"abstract":[{"type":"text","text":"A type that can be initialized with a string literal."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressibleByStringLiteral"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByExtendedGraphemeClusterLiteral","text":"ExpressibleByExtendedGraphemeClusterLiteral","kind":"typeIdentifier","preciseIdentifier":"s:s43ExpressibleByExtendedGraphemeClusterLiteralP"}],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"String"},{"type":"text","text":" and "},{"type":"codeVoice","code":"StaticString"},{"text":" types conform to the","type":"text"},{"type":"text","text":" "},{"code":"ExpressibleByStringLiteral","type":"codeVoice"},{"type":"text","text":" protocol. You can initialize a variable or"},{"type":"text","text":" "},{"type":"text","text":"constant of either of these types using a string literal of any length."}]},{"code":["let picnicGuest = \"Deserving porcupine\""],"syntax":null,"type":"codeListing"},{"type":"heading","level":1,"anchor":"Conforming-to-ExpressibleByStringLiteral","text":"Conforming to ExpressibleByStringLiteral"},{"inlineContent":[{"text":"To add ","type":"text"},{"type":"codeVoice","code":"ExpressibleByStringLiteral"},{"text":" conformance to your custom type,","type":"text"},{"text":" ","type":"text"},{"text":"implement the required initializer.","type":"text"}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringLiteral","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"paths":["\/documentation\/compute\/expressiblebystringliteral"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"roleHeading":"Protocol","title":"ExpressibleByStringLiteral","role":"symbol","externalID":"s:s26ExpressibleByStringLiteralP","symbolKind":"protocol","modules":[{"name":"Compute"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ExpressibleByStringLiteral","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ExpressibleByStringLiteral"}]},"kind":"symbol","references":{"doc://com.swallow.documentation.Compute/documentation/Compute/String":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"String"}],"title":"String","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"String","kind":"identifier"}],"abstract":[{"type":"text","text":"A Unicode string value that is a collection of characters."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/string"},"doc://com.swallow.documentation.Compute/documentation/Compute/StaticString":{"url":"\/documentation\/compute\/staticstring","navigatorTitle":[{"kind":"identifier","text":"StaticString"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StaticString"}],"abstract":[{"type":"text","text":"A string type designed to represent text that is known at compile time."}],"type":"topic","title":"StaticString","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StaticString"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByStringInterpolation":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressibleByStringInterpolation"}],"kind":"symbol","title":"ExpressibleByStringInterpolation","abstract":[{"type":"text","text":"A type that can be initialized by string interpolation with a string"},{"text":" ","type":"text"},{"type":"text","text":"literal that includes expressions."}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExpressibleByStringInterpolation"}],"url":"\/documentation\/compute\/expressiblebystringinterpolation","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringInterpolation"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByStringLiteral/init(stringLiteral:)":{"role":"symbol","kind":"symbol","required":true,"title":"init(stringLiteral:)","url":"\/documentation\/compute\/expressiblebystringliteral\/init(stringliteral:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"stringLiteral","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"StringLiteralType","kind":"typeIdentifier","preciseIdentifier":"s:s26ExpressibleByStringLiteralP0cD4TypeQa"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates an instance initialized to the given string value."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringLiteral\/init(stringLiteral:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByUnicodeScalarLiteral":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressibleByUnicodeScalarLiteral"}],"kind":"symbol","title":"ExpressibleByUnicodeScalarLiteral","abstract":[{"text":"A type that can be initialized with a string literal containing a single","type":"text"},{"type":"text","text":" "},{"text":"Unicode scalar value.","type":"text"}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExpressibleByUnicodeScalarLiteral"}],"url":"\/documentation\/compute\/expressiblebyunicodescalarliteral","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByUnicodeScalarLiteral"},"doc://com.swallow.documentation.Compute/documentation/Compute/StringProtocol":{"url":"\/documentation\/compute\/stringprotocol","role":"symbol","abstract":[{"type":"text","text":"A type that can represent a string as a collection of characters."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","title":"StringProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StringProtocol","kind":"identifier"}],"navigatorTitle":[{"text":"StringProtocol","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree":{"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"T","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"ExpressibleByStringLiteral","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree","title":"ArrayTree","navigatorTitle":[{"text":"ArrayTree","kind":"identifier"}],"url":"\/documentation\/compute\/arraytree","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArrayTree"}],"type":"topic","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByStringLiteral":{"abstract":[{"type":"text","text":"A type that can be initialized with a string literal."}],"type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ExpressibleByStringLiteral","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringLiteral","title":"ExpressibleByStringLiteral","url":"\/documentation\/compute\/expressiblebystringliteral","navigatorTitle":[{"text":"ExpressibleByStringLiteral","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByStringLiteral/StringLiteralType":{"role":"symbol","title":"StringLiteralType","type":"topic","abstract":[{"text":"A type that represents a string literal.","type":"text"}],"fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"text":"StringLiteralType","kind":"identifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"_ExpressibleByBuiltinStringLiteral"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringLiteral\/StringLiteralType","kind":"symbol","url":"\/documentation\/compute\/expressiblebystringliteral\/stringliteraltype","required":true},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByExtendedGraphemeClusterLiteral":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressibleByExtendedGraphemeClusterLiteral"}],"kind":"symbol","title":"ExpressibleByExtendedGraphemeClusterLiteral","abstract":[{"type":"text","text":"A type that can be initialized with a string literal containing a single"},{"type":"text","text":" "},{"text":"extended grapheme cluster.","type":"text"}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"ExpressibleByExtendedGraphemeClusterLiteral","kind":"identifier"}],"url":"\/documentation\/compute\/expressiblebyextendedgraphemeclusterliteral","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByExtendedGraphemeClusterLiteral"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring":{"navigatorTitle":[{"kind":"identifier","text":"Substring"}],"url":"\/documentation\/compute\/substring","title":"Substring","abstract":[{"text":"A slice of a string.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Substring","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring","role":"symbol"}}}