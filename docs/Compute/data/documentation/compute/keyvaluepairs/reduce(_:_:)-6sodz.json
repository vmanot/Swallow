{"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyValuePairs\/reduce(_:_:)-6sodz","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reduce"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"initialResult"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":", "},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"nextPartialResult","kind":"internalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Result"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"initialResult","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value to use as the initial accumulating value."},{"text":" ","type":"text"},{"type":"codeVoice","code":"initialResult"},{"text":" is passed to ","type":"text"},{"type":"codeVoice","code":"nextPartialResult"},{"type":"text","text":" the first time the"},{"text":" ","type":"text"},{"type":"text","text":"closure is executed."}]}]},{"name":"nextPartialResult","content":[{"inlineContent":[{"type":"text","text":"A closure that combines an accumulating value and"},{"text":" ","type":"text"},{"type":"text","text":"an element of the sequence into a new accumulating value, to be used"},{"text":" ","type":"text"},{"type":"text","text":"in the next call of the "},{"type":"codeVoice","code":"nextPartialResult"},{"text":" closure or returned to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the caller."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final accumulated value. If the sequence has no elements,"},{"type":"text","text":" "},{"text":"the result is ","type":"text"},{"code":"initialResult","type":"codeVoice"},{"type":"text","text":"."}]}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"reduce(_:_:)"},{"text":" method to produce a single value from the elements","type":"text"},{"type":"text","text":" "},{"text":"of an entire sequence. For example, you can use this method on an array","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of numbers to find their sum or product."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"nextPartialResult","type":"codeVoice"},{"type":"text","text":" closure is called sequentially with an"},{"text":" ","type":"text"},{"type":"text","text":"accumulating value initialized to "},{"type":"codeVoice","code":"initialResult"},{"type":"text","text":" and each element of"},{"text":" ","type":"text"},{"type":"text","text":"the sequence. This example shows how to find the sum of an array of"},{"text":" ","type":"text"},{"type":"text","text":"numbers."}]},{"type":"codeListing","syntax":null,"code":["let numbers = [1, 2, 3, 4]","let numberSum = numbers.reduce(0, { x, y in","    x + y","})","\/\/ numberSum == 10"]},{"inlineContent":[{"text":"When ","type":"text"},{"code":"numbers.reduce(_:_:)","type":"codeVoice"},{"type":"text","text":" is called, the following steps occur:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"nextPartialResult","type":"codeVoice"},{"text":" closure is called with ","type":"text"},{"code":"initialResult","type":"codeVoice"},{"type":"text","text":"—"},{"type":"codeVoice","code":"0"},{"text":" ","type":"text"},{"text":"in this case—and the first element of ","type":"text"},{"code":"numbers","type":"codeVoice"},{"text":", returning the sum:","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"The closure is called again repeatedly with the previous call’s return","type":"text"},{"type":"text","text":" "},{"text":"value and each element of the sequence.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"When the sequence is exhausted, the last value returned from the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"closure is returned to the caller."}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"If the sequence has no elements, "},{"type":"codeVoice","code":"nextPartialResult"},{"type":"text","text":" is never executed"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"codeVoice","code":"initialResult"},{"text":" is the result of the call to ","type":"text"},{"code":"reduce(_:_:)","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"name":"Complexity","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":"), where ","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":" is the length of the sequence."}]}],"type":"aside"}]}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/keyvaluepairs\/reduce(_:_:)-6sodz"]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyValuePairs","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyValuePairs\/Sequence-Implementations"]]},"metadata":{"role":"symbol","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"reduce","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Result","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}],"externalID":"s:STsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlF::SYNTHESIZED::s:s13KeyValuePairsV","extendedModule":"Swift","symbolKind":"method","title":"reduce(_:_:)","modules":[{"name":"Compute","relatedModules":["Swift"]}]},"sections":[],"abstract":[{"text":"Returns the result of combining the elements of the sequence using the","type":"text"},{"type":"text","text":" "},{"text":"given closure.","type":"text"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/KeyValuePairs/Sequence-Implementations":{"url":"\/documentation\/compute\/keyvaluepairs\/sequence-implementations","title":"Sequence Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyValuePairs\/Sequence-Implementations","role":"collectionGroup","kind":"article","type":"topic","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/KeyValuePairs/reduce(_:_:)-6sodz":{"url":"\/documentation\/compute\/keyvaluepairs\/reduce(_:_:)-6sodz","title":"reduce(_:_:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyValuePairs\/reduce(_:_:)-6sodz","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"reduce","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Result","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":", ("},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}],"type":"topic","abstract":[{"type":"text","text":"Returns the result of combining the elements of the sequence using the"},{"text":" ","type":"text"},{"type":"text","text":"given closure."}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/KeyValuePairs":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeyValuePairs"}],"navigatorTitle":[{"kind":"identifier","text":"KeyValuePairs"}],"url":"\/documentation\/compute\/keyvaluepairs","title":"KeyValuePairs","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyValuePairs","role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A lightweight collection of key-value pairs."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]}}}