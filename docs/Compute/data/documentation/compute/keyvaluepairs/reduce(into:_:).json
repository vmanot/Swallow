{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/keyvaluepairs\/reduce(into:_:)"]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyValuePairs\/reduce(into:_:)","interfaceLanguage":"swift"},"kind":"symbol","abstract":[{"type":"text","text":"Returns the result of combining the elements of the sequence using the"},{"text":" ","type":"text"},{"type":"text","text":"given closure."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reduce","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Result","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"into"},{"kind":"text","text":" "},{"text":"initialResult","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"updateAccumulatingResult"},{"text":": (","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ()) ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result"}],"languages":["swift"]}]},{"parameters":[{"name":"initialResult","content":[{"inlineContent":[{"text":"The value to use as the initial accumulating value.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"A closure that updates the accumulating"},{"text":" ","type":"text"},{"text":"value with an element of the sequence.","type":"text"}],"type":"paragraph"}],"name":"updateAccumulatingResult"}],"kind":"parameters"},{"content":[{"anchor":"return-value","type":"heading","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final accumulated value. If the sequence has no elements,"},{"text":" ","type":"text"},{"text":"the result is ","type":"text"},{"type":"codeVoice","code":"initialResult"},{"type":"text","text":"."}]}],"kind":"content"},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"code":"reduce(into:_:)","type":"codeVoice"},{"type":"text","text":" method to produce a single value from the"},{"text":" ","type":"text"},{"text":"elements of an entire sequence. For example, you can use this method on an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"array of integers to filter adjacent equal entries or count frequencies."}]},{"inlineContent":[{"type":"text","text":"This method is preferred over "},{"type":"codeVoice","code":"reduce(_:_:)"},{"text":" for efficiency when the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"result is a copy-on-write type, for example an Array or a Dictionary."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"updateAccumulatingResult"},{"type":"text","text":" closure is called sequentially with a"},{"type":"text","text":" "},{"type":"text","text":"mutable accumulating value initialized to "},{"code":"initialResult","type":"codeVoice"},{"text":" and each element","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the sequence. This example shows how to build a dictionary of letter"},{"type":"text","text":" "},{"type":"text","text":"frequencies of a string."}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let letters = \"abracadabra\"","let letterCount = letters.reduce(into: [:]) { counts, letter in","    counts[letter, default: 0] += 1","}","\/\/ letterCount == [\"a\": 5, \"b\": 2, \"r\": 2, \"c\": 1, \"d\": 1]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"letters.reduce(into:_:)"},{"type":"text","text":" is called, the following steps occur:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"updateAccumulatingResult"},{"type":"text","text":" closure is called with the initial"},{"type":"text","text":" "},{"type":"text","text":"accumulating value—"},{"code":"[:]","type":"codeVoice"},{"text":" in this case—and the first character of","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"letters"},{"text":", modifying the accumulating value by setting ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" for the key","type":"text"},{"text":" ","type":"text"},{"code":"\"a\"","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"The closure is called again repeatedly with the updated accumulating","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value and each element of the sequence."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"When the sequence is exhausted, the accumulating value is returned to"},{"text":" ","type":"text"},{"text":"the caller.","type":"text"}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"If the sequence has no elements, "},{"code":"updateAccumulatingResult","type":"codeVoice"},{"text":" is never","type":"text"},{"type":"text","text":" "},{"type":"text","text":"executed and "},{"type":"codeVoice","code":"initialResult"},{"type":"text","text":" is the result of the call to"},{"type":"text","text":" "},{"code":"reduce(into:_:)","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"O(","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" is the length of the sequence."}],"type":"paragraph"}],"style":"note","name":"Complexity","type":"aside"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyValuePairs","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyValuePairs\/Sequence-Implementations"]]},"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"reduce","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Result","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> ()) "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}],"externalID":"s:STsE6reduce4into_qd__qd__n_yqd__z_7ElementQztKXEtKlF::SYNTHESIZED::s:s13KeyValuePairsV","extendedModule":"Swift","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"title":"reduce(into:_:)","role":"symbol","roleHeading":"Instance Method","symbolKind":"method"},"sections":[],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/KeyValuePairs/reduce(into:_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reduce","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Result"},{"text":">(","kind":"text"},{"text":"into","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":", ("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> ()) "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Result","kind":"typeIdentifier"}],"url":"\/documentation\/compute\/keyvaluepairs\/reduce(into:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyValuePairs\/reduce(into:_:)","title":"reduce(into:_:)","type":"topic","kind":"symbol","abstract":[{"text":"Returns the result of combining the elements of the sequence using the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"given closure."}],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/KeyValuePairs":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeyValuePairs"}],"navigatorTitle":[{"kind":"identifier","text":"KeyValuePairs"}],"url":"\/documentation\/compute\/keyvaluepairs","title":"KeyValuePairs","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyValuePairs","role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A lightweight collection of key-value pairs."}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/KeyValuePairs/Sequence-Implementations":{"url":"\/documentation\/compute\/keyvaluepairs\/sequence-implementations","title":"Sequence Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyValuePairs\/Sequence-Implementations","role":"collectionGroup","kind":"article","type":"topic","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]}}}