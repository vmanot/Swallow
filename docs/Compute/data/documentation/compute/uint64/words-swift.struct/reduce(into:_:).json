{"abstract":[{"type":"text","text":"Returns the result of combining the elements of the sequence using the"},{"type":"text","text":" "},{"type":"text","text":"given closure."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"reduce","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Result","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"into"},{"text":" ","kind":"text"},{"text":"initialResult","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"updateAccumulatingResult","kind":"internalParam"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"Result","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ()) ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Result","kind":"typeIdentifier"}]}]},{"parameters":[{"name":"initialResult","content":[{"inlineContent":[{"type":"text","text":"The value to use as the initial accumulating value."}],"type":"paragraph"}]},{"name":"updateAccumulatingResult","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that updates the accumulating"},{"type":"text","text":" "},{"text":"value with an element of the sequence.","type":"text"}]}]}],"kind":"parameters"},{"content":[{"text":"Return Value","level":2,"anchor":"return-value","type":"heading"},{"inlineContent":[{"text":"The final accumulated value. If the sequence has no elements,","type":"text"},{"type":"text","text":" "},{"text":"the result is ","type":"text"},{"code":"initialResult","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"code":"reduce(into:_:)","type":"codeVoice"},{"text":" method to produce a single value from the","type":"text"},{"text":" ","type":"text"},{"text":"elements of an entire sequence. For example, you can use this method on an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"array of integers to filter adjacent equal entries or count frequencies."}]},{"inlineContent":[{"type":"text","text":"This method is preferred over "},{"code":"reduce(_:_:)","type":"codeVoice"},{"type":"text","text":" for efficiency when the"},{"text":" ","type":"text"},{"text":"result is a copy-on-write type, for example an Array or a Dictionary.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"updateAccumulatingResult"},{"type":"text","text":" closure is called sequentially with a"},{"text":" ","type":"text"},{"type":"text","text":"mutable accumulating value initialized to "},{"type":"codeVoice","code":"initialResult"},{"text":" and each element","type":"text"},{"type":"text","text":" "},{"text":"of the sequence. This example shows how to build a dictionary of letter","type":"text"},{"text":" ","type":"text"},{"text":"frequencies of a string.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let letters = \"abracadabra\"","let letterCount = letters.reduce(into: [:]) { counts, letter in","    counts[letter, default: 0] += 1","}","\/\/ letterCount == [\"a\": 5, \"b\": 2, \"r\": 2, \"c\": 1, \"d\": 1]"]},{"type":"paragraph","inlineContent":[{"text":"When ","type":"text"},{"type":"codeVoice","code":"letters.reduce(into:_:)"},{"text":" is called, the following steps occur:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"updateAccumulatingResult","type":"codeVoice"},{"text":" closure is called with the initial","type":"text"},{"type":"text","text":" "},{"text":"accumulating value—","type":"text"},{"code":"[:]","type":"codeVoice"},{"text":" in this case—and the first character of","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"letters"},{"type":"text","text":", modifying the accumulating value by setting "},{"type":"codeVoice","code":"1"},{"type":"text","text":" for the key"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\"a\""},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The closure is called again repeatedly with the updated accumulating","type":"text"},{"type":"text","text":" "},{"text":"value and each element of the sequence.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"When the sequence is exhausted, the accumulating value is returned to","type":"text"},{"text":" ","type":"text"},{"text":"the caller.","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"If the sequence has no elements, "},{"code":"updateAccumulatingResult","type":"codeVoice"},{"text":" is never","type":"text"},{"text":" ","type":"text"},{"text":"executed and ","type":"text"},{"type":"codeVoice","code":"initialResult"},{"type":"text","text":" is the result of the call to"},{"text":" ","type":"text"},{"code":"reduce(into:_:)","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"name":"Complexity","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O("},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":"), where "},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":" is the length of the sequence."}]}],"style":"note","type":"aside"}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64\/Words-swift.struct\/reduce(into:_:)","interfaceLanguage":"swift"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64\/Words-swift.struct","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64\/Words-swift.struct\/Sequence-Implementations"]]},"sections":[],"metadata":{"symbolKind":"method","role":"symbol","externalID":"s:STsE6reduce4into_qd__qd__n_yqd__z_7ElementQztKXEtKlF::SYNTHESIZED::s:s6UInt64V5WordsV","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reduce","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Result","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Result"},{"text":", (","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> ()) "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Result"}],"extendedModule":"Swift","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"title":"reduce(into:_:)"},"variants":[{"paths":["\/documentation\/compute\/uint64\/words-swift.struct\/reduce(into:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UInt64/Words-swift.struct/reduce(into:_:)":{"role":"symbol","abstract":[{"type":"text","text":"Returns the result of combining the elements of the sequence using the"},{"type":"text","text":" "},{"type":"text","text":"given closure."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64\/Words-swift.struct\/reduce(into:_:)","url":"\/documentation\/compute\/uint64\/words-swift.struct\/reduce(into:_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reduce"},{"text":"<","kind":"text"},{"text":"Result","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Result"},{"text":", (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ()) ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result"}],"title":"reduce(into:_:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt64/Words-swift.struct/Sequence-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64\/Words-swift.struct\/Sequence-Implementations","title":"Sequence Implementations","url":"\/documentation\/compute\/uint64\/words-swift.struct\/sequence-implementations","type":"topic","role":"collectionGroup","abstract":[],"kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt64":{"navigatorTitle":[{"text":"UInt64","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","title":"UInt64","abstract":[{"text":"A 64-bit unsigned integer value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type."}],"url":"\/documentation\/compute\/uint64","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt64","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt64/Words-swift.struct":{"navigatorTitle":[{"kind":"identifier","text":"Words"}],"kind":"symbol","role":"symbol","type":"topic","title":"UInt64.Words","abstract":[{"type":"text","text":"A type that represents the words of this integer."}],"url":"\/documentation\/compute\/uint64\/words-swift.struct","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Words","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64\/Words-swift.struct"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]}}}