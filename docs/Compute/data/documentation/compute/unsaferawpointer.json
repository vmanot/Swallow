{"metadata":{"role":"symbol","roleHeading":"Structure","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UnsafeRawPointer","kind":"identifier"}],"externalID":"s:SV","symbolKind":"struct","navigatorTitle":[{"kind":"identifier","text":"UnsafeRawPointer"}],"title":"UnsafeRawPointer","modules":[{"name":"Compute"}]},"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","doc:\/\/com.swallow.documentation.Compute\/7Swallow21BitPatternConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow15ConstantPointerP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18ConstantRawPointerP","doc:\/\/com.swallow.documentation.Compute\/7Swallow32MutableRepresentationConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow15NativeWordSizedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22OpaquePointerInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7PointerP","doc:\/\/com.swallow.documentation.Compute\/7Swallow10RawPointerP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP"],"kind":"relationships","title":"Conforms To"}],"topicSections":[{"title":"Initializers","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/init(_:)-1z2cc","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/init(_:)-1z902","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/init(_:)-2kyf","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/init(_:)-4dxzd","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/init(_:)-84kry","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/init(_:)-8tlvz"],"anchor":"Initializers"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/hashValue"],"anchor":"Instance-Properties","title":"Instance Properties","generated":true},{"title":"Instance Methods","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/alignedDown(for:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/alignedDown(toMultipleOf:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/alignedUp(for:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/alignedUp(toMultipleOf:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/bindMemory(to:capacity:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/deallocate()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/load(fromByteOffset:as:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/loadUnaligned(fromByteOffset:as:)-5wi7f","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/loadUnaligned(fromByteOffset:as:)-8a8c8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/withMemoryRebound(to:capacity:_:)"],"anchor":"Instance-Methods","generated":true},{"title":"Type Aliases","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/Pointee"],"anchor":"Type-Aliases"},{"title":"Default Implementations","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/Comparable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/ConstantPointer-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/CustomReflectable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/Pointer-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/Strideable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/_CustomPlaygroundQuickLookable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/_Pointer-Implementations"],"generated":true,"anchor":"Default-Implementations"}],"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/unsaferawpointer"]}],"sections":[],"abstract":[{"type":"text","text":"A raw pointer for accessing untyped data."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"@frozen","kind":"attribute"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UnsafeRawPointer","kind":"identifier"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"UnsafeRawPointer","type":"codeVoice"},{"type":"text","text":" type provides no automated memory management, no type"},{"type":"text","text":" "},{"text":"safety, and no alignment guarantees. You are responsible for handling the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"life cycle of any memory you work with through unsafe pointers, to avoid"},{"type":"text","text":" "},{"type":"text","text":"leaks or undefined behavior."}]},{"type":"paragraph","inlineContent":[{"text":"Memory that you manually manage can be either ","type":"text"},{"inlineContent":[{"type":"text","text":"untyped"}],"type":"emphasis"},{"type":"text","text":" or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"bound"}]},{"text":" to a","type":"text"},{"text":" ","type":"text"},{"text":"specific type. You use the ","type":"text"},{"code":"UnsafeRawPointer","type":"codeVoice"},{"type":"text","text":" type to access and"},{"type":"text","text":" "},{"text":"manage raw bytes in memory, whether or not that memory has been bound to a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specific type."}]},{"type":"heading","text":"Understanding a Pointer’s Memory State","level":1,"anchor":"Understanding-a-Pointers-Memory-State"},{"inlineContent":[{"text":"The memory referenced by an ","type":"text"},{"type":"codeVoice","code":"UnsafeRawPointer"},{"text":" instance can be in one of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"several states. Many pointer operations must only be applied to pointers"},{"text":" ","type":"text"},{"text":"with memory in a specific state—you must keep track of the state of the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"memory you are working with and understand the changes to that state that"},{"type":"text","text":" "},{"text":"different operations perform. Memory can be untyped and uninitialized, bound","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to a type and uninitialized, or bound to a type and initialized to a value."},{"type":"text","text":" "},{"type":"text","text":"Finally, memory that was allocated previously may have been deallocated,"},{"type":"text","text":" "},{"type":"text","text":"leaving existing pointers referencing unallocated memory."}],"type":"paragraph"},{"type":"heading","level":2,"text":"Raw, Uninitialized Memory","anchor":"Raw-Uninitialized-Memory"},{"inlineContent":[{"text":"Raw memory that has just been allocated is in an ","type":"text"},{"inlineContent":[{"type":"text","text":"uninitialized, untyped"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"state. Uninitialized memory must be initialized with values of a type","type":"text"},{"type":"text","text":" "},{"text":"before it can be used with any typed operations.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To bind uninitialized memory to a type without initializing it, use the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"bindMemory(to:count:)"},{"text":" method. This method returns a typed pointer","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"for further typed access to the memory."}]},{"type":"heading","text":"Typed Memory","anchor":"Typed-Memory","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Memory that has been bound to a type, whether it is initialized or"},{"type":"text","text":" "},{"text":"uninitialized, is typically accessed using typed pointers—instances of","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"UnsafePointer"},{"type":"text","text":" and "},{"code":"UnsafeMutablePointer","type":"codeVoice"},{"type":"text","text":". Initialization, assignment,"},{"type":"text","text":" "},{"type":"text","text":"and deinitialization can be performed using "},{"type":"codeVoice","code":"UnsafeMutablePointer"},{"text":" ","type":"text"},{"text":"methods.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Memory that has been bound to a type can be rebound to a different type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"only after it has been deinitialized or if the bound type is a "},{"inlineContent":[{"type":"text","text":"trivial"},{"type":"text","text":" "},{"text":"type","type":"text"}],"type":"emphasis"},{"text":". Deinitializing typed memory does not unbind that memory’s type. The","type":"text"},{"type":"text","text":" "},{"type":"text","text":"deinitialized memory can be reinitialized with values of the same type,"},{"text":" ","type":"text"},{"text":"bound to a new type, or deallocated.","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A trivial type can be copied bit for bit with no indirection or"},{"text":" ","type":"text"},{"text":"reference-counting operations. Generally, native Swift types that do not","type":"text"},{"type":"text","text":" "},{"type":"text","text":"contain strong or weak references or other forms of indirection are"},{"type":"text","text":" "},{"type":"text","text":"trivial, as are imported C structs and enumerations."}]}],"name":"Note","type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"text":"When reading from  memory as raw","type":"text"},{"text":" ","type":"text"},{"text":"bytes when that memory is bound to a type, you must ensure that you","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"satisfy any alignment requirements."}]},{"level":1,"type":"heading","anchor":"Raw-Pointer-Arithmetic","text":"Raw Pointer Arithmetic"},{"inlineContent":[{"text":"Pointer arithmetic with raw pointers is performed at the byte level. When","type":"text"},{"text":" ","type":"text"},{"text":"you add to or subtract from a raw pointer, the result is a new raw pointer","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"offset by that number of bytes. The following example allocates four bytes"},{"type":"text","text":" "},{"type":"text","text":"of memory and stores "},{"code":"0xFF","type":"codeVoice"},{"text":" in all four bytes:","type":"text"}],"type":"paragraph"},{"code":["let bytesPointer = UnsafeMutableRawPointer.allocate(byteCount: 4, alignment: 4)","bytesPointer.storeBytes(of: 0xFFFF_FFFF, as: UInt32.self)","","\/\/ Load a value from the memory referenced by 'bytesPointer'","let x = bytesPointer.load(as: UInt8.self)       \/\/ 255","","\/\/ Load a value from the last two allocated bytes","let offsetPointer = bytesPointer + 2","let y = offsetPointer.load(as: UInt16.self)     \/\/ 65535"],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"The code above stores the value "},{"code":"0xFFFF_FFFF","type":"codeVoice"},{"text":" into the four newly allocated","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"bytes, and then loads the first byte as a "},{"code":"UInt8","type":"codeVoice"},{"type":"text","text":" instance and the third"},{"type":"text","text":" "},{"text":"and fourth bytes as a ","type":"text"},{"type":"codeVoice","code":"UInt16"},{"type":"text","text":" instance."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Always remember to deallocate any memory that you allocate yourself."}]},{"type":"codeListing","syntax":null,"code":["bytesPointer.deallocate()"]},{"level":1,"text":"Implicit Casting and Bridging","anchor":"Implicit-Casting-and-Bridging","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"When calling a function or method with an ","type":"text"},{"code":"UnsafeRawPointer","type":"codeVoice"},{"text":" parameter, you","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can pass an instance of that specific pointer type, pass an instance of a"},{"type":"text","text":" "},{"type":"text","text":"compatible pointer type, or use Swift’s implicit bridging to pass a"},{"text":" ","type":"text"},{"text":"compatible pointer.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the "},{"type":"codeVoice","code":"print(address:as:)"},{"text":" function in the following code sample","type":"text"},{"text":" ","type":"text"},{"text":"takes an ","type":"text"},{"type":"codeVoice","code":"UnsafeRawPointer"},{"type":"text","text":" instance as its first parameter:"}]},{"syntax":null,"code":["func print<T>(address p: UnsafeRawPointer, as type: T.Type) {","    let value = p.load(as: type)","    print(value)","}"],"type":"codeListing"},{"inlineContent":[{"text":"As is typical in Swift, you can call the ","type":"text"},{"code":"print(address:as:)","type":"codeVoice"},{"type":"text","text":" function with"},{"type":"text","text":" "},{"text":"an ","type":"text"},{"type":"codeVoice","code":"UnsafeRawPointer"},{"type":"text","text":" instance. This example passes "},{"type":"codeVoice","code":"rawPointer"},{"text":" as the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"initial parameter."}],"type":"paragraph"},{"code":["\/\/ 'rawPointer' points to memory initialized with `Int` values.","let rawPointer: UnsafeRawPointer = ...","print(address: rawPointer, as: Int.self)","\/\/ Prints \"42\""],"type":"codeListing","syntax":null},{"inlineContent":[{"text":"Because typed pointers can be implicitly cast to raw pointers when passed","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as a parameter, you can also call "},{"code":"print(address:as:)","type":"codeVoice"},{"text":" with any mutable or","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"immutable typed pointer instance."}],"type":"paragraph"},{"syntax":null,"code":["let intPointer: UnsafePointer<Int> = ...","print(address: intPointer, as: Int.self)","\/\/ Prints \"42\"","","let mutableIntPointer = UnsafeMutablePointer(mutating: intPointer)","print(address: mutableIntPointer, as: Int.self)","\/\/ Prints \"42\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Alternatively, you can use Swift’s ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"implicit bridging","type":"text"}]},{"text":" to pass a pointer to","type":"text"},{"type":"text","text":" "},{"text":"an instance or to the elements of an array. Use inout syntax to implicitly","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"create a pointer to an instance of any type. The following example uses"},{"type":"text","text":" "},{"type":"text","text":"implicit bridging to pass a pointer to "},{"code":"value","type":"codeVoice"},{"type":"text","text":" when calling"},{"text":" ","type":"text"},{"code":"print(address:as:)","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":null,"code":["var value: Int = 23","print(address: &value, as: Int.self)","\/\/ Prints \"23\""]},{"inlineContent":[{"text":"An immutable pointer to the elements of an array is implicitly created when","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you pass the array as an argument. This example uses implicit bridging to"},{"text":" ","type":"text"},{"text":"pass a pointer to the elements of ","type":"text"},{"code":"numbers","type":"codeVoice"},{"type":"text","text":" when calling"},{"type":"text","text":" "},{"type":"codeVoice","code":"print(address:as:)"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["let numbers = [5, 10, 15, 20]","print(address: numbers, as: Int.self)","\/\/ Prints \"5\""],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use inout syntax to pass a mutable pointer to the elements of"},{"text":" ","type":"text"},{"text":"an array. Because ","type":"text"},{"type":"codeVoice","code":"print(address:as:)"},{"text":" requires an immutable pointer,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"although this is syntactically valid, it isn’t necessary."}]},{"syntax":null,"code":["var mutableNumbers = numbers","print(address: &mutableNumbers, as: Int.self)"],"type":"codeListing"},{"content":[{"inlineContent":[{"type":"text","text":"The pointer created through implicit bridging of an instance"},{"type":"text","text":" "},{"type":"text","text":"or of an array’s elements is only valid during the execution of the"},{"type":"text","text":" "},{"text":"called function. Escaping the pointer to use after the execution of the","type":"text"},{"type":"text","text":" "},{"text":"function is undefined behavior. In particular, do not use implicit","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"bridging when calling an "},{"code":"UnsafeRawPointer","type":"codeVoice"},{"type":"text","text":" initializer."}],"type":"paragraph"}],"style":"important","type":"aside","name":"Important"}],"kind":"content"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer":{"role":"symbol","abstract":[{"text":"A raw pointer for accessing untyped data.","type":"text"}],"title":"UnsafeRawPointer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafeRawPointer"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer","kind":"symbol","navigatorTitle":[{"text":"UnsafeRawPointer","kind":"identifier"}],"url":"\/documentation\/compute\/unsaferawpointer","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/Pointee":{"title":"UnsafeRawPointer.Pointee","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"Pointee","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/unsaferawpointer\/pointee","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Pointee"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/Pointee","abstract":[]},"doc://com.swallow.documentation.Compute/7Swallow7PointerP":{"title":"Swallow.Pointer","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7PointerP"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/init(_:)-4dxzd":{"role":"symbol","title":"init(_:)","kind":"symbol","url":"\/documentation\/compute\/unsaferawpointer\/init(_:)-4dxzd","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"?("},{"text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv","kind":"typeIdentifier"},{"text":"?)","kind":"text"}],"abstract":[{"type":"text","text":"Creates a new raw pointer from the given mutable raw pointer."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/init(_:)-4dxzd","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/Strideable-Implementations":{"kind":"article","url":"\/documentation\/compute\/unsaferawpointer\/strideable-implementations","type":"topic","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/Strideable-Implementations","title":"Strideable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/loadUnaligned(fromByteOffset:as:)-8a8c8":{"abstract":[{"type":"text","text":"Returns a new instance of the given type, constructed from the raw memory"},{"text":" ","type":"text"},{"text":"at the specified offset.","type":"text"}],"type":"topic","title":"loadUnaligned(fromByteOffset:as:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"loadUnaligned","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"fromByteOffset","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"as"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) -> "},{"text":"T","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/loadUnaligned(fromByteOffset:as:)-8a8c8","url":"\/documentation\/compute\/unsaferawpointer\/loadunaligned(frombyteoffset:as:)-8a8c8"},"doc://com.swallow.documentation.Compute/7Swallow10RawPointerP":{"title":"Swallow.RawPointer","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow10RawPointerP"},"doc://com.swallow.documentation.Compute/7Swallow15ConstantPointerP":{"title":"Swallow.ConstantPointer","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow15ConstantPointerP"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/_Pointer-Implementations":{"url":"\/documentation\/compute\/unsaferawpointer\/_pointer-implementations","role":"collectionGroup","title":"_Pointer Implementations","abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/_Pointer-Implementations","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Strideable":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/strideable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Strideable"}],"navigatorTitle":[{"text":"Strideable","kind":"identifier"}],"abstract":[{"type":"text","text":"A type representing continuous, one-dimensional values that can be offset"},{"type":"text","text":" "},{"type":"text","text":"and measured."}],"title":"Strideable"},"doc://com.swallow.documentation.Compute/7Swallow15NativeWordSizedP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow15NativeWordSizedP","title":"Swallow.NativeWordSized","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/loadUnaligned(fromByteOffset:as:)-5wi7f":{"abstract":[{"text":"Returns a new instance of the given type, constructed from the raw memory","type":"text"},{"text":" ","type":"text"},{"text":"at the specified offset.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"loadUnaligned","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"fromByteOffset","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":", ","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"role":"symbol","url":"\/documentation\/compute\/unsaferawpointer\/loadunaligned(frombyteoffset:as:)-5wi7f","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/loadUnaligned(fromByteOffset:as:)-5wi7f","title":"loadUnaligned(fromByteOffset:as:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/alignedDown(for:)":{"abstract":[{"type":"text","text":"Obtain the preceding pointer properly aligned to store a value of type"},{"type":"text","text":" "},{"code":"T","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/alignedDown(for:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"alignedDown"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"for","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":".Type) -> ","kind":"text"},{"text":"UnsafeRawPointer","kind":"typeIdentifier","preciseIdentifier":"s:SV"}],"role":"symbol","title":"alignedDown(for:)","url":"\/documentation\/compute\/unsaferawpointer\/aligneddown(for:)","kind":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/BitwiseCopyable":{"title":"BitwiseCopyable","abstract":[],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BitwiseCopyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","url":"\/documentation\/compute\/bitwisecopyable","navigatorTitle":[{"kind":"identifier","text":"BitwiseCopyable"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/CustomReflectable-Implementations":{"abstract":[],"role":"collectionGroup","kind":"article","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/CustomReflectable-Implementations","url":"\/documentation\/compute\/unsaferawpointer\/customreflectable-implementations","title":"CustomReflectable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/init(_:)-1z902":{"abstract":[{"type":"text","text":"Creates a new raw pointer from the given typed pointer."}],"url":"\/documentation\/compute\/unsaferawpointer\/init(_:)-1z902","type":"topic","title":"init(_:)","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"?<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"UnsafePointer","kind":"typeIdentifier","preciseIdentifier":"s:SP"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">?)"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/init(_:)-1z902","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/withMemoryRebound(to:capacity:_:)":{"url":"\/documentation\/compute\/unsaferawpointer\/withmemoryrebound(to:capacity:_:)","abstract":[{"text":"Executes the given closure while temporarily binding memory to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the specified number of instances of type "},{"code":"T","type":"codeVoice"},{"type":"text","text":"."}],"title":"withMemoryRebound(to:capacity:_:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/withMemoryRebound(to:capacity:_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withMemoryRebound"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":", ","kind":"text"},{"text":"E","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Result","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"capacity"},{"kind":"text","text":": "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":") -> "},{"text":"Result","kind":"typeIdentifier"}]},"doc://com.swallow.documentation.Compute/7Swallow18ConstantRawPointerP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18ConstantRawPointerP","title":"Swallow.ConstantRawPointer","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/Pointer-Implementations":{"abstract":[],"title":"Pointer Implementations","url":"\/documentation\/compute\/unsaferawpointer\/pointer-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/Pointer-Implementations","kind":"article","type":"topic","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/deallocate()":{"kind":"symbol","title":"deallocate()","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/deallocate()","role":"symbol","url":"\/documentation\/compute\/unsaferawpointer\/deallocate()","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"deallocate","kind":"identifier"},{"kind":"text","text":"()"}],"abstract":[{"text":"Deallocates the previously allocated memory block referenced by this","type":"text"},{"text":" ","type":"text"},{"text":"pointer.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/init(_:)-2kyf":{"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"?<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:SA","text":"AutoreleasingUnsafeMutablePointer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">?)"}],"abstract":[{"type":"text","text":"Creates a new raw pointer from an "},{"code":"AutoreleasingUnsafeMutablePointer","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"instance."}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/init(_:)-2kyf","title":"init(_:)","url":"\/documentation\/compute\/unsaferawpointer\/init(_:)-2kyf","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/alignedUp(for:)":{"url":"\/documentation\/compute\/unsaferawpointer\/alignedup(for:)","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Obtain the next pointer properly aligned to store a value of type "},{"type":"codeVoice","code":"T"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/alignedUp(for:)","title":"alignedUp(for:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"alignedUp","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"for","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"text":".Type) -> ","kind":"text"},{"preciseIdentifier":"s:SV","kind":"typeIdentifier","text":"UnsafeRawPointer"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"type":"topic","title":"Equatable","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","role":"symbol","url":"\/documentation\/compute\/equatable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/Comparable-Implementations":{"kind":"article","url":"\/documentation\/compute\/unsaferawpointer\/comparable-implementations","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/Comparable-Implementations","type":"topic","title":"Comparable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/_CustomPlaygroundQuickLookable-Implementations":{"kind":"article","type":"topic","url":"\/documentation\/compute\/unsaferawpointer\/_customplaygroundquicklookable-implementations","abstract":[],"title":"_CustomPlaygroundQuickLookable Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/_CustomPlaygroundQuickLookable-Implementations","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/alignedDown(toMultipleOf:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"alignedDown","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"toMultipleOf"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":") -> ","kind":"text"},{"text":"UnsafeRawPointer","kind":"typeIdentifier","preciseIdentifier":"s:SV"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/alignedDown(toMultipleOf:)","role":"symbol","url":"\/documentation\/compute\/unsaferawpointer\/aligneddown(tomultipleof:)","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Obtain the preceding pointer whose bit pattern is a multiple of"},{"type":"text","text":" "},{"code":"alignment","type":"codeVoice"},{"type":"text","text":"."}],"title":"alignedDown(toMultipleOf:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/Equatable-Implementations":{"title":"Equatable Implementations","type":"topic","abstract":[],"kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/Equatable-Implementations","url":"\/documentation\/compute\/unsaferawpointer\/equatable-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/init(_:)-84kry":{"fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"UnsafePointer","kind":"typeIdentifier","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">)"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/init(_:)-84kry","kind":"symbol","abstract":[{"type":"text","text":"Creates a new raw pointer from the given typed pointer."}],"type":"topic","url":"\/documentation\/compute\/unsaferawpointer\/init(_:)-84kry","title":"init(_:)"},"doc://com.swallow.documentation.Compute/7Swallow22OpaquePointerInitiableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22OpaquePointerInitiableP","title":"Swallow.OpaquePointerInitiable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/Hashable-Implementations":{"url":"\/documentation\/compute\/unsaferawpointer\/hashable-implementations","abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/Hashable-Implementations","role":"collectionGroup","type":"topic","title":"Hashable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Hashable"}],"title":"Hashable","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that can be hashed into a "},{"type":"codeVoice","code":"Hasher"},{"type":"text","text":" to produce an integer hash value."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","url":"\/documentation\/compute\/hashable","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/bindMemory(to:capacity:)":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"bindMemory","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"capacity","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:SP","text":"UnsafePointer"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/bindMemory(to:capacity:)","title":"bindMemory(to:capacity:)","abstract":[{"type":"text","text":"Binds the memory to the specified type and returns a typed pointer to the"},{"type":"text","text":" "},{"type":"text","text":"bound memory."}],"url":"\/documentation\/compute\/unsaferawpointer\/bindmemory(to:capacity:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable":{"url":"\/documentation\/compute\/comparable","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared using the relational operators ","type":"text"},{"code":"<","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Comparable"}],"title":"Comparable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Comparable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/7Swallow21BitPatternConvertibleP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21BitPatternConvertibleP","title":"Swallow.BitPatternConvertible","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow32MutableRepresentationConvertibleP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow32MutableRepresentationConvertibleP","title":"Swallow.MutableRepresentationConvertible","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow20ByteTupleConvertibleP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP","title":"Swallow.ByteTupleConvertible","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomDebugStringConvertible":{"url":"\/documentation\/compute\/customdebugstringconvertible","role":"symbol","abstract":[{"text":"A type with a customized textual representation suitable for debugging","type":"text"},{"type":"text","text":" "},{"text":"purposes.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","title":"CustomDebugStringConvertible","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomDebugStringConvertible","kind":"identifier"}],"navigatorTitle":[{"text":"CustomDebugStringConvertible","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow7TrivialP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP","title":"Swallow.Trivial","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/init(_:)-8tlvz":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/init(_:)-8tlvz","role":"symbol","title":"init(_:)","url":"\/documentation\/compute\/unsaferawpointer\/init(_:)-8tlvz","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Creates a new raw pointer from the given mutable raw pointer."}],"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/hashValue":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/hashValue","title":"hashValue","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"hashValue","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"The hash value."}],"role":"symbol","url":"\/documentation\/compute\/unsaferawpointer\/hashvalue","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomReflectable":{"url":"\/documentation\/compute\/customreflectable","role":"symbol","abstract":[{"text":"A type that explicitly supplies its own mirror.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","title":"CustomReflectable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomReflectable"}],"navigatorTitle":[{"kind":"identifier","text":"CustomReflectable"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/ConstantPointer-Implementations":{"role":"collectionGroup","title":"ConstantPointer Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/ConstantPointer-Implementations","url":"\/documentation\/compute\/unsaferawpointer\/constantpointer-implementations","type":"topic","kind":"article","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/load(fromByteOffset:as:)":{"abstract":[{"type":"text","text":"Returns a new instance of the given type, constructed from the raw memory"},{"type":"text","text":" "},{"type":"text","text":"at the specified offset."}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/load(fromByteOffset:as:)","type":"topic","url":"\/documentation\/compute\/unsaferawpointer\/load(frombyteoffset:as:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"load"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"fromByteOffset","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"as","kind":"externalParam"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":".Type) -> "},{"text":"T","kind":"typeIdentifier"}],"title":"load(fromByteOffset:as:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/init(_:)-1z2cc":{"abstract":[{"type":"text","text":"Creates a new raw pointer from an "},{"type":"codeVoice","code":"AutoreleasingUnsafeMutablePointer"},{"type":"text","text":" "},{"type":"text","text":"instance."}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"AutoreleasingUnsafeMutablePointer","kind":"typeIdentifier","preciseIdentifier":"s:SA"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"role":"symbol","url":"\/documentation\/compute\/unsaferawpointer\/init(_:)-1z2cc","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/init(_:)-1z2cc","title":"init(_:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/alignedUp(toMultipleOf:)":{"role":"symbol","url":"\/documentation\/compute\/unsaferawpointer\/alignedup(tomultipleof:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"alignedUp"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"toMultipleOf"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":") -> ","kind":"text"},{"text":"UnsafeRawPointer","kind":"typeIdentifier","preciseIdentifier":"s:SV"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/alignedUp(toMultipleOf:)","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Obtain the next pointer whose bit pattern is a multiple of "},{"code":"alignment","type":"codeVoice"},{"type":"text","text":"."}],"title":"alignedUp(toMultipleOf:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"title":"Copyable","abstract":[{"type":"text","text":"A type whose values can be implicitly or explicitly copied."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Copyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","url":"\/documentation\/compute\/copyable","navigatorTitle":[{"text":"Copyable","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic"}}}