{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withContiguousStorageIfAvailable"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"body","kind":"internalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:SR","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer","kind":"typeIdentifier","text":"UnsafeBufferPointer"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"A closure that receives an "},{"code":"UnsafeBufferPointer","type":"codeVoice"},{"text":" to the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"sequence’s contiguous storage."}],"type":"paragraph"}],"name":"body"}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"inlineContent":[{"type":"text","text":"The value returned from "},{"type":"codeVoice","code":"body"},{"text":", unless the sequence doesn’t","type":"text"},{"type":"text","text":" "},{"text":"support contiguous storage, in which case the method ignores ","type":"text"},{"type":"codeVoice","code":"body"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method calls "},{"type":"codeVoice","code":"body(buffer)"},{"text":", where ","type":"text"},{"type":"codeVoice","code":"buffer"},{"type":"text","text":" is a pointer to the"},{"type":"text","text":" "},{"text":"collection’s contiguous storage. If the contiguous storage doesn’t exist,","type":"text"},{"text":" ","type":"text"},{"text":"the collection creates it. If the collection doesn’t support an internal","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"representation in a form of contiguous storage, the method doesn’t call"},{"text":" ","type":"text"},{"code":"body","type":"codeVoice"},{"text":" — it immediately returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"The optimizer can often eliminate bounds- and uniqueness-checking"},{"type":"text","text":" "},{"text":"within an algorithm. When that fails, however, invoking the same","type":"text"},{"text":" ","type":"text"},{"text":"algorithm on the ","type":"text"},{"code":"buffer","type":"codeVoice"},{"text":" argument may let you trade safety for speed.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Successive calls to this method may provide a different pointer on each","type":"text"},{"type":"text","text":" "},{"type":"text","text":"call. Don’t store "},{"type":"codeVoice","code":"buffer"},{"type":"text","text":" outside of this method."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" that provides its own implementation of this method"},{"type":"text","text":" "},{"type":"text","text":"must provide contiguous storage to its elements in the same order"},{"text":" ","type":"text"},{"text":"as they appear in the collection. This guarantees that it’s possible to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"generate contiguous mutable storage to any of its subsequences by slicing"},{"type":"text","text":" "},{"code":"buffer","type":"codeVoice"},{"text":" with a range formed from the distances to the subsequence’s","type":"text"},{"type":"text","text":" "},{"code":"startIndex","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"endIndex"},{"type":"text","text":", respectively."}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionDifference","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionDifference\/Sequence-Implementations"]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionDifference\/withContiguousStorageIfAvailable(_:)"},"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"text":"Executes a closure on the sequence’s contiguous storage.","type":"text"}],"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"withContiguousStorageIfAvailable"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","preciseIdentifier":"s:SR","text":"UnsafeBufferPointer"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"modules":[{"name":"Compute","relatedModules":["Swift"]}],"externalID":"s:STsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF::SYNTHESIZED::s:s20CollectionDifferenceV","extendedModule":"Swift","role":"symbol","title":"withContiguousStorageIfAvailable(_:)","roleHeading":"Instance Method","symbolKind":"method"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/collectiondifference\/withcontiguousstorageifavailable(_:)"]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/CollectionDifference/withContiguousStorageIfAvailable(_:)":{"kind":"symbol","abstract":[{"type":"text","text":"Executes a closure on the sequence’s contiguous storage."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionDifference\/withContiguousStorageIfAvailable(_:)","title":"withContiguousStorageIfAvailable(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withContiguousStorageIfAvailable"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">(("},{"preciseIdentifier":"s:SR","text":"UnsafeBufferPointer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":"?","kind":"text"}],"type":"topic","url":"\/documentation\/compute\/collectiondifference\/withcontiguousstorageifavailable(_:)","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/CollectionDifference/Sequence-Implementations":{"abstract":[],"role":"collectionGroup","url":"\/documentation\/compute\/collectiondifference\/sequence-implementations","title":"Sequence Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionDifference\/Sequence-Implementations","kind":"article","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/CollectionDifference":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CollectionDifference","kind":"identifier"}],"url":"\/documentation\/compute\/collectiondifference","type":"topic","title":"CollectionDifference","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CollectionDifference"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionDifference","abstract":[{"type":"text","text":"A collection of insertions and removals that describe the difference"},{"text":" ","type":"text"},{"text":"between two ordered collection states.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeBufferPointer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer","abstract":[{"type":"text","text":"A nonowning collection interface to a buffer of"},{"type":"text","text":" "},{"text":"elements stored contiguously in memory.","type":"text"}],"role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeBufferPointer","kind":"identifier"}],"title":"UnsafeBufferPointer","navigatorTitle":[{"kind":"identifier","text":"UnsafeBufferPointer"}],"url":"\/documentation\/compute\/unsafebufferpointer"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]}}}