{"metadata":{"fragments":[{"kind":"identifier","text":"init"},{"text":"?<","kind":"text"},{"text":"Encoding","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"validating","kind":"externalParam"},{"text":": some ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST","text":"Sequence"},{"kind":"text","text":", "},{"text":"as","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Encoding","kind":"typeIdentifier"},{"kind":"text","text":".Type)"}],"role":"symbol","extendedModule":"Swift","modules":[{"name":"Compute","relatedModules":["Swift"]}],"roleHeading":"Initializer","platforms":[{"name":"iOS","unavailable":false,"beta":false,"deprecated":false,"introducedAt":"18.0"},{"deprecated":false,"name":"macOS","unavailable":false,"beta":false,"introducedAt":"15.0"},{"unavailable":false,"name":"tvOS","beta":false,"deprecated":false,"introducedAt":"18.0"},{"beta":false,"unavailable":false,"introducedAt":"2.0","deprecated":false,"name":"visionOS"},{"introducedAt":"11.0","name":"watchOS","unavailable":false,"beta":false,"deprecated":false}],"externalID":"s:SS10validating2asSSSgq__xmtcs16_UnicodeEncodingRzSTR_7ElementQy_8CodeUnitRtzr0_lufc","symbolKind":"init","title":"init(validating:as:)"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/init(validating:as:)-84qr9"},"kind":"symbol","sections":[],"abstract":[{"text":"Creates a new string by copying and validating the sequence of","type":"text"},{"type":"text","text":" "},{"text":"code units passed in, according to the specified encoding.","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"?<"},{"text":"Encoding","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"validating","kind":"externalParam"},{"kind":"text","text":" "},{"text":"codeUnits","kind":"internalParam"},{"text":": some ","kind":"text"},{"kind":"typeIdentifier","text":"Sequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","preciseIdentifier":"s:ST"},{"kind":"text","text":", "},{"kind":"externalParam","text":"as"},{"text":" ","kind":"text"},{"text":"encoding","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Encoding"},{"kind":"text","text":".Type) "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"Encoding","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"_UnicodeEncoding","kind":"typeIdentifier"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A sequence of code units that encode a "},{"type":"codeVoice","code":"String"}]}],"name":"codeUnits"},{"name":"encoding","content":[{"inlineContent":[{"text":"A conformer to ","type":"text"},{"code":"Unicode.Encoding","type":"codeVoice"},{"text":" to be used","type":"text"},{"text":" ","type":"text"},{"text":"to decode ","type":"text"},{"type":"codeVoice","code":"codeUnits"},{"type":"text","text":"."}],"type":"paragraph"}]}]},{"content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This initializer does not try to repair ill-formed code unit sequences."},{"type":"text","text":" "},{"text":"If any are found, the result of the initializer is ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"The following example calls this initializer with the contents of two","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"different arrays—first with a well-formed UTF-8 code unit sequence and"},{"text":" ","type":"text"},{"type":"text","text":"then with an ill-formed UTF-16 code unit sequence."}],"type":"paragraph"},{"code":["let validUTF8: [UInt8] = [67, 97, 0, 102, 195, 169]","let valid = String(validating: validUTF8, as: UTF8.self)","print(valid ?? \"nil\")","\/\/ Prints \"Café\"","","let invalidUTF16: [UInt16] = [0x41, 0x42, 0xd801]","let invalid = String(validating: invalidUTF16, as: UTF16.self)","print(invalid ?? \"nil\")","\/\/ Prints \"nil\""],"type":"codeListing","syntax":null}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/string\/init(validating:as:)-84qr9"]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/String/init(validating:as:)-84qr9":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/init(validating:as:)-84qr9","title":"init(validating:as:)","url":"\/documentation\/compute\/string\/init(validating:as:)-84qr9","role":"symbol","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?<"},{"text":"Encoding","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"validating"},{"text":": some ","kind":"text"},{"preciseIdentifier":"s:ST","kind":"typeIdentifier","text":"Sequence"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"as"},{"text":": ","kind":"text"},{"text":"Encoding","kind":"typeIdentifier"},{"text":".Type)","kind":"text"}],"abstract":[{"type":"text","text":"Creates a new string by copying and validating the sequence of"},{"type":"text","text":" "},{"type":"text","text":"code units passed in, according to the specified encoding."}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/String":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"String"}],"title":"String","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"String","kind":"identifier"}],"abstract":[{"type":"text","text":"A Unicode string value that is a collection of characters."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/string"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"url":"\/documentation\/compute\/sequence","navigatorTitle":[{"kind":"identifier","text":"Sequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","title":"Sequence","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Sequence","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}]}}}