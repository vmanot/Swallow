{"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/dictionary\/merging(_:uniquingkeyswith:)-9bik6"]}],"metadata":{"modules":[{"relatedModules":["Swift"],"name":"Compute"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"merging"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"uniquingKeysWith"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> [","kind":"text"},{"kind":"typeIdentifier","text":"Key"},{"kind":"text","text":" : "},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":"]"}],"symbolKind":"method","externalID":"s:SD7merging_16uniquingKeysWithSDyxq_Gqd__n_q_q__q_tKXEtKSTRd__x_q_t7ElementRtd__lF","extendedModule":"Swift","role":"symbol","title":"merging(_:uniquingKeysWith:)","conformance":{"constraints":[{"type":"codeVoice","code":"Key"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"roleHeading":"Instance Method"},"sections":[],"kind":"symbol","abstract":[{"type":"text","text":"Creates a dictionary by merging key-value pairs in a sequence into the"},{"text":" ","type":"text"},{"type":"text","text":"dictionary, using a combining closure to determine the value for"},{"type":"text","text":" "},{"type":"text","text":"duplicate keys."}],"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary\/merging(_:uniquingKeysWith:)-9bik6","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"merging"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"other"},{"text":": ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"uniquingKeysWith","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"combine","kind":"internalParam"},{"kind":"text","text":": ("},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> ["},{"text":"Key","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"] "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","text":"Sequence","kind":"typeIdentifier","preciseIdentifier":"s:ST"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"kind":"text","text":" == ("},{"text":"Key","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":")"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"other","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A sequence of key-value pairs."}]}]},{"name":"combine","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes the current and new values for any"},{"text":" ","type":"text"},{"type":"text","text":"duplicate keys. The closure returns the desired value for the final"},{"text":" ","type":"text"},{"text":"dictionary.","type":"text"}]}]}]},{"kind":"content","content":[{"anchor":"return-value","type":"heading","text":"Return Value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A new dictionary with the combined keys and values of this"},{"text":" ","type":"text"},{"type":"text","text":"dictionary and "},{"code":"other","type":"codeVoice"},{"type":"text","text":"."}]}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"combine"},{"type":"text","text":" closure to select a value to use in the returned"},{"text":" ","type":"text"},{"text":"dictionary, or to combine existing and new values. As the key-value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"pairs are merged with the dictionary, the "},{"code":"combine","type":"codeVoice"},{"type":"text","text":" closure is called"},{"type":"text","text":" "},{"text":"with the current and new values for any duplicate keys that are","type":"text"},{"text":" ","type":"text"},{"text":"encountered.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example shows how to choose the current or new values for any"},{"text":" ","type":"text"},{"type":"text","text":"duplicate keys:"}]},{"code":["let dictionary = [\"a\": 1, \"b\": 2]","let newKeyValues = zip([\"a\", \"b\"], [3, 4])","","let keepingCurrent = dictionary.merging(newKeyValues) { (current, _) in current }","\/\/ [\"b\": 2, \"a\": 1]","let replacingCurrent = dictionary.merging(newKeyValues) { (_, new) in new }","\/\/ [\"b\": 4, \"a\": 3]"],"type":"codeListing","syntax":null}]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"url":"\/documentation\/compute\/sequence","navigatorTitle":[{"kind":"identifier","text":"Sequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","title":"Sequence","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Sequence","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Dictionary/merging(_:uniquingKeysWith:)-9bik6":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"merging","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"uniquingKeysWith"},{"kind":"text","text":": ("},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ["},{"text":"Key","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"]"}],"conformance":{"constraints":[{"code":"Key","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"kind":"symbol","abstract":[{"type":"text","text":"Creates a dictionary by merging key-value pairs in a sequence into the"},{"text":" ","type":"text"},{"type":"text","text":"dictionary, using a combining closure to determine the value for"},{"type":"text","text":" "},{"text":"duplicate keys.","type":"text"}],"title":"merging(_:uniquingKeysWith:)","type":"topic","url":"\/documentation\/compute\/dictionary\/merging(_:uniquingkeyswith:)-9bik6","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary\/merging(_:uniquingKeysWith:)-9bik6"},"doc://com.swallow.documentation.Compute/documentation/Compute/Dictionary":{"role":"symbol","title":"Dictionary","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Dictionary"}],"type":"topic","kind":"symbol","abstract":[{"text":"A collection whose elements are key-value pairs.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary","navigatorTitle":[{"text":"Dictionary","kind":"identifier"}],"url":"\/documentation\/compute\/dictionary"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequenceâ€™s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]}}}