{"abstract":[{"type":"text","text":"Creates a sequence of pairs built out of two underlying sequences."}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/zip(_:_:)"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"zip","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Sequence1","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Sequence2","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"sequence1"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Sequence1"},{"kind":"text","text":", "},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"sequence2"},{"text":": ","kind":"text"},{"text":"Sequence2","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Zip2Sequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Zip2Sequence","preciseIdentifier":"s:s12Zip2SequenceV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Sequence1","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Sequence2","kind":"typeIdentifier"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Sequence1"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","text":"Sequence","preciseIdentifier":"s:ST"},{"text":", ","kind":"text"},{"text":"Sequence2","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:ST","text":"Sequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence"}],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"text":"The first sequence or collection to zip.","type":"text"}],"type":"paragraph"}],"name":"sequence1"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The second sequence or collection to zip."}]}],"name":"sequence2"}]},{"kind":"content","content":[{"type":"heading","anchor":"return-value","text":"Return Value","level":2},{"type":"paragraph","inlineContent":[{"text":"A sequence of tuple pairs, where the elements of each pair are","type":"text"},{"text":" ","type":"text"},{"text":"corresponding elements of ","type":"text"},{"type":"codeVoice","code":"sequence1"},{"type":"text","text":" and "},{"code":"sequence2","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"inlineContent":[{"text":"In the ","type":"text"},{"code":"Zip2Sequence","type":"codeVoice"},{"text":" instance returned by this function, the elements of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"i"}]},{"type":"text","text":"th pair are the "},{"inlineContent":[{"text":"i","type":"text"}],"type":"emphasis"},{"type":"text","text":"th elements of each underlying sequence. The"},{"type":"text","text":" "},{"type":"text","text":"following example uses the "},{"type":"codeVoice","code":"zip(_:_:)"},{"text":" function to iterate over an array","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of strings and a countable range at the same time:"}],"type":"paragraph"},{"syntax":null,"code":["let words = [\"one\", \"two\", \"three\", \"four\"]","let numbers = 1...4","","for (word, number) in zip(words, numbers) {","    print(\"\\(word): \\(number)\")","}","\/\/ Prints \"one: 1\"","\/\/ Prints \"two: 2\"","\/\/ Prints \"three: 3\"","\/\/ Prints \"four: 4\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If the two sequences passed to ","type":"text"},{"code":"zip(_:_:)","type":"codeVoice"},{"type":"text","text":" are different lengths, the"},{"text":" ","type":"text"},{"text":"resulting sequence is the same length as the shorter sequence. In this","type":"text"},{"type":"text","text":" "},{"type":"text","text":"example, the resulting array is the same length as "},{"code":"words","type":"codeVoice"},{"text":":","type":"text"}]},{"code":["let naturalNumbers = 1...Int.max","let zipped = Array(zip(words, naturalNumbers))","\/\/ zipped == [(\"one\", 1), (\"two\", 2), (\"three\", 3), (\"four\", 4)]"],"type":"codeListing","syntax":null}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/zip(_:_:)","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"Compute"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"zip","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Sequence1","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Sequence2","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Sequence1"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Sequence2"},{"text":") -> ","kind":"text"},{"text":"Zip2Sequence","preciseIdentifier":"s:s12Zip2SequenceV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Sequence1","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Sequence2","kind":"typeIdentifier"},{"text":">","kind":"text"}],"externalID":"s:s3zipys12Zip2SequenceVyxq_Gx_q_tSTRzSTR_r0_lF","roleHeading":"Function","title":"zip(_:_:)","symbolKind":"func","role":"symbol"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/zip(_:_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/zip(_:_:)","type":"topic","url":"\/documentation\/compute\/zip(_:_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"zip","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Sequence1"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Sequence2"},{"text":">(","kind":"text"},{"text":"Sequence1","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Sequence2"},{"text":") -> ","kind":"text"},{"text":"Zip2Sequence","kind":"typeIdentifier","preciseIdentifier":"s:s12Zip2SequenceV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Sequence1"},{"text":", ","kind":"text"},{"text":"Sequence2","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"zip(_:_:)","role":"symbol","abstract":[{"type":"text","text":"Creates a sequence of pairs built out of two underlying sequences."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Zip2Sequence":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Zip2Sequence","kind":"identifier"}],"url":"\/documentation\/compute\/zip2sequence","type":"topic","title":"Zip2Sequence","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"Zip2Sequence","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Zip2Sequence","abstract":[{"type":"text","text":"A sequence of pairs built out of two underlying sequences."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"url":"\/documentation\/compute\/sequence","navigatorTitle":[{"kind":"identifier","text":"Sequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","title":"Sequence","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Sequence","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}