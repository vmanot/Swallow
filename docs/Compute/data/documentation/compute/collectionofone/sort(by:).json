{"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionOfOne\/sort(by:)","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionOfOne","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionOfOne\/MutableCollection-Implementations"]]},"abstract":[{"type":"text","text":"Sorts the collection in place, using the given predicate as the"},{"type":"text","text":" "},{"type":"text","text":"comparison between elements."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/collectionofone\/sort(by:)"]}],"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"mutating","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"sort","kind":"identifier"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"areInIncreasingOrder"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"}],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"areInIncreasingOrder","content":[{"type":"paragraph","inlineContent":[{"text":"A predicate that returns ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" if its"},{"type":"text","text":" "},{"text":"first argument should be ordered before its second argument;","type":"text"},{"text":" ","type":"text"},{"text":"otherwise, ","type":"text"},{"type":"codeVoice","code":"false"},{"text":". If ","type":"text"},{"type":"codeVoice","code":"areInIncreasingOrder"},{"type":"text","text":" throws an error during"},{"type":"text","text":" "},{"text":"the sort, the elements may be in a different order, but none will be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"lost."}]}]}]},{"content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"When you want to sort a collection of elements that donâ€™t conform to","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" protocol, pass a closure to this method that returns"},{"text":" ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" when the first element should be ordered before the second."}]},{"type":"paragraph","inlineContent":[{"text":"In the following example, the closure provides an ordering for an array","type":"text"},{"type":"text","text":" "},{"text":"of a custom enumeration that describes an HTTP response. The predicate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"orders errors before successes and sorts the error responses by their"},{"text":" ","type":"text"},{"text":"error code.","type":"text"}]},{"code":["enum HTTPResponse {","    case ok","    case error(Int)","}","","var responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]","responses.sort {","    switch ($0, $1) {","    \/\/ Order errors by code","    case let (.error(aCode), .error(bCode)):","        return aCode < bCode","","    \/\/ All successes are equivalent, so none is before any other","    case (.ok, .ok): return false","","    \/\/ Order errors before successes","    case (.error, .ok): return true","    case (.ok, .error): return false","    }","}","print(responses)","\/\/ Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\""],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, use this method to sort a collection of elements that do"},{"text":" ","type":"text"},{"text":"conform to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":" when you want the sort to be descending instead","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of ascending. Pass the greater-than operator ("},{"type":"codeVoice","code":">"},{"type":"text","text":") operator as the"},{"type":"text","text":" "},{"type":"text","text":"predicate."}]},{"code":["var students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]","students.sort(by: >)","print(students)","\/\/ Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\""],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"areInIncreasingOrder"},{"type":"text","text":" must be a "},{"inlineContent":[{"text":"strict weak ordering","type":"text"}],"type":"emphasis"},{"text":" over the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"elements. That is, for any elements "},{"type":"codeVoice","code":"a"},{"text":", ","type":"text"},{"type":"codeVoice","code":"b"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"c"},{"text":", the following","type":"text"},{"type":"text","text":" "},{"type":"text","text":"conditions must hold:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"areInIncreasingOrder(a, a)","type":"codeVoice"},{"text":" is always ","type":"text"},{"type":"codeVoice","code":"false"},{"text":". (Irreflexivity)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"areInIncreasingOrder(a, b)"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"areInIncreasingOrder(b, c)"},{"type":"text","text":" are"},{"type":"text","text":" "},{"type":"text","text":"both "},{"type":"codeVoice","code":"true"},{"type":"text","text":", then "},{"type":"codeVoice","code":"areInIncreasingOrder(a, c)"},{"text":" is also ","type":"text"},{"code":"true","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(Transitive comparability)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Two elements are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"incomparable"}]},{"type":"text","text":" if neither is ordered before the other"},{"type":"text","text":" "},{"text":"according to the predicate. If ","type":"text"},{"type":"codeVoice","code":"a"},{"text":" and ","type":"text"},{"code":"b","type":"codeVoice"},{"type":"text","text":" are incomparable, and "},{"type":"codeVoice","code":"b"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"c","type":"codeVoice"},{"text":" are incomparable, then ","type":"text"},{"code":"a","type":"codeVoice"},{"type":"text","text":" and "},{"code":"c","type":"codeVoice"},{"text":" are also incomparable.","type":"text"},{"type":"text","text":" "},{"text":"(Transitive incomparability)","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sorting algorithm is guaranteed to be stable. A stable sort"},{"type":"text","text":" "},{"type":"text","text":"preserves the relative order of elements for which"},{"type":"text","text":" "},{"type":"codeVoice","code":"areInIncreasingOrder"},{"text":" does not establish an order.","type":"text"}]},{"name":"Complexity","style":"note","content":[{"inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":" log "},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":" is the length of the collection.","type":"text"}],"type":"paragraph"}],"type":"aside"}],"kind":"content"}],"metadata":{"symbolKind":"method","modules":[{"name":"Compute","relatedModules":["Swift"]}],"roleHeading":"Instance Method","title":"sort(by:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Self"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"RandomAccessCollection"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"extendedModule":"Swift","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"sort","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"by"},{"kind":"text","text":": ("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"}],"externalID":"s:SMsSkRzrlE4sort2byySb7ElementSTQz_ADtKXE_tKF::SYNTHESIZED::s:s15CollectionOfOneV","role":"symbol"},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/CollectionOfOne/MutableCollection-Implementations":{"abstract":[],"title":"MutableCollection Implementations","role":"collectionGroup","type":"topic","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionOfOne\/MutableCollection-Implementations","url":"\/documentation\/compute\/collectionofone\/mutablecollection-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/CollectionOfOne/sort(by:)":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"RandomAccessCollection"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"title":"sort(by:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionOfOne\/sort(by:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"sort"},{"kind":"text","text":"("},{"text":"by","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}],"type":"topic","role":"symbol","url":"\/documentation\/compute\/collectionofone\/sort(by:)","kind":"symbol","abstract":[{"type":"text","text":"Sorts the collection in place, using the given predicate as the"},{"type":"text","text":" "},{"type":"text","text":"comparison between elements."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CollectionOfOne":{"abstract":[{"text":"A collection containing a single element.","type":"text"}],"kind":"symbol","url":"\/documentation\/compute\/collectionofone","navigatorTitle":[{"kind":"identifier","text":"CollectionOfOne"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionOfOne","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CollectionOfOne"}],"title":"CollectionOfOne"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequenceâ€™s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]}}}