{"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/withContiguousMutableStorageIfAvailable(_:)-5vekj"},"metadata":{"extendedModule":"Swift","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withContiguousMutableStorageIfAvailable","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sr","text":"UnsafeMutableBufferPointer"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"modules":[{"name":"Compute","relatedModules":["Swift"]}],"externalID":"s:SMsE39withContiguousMutableStorageIfAvailableyqd__Sgqd__Sry7ElementQzGzKXEKlF::SYNTHESIZED::s:s10ArraySliceV","roleHeading":"Instance Method","symbolKind":"method","title":"withContiguousMutableStorageIfAvailable(_:)","role":"symbol"},"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"text":"mutating","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withContiguousMutableStorageIfAvailable","kind":"identifier"},{"kind":"text","text":"<"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"body","kind":"internalParam"},{"kind":"text","text":": ("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer","text":"UnsafeMutableBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:Sr"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that receives an in-out"},{"type":"text","text":" "},{"type":"codeVoice","code":"UnsafeMutableBufferPointer"},{"text":" to the collection’s contiguous storage.","type":"text"}]}],"name":"body"}],"kind":"parameters"},{"content":[{"level":2,"text":"Return Value","anchor":"return-value","type":"heading"},{"inlineContent":[{"type":"text","text":"The value returned from "},{"code":"body","type":"codeVoice"},{"type":"text","text":", unless the collection doesn’t"},{"type":"text","text":" "},{"type":"text","text":"support contiguous storage, in which case the method ignores "},{"type":"codeVoice","code":"body"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"returns "},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"This method calls "},{"type":"codeVoice","code":"body(buffer)"},{"type":"text","text":", where "},{"code":"buffer","type":"codeVoice"},{"text":" provides access to the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"contiguous mutable storage of the entire collection. If the contiguous"},{"text":" ","type":"text"},{"type":"text","text":"storage doesn’t exist, the collection creates it. If the collection"},{"text":" ","type":"text"},{"text":"doesn’t support an internal representation in the form of contiguous","type":"text"},{"type":"text","text":" "},{"type":"text","text":"mutable storage, this method doesn’t call "},{"code":"body","type":"codeVoice"},{"type":"text","text":" — it immediately"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The optimizer can often eliminate bounds- and uniqueness-checking"},{"type":"text","text":" "},{"type":"text","text":"within an algorithm. When that fails, however, invoking the same"},{"type":"text","text":" "},{"type":"text","text":"algorithm on the "},{"type":"codeVoice","code":"buffer"},{"type":"text","text":" argument may let you trade safety for speed."}]},{"inlineContent":[{"type":"text","text":"Always perform any necessary cleanup in the closure, because the"},{"type":"text","text":" "},{"type":"text","text":"method makes no guarantees about the state of the collection if the"},{"type":"text","text":" "},{"text":"closure throws an error. Your changes to the collection may be absent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from the collection after throwing the error, because the closure could"},{"type":"text","text":" "},{"text":"receive a temporary copy rather than direct access to the collection’s","type":"text"},{"type":"text","text":" "},{"text":"storage.","type":"text"}],"type":"paragraph"},{"style":"warning","name":"Warning","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Your ","type":"text"},{"type":"codeVoice","code":"body"},{"type":"text","text":" closure must not replace "},{"type":"codeVoice","code":"buffer"},{"type":"text","text":". This leads"},{"text":" ","type":"text"},{"text":"to a crash in all implementations of this method within the standard","type":"text"},{"type":"text","text":" "},{"type":"text","text":"library."}]}]},{"inlineContent":[{"text":"Successive calls to this method may provide a different pointer on each","type":"text"},{"text":" ","type":"text"},{"text":"call. Don’t store ","type":"text"},{"type":"codeVoice","code":"buffer"},{"type":"text","text":" outside of this method."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"code":"Collection","type":"codeVoice"},{"text":" that provides its own implementation of this method","type":"text"},{"type":"text","text":" "},{"text":"must provide contiguous storage to its elements in the same order","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as they appear in the collection. This guarantees that it’s possible to"},{"text":" ","type":"text"},{"text":"generate contiguous mutable storage to any of its subsequences by slicing","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"buffer"},{"text":" with a range formed from the distances to the subsequence’s","type":"text"},{"text":" ","type":"text"},{"code":"startIndex","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"endIndex"},{"type":"text","text":", respectively."}]}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/MutableCollection-Implementations"]]},"abstract":[{"text":"Executes a closure on the collection’s contiguous storage.","type":"text"}],"variants":[{"paths":["\/documentation\/compute\/arrayslice\/withcontiguousmutablestorageifavailable(_:)-5vekj"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableBufferPointer":{"kind":"symbol","url":"\/documentation\/compute\/unsafemutablebufferpointer","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UnsafeMutableBufferPointer","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UnsafeMutableBufferPointer"}],"abstract":[{"type":"text","text":"A nonowning collection interface to a buffer of mutable"},{"text":" ","type":"text"},{"text":"elements stored contiguously in memory.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer","title":"UnsafeMutableBufferPointer","type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/MutableCollection-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/MutableCollection-Implementations","url":"\/documentation\/compute\/arrayslice\/mutablecollection-implementations","title":"MutableCollection Implementations","type":"topic","kind":"article","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/withContiguousMutableStorageIfAvailable(_:)-5vekj":{"title":"withContiguousMutableStorageIfAvailable(_:)","abstract":[{"text":"Executes a closure on the collection’s contiguous storage.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withContiguousMutableStorageIfAvailable"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"text":">((","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"UnsafeMutableBufferPointer","preciseIdentifier":"s:Sr","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":"?","kind":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/withContiguousMutableStorageIfAvailable(_:)-5vekj","url":"\/documentation\/compute\/arrayslice\/withcontiguousmutablestorageifavailable(_:)-5vekj","role":"symbol","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","role":"symbol","abstract":[{"type":"text","text":"A slice of an "},{"code":"Array","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"ContiguousArray"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"ArraySlice"},{"text":" instance.","type":"text"}],"title":"ArraySlice","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArraySlice"}],"navigatorTitle":[{"kind":"identifier","text":"ArraySlice"}],"url":"\/documentation\/compute\/arrayslice","type":"topic"}}}