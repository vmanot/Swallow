{"sections":[],"abstract":[{"text":"Reserves enough space to store the specified number of elements.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"mutating"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reserveCapacity","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"minimumCapacity","kind":"internalParam"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":")"}]}]},{"kind":"parameters","parameters":[{"name":"minimumCapacity","content":[{"inlineContent":[{"text":"The requested number of elements to store.","type":"text"}],"type":"paragraph"}]}]},{"content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"inlineContent":[{"text":"If you are adding a known number of elements to an array, use this method","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to avoid multiple reallocations. This method ensures that the array has"},{"type":"text","text":" "},{"type":"text","text":"unique, mutable, contiguous storage, with space allocated for at least"},{"type":"text","text":" "},{"type":"text","text":"the requested number of elements."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Calling the "},{"code":"reserveCapacity(_:)","type":"codeVoice"},{"type":"text","text":" method on an array with bridged storage"},{"type":"text","text":" "},{"text":"triggers a copy to contiguous storage even if the existing storage","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"has room to store "},{"type":"codeVoice","code":"minimumCapacity"},{"text":" elements.","type":"text"}]},{"inlineContent":[{"type":"text","text":"For performance reasons, the size of the newly allocated storage might be"},{"text":" ","type":"text"},{"type":"text","text":"greater than the requested capacity. Use the array’s "},{"code":"capacity","type":"codeVoice"},{"type":"text","text":" property"},{"text":" ","type":"text"},{"text":"to determine the size of the new storage.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Preserving-an-Arrays-Geometric-Growth-Strategy","text":"Preserving an Array’s Geometric Growth Strategy","level":1},{"type":"paragraph","inlineContent":[{"text":"If you implement a custom data structure backed by an array that grows","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"dynamically, naively calling the "},{"type":"codeVoice","code":"reserveCapacity(_:)"},{"type":"text","text":" method can lead"},{"text":" ","type":"text"},{"type":"text","text":"to worse than expected performance. Arrays need to follow a geometric"},{"type":"text","text":" "},{"text":"allocation pattern for appending elements to achieve amortized","type":"text"},{"text":" ","type":"text"},{"text":"constant-time performance. The ","type":"text"},{"code":"Array","type":"codeVoice"},{"text":" type’s ","type":"text"},{"type":"codeVoice","code":"append(_:)"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"code":"append(contentsOf:)","type":"codeVoice"},{"type":"text","text":" methods take care of this detail for you, but"},{"text":" ","type":"text"},{"type":"codeVoice","code":"reserveCapacity(_:)"},{"type":"text","text":" allocates only as much space as you tell it to"},{"text":" ","type":"text"},{"type":"text","text":"(padded to a round value), and no more. This avoids over-allocation, but"},{"type":"text","text":" "},{"text":"can result in insertion not having amortized constant-time performance.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The following code declares "},{"type":"codeVoice","code":"values"},{"text":", an array of integers, and the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"addTenQuadratic()"},{"type":"text","text":" function, which adds ten more values to the "},{"code":"values","type":"codeVoice"},{"type":"text","text":" "},{"text":"array on each call.","type":"text"}],"type":"paragraph"},{"code":["  var values: [Int] = [0, 1, 2, 3]","","  \/\/ Don't use 'reserveCapacity(_:)' like this","  func addTenQuadratic() {","      let newCount = values.count + 10","      values.reserveCapacity(newCount)","      for n in values.count..<newCount {","          values.append(n)","      }","  }"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The call to "},{"code":"reserveCapacity(_:)","type":"codeVoice"},{"text":" increases the ","type":"text"},{"type":"codeVoice","code":"values"},{"text":" array’s capacity","type":"text"},{"type":"text","text":" "},{"text":"by exactly 10 elements on each pass through ","type":"text"},{"type":"codeVoice","code":"addTenQuadratic()"},{"type":"text","text":", which"},{"type":"text","text":" "},{"type":"text","text":"is linear growth. Instead of having constant time when averaged over"},{"type":"text","text":" "},{"type":"text","text":"many calls, the function may decay to performance that is linear in"},{"text":" ","type":"text"},{"code":"values.count","type":"codeVoice"},{"text":". This is almost certainly not what you want.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In cases like this, the simplest fix is often to simply remove the call"},{"text":" ","type":"text"},{"text":"to ","type":"text"},{"code":"reserveCapacity(_:)","type":"codeVoice"},{"text":", and let the ","type":"text"},{"type":"codeVoice","code":"append(_:)"},{"text":" method grow the array","type":"text"},{"type":"text","text":" "},{"text":"for you.","type":"text"}]},{"code":["  func addTen() {","      let newCount = values.count + 10","      for n in values.count..<newCount {","          values.append(n)","      }","  }"],"type":"codeListing","syntax":null},{"inlineContent":[{"text":"If you need more control over the capacity of your array, implement your","type":"text"},{"type":"text","text":" "},{"type":"text","text":"own geometric growth strategy, passing the size you compute to"},{"type":"text","text":" "},{"type":"codeVoice","code":"reserveCapacity(_:)"},{"type":"text","text":"."}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"O(","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":"), where "},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":" is the number of elements in the array."}],"type":"paragraph"}],"name":"Complexity","type":"aside","style":"note"}],"kind":"content"}],"metadata":{"roleHeading":"Instance Method","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reserveCapacity"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"externalID":"s:s10ArraySliceV15reserveCapacityyySiF","extendedModule":"Swift","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"role":"symbol","title":"reserveCapacity(_:)"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/RangeReplaceableCollection-Implementations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/arrayslice\/reservecapacity(_:)-1lhqi"]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/reserveCapacity(_:)-1lhqi","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","references":{"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","role":"symbol","abstract":[{"type":"text","text":"A slice of an "},{"code":"Array","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"ContiguousArray"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"ArraySlice"},{"text":" instance.","type":"text"}],"title":"ArraySlice","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArraySlice"}],"navigatorTitle":[{"kind":"identifier","text":"ArraySlice"}],"url":"\/documentation\/compute\/arrayslice","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/RangeReplaceableCollection-Implementations":{"role":"collectionGroup","type":"topic","url":"\/documentation\/compute\/arrayslice\/rangereplaceablecollection-implementations","title":"RangeReplaceableCollection Implementations","abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/RangeReplaceableCollection-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/reserveCapacity(_:)-1lhqi":{"kind":"symbol","role":"symbol","url":"\/documentation\/compute\/arrayslice\/reservecapacity(_:)-1lhqi","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"reserveCapacity","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/reserveCapacity(_:)-1lhqi","title":"reserveCapacity(_:)","abstract":[{"type":"text","text":"Reserves enough space to store the specified number of elements."}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}