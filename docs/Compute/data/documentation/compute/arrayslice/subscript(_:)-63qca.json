{"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/RangeReplaceableCollection-Implementations"]]},"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"("},{"kind":"internalParam","text":"bounds"},{"kind":"text","text":": "},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","kind":"typeIdentifier","text":"Range","preciseIdentifier":"s:Sn"},{"text":"<","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":">) -> ","kind":"text"},{"text":"ArraySlice","preciseIdentifier":"s:s10ArraySliceV","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"> { "},{"text":"get","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"set"},{"kind":"text","text":" }"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"bounds","content":[{"inlineContent":[{"text":"A range of integers. The bounds of the range must be","type":"text"},{"text":" ","type":"text"},{"text":"valid indices of the array.","type":"text"}],"type":"paragraph"}]}]},{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The returned "},{"type":"codeVoice","code":"ArraySlice"},{"text":" instance uses the same indices for the same","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"elements as the original array. In particular, that slice, unlike an"},{"text":" ","type":"text"},{"text":"array, may have a nonzero ","type":"text"},{"code":"startIndex","type":"codeVoice"},{"type":"text","text":" and an "},{"code":"endIndex","type":"codeVoice"},{"text":" that is not","type":"text"},{"type":"text","text":" "},{"type":"text","text":"equal to "},{"type":"codeVoice","code":"count"},{"type":"text","text":". Always use the slice’s "},{"type":"codeVoice","code":"startIndex"},{"text":" and ","type":"text"},{"code":"endIndex","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"properties instead of assuming that its indices start or end at a"},{"type":"text","text":" "},{"type":"text","text":"particular value."}]},{"type":"paragraph","inlineContent":[{"text":"This example demonstrates getting a slice of an array of strings, finding","type":"text"},{"type":"text","text":" "},{"text":"the index of one of the strings in the slice, and then using that index","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in the original array."}]},{"type":"codeListing","syntax":null,"code":["let streets = [\"Adams\", \"Bryant\", \"Channing\", \"Douglas\", \"Evarts\"]","let streetsSlice = streets[2 ..< streets.endIndex]","print(streetsSlice)","\/\/ Prints \"[\"Channing\", \"Douglas\", \"Evarts\"]\"","","let i = streetsSlice.firstIndex(of: \"Evarts\")    \/\/ 4","print(streets[i!])","\/\/ Prints \"Evarts\""]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/compute\/arrayslice\/subscript(_:)-63qca"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"symbolKind":"subscript","role":"symbol","title":"subscript(_:)","extendedModule":"Swift","fragments":[{"text":"subscript","kind":"keyword"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:Sn","kind":"typeIdentifier","text":"Range"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"ArraySlice","kind":"typeIdentifier","preciseIdentifier":"s:s10ArraySliceV"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">","kind":"text"}],"externalID":"s:s10ArraySliceVyAByxGSnySiGcip","roleHeading":"Instance Subscript","modules":[{"name":"Compute","relatedModules":["Swift"]}]},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/subscript(_:)-63qca","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Accesses a contiguous subrange of the array’s elements."}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","role":"symbol","abstract":[{"type":"text","text":"A slice of an "},{"code":"Array","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"ContiguousArray"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"ArraySlice"},{"text":" instance.","type":"text"}],"title":"ArraySlice","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArraySlice"}],"navigatorTitle":[{"kind":"identifier","text":"ArraySlice"}],"url":"\/documentation\/compute\/arrayslice","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/subscript(_:)-63qca":{"type":"topic","title":"subscript(_:)","fragments":[{"kind":"keyword","text":"subscript"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sn","text":"Range"},{"kind":"text","text":"<"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s10ArraySliceV","text":"ArraySlice"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"text":">","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/subscript(_:)-63qca","url":"\/documentation\/compute\/arrayslice\/subscript(_:)-63qca","kind":"symbol","role":"symbol","abstract":[{"text":"Accesses a contiguous subrange of the array’s elements.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/RangeReplaceableCollection-Implementations":{"role":"collectionGroup","type":"topic","url":"\/documentation\/compute\/arrayslice\/rangereplaceablecollection-implementations","title":"RangeReplaceableCollection Implementations","abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/RangeReplaceableCollection-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Range":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Range","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","url":"\/documentation\/compute\/range","abstract":[{"text":"A half-open interval from a lower bound up to, but not including, an upper","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"bound."}],"navigatorTitle":[{"text":"Range","kind":"identifier"}],"title":"Range"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}