{"metadata":{"externalID":"s:STsSL7ElementRpzrlE25lexicographicallyPrecedesySbqd__STRd__AAQyd__ABRSlF::SYNTHESIZED::s:s10ArraySliceV","symbolKind":"method","extendedModule":"Swift","role":"symbol","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lexicographicallyPrecedes"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"OtherSequence"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"OtherSequence"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}]},"modules":[{"relatedModules":["Swift"],"name":"Compute"}],"title":"lexicographicallyPrecedes(_:)"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/Sequence-Implementations"]]},"kind":"symbol","sections":[],"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the sequence precedes another"},{"type":"text","text":" "},{"type":"text","text":"sequence in a lexicographical (dictionary) ordering, using the"},{"text":" ","type":"text"},{"type":"text","text":"less-than operator ("},{"code":"<","type":"codeVoice"},{"type":"text","text":") to compare elements."}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"lexicographicallyPrecedes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"OtherSequence","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"other","kind":"internalParam"},{"kind":"text","text":": "},{"text":"OtherSequence","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","text":"Bool"},{"text":" ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"OtherSequence","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","text":"Sequence","preciseIdentifier":"s:ST"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","text":"Element"},{"text":" == ","kind":"text"},{"text":"OtherSequence","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","text":"Element"}]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A sequence to compare to this sequence.","type":"text"}]}],"name":"other"}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","anchor":"return-value","text":"Return Value","level":2},{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" if this sequence precedes "},{"code":"other","type":"codeVoice"},{"text":" in a dictionary","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"ordering; otherwise, "},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example uses the "},{"type":"codeVoice","code":"lexicographicallyPrecedes"},{"type":"text","text":" method to test which"},{"text":" ","type":"text"},{"type":"text","text":"array of integers comes first in a lexicographical ordering."}]},{"syntax":null,"type":"codeListing","code":["let a = [1, 2, 2, 2]","let b = [1, 2, 3, 4]","","print(a.lexicographicallyPrecedes(b))","\/\/ Prints \"true\"","print(b.lexicographicallyPrecedes(b))","\/\/ Prints \"false\""]},{"type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"This method implements the mathematical notion of lexicographical"},{"text":" ","type":"text"},{"type":"text","text":"ordering, which has no connection to Unicode.  If you are sorting"},{"text":" ","type":"text"},{"type":"text","text":"strings to present to the end user, use "},{"code":"String","type":"codeVoice"},{"type":"text","text":" APIs that"},{"type":"text","text":" "},{"text":"perform localized comparison.","type":"text"}],"type":"paragraph"}],"name":"Note"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"m"}]},{"type":"text","text":"), where "},{"inlineContent":[{"type":"text","text":"m"}],"type":"emphasis"},{"text":" is the lesser of the length of the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"sequence and the length of "},{"type":"codeVoice","code":"other"},{"type":"text","text":"."}]}],"name":"Complexity","style":"note","type":"aside"}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/lexicographicallyPrecedes(_:)","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/arrayslice\/lexicographicallyprecedes(_:)"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/lexicographicallyPrecedes(_:)":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"abstract":[{"text":"Returns a Boolean value indicating whether the sequence precedes another","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sequence in a lexicographical (dictionary) ordering, using the"},{"type":"text","text":" "},{"type":"text","text":"less-than operator ("},{"code":"<","type":"codeVoice"},{"text":") to compare elements.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/arrayslice\/lexicographicallyprecedes(_:)","title":"lexicographicallyPrecedes(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lexicographicallyPrecedes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"OtherSequence","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"OtherSequence"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/lexicographicallyPrecedes(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","role":"symbol","abstract":[{"type":"text","text":"A slice of an "},{"code":"Array","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"ContiguousArray"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"ArraySlice"},{"text":" instance.","type":"text"}],"title":"ArraySlice","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArraySlice"}],"navigatorTitle":[{"kind":"identifier","text":"ArraySlice"}],"url":"\/documentation\/compute\/arrayslice","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"url":"\/documentation\/compute\/sequence","navigatorTitle":[{"kind":"identifier","text":"Sequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","title":"Sequence","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Sequence","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequenceâ€™s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/Sequence-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/Sequence-Implementations","title":"Sequence Implementations","abstract":[],"kind":"article","url":"\/documentation\/compute\/arrayslice\/sequence-implementations","type":"topic","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"}}}