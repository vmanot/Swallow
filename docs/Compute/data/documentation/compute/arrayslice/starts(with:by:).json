{"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/Sequence-Implementations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/arrayslice\/starts(with:by:)"]}],"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"starts"},{"text":"<","kind":"text"},{"text":"PossiblePrefix","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"PossiblePrefix"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"by"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":", "},{"text":"PossiblePrefix","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"externalID":"s:STsE6starts4with2bySbqd___Sb7ElementQz_ADQyd__tKXEtKSTRd__lF::SYNTHESIZED::s:s10ArraySliceV","extendedModule":"Swift","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"title":"starts(with:by:)","role":"symbol","roleHeading":"Instance Method","symbolKind":"method"},"abstract":[{"text":"Returns a Boolean value indicating whether the initial elements of the","type":"text"},{"type":"text","text":" "},{"text":"sequence are equivalent to the elements in another sequence, using","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the given predicate as the equivalence test."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"starts","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"PossiblePrefix"},{"kind":"text","text":">("},{"text":"with","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"possiblePrefix"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"PossiblePrefix"},{"kind":"text","text":", "},{"text":"by","kind":"externalParam"},{"kind":"text","text":" "},{"text":"areEquivalent","kind":"internalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"PossiblePrefix"},{"text":".","kind":"text"},{"text":"Element","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"PossiblePrefix","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","text":"Sequence","preciseIdentifier":"s:ST","kind":"typeIdentifier"}],"languages":["swift"]}]},{"parameters":[{"name":"possiblePrefix","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A sequence to compare to this sequence."}]}]},{"name":"areEquivalent","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A predicate that returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if its two arguments"},{"type":"text","text":" "},{"type":"text","text":"are equivalent; otherwise, "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}]}]}],"kind":"parameters"},{"kind":"content","content":[{"text":"Return Value","level":2,"type":"heading","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":" if the initial elements of the sequence are equivalent"},{"type":"text","text":" "},{"text":"to the elements of ","type":"text"},{"type":"codeVoice","code":"possiblePrefix"},{"text":"; otherwise, ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":". If"},{"type":"text","text":" "},{"code":"possiblePrefix","type":"codeVoice"},{"type":"text","text":" has no elements, the return value is "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"inlineContent":[{"text":"The predicate must be an ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"equivalence relation","type":"text"}]},{"text":" over the elements. That","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is, for any elements "},{"type":"codeVoice","code":"a"},{"text":", ","type":"text"},{"type":"codeVoice","code":"b"},{"type":"text","text":", and "},{"type":"codeVoice","code":"c"},{"text":", the following conditions must","type":"text"},{"type":"text","text":" "},{"type":"text","text":"hold:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"areEquivalent(a, a)"},{"type":"text","text":" is always "},{"type":"codeVoice","code":"true"},{"text":". (Reflexivity)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"areEquivalent(a, b)"},{"type":"text","text":" implies "},{"code":"areEquivalent(b, a)","type":"codeVoice"},{"type":"text","text":". (Symmetry)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"code":"areEquivalent(a, b)","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"areEquivalent(b, c)"},{"type":"text","text":" are both "},{"type":"codeVoice","code":"true"},{"type":"text","text":", then"},{"text":" ","type":"text"},{"type":"codeVoice","code":"areEquivalent(a, c)"},{"type":"text","text":" is also "},{"type":"codeVoice","code":"true"},{"type":"text","text":". (Transitivity)"}]}]}],"type":"unorderedList"},{"content":[{"inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"text":"m","type":"text"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"inlineContent":[{"type":"text","text":"m"}],"type":"emphasis"},{"text":" is the lesser of the length of the","type":"text"},{"text":" ","type":"text"},{"text":"sequence and the length of ","type":"text"},{"code":"possiblePrefix","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside","name":"Complexity"}],"kind":"content"}],"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/starts(with:by:)"},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/starts(with:by:)":{"role":"symbol","title":"starts(with:by:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"starts","kind":"identifier"},{"text":"<","kind":"text"},{"text":"PossiblePrefix","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"PossiblePrefix"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"by"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"PossiblePrefix"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/starts(with:by:)","url":"\/documentation\/compute\/arrayslice\/starts(with:by:)","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the initial elements of the"},{"text":" ","type":"text"},{"text":"sequence are equivalent to the elements in another sequence, using","type":"text"},{"type":"text","text":" "},{"text":"the given predicate as the equivalence test.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequenceâ€™s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/Sequence-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/Sequence-Implementations","title":"Sequence Implementations","abstract":[],"kind":"article","url":"\/documentation\/compute\/arrayslice\/sequence-implementations","type":"topic","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","role":"symbol","abstract":[{"type":"text","text":"A slice of an "},{"code":"Array","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"ContiguousArray"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"ArraySlice"},{"text":" instance.","type":"text"}],"title":"ArraySlice","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArraySlice"}],"navigatorTitle":[{"kind":"identifier","text":"ArraySlice"}],"url":"\/documentation\/compute\/arrayslice","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"url":"\/documentation\/compute\/sequence","navigatorTitle":[{"kind":"identifier","text":"Sequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","title":"Sequence","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Sequence","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}]}}}