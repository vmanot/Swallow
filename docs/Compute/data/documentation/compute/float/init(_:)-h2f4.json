{"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float\/LosslessStringConvertible-Implementations"]]},"metadata":{"externalID":"s:SfySfSgxcSyRzlufc","extendedModule":"Swift","symbolKind":"init","fragments":[{"text":"init","kind":"identifier"},{"text":"?<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"text":")","kind":"text"}],"roleHeading":"Initializer","role":"symbol","title":"init(_:)","modules":[{"relatedModules":["Swift"],"name":"Compute"}]},"abstract":[{"text":"Creates a new instance from the given string.","type":"text"}],"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float\/init(_:)-h2f4"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"?<"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"text"},{"text":": ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","kind":"typeIdentifier","preciseIdentifier":"s:Sy","text":"StringProtocol"}],"languages":["swift"]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An input string to convert to a "},{"code":"Float?","type":"codeVoice"},{"type":"text","text":" instance."}]}],"name":"text"}],"kind":"parameters"},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The string passed as "},{"type":"codeVoice","code":"text"},{"text":" can represent a real number in decimal or","type":"text"},{"text":" ","type":"text"},{"text":"hexadecimal format or can be in a special format representing infinity","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or NaN (“not a number”). If "},{"code":"text","type":"codeVoice"},{"type":"text","text":" is not in a recognized format,"},{"text":" ","type":"text"},{"text":"the optional initializer will fail and return ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"text"},{"text":" string consists of an optional","type":"text"},{"text":" ","type":"text"},{"text":"plus or minus sign character (","type":"text"},{"type":"codeVoice","code":"+"},{"text":" or ","type":"text"},{"code":"-","type":"codeVoice"},{"text":")","type":"text"},{"text":" ","type":"text"},{"text":"followed by one of the following:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"decimal string"}]},{"text":" contains a significand consisting of one","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or more decimal digits that may include a decimal point:"}]},{"code":["let c = Float(\"-1.0\")","\/\/ c == -1.0","","let d = Float(\"28.375\")","\/\/ d == 28.375"],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"A decimal string may also include an exponent following the"},{"text":" ","type":"text"},{"text":"significand, indicating the power of 10 by which the significand should","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"be multiplied. If included, the exponent is separated by a single"},{"type":"text","text":" "},{"type":"text","text":"character, "},{"code":"e","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"E"},{"type":"text","text":", and consists of an optional plus or minus sign"},{"type":"text","text":" "},{"type":"text","text":"character and a sequence of decimal digits."}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let e = Float(\"2837.5e-2\")","\/\/ e == 28.375"]}]},{"content":[{"inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"hexadecimal string","type":"text"}]},{"text":" contains a significand consisting of","type":"text"},{"text":" ","type":"text"},{"code":"0X","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"0x","type":"codeVoice"},{"text":" followed by one or more hexadecimal digits that may","type":"text"},{"type":"text","text":" "},{"type":"text","text":"include a decimal point."}],"type":"paragraph"},{"syntax":null,"code":["let f = Float(\"0x1c.6\")","\/\/ f == 28.375"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"A hexadecimal string may also include an exponent"},{"text":" ","type":"text"},{"type":"text","text":"indicating the power of 2 by which the significand should"},{"type":"text","text":" "},{"type":"text","text":"be multiplied. If included, the exponent is separated by a single"},{"text":" ","type":"text"},{"type":"text","text":"character, "},{"code":"p","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"P","type":"codeVoice"},{"type":"text","text":", and consists of an optional plus or minus sign"},{"text":" ","type":"text"},{"type":"text","text":"character and a sequence of decimal digits."}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let g = Float(\"0x1.c6p4\")","\/\/ g == 28.375"]}]},{"content":[{"inlineContent":[{"type":"text","text":"The input strings "},{"code":"\"inf\"","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"infinity\""},{"text":" (case insensitive)","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are converted to an infinite result:"}],"type":"paragraph"},{"type":"codeListing","code":["let i = Float(\"inf\")","\/\/ i == Float.infinity","","let j = Float(\"-Infinity\")","\/\/ j == -Float.infinity"],"syntax":null}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"An input string of ","type":"text"},{"code":"\"nan\"","type":"codeVoice"},{"text":" (case insensitive) is converted","type":"text"},{"type":"text","text":" "},{"text":"into a ","type":"text"},{"inlineContent":[{"text":"NaN","type":"text"}],"type":"emphasis"},{"text":" value:","type":"text"}]},{"syntax":null,"code":["let n = Float(\"-nan\")","\/\/ n?.isNaN == true","\/\/ n?.sign == .minus"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A NaN string may also include a payload in parentheses following the"},{"text":" ","type":"text"},{"code":"\"nan\"","type":"codeVoice"},{"type":"text","text":" keyword. The payload consists of a sequence of decimal digits,"},{"type":"text","text":" "},{"text":"or the characters ","type":"text"},{"code":"0X","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"0x"},{"text":" followed by a sequence of hexadecimal","type":"text"},{"type":"text","text":" "},{"type":"text","text":"digits. If the payload contains any other characters, it is ignored."},{"type":"text","text":" "},{"text":"If the value of the payload is larger than can be stored as the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"payload of a "},{"type":"codeVoice","code":"Float.nan"},{"text":", the least significant bits are used.","type":"text"}]},{"code":["let p = Float(\"nan(0x10)\")","\/\/ p?.isNaN == true","\/\/ String(p!) == \"nan(0x10)\""],"type":"codeListing","syntax":null}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A string in any other format than those described above"},{"type":"text","text":" "},{"type":"text","text":"or containing additional characters"},{"type":"text","text":" "},{"text":"results in a ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value. For example, the following conversions"},{"type":"text","text":" "},{"text":"result in ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":":","type":"text"}]},{"syntax":null,"type":"codeListing","code":["  Float(\" 5.0\")      \/\/ Includes whitespace","  Float(\"±2.0\")      \/\/ Invalid character","  Float(\"0x1.25e4\")  \/\/ Incorrect exponent format"]},{"inlineContent":[{"type":"text","text":"A decimal or hexadecimal string is converted to a "},{"code":"Float","type":"codeVoice"},{"text":" ","type":"text"},{"text":"instance using the IEEE 754 roundTiesToEven (default) rounding","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"attribute."},{"type":"text","text":" "},{"type":"text","text":"Values with absolute value smaller than "},{"code":"Float.leastNonzeroMagnitude","type":"codeVoice"},{"type":"text","text":" "},{"text":"are rounded to plus or minus zero.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Values with absolute value larger than "},{"type":"codeVoice","code":"Float.greatestFiniteMagnitude"},{"type":"text","text":" "},{"text":"are rounded to plus or minus infinity.","type":"text"}],"type":"paragraph"},{"code":["  let y = Float(\"1.23e-9999\")","  \/\/ y == 0.0","  \/\/ y?.sign == .plus","","  let z = Float(\"-7.89e-7206\")","  \/\/ z == -0.0","  \/\/ z?.sign == .minus","","  let r = Float(\"1.23e17802\")","  \/\/ r == Float.infinity","","  let s = Float(\"-7.89e7206\")","  \/\/ s == Float.-infinity"],"type":"codeListing","syntax":null},{"content":[{"inlineContent":[{"type":"text","text":"Prior to Swift 5.4, a decimal or"},{"text":" ","type":"text"},{"text":"hexadecimal input string whose value was too large to represent","type":"text"},{"text":" ","type":"text"},{"text":"as a finite ","type":"text"},{"code":"Float","type":"codeVoice"},{"text":" instance returned ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" instead of"},{"type":"text","text":" "},{"type":"codeVoice","code":"Float.infinity"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"}]}],"variants":[{"paths":["\/documentation\/compute\/float\/init(_:)-h2f4"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/StringProtocol":{"url":"\/documentation\/compute\/stringprotocol","role":"symbol","abstract":[{"type":"text","text":"A type that can represent a string as a collection of characters."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","title":"StringProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StringProtocol","kind":"identifier"}],"navigatorTitle":[{"text":"StringProtocol","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Float":{"type":"topic","abstract":[{"text":"A single-precision, floating-point value type.","type":"text"}],"url":"\/documentation\/compute\/float","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Float"}],"navigatorTitle":[{"text":"Float","kind":"identifier"}],"title":"Float"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Float/LosslessStringConvertible-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float\/LosslessStringConvertible-Implementations","type":"topic","title":"LosslessStringConvertible Implementations","role":"collectionGroup","url":"\/documentation\/compute\/float\/losslessstringconvertible-implementations","abstract":[],"kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/Float/init(_:)-h2f4":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float\/init(_:)-h2f4","kind":"symbol","abstract":[{"text":"Creates a new instance from the given string.","type":"text"}],"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"text":"?<","kind":"text"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"text":")","kind":"text"}],"url":"\/documentation\/compute\/float\/init(_:)-h2f4","type":"topic"}}}