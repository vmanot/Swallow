{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence\/Iterator\/drop(while:)"},"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence\/Sequence-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence\/Iterator\/Sequence-Implementations"]]},"abstract":[{"text":"Returns a sequence by skipping the initial, consecutive elements that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"satisfy the given predicate."}],"metadata":{"symbolKind":"method","externalID":"s:STsE4drop5whiles17DropWhileSequenceVyxGSb7ElementQzKXE_tKF::SYNTHESIZED::s:s15FlattenSequenceV8IteratorV","role":"symbol","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"drop"},{"kind":"text","text":"("},{"text":"while","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"DropWhileSequence","kind":"typeIdentifier","preciseIdentifier":"s:s17DropWhileSequenceV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"extendedModule":"Swift","modules":[{"name":"Compute","relatedModules":["Swift"]}],"title":"drop(while:)"},"kind":"symbol","sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/flattensequence\/iterator\/drop(while:)"]}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"drop","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"while"},{"kind":"text","text":" "},{"text":"predicate","kind":"internalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s17DropWhileSequenceV","text":"DropWhileSequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DropWhileSequence"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"predicate","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes an element of the sequence as"},{"type":"text","text":" "},{"text":"its argument and returns a Boolean value indicating whether the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"element should be included in the result."}]}]}]},{"content":[{"level":2,"text":"Return Value","anchor":"return-value","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A sequence starting after the initial, consecutive elements","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that satisfy "},{"type":"codeVoice","code":"predicate"},{"text":".","type":"text"}]}],"kind":"content"},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"The following example uses the "},{"code":"drop(while:)","type":"codeVoice"},{"type":"text","text":" method to skip over the"},{"type":"text","text":" "},{"text":"positive numbers at the beginning of the ","type":"text"},{"type":"codeVoice","code":"numbers"},{"type":"text","text":" array. The result"},{"text":" ","type":"text"},{"type":"text","text":"begins with the first element of "},{"code":"numbers","type":"codeVoice"},{"text":" that does not satisfy","type":"text"},{"type":"text","text":" "},{"code":"predicate","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":null,"code":["let numbers = [3, 7, 4, -2, 9, -6, 10, 1]","let startingWithNegative = numbers.drop(while: { $0 > 0 })","\/\/ startingWithNegative == [-2, 9, -6, 10, 1]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"predicate"},{"text":" matches every element in the sequence, the result is an","type":"text"},{"type":"text","text":" "},{"text":"empty sequence.","type":"text"}]},{"name":"Complexity","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"type":"text","text":"k"}],"type":"emphasis"},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"text":"k","type":"text"}]},{"text":" is the number of elements to drop from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the beginning of the sequence."}]}],"style":"note"}]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/DropWhileSequence":{"abstract":[{"type":"text","text":"A sequence that lazily consumes and drops "},{"type":"codeVoice","code":"n"},{"type":"text","text":" elements from an underlying"},{"type":"text","text":" "},{"type":"codeVoice","code":"Base"},{"text":" iterator before possibly returning the first available element.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"DropWhileSequence","kind":"identifier"}],"url":"\/documentation\/compute\/dropwhilesequence","title":"DropWhileSequence","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DropWhileSequence","type":"topic","navigatorTitle":[{"text":"DropWhileSequence","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/FlattenSequence/Iterator":{"kind":"symbol","type":"topic","abstract":[{"text":"A type that provides the sequenceâ€™s iteration interface and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"encapsulates its iteration state."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence\/Iterator","title":"FlattenSequence.Iterator","navigatorTitle":[{"text":"Iterator","kind":"identifier"}],"conformance":{"constraints":[{"code":"Base","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Base.Element"},{"text":" conforms to ","type":"text"},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Iterator"}],"url":"\/documentation\/compute\/flattensequence\/iterator","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/FlattenSequence/Iterator/drop(while:)":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"drop","kind":"identifier"},{"text":"(","kind":"text"},{"text":"while","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s17DropWhileSequenceV","kind":"typeIdentifier","text":"DropWhileSequence"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Returns a sequence by skipping the initial, consecutive elements that"},{"type":"text","text":" "},{"text":"satisfy the given predicate.","type":"text"}],"url":"\/documentation\/compute\/flattensequence\/iterator\/drop(while:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence\/Iterator\/drop(while:)","title":"drop(while:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/FlattenSequence/Sequence-Implementations":{"abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence\/Sequence-Implementations","type":"topic","kind":"article","role":"collectionGroup","url":"\/documentation\/compute\/flattensequence\/sequence-implementations","title":"Sequence Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/FlattenSequence/Iterator/Sequence-Implementations":{"type":"topic","url":"\/documentation\/compute\/flattensequence\/iterator\/sequence-implementations","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence\/Iterator\/Sequence-Implementations","kind":"article","title":"Sequence Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/FlattenSequence":{"url":"\/documentation\/compute\/flattensequence","navigatorTitle":[{"kind":"identifier","text":"FlattenSequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence","title":"FlattenSequence","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FlattenSequence"}],"type":"topic","abstract":[{"type":"text","text":"A sequence consisting of all the elements contained in each segment"},{"text":" ","type":"text"},{"text":"contained in some ","type":"text"},{"code":"Base","type":"codeVoice"},{"type":"text","text":" sequence."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequenceâ€™s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"}}}