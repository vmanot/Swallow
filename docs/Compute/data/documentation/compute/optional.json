{"variants":[{"paths":["\/documentation\/compute\/optional"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"relationshipsSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByNilLiteral","doc:\/\/com.swallow.documentation.Compute\/10Foundation26DecodableWithConfigurationP","doc:\/\/com.swallow.documentation.Compute\/10Foundation26EncodableWithConfigurationP","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Partializable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataDecodableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataEncodableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16OptionalProtocolP","doc:\/\/com.swallow.documentation.Compute\/7SwiftUI8CommandsP","doc:\/\/com.swallow.documentation.Compute\/7SwiftUI26CustomizableToolbarContentP","doc:\/\/com.swallow.documentation.Compute\/7SwiftUI10TabContentP","doc:\/\/com.swallow.documentation.Compute\/7SwiftUI18TableColumnContentP","doc:\/\/com.swallow.documentation.Compute\/7SwiftUI15TableRowContentP","doc:\/\/com.swallow.documentation.Compute\/7SwiftUI14ToolbarContentP","doc:\/\/com.swallow.documentation.Compute\/7SwiftUI7GestureP","doc:\/\/com.swallow.documentation.Compute\/7SwiftUI4ViewP"],"title":"Conforms To","type":"conformsTo","kind":"relationships"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"@frozen","kind":"attribute"},{"kind":"text","text":" "},{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Optional"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Wrapped"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"Wrapped","kind":"typeIdentifier"},{"kind":"text","text":" : ~Copyable"}]}]},{"content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You use the ","type":"text"},{"code":"Optional","type":"codeVoice"},{"text":" type whenever you use optional values, even if you","type":"text"},{"text":" ","type":"text"},{"text":"never type the word ","type":"text"},{"type":"codeVoice","code":"Optional"},{"type":"text","text":". Swift’s type system usually shows the"},{"type":"text","text":" "},{"text":"wrapped type’s name with a trailing question mark (","type":"text"},{"type":"codeVoice","code":"?"},{"text":") instead of showing","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the full type name. For example, if a variable has the type "},{"type":"codeVoice","code":"Int?"},{"text":", that’s","type":"text"},{"type":"text","text":" "},{"type":"text","text":"just another way of writing "},{"type":"codeVoice","code":"Optional<Int>"},{"type":"text","text":". The shortened form is"},{"type":"text","text":" "},{"type":"text","text":"preferred for ease of reading and writing code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The types of "},{"type":"codeVoice","code":"shortForm"},{"type":"text","text":" and "},{"code":"longForm","type":"codeVoice"},{"text":" in the following code sample are","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the same:"}]},{"code":["let shortForm: Int? = Int(\"42\")","let longForm: Optional<Int> = Int(\"42\")"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Optional"},{"type":"text","text":" type is an enumeration with two cases. "},{"type":"codeVoice","code":"Optional.none"},{"text":" is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"equivalent to the "},{"code":"nil","type":"codeVoice"},{"text":" literal. ","type":"text"},{"code":"Optional.some(Wrapped)","type":"codeVoice"},{"type":"text","text":" stores a wrapped"},{"type":"text","text":" "},{"text":"value. For example:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let number: Int? = Optional.some(42)","let noNumber: Int? = Optional.none","print(noNumber == nil)","\/\/ Prints \"true\""],"syntax":null},{"inlineContent":[{"text":"You must unwrap the value of an ","type":"text"},{"code":"Optional","type":"codeVoice"},{"type":"text","text":" instance before you can use it"},{"type":"text","text":" "},{"type":"text","text":"in many contexts. Because Swift provides several ways to safely unwrap"},{"type":"text","text":" "},{"type":"text","text":"optional values, you can choose the one that helps you write clear,"},{"type":"text","text":" "},{"text":"concise code.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following examples use this dictionary of image names and file paths:"}]},{"type":"codeListing","syntax":null,"code":["let imagePaths = [\"star\": \"\/glyphs\/star.png\",","                  \"portrait\": \"\/images\/content\/portrait.jpg\",","                  \"spacer\": \"\/images\/shared\/spacer.gif\"]"]},{"inlineContent":[{"text":"Getting a dictionary’s value using a key returns an optional value, so","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"imagePaths[\"star\"]"},{"type":"text","text":" has type "},{"type":"codeVoice","code":"Optional<String>"},{"text":" or, written in the","type":"text"},{"type":"text","text":" "},{"text":"preferred manner, ","type":"text"},{"code":"String?","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"level":2,"text":"Optional Binding","type":"heading","anchor":"Optional-Binding"},{"inlineContent":[{"type":"text","text":"To conditionally bind the wrapped value of an "},{"type":"codeVoice","code":"Optional"},{"text":" instance to a new","type":"text"},{"text":" ","type":"text"},{"text":"variable, use one of the optional binding control structures, including","type":"text"},{"type":"text","text":" "},{"code":"if let","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"guard let"},{"text":", and ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["if let starPath = imagePaths[\"star\"] {","    print(\"The star image is at '\\(starPath)'\")","} else {","    print(\"Couldn't find the star image\")","}","\/\/ Prints \"The star image is at '\/glyphs\/star.png'\""],"type":"codeListing"},{"type":"heading","level":2,"anchor":"Optional-Chaining","text":"Optional Chaining"},{"inlineContent":[{"type":"text","text":"To safely access the properties and methods of a wrapped instance, use the"},{"type":"text","text":" "},{"text":"postfix optional chaining operator (postfix ","type":"text"},{"type":"codeVoice","code":"?"},{"type":"text","text":"). The following example uses"},{"type":"text","text":" "},{"type":"text","text":"optional chaining to access the "},{"code":"hasSuffix(_:)","type":"codeVoice"},{"text":" method on a ","type":"text"},{"type":"codeVoice","code":"String?"},{"text":" ","type":"text"},{"type":"text","text":"instance."}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["if imagePaths[\"star\"]?.hasSuffix(\".png\") == true {","    print(\"The star image is in PNG format\")","}","\/\/ Prints \"The star image is in PNG format\""]},{"text":"Using the Nil-Coalescing Operator","level":2,"type":"heading","anchor":"Using-the-Nil-Coalescing-Operator"},{"type":"paragraph","inlineContent":[{"text":"Use the nil-coalescing operator (","type":"text"},{"code":"??","type":"codeVoice"},{"type":"text","text":") to supply a default value in case"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"Optional","type":"codeVoice"},{"text":" instance is ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":". Here a default path is supplied for an"},{"type":"text","text":" "},{"type":"text","text":"image that is missing from "},{"code":"imagePaths","type":"codeVoice"},{"text":".","type":"text"}]},{"code":["let defaultImagePath = \"\/images\/default.png\"","let heartPath = imagePaths[\"heart\"] ?? defaultImagePath","print(heartPath)","\/\/ Prints \"\/images\/default.png\""],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"code":"??","type":"codeVoice"},{"type":"text","text":" operator also works with another "},{"code":"Optional","type":"codeVoice"},{"text":" instance on the","type":"text"},{"type":"text","text":" "},{"text":"right-hand side. As a result, you can chain multiple ","type":"text"},{"code":"??","type":"codeVoice"},{"type":"text","text":" operators"},{"text":" ","type":"text"},{"text":"together.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let shapePath = imagePaths[\"cir\"] ?? imagePaths[\"squ\"] ?? defaultImagePath","print(shapePath)","\/\/ Prints \"\/images\/default.png\""]},{"level":2,"anchor":"Unconditional-Unwrapping","text":"Unconditional Unwrapping","type":"heading"},{"inlineContent":[{"type":"text","text":"When you’re certain that an instance of "},{"type":"codeVoice","code":"Optional"},{"type":"text","text":" contains a value, you"},{"type":"text","text":" "},{"type":"text","text":"can unconditionally unwrap the value by using the forced"},{"type":"text","text":" "},{"type":"text","text":"unwrap operator (postfix "},{"type":"codeVoice","code":"!"},{"type":"text","text":"). For example, the result of the failable "},{"type":"codeVoice","code":"Int"},{"text":" ","type":"text"},{"type":"text","text":"initializer is unconditionally unwrapped in the example below."}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let number = Int(\"42\")!","print(number)","\/\/ Prints \"42\""]},{"inlineContent":[{"type":"text","text":"You can also perform unconditional optional chaining by using the postfix"},{"type":"text","text":" "},{"code":"!","type":"codeVoice"},{"type":"text","text":" operator."}],"type":"paragraph"},{"type":"codeListing","code":["let isPNG = imagePaths[\"star\"]!.hasSuffix(\".png\")","print(isPNG)","\/\/ Prints \"true\""],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"Unconditionally unwrapping a ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" instance with "},{"code":"!","type":"codeVoice"},{"text":" triggers a runtime","type":"text"},{"type":"text","text":" "},{"text":"error.","type":"text"}]}],"kind":"content"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"roleHeading":"Enumeration","symbolKind":"enum","navigatorTitle":[{"kind":"identifier","text":"Optional"}],"title":"Optional","modules":[{"name":"Compute"}],"role":"symbol","externalID":"s:Sq","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"Optional","kind":"identifier"}]},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A type that represents either a wrapped value or the absence of a value."}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"topicSections":[{"anchor":"Operators","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/!=(_:_:)-38b38","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/!=(_:_:)-6xpzw","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/==(_:_:)-5uee5","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/==(_:_:)-6ztpi","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/~=(_:_:)"],"title":"Operators"},{"generated":true,"title":"Enumeration Cases","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/none","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/some(_:)"],"anchor":"Enumeration-Cases"},{"generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/init(_:)"],"anchor":"Initializers","title":"Initializers"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/unsafelyUnwrapped"],"title":"Instance Properties","anchor":"Instance-Properties","generated":true},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/flatMap(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/map(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/take()"],"generated":true,"anchor":"Instance-Methods","title":"Instance Methods"},{"title":"Default Implementations","anchor":"Default-Implementations","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/CustomDebugStringConvertible-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/CustomReflectable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/Decodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/Encodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/ExpressibleByNilLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/Partializable-Implementations"]}],"kind":"symbol","references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/flatMap(_:)":{"url":"\/documentation\/compute\/optional\/flatmap(_:)","role":"symbol","abstract":[{"text":"Evaluates the given closure when this ","type":"text"},{"code":"Optional","type":"codeVoice"},{"type":"text","text":" instance is not "},{"code":"nil","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"passing the unwrapped value as a parameter."}],"kind":"symbol","title":"flatMap(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"flatMap"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"E"},{"kind":"text","text":", "},{"text":"U","kind":"genericParameter"},{"kind":"text","text":">(("},{"text":"Wrapped","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"U","kind":"typeIdentifier"},{"text":"?) ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"E"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"U"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/flatMap(_:)","type":"topic"},"doc://com.swallow.documentation.Compute/10Foundation26DecodableWithConfigurationP":{"title":"Foundation.DecodableWithConfiguration","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Foundation26DecodableWithConfigurationP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/some(_:)":{"kind":"symbol","url":"\/documentation\/compute\/optional\/some(_:)","title":"Optional.some(_:)","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"text":"some","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Wrapped"},{"text":")","kind":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/some(_:)","role":"symbol","abstract":[{"type":"text","text":"The presence of a value, stored as "},{"code":"Wrapped","type":"codeVoice"},{"type":"text","text":"."}]},"doc://com.swallow.documentation.Compute/7Swallow13DataEncodableP":{"title":"Swallow.DataEncodable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataEncodableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/ExpressibleByNilLiteral-Implementations":{"kind":"article","abstract":[],"type":"topic","role":"collectionGroup","title":"ExpressibleByNilLiteral Implementations","url":"\/documentation\/compute\/optional\/expressiblebynilliteral-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/ExpressibleByNilLiteral-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Encodable":{"abstract":[{"type":"text","text":"A type that can encode itself to an external representation."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Encodable","kind":"identifier"}],"navigatorTitle":[{"text":"Encodable","kind":"identifier"}],"conformance":{"constraints":[{"code":"Wrapped","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Encodable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"url":"\/documentation\/compute\/encodable","kind":"symbol","title":"Encodable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/!=(_:_:)-6xpzw":{"kind":"symbol","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"!="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"_OptionalNilComparisonType"},{"kind":"text","text":", "},{"text":"borrowing","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Wrapped"},{"text":"?) -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"url":"\/documentation\/compute\/optional\/!=(_:_:)-6xpzw","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/!=(_:_:)-6xpzw","abstract":[{"text":"Returns a Boolean value indicating whether the right-hand-side argument is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"not "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}],"title":"!=(_:_:)","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/CustomDebugStringConvertible-Implementations":{"role":"collectionGroup","url":"\/documentation\/compute\/optional\/customdebugstringconvertible-implementations","type":"topic","title":"CustomDebugStringConvertible Implementations","kind":"article","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/CustomDebugStringConvertible-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Copyable"}],"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Copyable"}],"abstract":[{"text":"A type whose values can be implicitly or explicitly copied.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","kind":"symbol","conformance":{"constraints":[{"code":"Wrapped","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/compute\/copyable","title":"Copyable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Partializable":{"abstract":[{"text":"A type that can be formed by coalescing its partials.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Partializable","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Partializable"}],"navigatorTitle":[{"text":"Partializable","kind":"identifier"}],"conformance":{"constraints":[{"code":"Wrapped","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Partializable"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"url":"\/documentation\/compute\/partializable","kind":"symbol","title":"Partializable"},"doc://com.swallow.documentation.Compute/7SwiftUI7GestureP":{"title":"SwiftUICore.Gesture","identifier":"doc:\/\/com.swallow.documentation.Compute\/7SwiftUI7GestureP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7SwiftUI8CommandsP":{"title":"SwiftUI.Commands","identifier":"doc:\/\/com.swallow.documentation.Compute\/7SwiftUI8CommandsP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/==(_:_:)-6ztpi":{"kind":"symbol","title":"==(_:_:)","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"==","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"_OptionalNilComparisonType","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"borrowing","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":"?) -> "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"url":"\/documentation\/compute\/optional\/==(_:_:)-6ztpi","role":"symbol","abstract":[{"text":"Returns a Boolean value indicating whether the right-hand-side argument is","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/==(_:_:)-6ztpi"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByNilLiteral":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ExpressibleByNilLiteral"}],"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ExpressibleByNilLiteral"}],"abstract":[{"text":"A type that can be initialized using the nil literal, ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByNilLiteral","kind":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Wrapped"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"url":"\/documentation\/compute\/expressiblebynilliteral","title":"ExpressibleByNilLiteral"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"Optional","kind":"identifier"}],"url":"\/documentation\/compute\/optional","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"Optional","kind":"identifier"}],"abstract":[{"type":"text","text":"A type that represents either a wrapped value or the absence of a value."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional","title":"Optional"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/Decodable-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/Decodable-Implementations","url":"\/documentation\/compute\/optional\/decodable-implementations","title":"Decodable Implementations","kind":"article","type":"topic","abstract":[]},"doc://com.swallow.documentation.Compute/7SwiftUI10TabContentP":{"title":"SwiftUI.TabContent","identifier":"doc:\/\/com.swallow.documentation.Compute\/7SwiftUI10TabContentP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/none":{"abstract":[{"type":"text","text":"The absence of a value."}],"kind":"symbol","title":"Optional.none","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/none","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"none"}],"url":"\/documentation\/compute\/optional\/none","type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/Equatable-Implementations":{"abstract":[],"title":"Equatable Implementations","url":"\/documentation\/compute\/optional\/equatable-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/Equatable-Implementations","kind":"article","type":"topic","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/7Swallow13DataDecodableP":{"title":"Swallow.DataDecodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataDecodableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/CustomReflectable-Implementations":{"kind":"article","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/CustomReflectable-Implementations","role":"collectionGroup","url":"\/documentation\/compute\/optional\/customreflectable-implementations","abstract":[],"title":"CustomReflectable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/init(_:)":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"keyword","text":"consuming"},{"text":" ","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic","role":"symbol","url":"\/documentation\/compute\/optional\/init(_:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/init(_:)","abstract":[{"type":"text","text":"Creates an instance that stores the given value."}],"title":"init(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/==(_:_:)-5uee5":{"title":"==(_:_:)","kind":"symbol","abstract":[{"text":"Returns a Boolean value indicating whether the left-hand-side argument is","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"url":"\/documentation\/compute\/optional\/==(_:_:)-5uee5","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"==","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"borrowing","kind":"keyword"},{"kind":"text","text":" "},{"text":"Wrapped","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"_OptionalNilComparisonType","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/==(_:_:)-5uee5"},"doc://com.swallow.documentation.Compute/7SwiftUI14ToolbarContentP":{"title":"SwiftUI.ToolbarContent","identifier":"doc:\/\/com.swallow.documentation.Compute\/7SwiftUI14ToolbarContentP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Equatable","kind":"identifier"}],"type":"topic","role":"symbol","navigatorTitle":[{"text":"Equatable","kind":"identifier"}],"abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","kind":"symbol","conformance":{"constraints":[{"code":"Wrapped","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/compute\/equatable","title":"Equatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/Hashable-Implementations":{"type":"topic","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/Hashable-Implementations","kind":"article","abstract":[],"url":"\/documentation\/compute\/optional\/hashable-implementations","title":"Hashable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/take()":{"url":"\/documentation\/compute\/optional\/take()","title":"take()","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/take()","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"take","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"Optional","preciseIdentifier":"s:Sq","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Wrapped"},{"text":">","kind":"text"}],"type":"topic","abstract":[{"type":"text","text":"Takes the wrapped value being stored in this instance and returns it while"},{"type":"text","text":" "},{"type":"text","text":"also setting the instance to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". If there is no value being stored in"},{"text":" ","type":"text"},{"type":"text","text":"this instance, this returns "},{"code":"nil","type":"codeVoice"},{"text":" instead.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/map(_:)":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/map(_:)","abstract":[{"type":"text","text":"Evaluates the given closure when this "},{"code":"Optional","type":"codeVoice"},{"type":"text","text":" instance is not "},{"code":"nil","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"passing the unwrapped value as a parameter."}],"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"map"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"E"},{"text":", ","kind":"text"},{"text":"U","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"U"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":"("},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"U"},{"kind":"text","text":"?"}],"role":"symbol","url":"\/documentation\/compute\/optional\/map(_:)","title":"map(_:)"},"doc://com.swallow.documentation.Compute/7SwiftUI4ViewP":{"title":"SwiftUICore.View","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7SwiftUI4ViewP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/unsafelyUnwrapped":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"unsafelyUnwrapped"},{"text":": ","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"}],"url":"\/documentation\/compute\/optional\/unsafelyunwrapped","title":"unsafelyUnwrapped","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/unsafelyUnwrapped","type":"topic","abstract":[{"text":"The wrapped value of this instance, unwrapped without checking whether","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the instance is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol"},"doc://com.swallow.documentation.Compute/7SwiftUI26CustomizableToolbarContentP":{"title":"SwiftUI.CustomizableToolbarContent","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7SwiftUI26CustomizableToolbarContentP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Decodable":{"abstract":[{"type":"text","text":"A type that can decode itself from an external representation."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Decodable"}],"navigatorTitle":[{"kind":"identifier","text":"Decodable"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"code":"Decodable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"url":"\/documentation\/compute\/decodable","kind":"symbol","title":"Decodable"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomDebugStringConvertible":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"CustomDebugStringConvertible","kind":"identifier"}],"type":"topic","role":"symbol","navigatorTitle":[{"text":"CustomDebugStringConvertible","kind":"identifier"}],"abstract":[{"text":"A type with a customized textual representation suitable for debugging","type":"text"},{"text":" ","type":"text"},{"text":"purposes.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","kind":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}]},"url":"\/documentation\/compute\/customdebugstringconvertible","title":"CustomDebugStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/~=(_:_:)":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"~="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"_OptionalNilComparisonType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"keyword","text":"borrowing"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"abstract":[{"text":"Returns a Boolean value indicating whether an argument matches ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}],"url":"\/documentation\/compute\/optional\/~=(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/~=(_:_:)","title":"~=(_:_:)"},"doc://com.swallow.documentation.Compute/7Swallow16OptionalProtocolP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16OptionalProtocolP","title":"Swallow.OptionalProtocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/Partializable-Implementations":{"title":"Partializable Implementations","url":"\/documentation\/compute\/optional\/partializable-implementations","role":"collectionGroup","type":"topic","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/Partializable-Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/10Foundation26EncodableWithConfigurationP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Foundation26EncodableWithConfigurationP","title":"Foundation.EncodableWithConfiguration"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Sendable","kind":"identifier"}],"navigatorTitle":[{"text":"Sendable","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Wrapped","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":" and ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}]},"url":"\/documentation\/compute\/sendable","kind":"symbol","title":"Sendable"},"doc://com.swallow.documentation.Compute/documentation/Compute/BitwiseCopyable":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"BitwiseCopyable","kind":"identifier"}],"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"BitwiseCopyable"}],"abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","kind":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Wrapped","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"BitwiseCopyable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"url":"\/documentation\/compute\/bitwisecopyable","title":"BitwiseCopyable"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomReflectable":{"abstract":[{"text":"A type that explicitly supplies its own mirror.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomReflectable","kind":"identifier"}],"navigatorTitle":[{"text":"CustomReflectable","kind":"identifier"}],"conformance":{"constraints":[{"code":"Wrapped","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/compute\/customreflectable","kind":"symbol","title":"CustomReflectable"},"doc://com.swallow.documentation.Compute/7SwiftUI15TableRowContentP":{"title":"SwiftUI.TableRowContent","identifier":"doc:\/\/com.swallow.documentation.Compute\/7SwiftUI15TableRowContentP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7SwiftUI18TableColumnContentP":{"title":"SwiftUI.TableColumnContent","identifier":"doc:\/\/com.swallow.documentation.Compute\/7SwiftUI18TableColumnContentP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/Encodable-Implementations":{"title":"Encodable Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/Encodable-Implementations","abstract":[],"type":"topic","kind":"article","role":"collectionGroup","url":"\/documentation\/compute\/optional\/encodable-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Hashable"}],"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Hashable"}],"abstract":[{"text":"A type that can be hashed into a ","type":"text"},{"code":"Hasher","type":"codeVoice"},{"text":" to produce an integer hash value.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","kind":"symbol","conformance":{"constraints":[{"code":"Wrapped","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"url":"\/documentation\/compute\/hashable","title":"Hashable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/!=(_:_:)-38b38":{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the left-hand-side argument is"},{"text":" ","type":"text"},{"type":"text","text":"not "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/!=(_:_:)-38b38","url":"\/documentation\/compute\/optional\/!=(_:_:)-38b38","title":"!=(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"!=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"borrowing","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":"?, "},{"text":"_OptionalNilComparisonType","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"kind":"symbol","role":"symbol"}}}