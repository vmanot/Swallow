{"sections":[],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/type(of:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"metadata":{"title":"type(of:)","roleHeading":"Function","externalID":"s:s4type2ofq_x_tr0_lF","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"type","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":", ","kind":"text"},{"text":"Metatype","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"of","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"text":"Metatype","kind":"typeIdentifier"}],"modules":[{"name":"Compute"}],"symbolKind":"func","role":"symbol"},"abstract":[{"type":"text","text":"Returns the dynamic type of a value."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"type","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":", ","kind":"text"},{"text":"Metatype","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"of"},{"kind":"text","text":" "},{"kind":"internalParam","text":"value"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Metatype"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The value for which to find the dynamic type."}],"type":"paragraph"}],"name":"value"}]},{"content":[{"type":"heading","level":2,"text":"Return Value","anchor":"return-value"},{"inlineContent":[{"text":"The dynamic type, which is a metatype instance.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"text":"You can use the ","type":"text"},{"type":"codeVoice","code":"type(of:)"},{"text":" function to find the dynamic type of a value,","type":"text"},{"type":"text","text":" "},{"text":"particularly when the dynamic type is different from the static type. The","type":"text"},{"text":" ","type":"text"},{"inlineContent":[{"text":"static type","type":"text"}],"type":"emphasis"},{"text":" of a value is the known, compile-time type of the value. The","type":"text"},{"type":"text","text":" "},{"inlineContent":[{"text":"dynamic type","type":"text"}],"type":"emphasis"},{"text":" of a value is the valueâ€™s actual type at run-time, which","type":"text"},{"text":" ","type":"text"},{"text":"can be a subtype of its concrete type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In the following code, the ","type":"text"},{"code":"count","type":"codeVoice"},{"type":"text","text":" variable has the same static and dynamic"},{"type":"text","text":" "},{"type":"text","text":"type: "},{"code":"Int","type":"codeVoice"},{"text":". When ","type":"text"},{"type":"codeVoice","code":"count"},{"text":" is passed to the ","type":"text"},{"code":"printInfo(_:)","type":"codeVoice"},{"type":"text","text":" function,"},{"text":" ","type":"text"},{"text":"however, the ","type":"text"},{"code":"value","type":"codeVoice"},{"type":"text","text":" parameter has a static type of "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" (the type"},{"type":"text","text":" "},{"text":"declared for the parameter) and a dynamic type of ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","code":["func printInfo(_ value: Any) {","    let t = type(of: value)","    print(\"'\\(value)' of type '\\(t)'\")","}","","let count: Int = 5","printInfo(count)","\/\/ '5' of type 'Int'"],"syntax":null},{"inlineContent":[{"text":"The dynamic type returned from ","type":"text"},{"code":"type(of:)","type":"codeVoice"},{"text":" is a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"concrete metatype","type":"text"}]},{"type":"text","text":" "},{"type":"text","text":"("},{"type":"codeVoice","code":"T.Type"},{"type":"text","text":") for a class, structure, enumeration, or other nonprotocol type"},{"type":"text","text":" "},{"code":"T","type":"codeVoice"},{"text":", or an ","type":"text"},{"inlineContent":[{"type":"text","text":"existential metatype"}],"type":"emphasis"},{"text":" (","type":"text"},{"type":"codeVoice","code":"P.Type"},{"text":") for a protocol or protocol","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"composition "},{"type":"codeVoice","code":"P"},{"type":"text","text":". When the static type of the value passed to "},{"code":"type(of:)","type":"codeVoice"},{"type":"text","text":" "},{"text":"is constrained to a class or protocol, you can use that metatype to access","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"initializers or other static members of the class or protocol."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the parameter passed as "},{"type":"codeVoice","code":"value"},{"type":"text","text":" to the "},{"code":"printSmileyInfo(_:)","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"function in the example below is an instance of the "},{"type":"codeVoice","code":"Smiley"},{"type":"text","text":" class or one"},{"text":" ","type":"text"},{"text":"of its subclasses. The function uses ","type":"text"},{"type":"codeVoice","code":"type(of:)"},{"type":"text","text":" to find the dynamic type"},{"type":"text","text":" "},{"type":"text","text":"of "},{"type":"codeVoice","code":"value"},{"text":", which itself is an instance of the ","type":"text"},{"code":"Smiley.Type","type":"codeVoice"},{"text":" metatype.","type":"text"}]},{"type":"codeListing","code":["class Smiley {","    class var text: String {","        return \":)\"","    }","}","","class EmojiSmiley: Smiley {","     override class var text: String {","        return \"ðŸ˜€\"","    }","}","","func printSmileyInfo(_ value: Smiley) {","    let smileyType = type(of: value)","    print(\"Smile!\", smileyType.text)","}","","let emojiSmiley = EmojiSmiley()","printSmileyInfo(emojiSmiley)","\/\/ Smile! ðŸ˜€"],"syntax":null},{"inlineContent":[{"text":"In this example, accessing the ","type":"text"},{"code":"text","type":"codeVoice"},{"type":"text","text":" property of the "},{"type":"codeVoice","code":"smileyType"},{"type":"text","text":" metatype"},{"text":" ","type":"text"},{"type":"text","text":"retrieves the overridden value from the "},{"type":"codeVoice","code":"EmojiSmiley"},{"text":" subclass, instead of","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"Smiley"},{"text":" classâ€™s original definition.","type":"text"}],"type":"paragraph"},{"level":1,"type":"heading","text":"Finding the Dynamic Type in a Generic Context","anchor":"Finding-the-Dynamic-Type-in-a-Generic-Context"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Normally, you donâ€™t need to be aware of the difference between concrete and"},{"text":" ","type":"text"},{"text":"existential metatypes, but calling ","type":"text"},{"type":"codeVoice","code":"type(of:)"},{"type":"text","text":" can yield unexpected"},{"text":" ","type":"text"},{"text":"results in a generic context with a type parameter bound to a protocol. In","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a case like this, where a generic parameter "},{"type":"codeVoice","code":"T"},{"type":"text","text":" is bound to a protocol"},{"type":"text","text":" "},{"type":"codeVoice","code":"P"},{"text":", the type parameter is not statically known to be a protocol type in","type":"text"},{"text":" ","type":"text"},{"text":"the body of the generic function. As a result, ","type":"text"},{"code":"type(of:)","type":"codeVoice"},{"text":" can only","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"produce the concrete metatype "},{"type":"codeVoice","code":"P.Protocol"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines a "},{"type":"codeVoice","code":"printGenericInfo(_:)"},{"text":" function that takes","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a generic parameter and declares the "},{"code":"String","type":"codeVoice"},{"text":" typeâ€™s conformance to a new","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"protocol "},{"type":"codeVoice","code":"P"},{"type":"text","text":". When "},{"type":"codeVoice","code":"printGenericInfo(_:)"},{"type":"text","text":" is called with a string that has"},{"text":" ","type":"text"},{"code":"P","type":"codeVoice"},{"type":"text","text":" as its static type, the call to "},{"code":"type(of:)","type":"codeVoice"},{"text":" returns ","type":"text"},{"type":"codeVoice","code":"P.self"},{"text":" instead","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of "},{"type":"codeVoice","code":"String.self"},{"text":" (the dynamic type inside the parameter).","type":"text"}]},{"type":"codeListing","syntax":null,"code":["func printGenericInfo<T>(_ value: T) {","    let t = type(of: value)","    print(\"'\\(value)' of type '\\(t)'\")","}","","protocol P {}","extension String: P {}","","let stringAsP: P = \"Hello!\"","printGenericInfo(stringAsP)","\/\/ 'Hello!' of type 'P'"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This unexpected result occurs because the call to "},{"type":"codeVoice","code":"type(of: value)"},{"type":"text","text":" inside"},{"type":"text","text":" "},{"type":"codeVoice","code":"printGenericInfo(_:)"},{"type":"text","text":" must return a metatype that is an instance of"},{"type":"text","text":" "},{"code":"T.Type","type":"codeVoice"},{"type":"text","text":", but "},{"code":"String.self","type":"codeVoice"},{"text":" (the expected dynamic type) is not an instance","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of "},{"type":"codeVoice","code":"P.Type"},{"text":" (the concrete metatype of ","type":"text"},{"type":"codeVoice","code":"value"},{"type":"text","text":"). To get the dynamic type"},{"type":"text","text":" "},{"type":"text","text":"inside "},{"type":"codeVoice","code":"value"},{"text":" in this generic context, cast the parameter to ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" when","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"calling "},{"type":"codeVoice","code":"type(of:)"},{"text":".","type":"text"}]},{"code":["func betterPrintGenericInfo<T>(_ value: T) {","    let t = type(of: value as Any)","    print(\"'\\(value)' of type '\\(t)'\")","}","","betterPrintGenericInfo(stringAsP)","\/\/ 'Hello!' of type 'String'"],"type":"codeListing","syntax":null}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/type(of:)"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/type(of:)":{"abstract":[{"type":"text","text":"Returns the dynamic type of a value."}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/type(of:)","title":"type(of:)","type":"topic","url":"\/documentation\/compute\/type(of:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"type"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":", "},{"text":"Metatype","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"of","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"text":"Metatype","kind":"typeIdentifier"}]}}}