{"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring","interfaceLanguage":"swift"},"kind":"symbol","abstract":[{"text":"A slice of a string.","type":"text"}],"topicSections":[{"title":"Operators","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/~=(_:_:)"],"generated":true,"anchor":"Operators"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/init()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/init(_:)-4njms","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/init(_:)-61zpv","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/init(_:)-7k0au"],"anchor":"Initializers","title":"Initializers","generated":true},{"anchor":"Instance-Properties","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/base","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/characters","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/isContiguousUTF8"],"title":"Instance Properties","generated":true},{"anchor":"Instance-Methods","title":"Instance Methods","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/filter(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/makeContiguousUTF8()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/replaceSubrange(_:with:)-mfwu","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/withMutableCharacters(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/withUTF8(_:)"],"generated":true},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/CharacterView"],"anchor":"Type-Aliases","generated":true,"title":"Type Aliases"},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/BidirectionalCollection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/Collection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/Comparable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/CustomDebugStringConvertible-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/CustomReflectable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/CustomStringConvertible-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/ExpressibleByExtendedGraphemeClusterLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/ExpressibleByStringInterpolation-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/ExpressibleByStringLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/ExpressibleByUnicodeScalarLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/LosslessStringConvertible-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/RangeReplaceableCollection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/Sequence-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/StringProtocol-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/TextOutputStream-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/TextOutputStreamable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/_CustomPlaygroundQuickLookable-Implementations"],"anchor":"Default-Implementations"}],"relationshipsSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByExtendedGraphemeClusterLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringInterpolation","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByUnicodeScalarLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","doc:\/\/com.swallow.documentation.Compute\/7Swallow9CountableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiffableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow36NonDestroyingBidirectionalCollectionP","doc:\/\/com.swallow.documentation.Compute\/7Swallow23NonDestroyingCollectionP","doc:\/\/com.swallow.documentation.Compute\/7Swallow21NonDestroyingSequenceP","doc:\/\/com.swallow.documentation.Compute\/7Swallow017SequenceInitiableB0P","doc:\/\/com.swallow.documentation.Compute\/7Swallow17StringConvertibleP","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TextOutputStream","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TextOutputStreamable"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Substring","kind":"identifier"}],"symbolKind":"struct","navigatorTitle":[{"text":"Substring","kind":"identifier"}],"externalID":"s:Ss","role":"symbol","title":"Substring","roleHeading":"Structure","modules":[{"name":"Compute"}]},"sections":[],"variants":[{"paths":["\/documentation\/compute\/substring"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"attribute","text":"@frozen"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Substring"}]}]},{"content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"When you create a slice of a string, a ","type":"text"},{"type":"codeVoice","code":"Substring"},{"type":"text","text":" instance is the result."},{"text":" ","type":"text"},{"text":"Operating on substrings is fast and efficient because a substring shares","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"its storage with the original string. The "},{"code":"Substring","type":"codeVoice"},{"type":"text","text":" type presents the"},{"type":"text","text":" "},{"text":"same interface as ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":", so you can avoid or defer any copying of the"},{"text":" ","type":"text"},{"type":"text","text":"stringâ€™s contents."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example creates a "},{"type":"codeVoice","code":"greeting"},{"type":"text","text":" string, and then finds the"},{"text":" ","type":"text"},{"type":"text","text":"substring of the first sentence:"}]},{"syntax":null,"code":["let greeting = \"Hi there! It's nice to meet you! ðŸ‘‹\"","let endOfSentence = greeting.firstIndex(of: \"!\")!","let firstSentence = greeting[...endOfSentence]","\/\/ firstSentence == \"Hi there!\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can perform many string operations on a substring. Here, we find the"},{"text":" ","type":"text"},{"type":"text","text":"length of the first sentence and create an uppercase version."}]},{"syntax":null,"type":"codeListing","code":["print(\"'\\(firstSentence)' is \\(firstSentence.count) characters long.\")","\/\/ Prints \"'Hi there!' is 9 characters long.\"","","let shoutingSentence = firstSentence.uppercased()","\/\/ shoutingSentence == \"HI THERE!\""]},{"anchor":"Converting-a-Substring-to-a-String","level":1,"type":"heading","text":"Converting a Substring to a String"},{"type":"paragraph","inlineContent":[{"text":"This example defines a ","type":"text"},{"code":"rawData","type":"codeVoice"},{"type":"text","text":" string with some unstructured data, and"},{"type":"text","text":" "},{"type":"text","text":"then uses the stringâ€™s "},{"type":"codeVoice","code":"prefix(while:)"},{"type":"text","text":" method to create a substring of"},{"text":" ","type":"text"},{"type":"text","text":"the numeric prefix:"}]},{"type":"codeListing","code":["let rawInput = \"126 a.b 22219 zzzzzz\"","let numericPrefix = rawInput.prefix(while: { \"0\"...\"9\" ~= $0 })","\/\/ numericPrefix is the substring \"126\""],"syntax":null},{"inlineContent":[{"type":"text","text":"When you need to store a substring or pass it to a function that requires a"},{"text":" ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":" instance, you can convert it to a "},{"code":"String","type":"codeVoice"},{"type":"text","text":" by using the"},{"type":"text","text":" "},{"type":"codeVoice","code":"String(_:)"},{"text":" initializer. Calling this initializer copies the contents of","type":"text"},{"type":"text","text":" "},{"text":"the substring to a new string.","type":"text"}],"type":"paragraph"},{"code":["func parseAndAddOne(_ s: String) -> Int {","    return Int(s, radix: 10)! + 1","}","_ = parseAndAddOne(numericPrefix)","\/\/ error: cannot convert value...","let incrementedPrefix = parseAndAddOne(String(numericPrefix))","\/\/ incrementedPrefix == 127"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, you can convert the function that takes a "},{"type":"codeVoice","code":"String"},{"text":" to one","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that is generic over the "},{"code":"StringProtocol","type":"codeVoice"},{"type":"text","text":" protocol. The following code"},{"text":" ","type":"text"},{"text":"declares a generic version of the ","type":"text"},{"type":"codeVoice","code":"parseAndAddOne(_:)"},{"type":"text","text":" function:"}]},{"syntax":null,"code":["func genericParseAndAddOne<S: StringProtocol>(_ s: S) -> Int {","    return Int(s, radix: 10)! + 1","}","let genericallyIncremented = genericParseAndAddOne(numericPrefix)","\/\/ genericallyIncremented == 127"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can call this generic function with an instance of either "},{"code":"String","type":"codeVoice"},{"type":"text","text":" or"},{"type":"text","text":" "},{"type":"codeVoice","code":"Substring"},{"text":".","type":"text"}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Donâ€™t store substrings longer than you need them to perform a","type":"text"},{"type":"text","text":" "},{"text":"specific operation. A substring holds a reference to the entire storage","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the string it comes from, not just to the portion it presents, even"},{"text":" ","type":"text"},{"text":"when there is no other reference to the original string. Storing","type":"text"},{"type":"text","text":" "},{"text":"substrings may, therefore, prolong the lifetime of string data that is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"no longer otherwise accessible, which can appear to be memory leakage."}]}],"style":"important","name":"Important"}],"kind":"content"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/init(_:)-61zpv":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/init(_:)-61zpv","type":"topic","url":"\/documentation\/compute\/substring\/init(_:)-61zpv","abstract":[{"text":"Creates a Substring having the given content.","type":"text"}],"role":"symbol","title":"init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Substring","kind":"typeIdentifier","preciseIdentifier":"s:Ss"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"UTF16View","preciseIdentifier":"s:Ss9UTF16ViewV"},{"text":")","kind":"text"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomDebugStringConvertible":{"url":"\/documentation\/compute\/customdebugstringconvertible","role":"symbol","abstract":[{"text":"A type with a customized textual representation suitable for debugging","type":"text"},{"type":"text","text":" "},{"text":"purposes.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","title":"CustomDebugStringConvertible","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomDebugStringConvertible","kind":"identifier"}],"navigatorTitle":[{"text":"CustomDebugStringConvertible","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"url":"\/documentation\/compute\/sequence","navigatorTitle":[{"kind":"identifier","text":"Sequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","title":"Sequence","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Sequence","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/LosslessStringConvertible-Implementations":{"kind":"article","title":"LosslessStringConvertible Implementations","abstract":[],"role":"collectionGroup","type":"topic","url":"\/documentation\/compute\/substring\/losslessstringconvertible-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/LosslessStringConvertible-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"title":"Copyable","abstract":[{"type":"text","text":"A type whose values can be implicitly or explicitly copied."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Copyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","url":"\/documentation\/compute\/copyable","navigatorTitle":[{"text":"Copyable","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/ExpressibleByExtendedGraphemeClusterLiteral-Implementations":{"url":"\/documentation\/compute\/substring\/expressiblebyextendedgraphemeclusterliteral-implementations","role":"collectionGroup","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/ExpressibleByExtendedGraphemeClusterLiteral-Implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/withMutableCharacters(_:)":{"deprecated":true,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withMutableCharacters","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"text":">((","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:Ss","text":"Substring"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") -> "},{"text":"R","kind":"typeIdentifier"}],"kind":"symbol","title":"withMutableCharacters(_:)","abstract":[{"text":"Applies the given closure to a mutable view of the stringâ€™s characters.","type":"text"}],"role":"symbol","type":"topic","url":"\/documentation\/compute\/substring\/withmutablecharacters(_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/withMutableCharacters(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/TextOutputStream-Implementations":{"url":"\/documentation\/compute\/substring\/textoutputstream-implementations","role":"collectionGroup","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/TextOutputStream-Implementations","title":"TextOutputStream Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/ExpressibleByUnicodeScalarLiteral-Implementations":{"kind":"article","title":"ExpressibleByUnicodeScalarLiteral Implementations","abstract":[],"role":"collectionGroup","type":"topic","url":"\/documentation\/compute\/substring\/expressiblebyunicodescalarliteral-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/ExpressibleByUnicodeScalarLiteral-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible":{"url":"\/documentation\/compute\/customstringconvertible","navigatorTitle":[{"kind":"identifier","text":"CustomStringConvertible"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomStringConvertible","kind":"identifier"}],"abstract":[{"text":"A type with a customized textual representation.","type":"text"}],"type":"topic","title":"CustomStringConvertible","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByUnicodeScalarLiteral":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressibleByUnicodeScalarLiteral"}],"kind":"symbol","title":"ExpressibleByUnicodeScalarLiteral","abstract":[{"text":"A type that can be initialized with a string literal containing a single","type":"text"},{"type":"text","text":" "},{"text":"Unicode scalar value.","type":"text"}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExpressibleByUnicodeScalarLiteral"}],"url":"\/documentation\/compute\/expressiblebyunicodescalarliteral","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByUnicodeScalarLiteral"},"doc://com.swallow.documentation.Compute/documentation/Compute/BidirectionalCollection":{"navigatorTitle":[{"text":"BidirectionalCollection","kind":"identifier"}],"abstract":[{"text":"A collection that supports backward as well as forward traversal.","type":"text"}],"title":"BidirectionalCollection","kind":"symbol","url":"\/documentation\/compute\/bidirectionalcollection","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BidirectionalCollection"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalCollection","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring":{"navigatorTitle":[{"kind":"identifier","text":"Substring"}],"url":"\/documentation\/compute\/substring","title":"Substring","abstract":[{"text":"A slice of a string.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Substring","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/BidirectionalCollection-Implementations":{"url":"\/documentation\/compute\/substring\/bidirectionalcollection-implementations","role":"collectionGroup","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/BidirectionalCollection-Implementations","title":"BidirectionalCollection Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/RangeReplaceableCollection-Implementations":{"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/RangeReplaceableCollection-Implementations","url":"\/documentation\/compute\/substring\/rangereplaceablecollection-implementations","title":"RangeReplaceableCollection Implementations","abstract":[],"type":"topic","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByStringInterpolation":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressibleByStringInterpolation"}],"kind":"symbol","title":"ExpressibleByStringInterpolation","abstract":[{"type":"text","text":"A type that can be initialized by string interpolation with a string"},{"text":" ","type":"text"},{"type":"text","text":"literal that includes expressions."}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExpressibleByStringInterpolation"}],"url":"\/documentation\/compute\/expressiblebystringinterpolation","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringInterpolation"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/base":{"url":"\/documentation\/compute\/substring\/base","role":"symbol","abstract":[{"type":"text","text":"Returns the underlying string from which this substring was derived."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/base","title":"base","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"base"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/ExpressibleByStringLiteral-Implementations":{"kind":"article","title":"ExpressibleByStringLiteral Implementations","abstract":[],"role":"collectionGroup","type":"topic","url":"\/documentation\/compute\/substring\/expressiblebystringliteral-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/ExpressibleByStringLiteral-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/characters":{"url":"\/documentation\/compute\/substring\/characters","role":"symbol","abstract":[{"type":"text","text":"A view of the stringâ€™s contents as a collection of characters."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/characters","title":"characters","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"characters"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Substring","preciseIdentifier":"s:Ss"}],"deprecated":true,"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/ExpressibleByStringInterpolation-Implementations":{"kind":"article","title":"ExpressibleByStringInterpolation Implementations","abstract":[],"role":"collectionGroup","type":"topic","url":"\/documentation\/compute\/substring\/expressiblebystringinterpolation-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/ExpressibleByStringInterpolation-Implementations"},"doc://com.swallow.documentation.Compute/7Swallow23NonDestroyingCollectionP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow23NonDestroyingCollectionP","type":"unresolvable","title":"Swallow.NonDestroyingCollection"},"doc://com.swallow.documentation.Compute/7Swallow9CountableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow9CountableP","type":"unresolvable","title":"Swallow.Countable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/_CustomPlaygroundQuickLookable-Implementations":{"url":"\/documentation\/compute\/substring\/_customplaygroundquicklookable-implementations","role":"collectionGroup","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/_CustomPlaygroundQuickLookable-Implementations","title":"_CustomPlaygroundQuickLookable Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByExtendedGraphemeClusterLiteral":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressibleByExtendedGraphemeClusterLiteral"}],"kind":"symbol","title":"ExpressibleByExtendedGraphemeClusterLiteral","abstract":[{"type":"text","text":"A type that can be initialized with a string literal containing a single"},{"type":"text","text":" "},{"text":"extended grapheme cluster.","type":"text"}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"ExpressibleByExtendedGraphemeClusterLiteral","kind":"identifier"}],"url":"\/documentation\/compute\/expressiblebyextendedgraphemeclusterliteral","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByExtendedGraphemeClusterLiteral"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Sendable","kind":"identifier"}],"title":"Sendable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","abstract":[],"url":"\/documentation\/compute\/sendable","role":"symbol","navigatorTitle":[{"text":"Sendable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/CustomReflectable-Implementations":{"url":"\/documentation\/compute\/substring\/customreflectable-implementations","role":"collectionGroup","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/CustomReflectable-Implementations","title":"CustomReflectable Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/7Swallow21NonDestroyingSequenceP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21NonDestroyingSequenceP","title":"Swallow.NonDestroyingSequence","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow8DiffableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiffableP","title":"Swallow.Diffable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/Sequence-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/Sequence-Implementations","type":"topic","title":"Sequence Implementations","role":"collectionGroup","url":"\/documentation\/compute\/substring\/sequence-implementations","kind":"article","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/CustomDebugStringConvertible-Implementations":{"kind":"article","title":"CustomDebugStringConvertible Implementations","abstract":[],"role":"collectionGroup","type":"topic","url":"\/documentation\/compute\/substring\/customdebugstringconvertible-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/CustomDebugStringConvertible-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable":{"url":"\/documentation\/compute\/comparable","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared using the relational operators ","type":"text"},{"code":"<","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Comparable"}],"title":"Comparable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Comparable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/Collection-Implementations":{"role":"collectionGroup","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/Collection-Implementations","type":"topic","kind":"article","title":"Collection Implementations","url":"\/documentation\/compute\/substring\/collection-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Hashable"}],"title":"Hashable","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that can be hashed into a "},{"type":"codeVoice","code":"Hasher"},{"type":"text","text":" to produce an integer hash value."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","url":"\/documentation\/compute\/hashable","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Collection"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","url":"\/documentation\/compute\/collection","abstract":[{"type":"text","text":"A sequence whose elements can be traversed multiple times,"},{"text":" ","type":"text"},{"text":"nondestructively, and accessed by an indexed subscript.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Collection"}],"title":"Collection"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomReflectable":{"url":"\/documentation\/compute\/customreflectable","role":"symbol","abstract":[{"text":"A type that explicitly supplies its own mirror.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","title":"CustomReflectable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomReflectable"}],"navigatorTitle":[{"kind":"identifier","text":"CustomReflectable"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/TextOutputStream":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TextOutputStream"}],"kind":"symbol","title":"TextOutputStream","abstract":[{"type":"text","text":"A type that can be the target of text-streaming operations."}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"TextOutputStream","kind":"identifier"}],"url":"\/documentation\/compute\/textoutputstream","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TextOutputStream"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/init(_:)-7k0au":{"url":"\/documentation\/compute\/substring\/init(_:)-7k0au","role":"symbol","abstract":[{"text":"Creates a Substring having the given content.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/init(_:)-7k0au","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"Substring","kind":"typeIdentifier","preciseIdentifier":"s:Ss"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Ss17UnicodeScalarViewV","text":"UnicodeScalarView"},{"kind":"text","text":")"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/init(_:)-4njms":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"Substring","kind":"typeIdentifier","preciseIdentifier":"s:Ss"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Ss8UTF8ViewV","text":"UTF8View"},{"text":")","kind":"text"}],"kind":"symbol","title":"init(_:)","abstract":[{"type":"text","text":"Creates a Substring having the given content."}],"role":"symbol","type":"topic","url":"\/documentation\/compute\/substring\/init(_:)-4njms","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/init(_:)-4njms"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/StringProtocol-Implementations":{"url":"\/documentation\/compute\/substring\/stringprotocol-implementations","title":"StringProtocol Implementations","abstract":[],"type":"topic","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/StringProtocol-Implementations","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"type":"topic","title":"Equatable","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","role":"symbol","url":"\/documentation\/compute\/equatable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/withUTF8(_:)":{"url":"\/documentation\/compute\/substring\/withutf8(_:)","role":"symbol","abstract":[{"type":"text","text":"Runs "},{"code":"body","type":"codeVoice"},{"type":"text","text":" over the content of this substring in contiguous memory. If"},{"text":" ","type":"text"},{"type":"text","text":"this substring is not contiguous, this will first make it contiguous,"},{"type":"text","text":" "},{"text":"which will also speed up subsequent access. If this mutates the substring,","type":"text"},{"text":" ","type":"text"},{"text":"it will invalidate any pre-existing indices.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/withUTF8(_:)","title":"withUTF8(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withUTF8","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeBufferPointer","preciseIdentifier":"s:SR","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"UInt8","kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/makeContiguousUTF8()":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"makeContiguousUTF8","kind":"identifier"},{"kind":"text","text":"()"}],"kind":"symbol","title":"makeContiguousUTF8()","abstract":[{"text":"If this string is not contiguous, make it so. If this mutates the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"substring, it will invalidate any pre-existing indices."}],"role":"symbol","type":"topic","url":"\/documentation\/compute\/substring\/makecontiguousutf8()","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/makeContiguousUTF8()"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/replaceSubrange(_:with:)-mfwu":{"url":"\/documentation\/compute\/substring\/replacesubrange(_:with:)-mfwu","role":"symbol","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/replaceSubrange(_:with:)-mfwu","title":"replaceSubrange(_:with:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"replaceSubrange"},{"kind":"text","text":"("},{"text":"Range","kind":"typeIdentifier","preciseIdentifier":"s:Sn"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Substring","preciseIdentifier":"s:Ss"},{"text":".","kind":"text"},{"text":"Index","kind":"typeIdentifier","preciseIdentifier":"s:Ss5Indexa"},{"text":">, ","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Substring","kind":"typeIdentifier","preciseIdentifier":"s:Ss"},{"text":")","kind":"text"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/LosslessStringConvertible":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LosslessStringConvertible","kind":"identifier"}],"kind":"symbol","title":"LosslessStringConvertible","abstract":[{"type":"text","text":"A type that can be represented as a string in a lossless, unambiguous way."}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"LosslessStringConvertible","kind":"identifier"}],"url":"\/documentation\/compute\/losslessstringconvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/Comparable-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/Comparable-Implementations","kind":"article","type":"topic","role":"collectionGroup","abstract":[],"title":"Comparable Implementations","url":"\/documentation\/compute\/substring\/comparable-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeReplaceableCollection":{"type":"topic","title":"RangeReplaceableCollection","abstract":[{"text":"A collection that supports replacement of an arbitrary subrange of elements","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with the elements of another collection."}],"url":"\/documentation\/compute\/rangereplaceablecollection","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"RangeReplaceableCollection","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableCollection","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"RangeReplaceableCollection","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/StringProtocol":{"url":"\/documentation\/compute\/stringprotocol","role":"symbol","abstract":[{"type":"text","text":"A type that can represent a string as a collection of characters."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","title":"StringProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StringProtocol","kind":"identifier"}],"navigatorTitle":[{"text":"StringProtocol","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/TextOutputStreamable":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TextOutputStreamable","kind":"identifier"}],"kind":"symbol","title":"TextOutputStreamable","abstract":[{"text":"A source of text-streaming operations.","type":"text"}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"TextOutputStreamable","kind":"identifier"}],"url":"\/documentation\/compute\/textoutputstreamable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TextOutputStreamable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/TextOutputStreamable-Implementations":{"url":"\/documentation\/compute\/substring\/textoutputstreamable-implementations","role":"collectionGroup","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/TextOutputStreamable-Implementations","title":"TextOutputStreamable Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/7Swallow017SequenceInitiableB0P":{"type":"unresolvable","title":"Swallow.SequenceInitiableSequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow017SequenceInitiableB0P"},"doc://com.swallow.documentation.Compute/7Swallow36NonDestroyingBidirectionalCollectionP":{"type":"unresolvable","title":"Swallow.NonDestroyingBidirectionalCollection","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow36NonDestroyingBidirectionalCollectionP"},"doc://com.swallow.documentation.Compute/7Swallow17StringConvertibleP":{"type":"unresolvable","title":"Swallow.StringConvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow17StringConvertibleP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/filter(_:)":{"url":"\/documentation\/compute\/substring\/filter(_:)","role":"symbol","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/filter(_:)","title":"filter(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"filter","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Substring","kind":"typeIdentifier","preciseIdentifier":"s:Ss"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:Ss7Elementa","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/isContiguousUTF8":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"isContiguousUTF8","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"kind":"symbol","title":"isContiguousUTF8","abstract":[{"text":"Returns whether this string is capable of providing access to","type":"text"},{"type":"text","text":" "},{"text":"validly-encoded UTF-8 contents in contiguous memory in O(1) time.","type":"text"}],"role":"symbol","type":"topic","url":"\/documentation\/compute\/substring\/iscontiguousutf8","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/isContiguousUTF8"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/CustomStringConvertible-Implementations":{"url":"\/documentation\/compute\/substring\/customstringconvertible-implementations","role":"collectionGroup","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/CustomStringConvertible-Implementations","title":"CustomStringConvertible Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByStringLiteral":{"abstract":[{"type":"text","text":"A type that can be initialized with a string literal."}],"type":"topic","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ExpressibleByStringLiteral","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringLiteral","title":"ExpressibleByStringLiteral","url":"\/documentation\/compute\/expressiblebystringliteral","navigatorTitle":[{"text":"ExpressibleByStringLiteral","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/Hashable-Implementations":{"kind":"article","title":"Hashable Implementations","abstract":[],"role":"collectionGroup","type":"topic","url":"\/documentation\/compute\/substring\/hashable-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/Hashable-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/~=(_:_:)":{"url":"\/documentation\/compute\/substring\/~=(_:_:)","role":"symbol","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/~=(_:_:)","title":"~=(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"~=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:Ss","text":"Substring"},{"text":", ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/CharacterView":{"deprecated":true,"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CharacterView","kind":"identifier"}],"kind":"symbol","title":"Substring.CharacterView","abstract":[{"type":"text","text":"A view of a stringâ€™s contents as a collection of characters."}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CharacterView"}],"url":"\/documentation\/compute\/substring\/characterview","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/CharacterView"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/init()":{"url":"\/documentation\/compute\/substring\/init()","role":"symbol","abstract":[{"text":"Creates an empty substring.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/init()","title":"init()","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/Equatable-Implementations":{"kind":"article","title":"Equatable Implementations","abstract":[],"role":"collectionGroup","type":"topic","url":"\/documentation\/compute\/substring\/equatable-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/Equatable-Implementations"}}}