{"kind":"symbol","sections":[],"variants":[{"paths":["\/documentation\/compute\/closedrange\/relative(to:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"relative","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"to"},{"kind":"text","text":" "},{"text":"collection","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","text":"Range","preciseIdentifier":"s:Sn"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection\/Index","preciseIdentifier":"s:Sl5IndexQa","text":"Index"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","preciseIdentifier":"s:Sl","text":"Collection"}]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The collection to evaluate this range expression","type":"text"},{"type":"text","text":" "},{"type":"text","text":"in relation to."}]}],"name":"collection"}],"kind":"parameters"},{"content":[{"level":2,"text":"Return Value","type":"heading","anchor":"return-value"},{"inlineContent":[{"text":"A range suitable for slicing ","type":"text"},{"code":"collection","type":"codeVoice"},{"type":"text","text":". The returned range"},{"text":" ","type":"text"},{"type":"text","text":"is "},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"type":"text","text":" guaranteed to be inside the bounds of "},{"code":"collection","type":"codeVoice"},{"text":". Callers","type":"text"},{"type":"text","text":" "},{"type":"text","text":"should apply the same preconditions to the return value as they would"},{"type":"text","text":" "},{"text":"to a range provided directly by the user.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use the "},{"type":"codeVoice","code":"relative(to:)"},{"type":"text","text":" method to convert a range expression,"},{"text":" ","type":"text"},{"type":"text","text":"which could be missing one or both of its endpoints, into a concrete"},{"type":"text","text":" "},{"text":"range that is bounded on both sides. The following example uses this","type":"text"},{"text":" ","type":"text"},{"text":"method to convert a partial range up to ","type":"text"},{"code":"4","type":"codeVoice"},{"type":"text","text":" into a half-open range,"},{"type":"text","text":" "},{"text":"using an array instance to add the range’s lower bound.","type":"text"}]},{"type":"codeListing","code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","let upToFour = ..<4","","let r1 = upToFour.relative(to: numbers)","\/\/ r1 == 0..<4"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"r1","type":"codeVoice"},{"text":" range is bounded on the lower end by ","type":"text"},{"type":"codeVoice","code":"0"},{"text":" because that is the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"starting index of the "},{"code":"numbers","type":"codeVoice"},{"type":"text","text":" array. When the collection passed to"},{"text":" ","type":"text"},{"code":"relative(to:)","type":"codeVoice"},{"text":" starts with a different index, that index is used as the","type":"text"},{"text":" ","type":"text"},{"text":"lower bound instead. The next example creates a slice of ","type":"text"},{"code":"numbers","type":"codeVoice"},{"type":"text","text":" "},{"text":"starting at index ","type":"text"},{"code":"2","type":"codeVoice"},{"type":"text","text":", and then uses the slice with "},{"code":"relative(to:)","type":"codeVoice"},{"text":" to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"convert "},{"code":"upToFour","type":"codeVoice"},{"text":" to a concrete range.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let numbersSuffix = numbers[2...]","\/\/ numbersSuffix == [30, 40, 50, 60, 70]","","let r2 = upToFour.relative(to: numbersSuffix)","\/\/ r2 == 2..<4"]},{"inlineContent":[{"text":"Use this method only if you need the concrete range it produces. To","type":"text"},{"text":" ","type":"text"},{"text":"access a slice of a collection using a range expression, use the","type":"text"},{"type":"text","text":" "},{"text":"collection’s generic subscript that uses a range expression as its","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"parameter."}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let numbersPrefix = numbers[upToFour]","\/\/ numbersPrefix == [10, 20, 30, 40]"]}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/RangeExpression-Implementations"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/relative(to:)"},"metadata":{"extendedModule":"Swift","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"relative","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"C"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":">"}],"roleHeading":"Instance Method","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"externalID":"s:SN8relative2toSnyxGqd___t5IndexQyd__RszSlRd__lF","symbolKind":"method","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}]},"title":"relative(to:)","role":"symbol"},"abstract":[{"text":"Returns the range of indices described by this range expression within","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the given collection."}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Range":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Range","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","url":"\/documentation\/compute\/range","abstract":[{"text":"A half-open interval from a lower bound up to, but not including, an upper","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"bound."}],"navigatorTitle":[{"text":"Range","kind":"identifier"}],"title":"Range"},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Collection"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","url":"\/documentation\/compute\/collection","abstract":[{"type":"text","text":"A sequence whose elements can be traversed multiple times,"},{"text":" ","type":"text"},{"text":"nondestructively, and accessed by an indexed subscript.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Collection"}],"title":"Collection"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ClosedRange","kind":"identifier"}],"role":"symbol","title":"ClosedRange","url":"\/documentation\/compute\/closedrange","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange","abstract":[{"text":"An interval from a lower bound up to, and including, an upper bound.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"ClosedRange","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection/Index":{"url":"\/documentation\/compute\/collection\/index","required":true,"role":"symbol","title":"Index","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Index","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"Comparable","preciseIdentifier":"s:SL","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"A type that represents a position in the collection."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection\/Index","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/RangeExpression-Implementations":{"abstract":[],"url":"\/documentation\/compute\/closedrange\/rangeexpression-implementations","title":"RangeExpression Implementations","role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/RangeExpression-Implementations","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/relative(to:)":{"url":"\/documentation\/compute\/closedrange\/relative(to:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/relative(to:)","type":"topic","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"abstract":[{"text":"Returns the range of indices described by this range expression within","type":"text"},{"type":"text","text":" "},{"text":"the given collection.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"relative","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"C"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":">"}],"title":"relative(to:)","kind":"symbol"}}}