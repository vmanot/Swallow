{"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"attribute","text":"@frozen"},{"kind":"text","text":" "},{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PartialRangeUpTo","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Bound"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"Comparable","preciseIdentifier":"s:SL","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","kind":"typeIdentifier"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"text":"You create ","type":"text"},{"code":"PartialRangeUpTo","type":"codeVoice"},{"type":"text","text":" instances by using the prefix half-open range"},{"text":" ","type":"text"},{"type":"text","text":"operator (prefix "},{"code":"..<","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let upToFive = ..<5.0"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use a "},{"code":"PartialRangeUpTo","type":"codeVoice"},{"type":"text","text":" instance to quickly check if a value is"},{"type":"text","text":" "},{"type":"text","text":"contained in a particular range of values. For example:"}]},{"type":"codeListing","code":["upToFive.contains(3.14)       \/\/ true","upToFive.contains(6.28)       \/\/ false","upToFive.contains(5.0)        \/\/ false"],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"You can use a ","type":"text"},{"type":"codeVoice","code":"PartialRangeUpTo"},{"text":" instance of a collection’s indices to","type":"text"},{"text":" ","type":"text"},{"text":"represent the range from the start of the collection up to, but not","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including, the partial range’s upper bound."}]},{"syntax":null,"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[..<3])","\/\/ Prints \"[10, 20, 30]\""],"type":"codeListing"}]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"abstract":[{"type":"text","text":"A partial half-open interval up to, but not including, an upper bound."}],"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo\/init(_:)"],"generated":true,"anchor":"Initializers"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo\/upperBound"],"anchor":"Instance-Properties","title":"Instance Properties","generated":true},{"generated":true,"anchor":"Default-Implementations","title":"Default Implementations","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo\/Decodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo\/Encodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo\/RangeExpression-Implementations"]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo"},"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable"],"title":"Conforms To","type":"conformsTo"}],"metadata":{"role":"symbol","modules":[{"name":"Compute"}],"externalID":"s:s16PartialRangeUpToV","navigatorTitle":[{"kind":"identifier","text":"PartialRangeUpTo"}],"symbolKind":"struct","title":"PartialRangeUpTo","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PartialRangeUpTo"}],"roleHeading":"Structure"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/partialrangeupto"]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable":{"url":"\/documentation\/compute\/comparable","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared using the relational operators ","type":"text"},{"code":"<","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Comparable"}],"title":"Comparable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Comparable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeUpTo/Decodable-Implementations":{"abstract":[],"url":"\/documentation\/compute\/partialrangeupto\/decodable-implementations","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo\/Decodable-Implementations","type":"topic","kind":"article","title":"Decodable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/compute\/copyable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","title":"Copyable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Copyable"}],"navigatorTitle":[{"text":"Copyable","kind":"identifier"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"abstract":[{"type":"text","text":"A type whose values can be implicitly or explicitly copied."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Encodable":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","abstract":[{"type":"text","text":"A type that can encode itself to an external representation."}],"url":"\/documentation\/compute\/encodable","title":"Encodable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Encodable"}],"navigatorTitle":[{"kind":"identifier","text":"Encodable"}],"role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Encodable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeUpTo/upperBound":{"title":"upperBound","url":"\/documentation\/compute\/partialrangeupto\/upperbound","abstract":[],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo\/upperBound","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"text":"upperBound","kind":"identifier"},{"kind":"text","text":": "},{"text":"Bound","kind":"typeIdentifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeUpTo":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"PartialRangeUpTo","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/partialrangeupto","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo","abstract":[{"type":"text","text":"A partial half-open interval up to, but not including, an upper bound."}],"navigatorTitle":[{"text":"PartialRangeUpTo","kind":"identifier"}],"title":"PartialRangeUpTo"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeUpTo/Encodable-Implementations":{"url":"\/documentation\/compute\/partialrangeupto\/encodable-implementations","kind":"article","role":"collectionGroup","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo\/Encodable-Implementations","title":"Encodable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeUpTo/init(_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo\/init(_:)","abstract":[],"type":"topic","url":"\/documentation\/compute\/partialrangeupto\/init(_:)","kind":"symbol","title":"init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"abstract":[],"title":"Sendable","url":"\/documentation\/compute\/sendable","navigatorTitle":[{"text":"Sendable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Sendable"}],"kind":"symbol","type":"topic","role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"text":" and ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeUpTo/RangeExpression-Implementations":{"url":"\/documentation\/compute\/partialrangeupto\/rangeexpression-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo\/RangeExpression-Implementations","type":"topic","role":"collectionGroup","abstract":[],"title":"RangeExpression Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/Decodable":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/compute\/decodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","title":"Decodable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Decodable","kind":"identifier"}],"navigatorTitle":[{"text":"Decodable","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"text":" and ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":".","type":"text"}]},"abstract":[{"type":"text","text":"A type that can decode itself from an external representation."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeExpression":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression","abstract":[{"text":"A type that can be used to slice a collection.","type":"text"}],"url":"\/documentation\/compute\/rangeexpression","title":"RangeExpression","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RangeExpression"}],"navigatorTitle":[{"text":"RangeExpression","kind":"identifier"}],"role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"type":"topic"}}}