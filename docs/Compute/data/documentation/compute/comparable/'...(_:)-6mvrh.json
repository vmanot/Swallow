{"kind":"symbol","identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable\/...(_:)-6mvrh","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/compute\/comparable\/'...(_:)-6mvrh"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable"]]},"sections":[],"abstract":[{"text":"Returns a partial range extending upward from a lower bound.","type":"text"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"...","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"minimum","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"text":"PartialRangeFrom","preciseIdentifier":"s:s16PartialRangeFromV","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["macOS"]}]},{"parameters":[{"name":"minimum","content":[{"inlineContent":[{"type":"text","text":"The lower bound for the range."}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"Use the postfix range operator (postfix "},{"type":"codeVoice","code":"..."},{"type":"text","text":") to create a partial range"},{"text":" ","type":"text"},{"type":"text","text":"of any type that conforms to the "},{"type":"codeVoice","code":"Comparable"},{"text":" protocol. This example","type":"text"},{"text":" ","type":"text"},{"text":"creates a ","type":"text"},{"code":"PartialRangeFrom<Double>","type":"codeVoice"},{"type":"text","text":" instance that includes any value"},{"type":"text","text":" "},{"text":"greater than or equal to ","type":"text"},{"code":"5.0","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let atLeastFive = 5.0...","","atLeastFive.contains(4.0)     \/\/ false","atLeastFive.contains(5.0)     \/\/ true","atLeastFive.contains(6.0)     \/\/ true"]},{"inlineContent":[{"type":"text","text":"You can use this type of partial range of a collection’s indices to"},{"type":"text","text":" "},{"type":"text","text":"represent the range from the partial range’s lower bound up to the end"},{"type":"text","text":" "},{"type":"text","text":"of the collection."}],"type":"paragraph"},{"syntax":null,"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[3...])","\/\/ Prints \"[40, 50, 60, 70]\""],"type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"minimum"},{"text":" must compare equal to itself (i.e. cannot be NaN).","type":"text"}]}],"name":"Precondition","type":"aside","style":"note"}],"kind":"content"}],"metadata":{"title":"...(_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"...","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:s16PartialRangeFromV","text":"PartialRangeFrom","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"modules":[{"name":"Compute","relatedModules":["Swift"]}],"symbolKind":"op","externalID":"s:SLsE3zzzoPys16PartialRangeFromVyxGxFZ","role":"symbol","roleHeading":"Operator","extendedModule":"Swift"},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable/...(_:)-6mvrh":{"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"..."},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"text":"PartialRangeFrom","preciseIdentifier":"s:s16PartialRangeFromV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable\/...(_:)-6mvrh","type":"topic","abstract":[{"type":"text","text":"Returns a partial range extending upward from a lower bound."}],"role":"symbol","title":"...(_:)","url":"\/documentation\/compute\/comparable\/'...(_:)-6mvrh"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeFrom":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"PartialRangeFrom","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom","url":"\/documentation\/compute\/partialrangefrom","navigatorTitle":[{"kind":"identifier","text":"PartialRangeFrom"}],"abstract":[{"type":"text","text":"A partial interval extending upward from a lower bound."}],"role":"symbol","title":"PartialRangeFrom"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable":{"url":"\/documentation\/compute\/comparable","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared using the relational operators ","type":"text"},{"code":"<","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Comparable"}],"title":"Comparable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Comparable","kind":"identifier"}]}}}