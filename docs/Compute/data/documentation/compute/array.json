{"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"relationshipsSections":[{"title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/com.swallow.documentation.Compute\/10Accelerate0A6BufferP","doc:\/\/com.swallow.documentation.Compute\/10Accelerate0A13MutableBufferP","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByArrayLiteral","doc:\/\/com.swallow.documentation.Compute\/10Foundation15ContiguousBytesP","doc:\/\/com.swallow.documentation.Compute\/10Foundation12DataProtocolP","doc:\/\/com.swallow.documentation.Compute\/10Foundation26DecodableWithConfigurationP","doc:\/\/com.swallow.documentation.Compute\/10Foundation26EncodableWithConfigurationP","doc:\/\/com.swallow.documentation.Compute\/10Foundation19MutableDataProtocolP","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Partializable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomAccessCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","doc:\/\/com.swallow.documentation.Compute\/7Swallow21AnyCodableConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow17ContiguousStorageP","doc:\/\/com.swallow.documentation.Compute\/7Swallow9CountableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow28DestructivelyMutableSequenceP","doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiffableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20ExtensibleCollectionP","doc:\/\/com.swallow.documentation.Compute\/7Swallow36ExtensibleRangeReplaceableCollectionP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18ExtensibleSequenceP","doc:\/\/com.swallow.documentation.Compute\/7Swallow9InitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow24MutableContiguousStorageP","doc:\/\/com.swallow.documentation.Compute\/7Swallow15MutableSequenceP","doc:\/\/com.swallow.documentation.Compute\/7Swallow36NonDestroyingBidirectionalCollectionP","doc:\/\/com.swallow.documentation.Compute\/7Swallow23NonDestroyingCollectionP","doc:\/\/com.swallow.documentation.Compute\/7Swallow42NonDestroyingMutableRandomAccessCollectionP","doc:\/\/com.swallow.documentation.Compute\/7Swallow28NonDestroyingMutableSequenceP","doc:\/\/com.swallow.documentation.Compute\/7Swallow35NonDestroyingRandomAccessCollectionP","doc:\/\/com.swallow.documentation.Compute\/7Swallow21NonDestroyingSequenceP","doc:\/\/com.swallow.documentation.Compute\/7Swallow19ResizableCollectionP","doc:\/\/com.swallow.documentation.Compute\/7Swallow17ResizableSequenceP","doc:\/\/com.swallow.documentation.Compute\/7Swallow017SequenceInitiableB0P"],"kind":"relationships"}],"metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Array","kind":"identifier"}],"navigatorTitle":[{"text":"Array","kind":"identifier"}],"roleHeading":"Structure","modules":[{"name":"Compute"}],"title":"Array","role":"symbol","externalID":"s:Sa","symbolKind":"struct"},"abstract":[{"type":"text","text":"An ordered, random-access collection."}],"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"topicSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/+(_:_:)-6t30w","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/+=(_:_:)-e84a"],"generated":true,"title":"Operators","anchor":"Operators"},{"title":"Initializers","generated":true,"anchor":"Initializers","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/init(unsafeUninitializedCapacity:initializingWith:)"]},{"title":"Default Implementations","anchor":"Default-Implementations","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/AccelerateBuffer-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/AccelerateMutableBuffer-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/BidirectionalCollection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/Collection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/CustomDebugStringConvertible-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/CustomReflectable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/CustomStringConvertible-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/Decodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/Encodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/ExpressibleByArrayLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/MutableCollection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/MutableContiguousStorage-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/Partializable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/RandomAccessCollection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/RangeReplaceableCollection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/Sequence-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/_ArrayProtocol-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/_HasContiguousBytes-Implementations"],"generated":true}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array","interfaceLanguage":"swift"},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"@frozen"},{"text":" ","kind":"text"},{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Array","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Element"},{"text":">","kind":"text"}]}]},{"kind":"content","content":[{"type":"heading","anchor":"overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"Arrays are one of the most commonly used data types in an app. You use","type":"text"},{"text":" ","type":"text"},{"text":"arrays to organize your app’s data. Specifically, you use the ","type":"text"},{"type":"codeVoice","code":"Array"},{"text":" type","type":"text"},{"text":" ","type":"text"},{"text":"to hold elements of a single type, the array’s ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":" type. An array","type":"text"},{"type":"text","text":" "},{"text":"can store any kind of elements—from integers to strings to classes.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Swift makes it easy to create arrays in your code using an array literal:"},{"text":" ","type":"text"},{"type":"text","text":"simply surround a comma-separated list of values with square brackets."},{"type":"text","text":" "},{"type":"text","text":"Without any other information, Swift creates an array that includes the"},{"type":"text","text":" "},{"text":"specified values, automatically inferring the array’s ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":" type. For","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"example:"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ An array of 'Int' elements","let oddNumbers = [1, 3, 5, 7, 9, 11, 13, 15]","","\/\/ An array of 'String' elements","let streets = [\"Albemarle\", \"Brandywine\", \"Chesapeake\"]"],"syntax":null},{"inlineContent":[{"text":"You can create an empty array by specifying the ","type":"text"},{"type":"codeVoice","code":"Element"},{"text":" type of your","type":"text"},{"type":"text","text":" "},{"type":"text","text":"array in the declaration. For example:"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["\/\/ Shortened forms are preferred","var emptyDoubles: [Double] = []","","\/\/ The full type name is also allowed","var emptyFloats: Array<Float> = Array()"]},{"type":"paragraph","inlineContent":[{"text":"If you need an array that is preinitialized with a fixed number of default","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values, use the "},{"type":"codeVoice","code":"Array(repeating:count:)"},{"text":" initializer.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["var digitCounts = Array(repeating: 0, count: 10)","print(digitCounts)","\/\/ Prints \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\""]},{"text":"Accessing Array Values","level":1,"type":"heading","anchor":"Accessing-Array-Values"},{"inlineContent":[{"type":"text","text":"When you need to perform an operation on all of an array’s elements, use a"},{"type":"text","text":" "},{"code":"for","type":"codeVoice"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"text":" loop to iterate through the array’s contents.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["for street in streets {","    print(\"I don't live on \\(street).\")","}","\/\/ Prints \"I don't live on Albemarle.\"","\/\/ Prints \"I don't live on Brandywine.\"","\/\/ Prints \"I don't live on Chesapeake.\""],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"code":"isEmpty","type":"codeVoice"},{"type":"text","text":" property to check quickly whether an array has any"},{"text":" ","type":"text"},{"text":"elements, or use the ","type":"text"},{"type":"codeVoice","code":"count"},{"type":"text","text":" property to find the number of elements in"},{"text":" ","type":"text"},{"type":"text","text":"the array."}]},{"syntax":null,"type":"codeListing","code":["if oddNumbers.isEmpty {","    print(\"I don't know any odd numbers.\")","} else {","    print(\"I know \\(oddNumbers.count) odd numbers.\")","}","\/\/ Prints \"I know 8 odd numbers.\""]},{"inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"first"},{"type":"text","text":" and "},{"code":"last","type":"codeVoice"},{"text":" properties for safe access to the value of the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"array’s first and last elements. If the array is empty, these properties"},{"text":" ","type":"text"},{"text":"are ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["if let firstElement = oddNumbers.first, let lastElement = oddNumbers.last {","    print(firstElement, lastElement, separator: \", \")","}","\/\/ Prints \"1, 15\"","","print(emptyDoubles.first, emptyDoubles.last, separator: \", \")","\/\/ Prints \"nil, nil\""]},{"inlineContent":[{"type":"text","text":"You can access individual array elements through a subscript. The first"},{"text":" ","type":"text"},{"text":"element of a nonempty array is always at index zero. You can subscript an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"array with any integer from zero up to, but not including, the count of"},{"type":"text","text":" "},{"type":"text","text":"the array. Using a negative number or an index equal to or greater than"},{"type":"text","text":" "},{"code":"count","type":"codeVoice"},{"text":" triggers a runtime error. For example:","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["print(oddNumbers[0], oddNumbers[3], separator: \", \")","\/\/ Prints \"1, 7\"","","print(emptyDoubles[0])","\/\/ Triggers runtime error: Index out of range"],"type":"codeListing"},{"type":"heading","level":1,"text":"Adding and Removing Elements","anchor":"Adding-and-Removing-Elements"},{"inlineContent":[{"type":"text","text":"Suppose you need to store a list of the names of students that are signed"},{"type":"text","text":" "},{"text":"up for a class you’re teaching. During the registration period, you need","type":"text"},{"text":" ","type":"text"},{"text":"to add and remove names as students add and drop the class.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["var students = [\"Ben\", \"Ivy\", \"Jordell\"]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To add single elements to the end of an array, use the "},{"code":"append(_:)","type":"codeVoice"},{"text":" method.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Add multiple elements at the same time by passing another array or a"},{"type":"text","text":" "},{"type":"text","text":"sequence of any kind to the "},{"type":"codeVoice","code":"append(contentsOf:)"},{"text":" method.","type":"text"}]},{"code":["students.append(\"Maxime\")","students.append(contentsOf: [\"Shakia\", \"William\"])","\/\/ [\"Ben\", \"Ivy\", \"Jordell\", \"Maxime\", \"Shakia\", \"William\"]"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can add new elements in the middle of an array by using the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"insert(_:at:)"},{"text":" method for single elements and by using","type":"text"},{"text":" ","type":"text"},{"code":"insert(contentsOf:at:)","type":"codeVoice"},{"text":" to insert multiple elements from another","type":"text"},{"type":"text","text":" "},{"text":"collection or array literal. The elements at that index and later indices","type":"text"},{"text":" ","type":"text"},{"text":"are shifted back to make room.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["students.insert(\"Liam\", at: 3)","\/\/ [\"Ben\", \"Ivy\", \"Jordell\", \"Liam\", \"Maxime\", \"Shakia\", \"William\"]"]},{"inlineContent":[{"text":"To remove elements from an array, use the ","type":"text"},{"code":"remove(at:)","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"removeSubrange(_:)"},{"text":", and ","type":"text"},{"code":"removeLast()","type":"codeVoice"},{"type":"text","text":" methods."}],"type":"paragraph"},{"syntax":null,"code":["\/\/ Ben's family is moving to another state","students.remove(at: 0)","\/\/ [\"Ivy\", \"Jordell\", \"Liam\", \"Maxime\", \"Shakia\", \"William\"]","","\/\/ William is signing up for a different class","students.removeLast()","\/\/ [\"Ivy\", \"Jordell\", \"Liam\", \"Maxime\", \"Shakia\"]"],"type":"codeListing"},{"inlineContent":[{"text":"You can replace an existing element with a new value by assigning the new","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value to the subscript."}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["if let i = students.firstIndex(of: \"Maxime\") {","    students[i] = \"Max\"","}","\/\/ [\"Ivy\", \"Jordell\", \"Liam\", \"Max\", \"Shakia\"]"]},{"anchor":"Growing-the-Size-of-an-Array","level":2,"text":"Growing the Size of an Array","type":"heading"},{"inlineContent":[{"text":"Every array reserves a specific amount of memory to hold its contents. When","type":"text"},{"text":" ","type":"text"},{"text":"you add elements to an array and that array begins to exceed its reserved","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"capacity, the array allocates a larger region of memory and copies its"},{"text":" ","type":"text"},{"text":"elements into the new storage. The new storage is a multiple of the old","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"storage’s size. This exponential growth strategy means that appending an"},{"type":"text","text":" "},{"text":"element happens in constant time, averaging the performance of many append","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"operations. Append operations that trigger reallocation have a performance"},{"type":"text","text":" "},{"text":"cost, but they occur less and less often as the array grows larger.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you know approximately how many elements you will need to store, use the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"reserveCapacity(_:)"},{"text":" method before appending to the array to avoid","type":"text"},{"type":"text","text":" "},{"type":"text","text":"intermediate reallocations. Use the "},{"type":"codeVoice","code":"capacity"},{"type":"text","text":" and "},{"code":"count","type":"codeVoice"},{"text":" properties to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"determine how many more elements the array can store without allocating"},{"type":"text","text":" "},{"type":"text","text":"larger storage."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For arrays of most "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" types, this storage is a contiguous block of"},{"text":" ","type":"text"},{"type":"text","text":"memory. For arrays with an "},{"code":"Element","type":"codeVoice"},{"text":" type that is a class or ","type":"text"},{"code":"@objc","type":"codeVoice"},{"text":" ","type":"text"},{"text":"protocol type, this storage can be a contiguous block of memory or an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"instance of "},{"type":"codeVoice","code":"NSArray"},{"type":"text","text":". Because any arbitrary subclass of "},{"type":"codeVoice","code":"NSArray"},{"text":" can","type":"text"},{"text":" ","type":"text"},{"text":"become an ","type":"text"},{"code":"Array","type":"codeVoice"},{"type":"text","text":", there are no guarantees about representation or"},{"text":" ","type":"text"},{"type":"text","text":"efficiency in this case."}],"type":"paragraph"},{"level":1,"type":"heading","text":"Modifying Copies of Arrays","anchor":"Modifying-Copies-of-Arrays"},{"type":"paragraph","inlineContent":[{"text":"Each array has an independent value that includes the values of all of its","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements. For simple types such as integers and other structures, this"},{"type":"text","text":" "},{"text":"means that when you change a value in one array, the value of that element","type":"text"},{"type":"text","text":" "},{"text":"does not change in any copies of the array. For example:","type":"text"}]},{"type":"codeListing","code":["var numbers = [1, 2, 3, 4, 5]","var numbersCopy = numbers","numbers[0] = 100","print(numbers)","\/\/ Prints \"[100, 2, 3, 4, 5]\"","print(numbersCopy)","\/\/ Prints \"[1, 2, 3, 4, 5]\""],"syntax":null},{"inlineContent":[{"type":"text","text":"If the elements in an array are instances of a class, the semantics are the"},{"text":" ","type":"text"},{"type":"text","text":"same, though they might appear different at first. In this case, the"},{"text":" ","type":"text"},{"text":"values stored in the array are references to objects that live outside the","type":"text"},{"text":" ","type":"text"},{"text":"array. If you change a reference to an object in one array, only that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"array has a reference to the new object. However, if two arrays contain"},{"text":" ","type":"text"},{"type":"text","text":"references to the same object, you can observe changes to that object’s"},{"type":"text","text":" "},{"text":"properties from both arrays. For example:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ An integer type with reference semantics","class IntegerReference {","    var value = 10","}","var firstIntegers = [IntegerReference(), IntegerReference()]","var secondIntegers = firstIntegers","","\/\/ Modifications to an instance are visible from either array","firstIntegers[0].value = 100","print(secondIntegers[0].value)","\/\/ Prints \"100\"","","\/\/ Replacements, additions, and removals are still visible","\/\/ only in the modified array","firstIntegers[0] = IntegerReference()","print(firstIntegers[0].value)","\/\/ Prints \"10\"","print(secondIntegers[0].value)","\/\/ Prints \"100\""],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Arrays, like all variable-size collections in the standard library, use"},{"type":"text","text":" "},{"text":"copy-on-write optimization. Multiple copies of an array share the same","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"storage until you modify one of the copies. When that happens, the array"},{"text":" ","type":"text"},{"type":"text","text":"being modified replaces its storage with a uniquely owned copy of itself,"},{"text":" ","type":"text"},{"text":"which is then modified in place. Optimizations are sometimes applied that","type":"text"},{"text":" ","type":"text"},{"text":"can reduce the amount of copying.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This means that if an array is sharing storage with other copies, the first","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"mutating operation on that array incurs the cost of copying the array. An"},{"type":"text","text":" "},{"text":"array that is the sole owner of its storage can perform mutating","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"operations in place."}]},{"type":"paragraph","inlineContent":[{"text":"In the example below, a ","type":"text"},{"code":"numbers","type":"codeVoice"},{"text":" array is created along with two copies","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that share the same storage. When the original "},{"code":"numbers","type":"codeVoice"},{"text":" array is","type":"text"},{"text":" ","type":"text"},{"text":"modified, it makes a unique copy of its storage before making the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"modification. Further modifications to "},{"code":"numbers","type":"codeVoice"},{"type":"text","text":" are made in place, while"},{"type":"text","text":" "},{"type":"text","text":"the two copies continue to share the original storage."}]},{"type":"codeListing","code":["var numbers = [1, 2, 3, 4, 5]","var firstCopy = numbers","var secondCopy = numbers","","\/\/ The storage for 'numbers' is copied here","numbers[0] = 100","numbers[1] = 200","numbers[2] = 300","\/\/ 'numbers' is [100, 200, 300, 4, 5]","\/\/ 'firstCopy' and 'secondCopy' are [1, 2, 3, 4, 5]"],"syntax":null},{"level":1,"text":"Bridging Between Array and NSArray","anchor":"Bridging-Between-Array-and-NSArray","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you need to access APIs that require data in an "},{"type":"codeVoice","code":"NSArray"},{"type":"text","text":" instance"},{"text":" ","type":"text"},{"type":"text","text":"instead of "},{"code":"Array","type":"codeVoice"},{"type":"text","text":", use the type-cast operator ("},{"code":"as","type":"codeVoice"},{"text":") to bridge your","type":"text"},{"type":"text","text":" "},{"text":"instance. For bridging to be possible, the ","type":"text"},{"code":"Element","type":"codeVoice"},{"type":"text","text":" type of your array"},{"text":" ","type":"text"},{"type":"text","text":"must be a class, an "},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" protocol (a protocol imported from Objective-C"},{"text":" ","type":"text"},{"text":"or marked with the ","type":"text"},{"type":"codeVoice","code":"@objc"},{"text":" attribute), or a type that bridges to a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Foundation type."}]},{"inlineContent":[{"type":"text","text":"The following example shows how you can bridge an "},{"code":"Array","type":"codeVoice"},{"text":" instance to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"NSArray"},{"text":" to use the ","type":"text"},{"type":"codeVoice","code":"write(to:atomically:)"},{"type":"text","text":" method. In this example, the"},{"text":" ","type":"text"},{"code":"colors","type":"codeVoice"},{"text":" array can be bridged to ","type":"text"},{"type":"codeVoice","code":"NSArray"},{"text":" because the ","type":"text"},{"type":"codeVoice","code":"colors"},{"type":"text","text":" array’s"},{"text":" ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" elements bridge to ","type":"text"},{"code":"NSString","type":"codeVoice"},{"text":". The compiler prevents bridging the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"moreColors"},{"type":"text","text":" array, on the other hand, because its "},{"type":"codeVoice","code":"Element"},{"text":" type is","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Optional<String>"},{"type":"text","text":", which does "},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"type":"text","text":" bridge to a Foundation type."}],"type":"paragraph"},{"code":["let colors = [\"periwinkle\", \"rose\", \"moss\"]","let moreColors: [String?] = [\"ochre\", \"pine\"]","","let url = URL(fileURLWithPath: \"names.plist\")","(colors as NSArray).write(to: url, atomically: true)","\/\/ true","","(moreColors as NSArray).write(to: url, atomically: true)","\/\/ error: cannot convert value of type '[String?]' to type 'NSArray'"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"text":"Bridging from ","type":"text"},{"code":"Array","type":"codeVoice"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"NSArray"},{"type":"text","text":" takes O(1) time and O(1) space if the"},{"text":" ","type":"text"},{"type":"text","text":"array’s elements are already instances of a class or an "},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" protocol;"},{"text":" ","type":"text"},{"text":"otherwise, it takes O(","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":") time and space.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the destination array’s element type is a class or an "},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" "},{"type":"text","text":"protocol, bridging from "},{"type":"codeVoice","code":"NSArray"},{"type":"text","text":" to "},{"type":"codeVoice","code":"Array"},{"text":" first calls the ","type":"text"},{"type":"codeVoice","code":"copy(with:)"},{"type":"text","text":" "},{"type":"text","text":"("},{"code":"- copyWithZone:","type":"codeVoice"},{"type":"text","text":" in Objective-C) method on the array to get an immutable"},{"type":"text","text":" "},{"type":"text","text":"copy and then performs additional Swift bookkeeping work that takes O(1)"},{"type":"text","text":" "},{"text":"time. For instances of ","type":"text"},{"type":"codeVoice","code":"NSArray"},{"text":" that are already immutable, ","type":"text"},{"type":"codeVoice","code":"copy(with:)"},{"text":" ","type":"text"},{"text":"usually returns the same array in O(1) time; otherwise, the copying","type":"text"},{"type":"text","text":" "},{"type":"text","text":"performance is unspecified. If "},{"code":"copy(with:)","type":"codeVoice"},{"text":" returns the same array, the","type":"text"},{"text":" ","type":"text"},{"text":"instances of ","type":"text"},{"code":"NSArray","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Array","type":"codeVoice"},{"text":" share storage using the same","type":"text"},{"type":"text","text":" "},{"text":"copy-on-write optimization that is used when two instances of ","type":"text"},{"type":"codeVoice","code":"Array"},{"type":"text","text":" "},{"type":"text","text":"share storage."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the destination array’s element type is a nonclass type that bridges"},{"text":" ","type":"text"},{"text":"to a Foundation type, bridging from ","type":"text"},{"type":"codeVoice","code":"NSArray"},{"text":" to ","type":"text"},{"code":"Array","type":"codeVoice"},{"type":"text","text":" performs a"},{"type":"text","text":" "},{"type":"text","text":"bridging copy of the elements to contiguous storage in O("},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"type":"text","text":") time. For"},{"type":"text","text":" "},{"type":"text","text":"example, bridging from "},{"code":"NSArray","type":"codeVoice"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"Array<Int>"},{"type":"text","text":" performs such a copy. No"},{"type":"text","text":" "},{"type":"text","text":"further bridging is required when accessing elements of the "},{"code":"Array","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"instance."}]},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"ContiguousArray"},{"text":" and ","type":"text"},{"code":"ArraySlice","type":"codeVoice"},{"text":" types are not bridged;","type":"text"},{"text":" ","type":"text"},{"text":"instances of those types always have a contiguous block of memory as","type":"text"},{"type":"text","text":" "},{"text":"their storage.","type":"text"}]}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/array"]}],"references":{"doc://com.swallow.documentation.Compute/10Foundation15ContiguousBytesP":{"type":"unresolvable","title":"Foundation.ContiguousBytes","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Foundation15ContiguousBytesP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"kind":"symbol","abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"title":"Equatable","url":"\/documentation\/compute\/equatable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomReflectable":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]},"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","navigatorTitle":[{"text":"CustomReflectable","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A type that explicitly supplies its own mirror.","type":"text"}],"title":"CustomReflectable","url":"\/documentation\/compute\/customreflectable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"CustomReflectable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Encodable":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":".","type":"text"}]},"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","navigatorTitle":[{"kind":"identifier","text":"Encodable"}],"kind":"symbol","abstract":[{"type":"text","text":"A type that can encode itself to an external representation."}],"title":"Encodable","url":"\/documentation\/compute\/encodable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Encodable"}]},"doc://com.swallow.documentation.Compute/7Swallow23NonDestroyingCollectionP":{"type":"unresolvable","title":"Swallow.NonDestroyingCollection","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow23NonDestroyingCollectionP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/_HasContiguousBytes-Implementations":{"url":"\/documentation\/compute\/array\/_hascontiguousbytes-implementations","abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/_HasContiguousBytes-Implementations","role":"collectionGroup","type":"topic","title":"_HasContiguousBytes Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/CustomReflectable-Implementations":{"role":"collectionGroup","url":"\/documentation\/compute\/array\/customreflectable-implementations","type":"topic","title":"CustomReflectable Implementations","kind":"article","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/CustomReflectable-Implementations"},"doc://com.swallow.documentation.Compute/7Swallow21AnyCodableConvertibleP":{"type":"unresolvable","title":"Swallow.AnyCodableConvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21AnyCodableConvertibleP"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeReplaceableCollection":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableCollection","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"RangeReplaceableCollection","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/rangereplaceablecollection","abstract":[{"type":"text","text":"A collection that supports replacement of an arbitrary subrange of elements"},{"text":" ","type":"text"},{"type":"text","text":"with the elements of another collection."}],"navigatorTitle":[{"kind":"identifier","text":"RangeReplaceableCollection"}],"title":"RangeReplaceableCollection","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/CustomDebugStringConvertible-Implementations":{"abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/CustomDebugStringConvertible-Implementations","type":"topic","title":"CustomDebugStringConvertible Implementations","url":"\/documentation\/compute\/array\/customdebugstringconvertible-implementations","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/7Swallow9CountableP":{"type":"unresolvable","title":"Swallow.Countable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow9CountableP"},"doc://com.swallow.documentation.Compute/7Swallow36ExtensibleRangeReplaceableCollectionP":{"type":"unresolvable","title":"Swallow.ExtensibleRangeReplaceableCollection","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow36ExtensibleRangeReplaceableCollectionP"},"doc://com.swallow.documentation.Compute/7Swallow18ExtensibleSequenceP":{"type":"unresolvable","title":"Swallow.ExtensibleSequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18ExtensibleSequenceP"},"doc://com.swallow.documentation.Compute/10Foundation26EncodableWithConfigurationP":{"type":"unresolvable","title":"Foundation.EncodableWithConfiguration","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Foundation26EncodableWithConfigurationP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/AccelerateMutableBuffer-Implementations":{"url":"\/documentation\/compute\/array\/acceleratemutablebuffer-implementations","abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/AccelerateMutableBuffer-Implementations","role":"collectionGroup","type":"topic","title":"AccelerateMutableBuffer Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/ExpressibleByArrayLiteral-Implementations":{"title":"ExpressibleByArrayLiteral Implementations","url":"\/documentation\/compute\/array\/expressiblebyarrayliteral-implementations","role":"collectionGroup","abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/ExpressibleByArrayLiteral-Implementations","type":"topic"},"doc://com.swallow.documentation.Compute/10Accelerate0A6BufferP":{"type":"unresolvable","title":"Accelerate.AccelerateBuffer","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Accelerate0A6BufferP"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible":{"abstract":[{"type":"text","text":"A type with a customized textual representation."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CustomStringConvertible"}],"type":"topic","title":"CustomStringConvertible","role":"symbol","url":"\/documentation\/compute\/customstringconvertible","kind":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","navigatorTitle":[{"text":"CustomStringConvertible","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByArrayLiteral":{"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]},"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByArrayLiteral","navigatorTitle":[{"kind":"identifier","text":"ExpressibleByArrayLiteral"}],"kind":"symbol","abstract":[{"type":"text","text":"A type that can be initialized using an array literal."}],"title":"ExpressibleByArrayLiteral","url":"\/documentation\/compute\/expressiblebyarrayliteral","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExpressibleByArrayLiteral","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/7Swallow28NonDestroyingMutableSequenceP":{"type":"unresolvable","title":"Swallow.NonDestroyingMutableSequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow28NonDestroyingMutableSequenceP"},"doc://com.swallow.documentation.Compute/7Swallow36NonDestroyingBidirectionalCollectionP":{"type":"unresolvable","title":"Swallow.NonDestroyingBidirectionalCollection","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow36NonDestroyingBidirectionalCollectionP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/Partializable-Implementations":{"url":"\/documentation\/compute\/array\/partializable-implementations","abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/Partializable-Implementations","role":"collectionGroup","type":"topic","title":"Partializable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/CustomStringConvertible-Implementations":{"abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/CustomStringConvertible-Implementations","type":"topic","title":"CustomStringConvertible Implementations","url":"\/documentation\/compute\/array\/customstringconvertible-implementations","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/+(_:_:)-6t30w":{"url":"\/documentation\/compute\/array\/+(_:_:)-6t30w","abstract":[],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/+(_:_:)-6t30w","role":"symbol","type":"topic","title":"+(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"+","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Array","preciseIdentifier":"s:Sa"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sa","text":"Array"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">) -> "},{"text":"Array","kind":"typeIdentifier","preciseIdentifier":"s:Sa"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://com.swallow.documentation.Compute/7Swallow35NonDestroyingRandomAccessCollectionP":{"type":"unresolvable","title":"Swallow.NonDestroyingRandomAccessCollection","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow35NonDestroyingRandomAccessCollectionP"},"doc://com.swallow.documentation.Compute/documentation/Compute/MutableCollection":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableCollection","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"MutableCollection","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/mutablecollection","abstract":[{"type":"text","text":"A collection that supports subscript assignment."}],"navigatorTitle":[{"kind":"identifier","text":"MutableCollection"}],"title":"MutableCollection","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/RandomAccessCollection":{"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomAccessCollection","navigatorTitle":[{"kind":"identifier","text":"RandomAccessCollection"}],"kind":"symbol","abstract":[{"text":"A collection that supports efficient random-access index traversal.","type":"text"}],"title":"RandomAccessCollection","url":"\/documentation\/compute\/randomaccesscollection","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RandomAccessCollection"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/RangeReplaceableCollection-Implementations":{"role":"collectionGroup","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/RangeReplaceableCollection-Implementations","type":"topic","kind":"article","title":"RangeReplaceableCollection Implementations","url":"\/documentation\/compute\/array\/rangereplaceablecollection-implementations"},"doc://com.swallow.documentation.Compute/7Swallow24MutableContiguousStorageP":{"type":"unresolvable","title":"Swallow.MutableContiguousStorage","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow24MutableContiguousStorageP"},"doc://com.swallow.documentation.Compute/10Foundation19MutableDataProtocolP":{"type":"unresolvable","title":"Foundation.MutableDataProtocol","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Foundation19MutableDataProtocolP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Decodable":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Decodable"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/decodable","abstract":[{"text":"A type that can decode itself from an external representation.","type":"text"}],"navigatorTitle":[{"text":"Decodable","kind":"identifier"}],"title":"Decodable","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Decodable"},{"text":".","type":"text"}]}},"doc://com.swallow.documentation.Compute/7Swallow17ContiguousStorageP":{"type":"unresolvable","title":"Swallow.ContiguousStorage","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow17ContiguousStorageP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/+=(_:_:)-e84a":{"abstract":[],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/+=(_:_:)-e84a","type":"topic","title":"+=(_:_:)","url":"\/documentation\/compute\/array\/+=(_:_:)-e84a","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"+=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"Array","preciseIdentifier":"s:Sa","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":">, ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sa","text":"Array"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"text":">)","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/BidirectionalCollection-Implementations":{"url":"\/documentation\/compute\/array\/bidirectionalcollection-implementations","type":"topic","title":"BidirectionalCollection Implementations","kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/BidirectionalCollection-Implementations","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/RandomAccessCollection-Implementations":{"role":"collectionGroup","kind":"article","title":"RandomAccessCollection Implementations","url":"\/documentation\/compute\/array\/randomaccesscollection-implementations","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/RandomAccessCollection-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Partializable":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Partializable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Partializable"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/partializable","abstract":[{"text":"A type that can be formed by coalescing its partials.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Partializable"}],"title":"Partializable","conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"doc://com.swallow.documentation.Compute/7Swallow21NonDestroyingSequenceP":{"type":"unresolvable","title":"Swallow.NonDestroyingSequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21NonDestroyingSequenceP"},"doc://com.swallow.documentation.Compute/10Foundation12DataProtocolP":{"type":"unresolvable","title":"Foundation.DataProtocol","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Foundation12DataProtocolP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/AccelerateBuffer-Implementations":{"url":"\/documentation\/compute\/array\/acceleratebuffer-implementations","abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/AccelerateBuffer-Implementations","role":"collectionGroup","type":"topic","title":"AccelerateBuffer Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Copyable","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/copyable","abstract":[{"text":"A type whose values can be implicitly or explicitly copied.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Copyable"}],"title":"Copyable","conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/Decodable-Implementations":{"abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/Decodable-Implementations","type":"topic","title":"Decodable Implementations","url":"\/documentation\/compute\/array\/decodable-implementations","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/10Foundation26DecodableWithConfigurationP":{"type":"unresolvable","title":"Foundation.DecodableWithConfiguration","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Foundation26DecodableWithConfigurationP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Sequence","kind":"identifier"}],"role":"symbol","kind":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Escapable","type":"codeVoice"},{"text":".","type":"text"}]},"navigatorTitle":[{"text":"Sequence","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","url":"\/documentation\/compute\/sequence","title":"Sequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/Equatable-Implementations":{"abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/Equatable-Implementations","type":"topic","title":"Equatable Implementations","url":"\/documentation\/compute\/array\/equatable-implementations","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/7Swallow15MutableSequenceP":{"type":"unresolvable","title":"Swallow.MutableSequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow15MutableSequenceP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Collection"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/collection","abstract":[{"type":"text","text":"A sequence whose elements can be traversed multiple times,"},{"type":"text","text":" "},{"text":"nondestructively, and accessed by an indexed subscript.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Collection"}],"title":"Collection","conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/init(unsafeUninitializedCapacity:initializingWith:)":{"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/init(unsafeUninitializedCapacity:initializingWith:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"unsafeUninitializedCapacity","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"text":"initializingWith","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sr","text":"UnsafeMutableBufferPointer"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Element"},{"text":">, ","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"}],"kind":"symbol","title":"init(unsafeUninitializedCapacity:initializingWith:)","abstract":[{"text":"Creates an array with the specified capacity, then calls the given","type":"text"},{"type":"text","text":" "},{"type":"text","text":"closure with a buffer covering the array’s uninitialized memory."}],"type":"topic","url":"\/documentation\/compute\/array\/init(unsafeuninitializedcapacity:initializingwith:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/Encodable-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/Encodable-Implementations","url":"\/documentation\/compute\/array\/encodable-implementations","type":"topic","role":"collectionGroup","title":"Encodable Implementations","kind":"article","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/Hashable-Implementations":{"abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/Hashable-Implementations","type":"topic","title":"Hashable Implementations","url":"\/documentation\/compute\/array\/hashable-implementations","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/7Swallow19ResizableCollectionP":{"type":"unresolvable","title":"Swallow.ResizableCollection","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow19ResizableCollectionP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/Sequence-Implementations":{"abstract":[],"type":"topic","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/Sequence-Implementations","url":"\/documentation\/compute\/array\/sequence-implementations","role":"collectionGroup","title":"Sequence Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/_ArrayProtocol-Implementations":{"url":"\/documentation\/compute\/array\/_arrayprotocol-implementations","abstract":[],"kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/_ArrayProtocol-Implementations","type":"topic","title":"_ArrayProtocol Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/MutableCollection-Implementations":{"url":"\/documentation\/compute\/array\/mutablecollection-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/MutableCollection-Implementations","title":"MutableCollection Implementations","kind":"article","role":"collectionGroup","type":"topic","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/MutableContiguousStorage-Implementations":{"abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/MutableContiguousStorage-Implementations","type":"topic","title":"MutableContiguousStorage Implementations","url":"\/documentation\/compute\/array\/mutablecontiguousstorage-implementations","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/7Swallow8DiffableP":{"type":"unresolvable","title":"Swallow.Diffable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiffableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array":{"abstract":[{"type":"text","text":"An ordered, random-access collection."}],"type":"topic","title":"Array","kind":"symbol","navigatorTitle":[{"text":"Array","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array","role":"symbol","url":"\/documentation\/compute\/array","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Array","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Sendable"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/sendable","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"Sendable"}],"title":"Sendable","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Sendable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"doc://com.swallow.documentation.Compute/7Swallow28DestructivelyMutableSequenceP":{"type":"unresolvable","title":"Swallow.DestructivelyMutableSequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow28DestructivelyMutableSequenceP"},"doc://com.swallow.documentation.Compute/documentation/Compute/CVarArg":{"url":"\/documentation\/compute\/cvararg","abstract":[{"type":"text","text":"A type whose instances can be encoded, and appropriately passed, as"},{"type":"text","text":" "},{"type":"text","text":"elements of a C "},{"type":"codeVoice","code":"va_list"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"CVarArg","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","role":"symbol","type":"topic","title":"CVarArg","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"CVarArg"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/7Swallow20ExtensibleCollectionP":{"type":"unresolvable","title":"Swallow.ExtensibleCollection","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20ExtensibleCollectionP"},"doc://com.swallow.documentation.Compute/7Swallow017SequenceInitiableB0P":{"type":"unresolvable","title":"Swallow.SequenceInitiableSequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow017SequenceInitiableB0P"},"doc://com.swallow.documentation.Compute/7Swallow42NonDestroyingMutableRandomAccessCollectionP":{"type":"unresolvable","title":"Swallow.NonDestroyingMutableRandomAccessCollection","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow42NonDestroyingMutableRandomAccessCollectionP"},"doc://com.swallow.documentation.Compute/10Accelerate0A13MutableBufferP":{"type":"unresolvable","title":"Accelerate.AccelerateMutableBuffer","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Accelerate0A13MutableBufferP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/Collection-Implementations":{"title":"Collection Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/Collection-Implementations","kind":"article","abstract":[],"type":"topic","role":"collectionGroup","url":"\/documentation\/compute\/array\/collection-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomDebugStringConvertible":{"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}]},"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","navigatorTitle":[{"kind":"identifier","text":"CustomDebugStringConvertible"}],"kind":"symbol","abstract":[{"text":"A type with a customized textual representation suitable for debugging","type":"text"},{"text":" ","type":"text"},{"text":"purposes.","type":"text"}],"title":"CustomDebugStringConvertible","url":"\/documentation\/compute\/customdebugstringconvertible","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomDebugStringConvertible"}]},"doc://com.swallow.documentation.Compute/7Swallow9InitiableP":{"type":"unresolvable","title":"Swallow.Initiable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow9InitiableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Hashable","kind":"identifier"}],"role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[{"text":"A type that can be hashed into a ","type":"text"},{"type":"codeVoice","code":"Hasher"},{"text":" to produce an integer hash value.","type":"text"}],"type":"topic","title":"Hashable","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"url":"\/documentation\/compute\/hashable","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/BidirectionalCollection":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalCollection","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BidirectionalCollection","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/bidirectionalcollection","abstract":[{"type":"text","text":"A collection that supports backward as well as forward traversal."}],"navigatorTitle":[{"kind":"identifier","text":"BidirectionalCollection"}],"title":"BidirectionalCollection","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/7Swallow17ResizableSequenceP":{"type":"unresolvable","title":"Swallow.ResizableSequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow17ResizableSequenceP"}}}