{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/uint128\/&__(_:_:)-6vbmo"]}],"sections":[],"kind":"symbol","abstract":[{"type":"text","text":"Returns the result of shifting a value’s binary representation the"},{"type":"text","text":" "},{"type":"text","text":"specified number of digits to the left, masking the shift amount to the"},{"type":"text","text":" "},{"type":"text","text":"type’s bit width."}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"&<<","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"internalParam","text":"lhs"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"internalParam","text":"rhs"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"lhs","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value to shift."}]}]},{"name":"rhs","content":[{"inlineContent":[{"text":"The number of bits to shift ","type":"text"},{"code":"lhs","type":"codeVoice"},{"text":" to the left. If ","type":"text"},{"type":"codeVoice","code":"rhs"},{"type":"text","text":" is"},{"text":" ","type":"text"},{"text":"outside the range ","type":"text"},{"type":"codeVoice","code":"0..<lhs.bitWidth"},{"text":", it is masked to produce a","type":"text"},{"text":" ","type":"text"},{"text":"value within that range.","type":"text"}],"type":"paragraph"}]}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the masking left shift operator ("},{"code":"&<<","type":"codeVoice"},{"type":"text","text":") when you need to perform a"},{"text":" ","type":"text"},{"type":"text","text":"shift and are sure that the shift amount is in the range"},{"type":"text","text":" "},{"type":"codeVoice","code":"0..<lhs.bitWidth"},{"type":"text","text":". Before shifting, the masking left shift operator"},{"text":" ","type":"text"},{"type":"text","text":"masks the shift to this range. The shift is performed using this masked"},{"type":"text","text":" "},{"type":"text","text":"value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines "},{"code":"x","type":"codeVoice"},{"text":" as an instance of ","type":"text"},{"code":"UInt8","type":"codeVoice"},{"type":"text","text":", an 8-bit,"},{"type":"text","text":" "},{"type":"text","text":"unsigned integer type. If you use "},{"type":"codeVoice","code":"2"},{"text":" as the right-hand-side value in an","type":"text"},{"text":" ","type":"text"},{"text":"operation on ","type":"text"},{"type":"codeVoice","code":"x"},{"text":", the shift amount requires no masking.","type":"text"}]},{"syntax":null,"type":"codeListing","code":["let x: UInt8 = 30                 \/\/ 0b00011110","let y = x &<< 2","\/\/ y == 120                       \/\/ 0b01111000"]},{"inlineContent":[{"type":"text","text":"However, if you use "},{"type":"codeVoice","code":"8"},{"type":"text","text":" as the shift amount, the method first masks the"},{"text":" ","type":"text"},{"type":"text","text":"shift amount to zero, and then performs the shift, resulting in no change"},{"type":"text","text":" "},{"text":"to the original value.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let z = x &<< 8","\/\/ z == 30                        \/\/ 0b00011110"]},{"inlineContent":[{"type":"text","text":"If the bit width of the shifted integer type is a power of two, masking"},{"text":" ","type":"text"},{"text":"is performed using a bitmask; otherwise, masking is performed using a","type":"text"},{"text":" ","type":"text"},{"text":"modulo operation.","type":"text"}],"type":"paragraph"}]}],"metadata":{"title":"&<<(_:_:)","extendedModule":"Swift","modules":[{"name":"Compute","relatedModules":["Swift"]}],"roleHeading":"Operator","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"&<<","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"externalID":"s:s17FixedWidthIntegerPsE3alloiyxx_xtFZ::SYNTHESIZED::s:s7UInt128V","role":"symbol","symbolKind":"op"},"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt128\/&__(_:_:)-6vbmo"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt128","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt128\/FixedWidthInteger-Implementations"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UInt128/FixedWidthInteger-Implementations":{"title":"FixedWidthInteger Implementations","url":"\/documentation\/compute\/uint128\/fixedwidthinteger-implementations","abstract":[],"type":"topic","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt128\/FixedWidthInteger-Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt128":{"url":"\/documentation\/compute\/uint128","type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt128","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UInt128"}],"title":"UInt128","abstract":[{"text":"A 128-bit unsigned integer type.","type":"text"}],"navigatorTitle":[{"text":"UInt128","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt128/&__(_:_:)-6vbmo":{"url":"\/documentation\/compute\/uint128\/&__(_:_:)-6vbmo","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt128\/&__(_:_:)-6vbmo","role":"symbol","type":"topic","abstract":[{"text":"Returns the result of shifting a value’s binary representation the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specified number of digits to the left, masking the shift amount to the"},{"type":"text","text":" "},{"text":"type’s bit width.","type":"text"}],"title":"&<<(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"&<<","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"kind":"symbol"}}}