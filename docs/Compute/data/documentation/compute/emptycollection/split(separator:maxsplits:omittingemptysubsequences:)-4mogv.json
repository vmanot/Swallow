{"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Returns the longest possible subsequences of the collection, in order,","type":"text"},{"text":" ","type":"text"},{"text":"around elements equal to the given element.","type":"text"}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EmptyCollection\/split(separator:maxSplits:omittingEmptySubsequences:)-4mogv","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","preciseIdentifier":"s:ST7ElementQa"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"maxSplits"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":" = Int.max, ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":" = true) -> ["},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"SubSequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection\/SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"},{"text":"]","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"parameters":[{"name":"separator","content":[{"type":"paragraph","inlineContent":[{"text":"The element that should be split upon.","type":"text"}]}]},{"name":"maxSplits","content":[{"type":"paragraph","inlineContent":[{"text":"The maximum number of times to split the collection, or","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"one less than the number of subsequences to return. If"},{"type":"text","text":" "},{"code":"maxSplits + 1","type":"codeVoice"},{"text":" subsequences are returned, the last one is a suffix","type":"text"},{"type":"text","text":" "},{"text":"of the original collection containing the remaining elements.","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"maxSplits"},{"text":" must be greater than or equal to zero. The default value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is "},{"type":"codeVoice","code":"Int.max"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"If ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":", an empty subsequence is"},{"text":" ","type":"text"},{"text":"returned in the result for each consecutive pair of ","type":"text"},{"type":"codeVoice","code":"separator"},{"text":" ","type":"text"},{"type":"text","text":"elements in the collection and for each instance of "},{"type":"codeVoice","code":"separator"},{"text":" at","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the start or end of the collection. If "},{"type":"codeVoice","code":"true"},{"type":"text","text":", only nonempty"},{"type":"text","text":" "},{"type":"text","text":"subsequences are returned. The default value is "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"omittingEmptySubsequences"}],"kind":"parameters"},{"content":[{"level":2,"text":"Return Value","type":"heading","anchor":"return-value"},{"inlineContent":[{"type":"text","text":"An array of subsequences, split from this collection’s"},{"type":"text","text":" "},{"text":"elements.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"inlineContent":[{"text":"The resulting array consists of at most ","type":"text"},{"code":"maxSplits + 1","type":"codeVoice"},{"type":"text","text":" subsequences."},{"text":" ","type":"text"},{"type":"text","text":"Elements that are used to split the collection are not returned as part"},{"text":" ","type":"text"},{"text":"of any subsequence.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following examples show the effects of the "},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"type":"text","text":" parameters when splitting a string at each"},{"type":"text","text":" "},{"type":"text","text":"space character (” “). The first use of "},{"code":"split","type":"codeVoice"},{"type":"text","text":" returns each word that"},{"type":"text","text":" "},{"text":"was originally separated by one or more spaces.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","print(line.split(separator: \" \"))","\/\/ Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""]},{"inlineContent":[{"text":"The second example passes ","type":"text"},{"type":"codeVoice","code":"1"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"maxSplits"},{"text":" parameter, so the","type":"text"},{"text":" ","type":"text"},{"text":"original string is split just once, into two new strings.","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["print(line.split(separator: \" \", maxSplits: 1))","\/\/ Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The final example passes "},{"type":"codeVoice","code":"false"},{"type":"text","text":" for the "},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"parameter, so the returned array contains empty strings where spaces"},{"type":"text","text":" "},{"text":"were repeated.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["print(line.split(separator: \" \", omittingEmptySubsequences: false))","\/\/ Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""]},{"name":"Complexity","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O("},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":" is the length of the collection.","type":"text"}]}],"style":"note","type":"aside"}]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EmptyCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EmptyCollection\/Collection-Implementations"]]},"variants":[{"paths":["\/documentation\/compute\/emptycollection\/split(separator:maxsplits:omittingemptysubsequences:)-4mogv"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"title":"split(separator:maxSplits:omittingEmptySubsequences:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"extendedModule":"Swift","role":"symbol","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"symbolKind":"method","externalID":"s:SlsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSay11SubSequenceQzGAB_SiSbtF::SYNTHESIZED::s:s15EmptyCollectionV","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"maxSplits"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":") -> [","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"SubSequence","kind":"typeIdentifier","preciseIdentifier":"s:Sl11SubSequenceQa"},{"kind":"text","text":"]"}]},"sections":[],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/EmptyCollection":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EmptyCollection"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"text":"EmptyCollection","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A collection whose element type is "},{"type":"codeVoice","code":"Element"},{"text":" but that is always empty.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EmptyCollection","url":"\/documentation\/compute\/emptycollection","title":"EmptyCollection"},"doc://com.swallow.documentation.Compute/documentation/Compute/EmptyCollection/split(separator:maxSplits:omittingEmptySubsequences:)-4mogv":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EmptyCollection\/split(separator:maxSplits:omittingEmptySubsequences:)-4mogv","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}]},"url":"\/documentation\/compute\/emptycollection\/split(separator:maxsplits:omittingemptysubsequences:)-4mogv","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"separator"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":") -> [","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence","preciseIdentifier":"s:Sl11SubSequenceQa"},{"text":"]","kind":"text"}],"abstract":[{"text":"Returns the longest possible subsequences of the collection, in order,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around elements equal to the given element."}],"kind":"symbol","title":"split(separator:maxSplits:omittingEmptySubsequences:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection/SubSequence":{"url":"\/documentation\/compute\/collection\/subsequence","title":"SubSequence","abstract":[{"type":"text","text":"A collection representing a contiguous subrange of this collection’s"},{"type":"text","text":" "},{"text":"elements. The subsequence shares indices with the original collection.","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SubSequence"},{"kind":"text","text":" : "},{"text":"Collection","preciseIdentifier":"s:Sl","kind":"typeIdentifier"},{"text":" = ","kind":"text"},{"text":"Slice","preciseIdentifier":"s:s5SliceV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"required":true,"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection\/SubSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/EmptyCollection/Collection-Implementations":{"type":"topic","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EmptyCollection\/Collection-Implementations","title":"Collection Implementations","url":"\/documentation\/compute\/emptycollection\/collection-implementations","abstract":[],"role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}