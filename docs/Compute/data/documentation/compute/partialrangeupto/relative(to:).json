{"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo\/relative(to:)"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo\/RangeExpression-Implementations"]]},"kind":"symbol","metadata":{"extendedModule":"Swift","role":"symbol","roleHeading":"Instance Method","symbolKind":"method","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"modules":[{"name":"Compute","relatedModules":["Swift"]}],"externalID":"s:s16PartialRangeUpToV8relative2toSnyxGqd___t5IndexQyd__RszSlRd__lF","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"relative"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"C"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"C"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sn","text":"Range"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"text":">","kind":"text"}],"title":"relative(to:)"},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"relative","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"to"},{"text":" ","kind":"text"},{"text":"collection","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":") -> ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","kind":"typeIdentifier","preciseIdentifier":"s:Sn","text":"Range"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"Bound","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa","text":"Index","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection\/Index"},{"text":", ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:Sl","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","kind":"typeIdentifier","text":"Collection"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The collection to evaluate this range expression"},{"text":" ","type":"text"},{"text":"in relation to.","type":"text"}],"type":"paragraph"}],"name":"collection"}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A range suitable for slicing "},{"code":"collection","type":"codeVoice"},{"type":"text","text":". The returned range"},{"type":"text","text":" "},{"text":"is ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"text":" guaranteed to be inside the bounds of ","type":"text"},{"code":"collection","type":"codeVoice"},{"type":"text","text":". Callers"},{"type":"text","text":" "},{"text":"should apply the same preconditions to the return value as they would","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to a range provided directly by the user."}]}]},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"inlineContent":[{"text":"You can use the ","type":"text"},{"code":"relative(to:)","type":"codeVoice"},{"type":"text","text":" method to convert a range expression,"},{"text":" ","type":"text"},{"text":"which could be missing one or both of its endpoints, into a concrete","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"range that is bounded on both sides. The following example uses this"},{"text":" ","type":"text"},{"type":"text","text":"method to convert a partial range up to "},{"type":"codeVoice","code":"4"},{"text":" into a half-open range,","type":"text"},{"type":"text","text":" "},{"text":"using an array instance to add the range’s lower bound.","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","let upToFour = ..<4","","let r1 = upToFour.relative(to: numbers)","\/\/ r1 == 0..<4"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"r1"},{"text":" range is bounded on the lower end by ","type":"text"},{"type":"codeVoice","code":"0"},{"text":" because that is the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"starting index of the "},{"type":"codeVoice","code":"numbers"},{"text":" array. When the collection passed to","type":"text"},{"text":" ","type":"text"},{"code":"relative(to:)","type":"codeVoice"},{"type":"text","text":" starts with a different index, that index is used as the"},{"type":"text","text":" "},{"text":"lower bound instead. The next example creates a slice of ","type":"text"},{"type":"codeVoice","code":"numbers"},{"type":"text","text":" "},{"type":"text","text":"starting at index "},{"code":"2","type":"codeVoice"},{"text":", and then uses the slice with ","type":"text"},{"code":"relative(to:)","type":"codeVoice"},{"text":" to","type":"text"},{"text":" ","type":"text"},{"text":"convert ","type":"text"},{"type":"codeVoice","code":"upToFour"},{"type":"text","text":" to a concrete range."}]},{"type":"codeListing","syntax":null,"code":["let numbersSuffix = numbers[2...]","\/\/ numbersSuffix == [30, 40, 50, 60, 70]","","let r2 = upToFour.relative(to: numbersSuffix)","\/\/ r2 == 2..<4"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this method only if you need the concrete range it produces. To"},{"text":" ","type":"text"},{"type":"text","text":"access a slice of a collection using a range expression, use the"},{"type":"text","text":" "},{"type":"text","text":"collection’s generic subscript that uses a range expression as its"},{"type":"text","text":" "},{"type":"text","text":"parameter."}]},{"type":"codeListing","syntax":null,"code":["let numbersPrefix = numbers[upToFour]","\/\/ numbersPrefix == [10, 20, 30, 40]"]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/partialrangeupto\/relative(to:)"]}],"abstract":[{"text":"Returns the range of indices described by this range expression within","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the given collection."}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeUpTo/relative(to:)":{"abstract":[{"type":"text","text":"Returns the range of indices described by this range expression within"},{"text":" ","type":"text"},{"text":"the given collection.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"relative","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Range","kind":"typeIdentifier","preciseIdentifier":"s:Sn"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":">","kind":"text"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"kind":"symbol","url":"\/documentation\/compute\/partialrangeupto\/relative(to:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo\/relative(to:)","title":"relative(to:)","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Collection"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","url":"\/documentation\/compute\/collection","abstract":[{"type":"text","text":"A sequence whose elements can be traversed multiple times,"},{"text":" ","type":"text"},{"text":"nondestructively, and accessed by an indexed subscript.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Collection"}],"title":"Collection"},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection/Index":{"url":"\/documentation\/compute\/collection\/index","required":true,"role":"symbol","title":"Index","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Index","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"Comparable","preciseIdentifier":"s:SL","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"A type that represents a position in the collection."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection\/Index","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeUpTo/RangeExpression-Implementations":{"url":"\/documentation\/compute\/partialrangeupto\/rangeexpression-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo\/RangeExpression-Implementations","type":"topic","role":"collectionGroup","abstract":[],"title":"RangeExpression Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/Range":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Range","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","url":"\/documentation\/compute\/range","abstract":[{"text":"A half-open interval from a lower bound up to, but not including, an upper","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"bound."}],"navigatorTitle":[{"text":"Range","kind":"identifier"}],"title":"Range"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeUpTo":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"PartialRangeUpTo","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/partialrangeupto","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeUpTo","abstract":[{"type":"text","text":"A partial half-open interval up to, but not including, an upper bound."}],"navigatorTitle":[{"text":"PartialRangeUpTo","kind":"identifier"}],"title":"PartialRangeUpTo"}}}