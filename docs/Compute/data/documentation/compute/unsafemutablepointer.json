{"metadata":{"roleHeading":"Structure","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UnsafeMutablePointer","kind":"identifier"}],"symbolKind":"struct","navigatorTitle":[{"text":"UnsafeMutablePointer","kind":"identifier"}],"modules":[{"name":"Compute"}],"title":"UnsafeMutablePointer","role":"symbol","externalID":"s:Sp"},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"topicSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/pointee"],"generated":true,"anchor":"Instance-Properties","title":"Instance Properties"},{"title":"Instance Methods","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/assign(from:count:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/assign(repeating:count:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/deallocate(capacity:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/deinitialize()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/initialize(from:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/initialize(from:count:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/initialize(to:count:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/moveAssign(from:count:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/moveInitialize(from:count:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/moveUpdate(from:count:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/pointer(to:)-8cyek","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/pointer(to:)-8veyb","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/withMemoryRebound(to:capacity:_:)"],"anchor":"Instance-Methods"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/subscript(_:)"],"anchor":"Subscripts","generated":true,"title":"Subscripts"},{"anchor":"Type-Aliases","title":"Type Aliases","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/Distance"],"generated":true},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/Comparable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/CustomReflectable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/MutablePointer-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/Pointer-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/Strideable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/_CustomPlaygroundQuickLookable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/_Pointer-Implementations"],"anchor":"Default-Implementations"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/unsafemutablepointer"]}],"abstract":[{"text":"A pointer for accessing and manipulating data of a","type":"text"},{"type":"text","text":" "},{"text":"specific type.","type":"text"}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"@frozen"},{"text":" ","kind":"text"},{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UnsafeMutablePointer","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Pointee"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Pointee","kind":"typeIdentifier"},{"text":" : ~Copyable","kind":"text"}],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"inlineContent":[{"text":"You use instances of the ","type":"text"},{"type":"codeVoice","code":"UnsafeMutablePointer"},{"type":"text","text":" type to access data of a"},{"text":" ","type":"text"},{"text":"specific type in memory. The type of data that a pointer can access is the","type":"text"},{"type":"text","text":" "},{"text":"pointer’s ","type":"text"},{"code":"Pointee","type":"codeVoice"},{"type":"text","text":" type. "},{"code":"UnsafeMutablePointer","type":"codeVoice"},{"type":"text","text":" provides no automated"},{"text":" ","type":"text"},{"type":"text","text":"memory management or alignment guarantees. You are responsible for"},{"text":" ","type":"text"},{"type":"text","text":"handling the life cycle of any memory you work with through unsafe"},{"type":"text","text":" "},{"text":"pointers to avoid leaks or undefined behavior.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Memory that you manually manage can be either ","type":"text"},{"inlineContent":[{"type":"text","text":"untyped"}],"type":"emphasis"},{"type":"text","text":" or "},{"inlineContent":[{"text":"bound","type":"text"}],"type":"emphasis"},{"type":"text","text":" to a"},{"type":"text","text":" "},{"text":"specific type. You use the ","type":"text"},{"type":"codeVoice","code":"UnsafeMutablePointer"},{"text":" type to access and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"manage memory that has been bound to a specific type."}],"type":"paragraph"},{"text":"Understanding a Pointer’s Memory State","level":1,"anchor":"Understanding-a-Pointers-Memory-State","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The memory referenced by an ","type":"text"},{"code":"UnsafeMutablePointer","type":"codeVoice"},{"type":"text","text":" instance can be in"},{"type":"text","text":" "},{"type":"text","text":"one of several states. Many pointer operations must only be applied to"},{"type":"text","text":" "},{"text":"pointers with memory in a specific state—you must keep track of the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state of the memory you are working with and understand the changes to"},{"text":" ","type":"text"},{"text":"that state that different operations perform. Memory can be untyped and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"uninitialized, bound to a type and uninitialized, or bound to a type and"},{"type":"text","text":" "},{"text":"initialized to a value. Finally, memory that was allocated previously may","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"have been deallocated, leaving existing pointers referencing unallocated"},{"type":"text","text":" "},{"text":"memory.","type":"text"}]},{"type":"heading","level":2,"anchor":"Uninitialized-Memory","text":"Uninitialized Memory"},{"type":"paragraph","inlineContent":[{"text":"Memory that has just been allocated through a typed pointer or has been","type":"text"},{"type":"text","text":" "},{"text":"deinitialized is in an ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"uninitialized"}]},{"type":"text","text":" state. Uninitialized memory must be"},{"type":"text","text":" "},{"type":"text","text":"initialized before it can be accessed for reading."}]},{"inlineContent":[{"type":"text","text":"You can use methods like "},{"code":"initialize(repeating:count:)","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"initialize(from:count:)"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"codeVoice","code":"moveInitialize(from:count:)"},{"type":"text","text":" to initialize the memory referenced by a"},{"text":" ","type":"text"},{"type":"text","text":"pointer with a value or series of values."}],"type":"paragraph"},{"level":2,"text":"Initialized Memory","anchor":"Initialized-Memory","type":"heading"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Initialized","type":"text"}],"type":"emphasis"},{"text":" memory has a value that can be read using a pointer’s","type":"text"},{"type":"text","text":" "},{"code":"pointee","type":"codeVoice"},{"text":" property or through subscript notation. In the following","type":"text"},{"type":"text","text":" "},{"text":"example, ","type":"text"},{"code":"ptr","type":"codeVoice"},{"type":"text","text":" is a pointer to memory initialized with a value of "},{"type":"codeVoice","code":"23"},{"type":"text","text":":"}]},{"syntax":null,"code":["let ptr: UnsafeMutablePointer<Int> = ...","\/\/ ptr.pointee == 23","\/\/ ptr[0] == 23"],"type":"codeListing"},{"text":"Accessing a Pointer’s Memory as a Different Type","type":"heading","anchor":"Accessing-a-Pointers-Memory-as-a-Different-Type","level":1},{"inlineContent":[{"type":"text","text":"When you access memory through an "},{"type":"codeVoice","code":"UnsafeMutablePointer"},{"text":" instance, the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Pointee"},{"type":"text","text":" type must be consistent with the bound type of the memory. If"},{"text":" ","type":"text"},{"type":"text","text":"you do need to access memory that is bound to one type as a different"},{"text":" ","type":"text"},{"type":"text","text":"type, Swift’s pointer types provide type-safe ways to temporarily or"},{"text":" ","type":"text"},{"text":"permanently change the bound type of the memory, or to load typed","type":"text"},{"text":" ","type":"text"},{"text":"instances directly from raw memory.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"UnsafeMutablePointer<UInt8>"},{"type":"text","text":" instance allocated with eight bytes of"},{"type":"text","text":" "},{"type":"text","text":"memory, "},{"code":"uint8Pointer","type":"codeVoice"},{"text":", will be used for the examples below.","type":"text"}]},{"code":["var bytes: [UInt8] = [39, 77, 111, 111, 102, 33, 39, 0]","let uint8Pointer = UnsafeMutablePointer<UInt8>.allocate(capacity: 8)","uint8Pointer.initialize(from: &bytes, count: 8)"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"When you only need to temporarily access a pointer’s memory as a different"},{"type":"text","text":" "},{"type":"text","text":"type, use the "},{"type":"codeVoice","code":"withMemoryRebound(to:capacity:)"},{"text":" method. For example, you","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can use this method to call an API that expects a pointer to a different"},{"type":"text","text":" "},{"type":"text","text":"type that is layout compatible with your pointer’s "},{"type":"codeVoice","code":"Pointee"},{"text":". The following","type":"text"},{"type":"text","text":" "},{"type":"text","text":"code temporarily rebinds the memory that "},{"type":"codeVoice","code":"uint8Pointer"},{"text":" references from","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":" to "},{"type":"codeVoice","code":"Int8"},{"type":"text","text":" to call the imported C "},{"type":"codeVoice","code":"strlen"},{"text":" function.","type":"text"}],"type":"paragraph"},{"code":["\/\/ Imported from C","func strlen(_ __s: UnsafePointer<Int8>!) -> UInt","","let length = uint8Pointer.withMemoryRebound(to: Int8.self, capacity: 8) {","    return strlen($0)","}","\/\/ length == 7"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"When you need to permanently rebind memory to a different type, first"},{"type":"text","text":" "},{"text":"obtain a raw pointer to the memory and then call the","type":"text"},{"text":" ","type":"text"},{"code":"bindMemory(to:capacity:)","type":"codeVoice"},{"type":"text","text":" method on the raw pointer. The following"},{"type":"text","text":" "},{"type":"text","text":"example binds the memory referenced by "},{"code":"uint8Pointer","type":"codeVoice"},{"type":"text","text":" to one instance of"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"UInt64"},{"type":"text","text":" type:"}],"type":"paragraph"},{"code":["let uint64Pointer = UnsafeMutableRawPointer(uint8Pointer)","                          .bindMemory(to: UInt64.self, capacity: 1)"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"After rebinding the memory referenced by ","type":"text"},{"code":"uint8Pointer","type":"codeVoice"},{"type":"text","text":" to "},{"code":"UInt64","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"accessing that pointer’s referenced memory as a ","type":"text"},{"type":"codeVoice","code":"UInt8"},{"text":" instance is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"undefined."}]},{"syntax":null,"code":["var fullInteger = uint64Pointer.pointee          \/\/ OK","var firstByte = uint8Pointer.pointee             \/\/ undefined"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Alternatively, you can access the same memory as a different type without"},{"type":"text","text":" "},{"text":"rebinding through untyped memory access, so long as the bound type and the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"destination type are trivial types. Convert your pointer to an"},{"type":"text","text":" "},{"type":"codeVoice","code":"UnsafeMutableRawPointer"},{"text":" instance and then use the raw pointer’s","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"load(fromByteOffset:as:)"},{"text":" and ","type":"text"},{"code":"storeBytes(of:toByteOffset:as:)","type":"codeVoice"},{"type":"text","text":" methods"},{"text":" ","type":"text"},{"type":"text","text":"to read and write values."}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let rawPointer = UnsafeMutableRawPointer(uint64Pointer)","let fullInteger = rawPointer.load(as: UInt64.self)   \/\/ OK","let firstByte = rawPointer.load(as: UInt8.self)      \/\/ OK"]},{"level":1,"type":"heading","anchor":"Performing-Typed-Pointer-Arithmetic","text":"Performing Typed Pointer Arithmetic"},{"inlineContent":[{"type":"text","text":"Pointer arithmetic with a typed pointer is counted in strides of the"},{"type":"text","text":" "},{"text":"pointer’s ","type":"text"},{"type":"codeVoice","code":"Pointee"},{"type":"text","text":" type. When you add to or subtract from an "},{"type":"codeVoice","code":"UnsafeMutablePointer"},{"type":"text","text":" "},{"text":"instance, the result is a new pointer of the same type, offset by that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"number of instances of the "},{"code":"Pointee","type":"codeVoice"},{"type":"text","text":" type."}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ 'intPointer' points to memory initialized with [10, 20, 30, 40]","let intPointer: UnsafeMutablePointer<Int> = ...","","\/\/ Load the first value in memory","let x = intPointer.pointee","\/\/ x == 10","","\/\/ Load the third value in memory","let offsetPointer = intPointer + 2","let y = offsetPointer.pointee","\/\/ y == 30"],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"You can also use subscript notation to access the value in memory at a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specific offset."}]},{"syntax":null,"type":"codeListing","code":["let z = intPointer[2]","\/\/ z == 30"]},{"type":"heading","level":1,"text":"Implicit Casting and Bridging","anchor":"Implicit-Casting-and-Bridging"},{"inlineContent":[{"type":"text","text":"When calling a function or method with an "},{"code":"UnsafeMutablePointer","type":"codeVoice"},{"text":" parameter, you can pass","type":"text"},{"type":"text","text":" "},{"text":"an instance of that specific pointer type or use Swift’s implicit bridging","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to pass a compatible pointer."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the "},{"type":"codeVoice","code":"printInt(atAddress:)"},{"type":"text","text":" function in the following code"},{"text":" ","type":"text"},{"text":"sample expects an ","type":"text"},{"code":"UnsafeMutablePointer<Int>","type":"codeVoice"},{"text":" instance as its first parameter:","type":"text"}]},{"type":"codeListing","code":["func printInt(atAddress p: UnsafeMutablePointer<Int>) {","    print(p.pointee)","}"],"syntax":null},{"inlineContent":[{"text":"As is typical in Swift, you can call the ","type":"text"},{"type":"codeVoice","code":"printInt(atAddress:)"},{"text":" function","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with an "},{"code":"UnsafeMutablePointer","type":"codeVoice"},{"text":" instance. This example passes ","type":"text"},{"code":"intPointer","type":"codeVoice"},{"type":"text","text":", a mutable"},{"type":"text","text":" "},{"type":"text","text":"pointer to an "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" value, to "},{"type":"codeVoice","code":"print(address:)"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["printInt(atAddress: intPointer)","\/\/ Prints \"42\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, you can use Swift’s "},{"inlineContent":[{"type":"text","text":"implicit bridging"}],"type":"emphasis"},{"type":"text","text":" to pass a pointer to"},{"text":" ","type":"text"},{"text":"an instance or to the elements of an array. The following example passes a","type":"text"},{"type":"text","text":" "},{"text":"pointer to the ","type":"text"},{"type":"codeVoice","code":"value"},{"text":" variable by using inout syntax:","type":"text"}]},{"syntax":null,"type":"codeListing","code":["var value: Int = 23","printInt(atAddress: &value)","\/\/ Prints \"23\""]},{"inlineContent":[{"type":"text","text":"A mutable pointer to the elements of an array is implicitly created when"},{"text":" ","type":"text"},{"text":"you pass the array using inout syntax. This example uses implicit bridging","type":"text"},{"type":"text","text":" "},{"text":"to pass a pointer to the elements of ","type":"text"},{"code":"numbers","type":"codeVoice"},{"type":"text","text":" when calling"},{"type":"text","text":" "},{"type":"codeVoice","code":"printInt(atAddress:)"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["var numbers = [5, 10, 15, 20]","printInt(atAddress: &numbers)","\/\/ Prints \"5\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"No matter which way you call "},{"type":"codeVoice","code":"printInt(atAddress:)"},{"type":"text","text":", Swift’s type safety"},{"type":"text","text":" "},{"type":"text","text":"guarantees that you can only pass a pointer to the type required by the"},{"type":"text","text":" "},{"text":"function—in this case, a pointer to an ","type":"text"},{"code":"Int","type":"codeVoice"},{"type":"text","text":"."}]},{"name":"Important","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The pointer created through implicit bridging of an instance"},{"type":"text","text":" "},{"type":"text","text":"or of an array’s elements is only valid during the execution of the"},{"type":"text","text":" "},{"type":"text","text":"called function. Escaping the pointer to use after the execution of the"},{"type":"text","text":" "},{"text":"function is undefined behavior. In particular, do not use implicit","type":"text"},{"type":"text","text":" "},{"text":"bridging when calling an ","type":"text"},{"code":"UnsafeMutablePointer","type":"codeVoice"},{"type":"text","text":" initializer."}]}],"type":"aside"}]}],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","doc:\/\/com.swallow.documentation.Compute\/7Swallow21BitPatternConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow10FILEStreamP","doc:\/\/com.swallow.documentation.Compute\/7Swallow14MutablePointerP","doc:\/\/com.swallow.documentation.Compute\/7Swallow32MutableRepresentationConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow15NativeWordSizedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22OpaquePointerInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7PointerP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP"]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"kind":"symbol","references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/Pointer-Implementations":{"type":"topic","title":"Pointer Implementations","abstract":[],"kind":"article","url":"\/documentation\/compute\/unsafemutablepointer\/pointer-implementations","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/Pointer-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/pointee":{"title":"pointee","url":"\/documentation\/compute\/unsafemutablepointer\/pointee","role":"symbol","abstract":[{"type":"text","text":"Reads or updates the instance referenced by this pointer."}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"pointee"},{"text":": ","kind":"text"},{"text":"Pointee","kind":"typeIdentifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/pointee"},"doc://com.swallow.documentation.Compute/7Swallow15NativeWordSizedP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow15NativeWordSizedP","title":"Swallow.NativeWordSized"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafeMutablePointer"}],"url":"\/documentation\/compute\/unsafemutablepointer","type":"topic","abstract":[{"type":"text","text":"A pointer for accessing and manipulating data of a"},{"text":" ","type":"text"},{"text":"specific type.","type":"text"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnsafeMutablePointer"}],"title":"UnsafeMutablePointer"},"doc://com.swallow.documentation.Compute/7Swallow10FILEStreamP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow10FILEStreamP","title":"Swallow.FILEStream"},"doc://com.swallow.documentation.Compute/7Swallow7PointerP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7PointerP","title":"Swallow.Pointer"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Hashable","kind":"identifier"}],"url":"\/documentation\/compute\/hashable","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Pointee"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"abstract":[{"type":"text","text":"A type that can be hashed into a "},{"type":"codeVoice","code":"Hasher"},{"type":"text","text":" to produce an integer hash value."}],"title":"Hashable","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/initialize(to:count:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/initialize(to:count:)","abstract":[],"role":"symbol","deprecated":true,"type":"topic","title":"initialize(to:count:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"initialize","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"text":"Pointee","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"count","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":")"}],"url":"\/documentation\/compute\/unsafemutablepointer\/initialize(to:count:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Copyable","kind":"identifier"}],"url":"\/documentation\/compute\/copyable","conformance":{"constraints":[{"type":"codeVoice","code":"Pointee"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","navigatorTitle":[{"kind":"identifier","text":"Copyable"}],"abstract":[{"type":"text","text":"A type whose values can be implicitly or explicitly copied."}],"title":"Copyable","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/moveInitialize(from:count:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/moveInitialize(from:count:)","abstract":[{"type":"text","text":"Moves instances from initialized source memory into the uninitialized"},{"type":"text","text":" "},{"type":"text","text":"memory referenced by this pointer, leaving the source memory"},{"type":"text","text":" "},{"type":"text","text":"uninitialized and the memory referenced by this pointer initialized."}],"role":"symbol","type":"topic","title":"moveInitialize(from:count:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"moveInitialize"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"from"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sp","kind":"typeIdentifier","text":"UnsafeMutablePointer"},{"text":"<","kind":"text"},{"text":"Pointee","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/compute\/unsafemutablepointer\/moveinitialize(from:count:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/CVarArg":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CVarArg"}],"url":"\/documentation\/compute\/cvararg","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Pointee"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","navigatorTitle":[{"text":"CVarArg","kind":"identifier"}],"abstract":[{"type":"text","text":"A type whose instances can be encoded, and appropriately passed, as"},{"type":"text","text":" "},{"type":"text","text":"elements of a C "},{"code":"va_list","type":"codeVoice"},{"type":"text","text":"."}],"title":"CVarArg","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/deinitialize()":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/deinitialize()","abstract":[],"role":"symbol","deprecated":true,"type":"topic","title":"deinitialize()","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"deinitialize","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"}],"url":"\/documentation\/compute\/unsafemutablepointer\/deinitialize()"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/Distance":{"kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"Distance","kind":"identifier"}],"url":"\/documentation\/compute\/unsafemutablepointer\/distance","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/Distance","navigatorTitle":[{"kind":"identifier","text":"Distance"}],"abstract":[{"type":"text","text":"A type that represents the distance between two pointers."}],"title":"UnsafeMutablePointer.Distance","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomDebugStringConvertible":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","abstract":[{"type":"text","text":"A type with a customized textual representation suitable for debugging"},{"type":"text","text":" "},{"type":"text","text":"purposes."}],"role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Pointee"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}]},"type":"topic","navigatorTitle":[{"text":"CustomDebugStringConvertible","kind":"identifier"}],"title":"CustomDebugStringConvertible","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"CustomDebugStringConvertible","kind":"identifier"}],"url":"\/documentation\/compute\/customdebugstringconvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/BitwiseCopyable":{"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"BitwiseCopyable","kind":"identifier"}],"url":"\/documentation\/compute\/bitwisecopyable","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Pointee"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","navigatorTitle":[{"text":"BitwiseCopyable","kind":"identifier"}],"abstract":[],"title":"BitwiseCopyable","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/assign(repeating:count:)":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/assign(repeating:count:)","url":"\/documentation\/compute\/unsafemutablepointer\/assign(repeating:count:)","deprecated":true,"role":"symbol","abstract":[],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"assign"},{"kind":"text","text":"("},{"kind":"externalParam","text":"repeating"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Pointee"},{"kind":"text","text":", "},{"text":"count","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"assign(repeating:count:)","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/_CustomPlaygroundQuickLookable-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/_CustomPlaygroundQuickLookable-Implementations","abstract":[],"role":"collectionGroup","type":"topic","title":"_CustomPlaygroundQuickLookable Implementations","kind":"article","url":"\/documentation\/compute\/unsafemutablepointer\/_customplaygroundquicklookable-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/initialize(from:)":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/initialize(from:)","type":"topic","title":"initialize(from:)","role":"symbol","url":"\/documentation\/compute\/unsafemutablepointer\/initialize(from:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"initialize","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"text":"C","kind":"typeIdentifier"},{"text":")","kind":"text"}],"deprecated":true,"abstract":[{"type":"text","text":"Initializes memory starting at this pointer’s address with the elements"},{"type":"text","text":" "},{"type":"text","text":"of the given collection."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/assign(from:count:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"assign","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"from"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SP","text":"UnsafePointer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Pointee","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"count","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"url":"\/documentation\/compute\/unsafemutablepointer\/assign(from:count:)","deprecated":true,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/assign(from:count:)","abstract":[],"title":"assign(from:count:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/deallocate(capacity:)":{"url":"\/documentation\/compute\/unsafemutablepointer\/deallocate(capacity:)","deprecated":true,"kind":"symbol","abstract":[],"title":"deallocate(capacity:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"deallocate"},{"text":"(","kind":"text"},{"text":"capacity","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/deallocate(capacity:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/initialize(from:count:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/initialize(from:count:)","abstract":[{"type":"text","text":"Initializes the memory referenced by this pointer with the values"},{"type":"text","text":" "},{"type":"text","text":"starting at the given pointer."}],"role":"symbol","type":"topic","title":"initialize(from:count:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"initialize","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"from"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SP","text":"UnsafePointer"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Pointee"},{"text":">, ","kind":"text"},{"text":"count","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":")"}],"url":"\/documentation\/compute\/unsafemutablepointer\/initialize(from:count:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/Equatable-Implementations":{"url":"\/documentation\/compute\/unsafemutablepointer\/equatable-implementations","role":"collectionGroup","type":"topic","title":"Equatable Implementations","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/Equatable-Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/7Swallow32MutableRepresentationConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow32MutableRepresentationConvertibleP","title":"Swallow.MutableRepresentationConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/Hashable-Implementations":{"title":"Hashable Implementations","role":"collectionGroup","kind":"article","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/Hashable-Implementations","url":"\/documentation\/compute\/unsafemutablepointer\/hashable-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/MutablePointer-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/MutablePointer-Implementations","abstract":[],"type":"topic","url":"\/documentation\/compute\/unsafemutablepointer\/mutablepointer-implementations","title":"MutablePointer Implementations","kind":"article","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/_Pointer-Implementations":{"type":"topic","title":"_Pointer Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/_Pointer-Implementations","role":"collectionGroup","url":"\/documentation\/compute\/unsafemutablepointer\/_pointer-implementations","kind":"article","abstract":[]},"doc://com.swallow.documentation.Compute/7Swallow14MutablePointerP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow14MutablePointerP","title":"Swallow.MutablePointer"},"doc://com.swallow.documentation.Compute/7Swallow21BitPatternConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21BitPatternConvertibleP","title":"Swallow.BitPatternConvertible"},"doc://com.swallow.documentation.Compute/7Swallow7TrivialP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP","title":"Swallow.Trivial"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/Comparable-Implementations":{"url":"\/documentation\/compute\/unsafemutablepointer\/comparable-implementations","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/Comparable-Implementations","role":"collectionGroup","type":"topic","title":"Comparable Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/Strideable":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Strideable","kind":"identifier"}],"url":"\/documentation\/compute\/strideable","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Pointee"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","navigatorTitle":[{"text":"Strideable","kind":"identifier"}],"abstract":[{"type":"text","text":"A type representing continuous, one-dimensional values that can be offset"},{"type":"text","text":" "},{"type":"text","text":"and measured."}],"title":"Strideable","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","abstract":[{"type":"text","text":"A type that can be compared for value equality."}],"role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Pointee"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"title":"Equatable","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}],"url":"\/documentation\/compute\/equatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/pointer(to:)-8veyb":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"pointer","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Property","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Pointee"},{"text":", ","kind":"text"},{"text":"Property","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:Sp","kind":"typeIdentifier","text":"UnsafeMutablePointer"},{"kind":"text","text":"<"},{"text":"Property","kind":"typeIdentifier"},{"text":">?","kind":"text"}],"url":"\/documentation\/compute\/unsafemutablepointer\/pointer(to:)-8veyb","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/pointer(to:)-8veyb","abstract":[{"type":"text","text":"Obtain a mutable pointer to the stored property referred to by a key path."}],"title":"pointer(to:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/Strideable-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/Strideable-Implementations","kind":"article","title":"Strideable Implementations","type":"topic","abstract":[],"url":"\/documentation\/compute\/unsafemutablepointer\/strideable-implementations"},"doc://com.swallow.documentation.Compute/7Swallow20ByteTupleConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP","title":"Swallow.ByteTupleConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/IteratorProtocol":{"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"IteratorProtocol","kind":"identifier"}],"url":"\/documentation\/compute\/iteratorprotocol","conformance":{"constraints":[{"type":"codeVoice","code":"Pointee"},{"type":"text","text":" is "},{"type":"codeVoice","code":"__sFILE"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol","navigatorTitle":[{"kind":"identifier","text":"IteratorProtocol"}],"abstract":[{"type":"text","text":"A type that supplies the values of a sequence one at a time."}],"title":"IteratorProtocol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/subscript(_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/subscript(_:)","abstract":[{"type":"text","text":"Reads or updates the pointee at the specified offset from this pointer."}],"role":"symbol","type":"topic","title":"subscript(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"subscript"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Pointee","kind":"typeIdentifier"}],"url":"\/documentation\/compute\/unsafemutablepointer\/subscript(_:)"},"doc://com.swallow.documentation.Compute/7Swallow22OpaquePointerInitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22OpaquePointerInitiableP","title":"Swallow.OpaquePointerInitiable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/withMemoryRebound(to:capacity:_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/withMemoryRebound(to:capacity:_:)","abstract":[{"type":"text","text":"Executes the given closure while temporarily binding memory to"},{"type":"text","text":" "},{"type":"text","text":"the specified number of instances of the given type."}],"role":"symbol","type":"topic","title":"withMemoryRebound(to:capacity:_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withMemoryRebound","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"E"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Result"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type, "},{"text":"capacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"preciseIdentifier":"s:Sp","text":"UnsafeMutablePointer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}],"url":"\/documentation\/compute\/unsafemutablepointer\/withmemoryrebound(to:capacity:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/moveUpdate(from:count:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"moveUpdate"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"from"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sp","kind":"typeIdentifier","text":"UnsafeMutablePointer"},{"text":"<","kind":"text"},{"text":"Pointee","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/compute\/unsafemutablepointer\/moveupdate(from:count:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/moveUpdate(from:count:)","abstract":[{"type":"text","text":"Update this pointer’s initialized memory by moving the specified number"},{"type":"text","text":" "},{"type":"text","text":"of instances the source pointer’s memory, leaving the source memory"},{"type":"text","text":" "},{"type":"text","text":"uninitialized."}],"title":"moveUpdate(from:count:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/pointer(to:)-8cyek":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/pointer(to:)-8cyek","abstract":[{"type":"text","text":"Obtain a pointer to the stored property referred to by a key path."}],"role":"symbol","type":"topic","title":"pointer(to:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"pointer","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Property","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Pointee"},{"text":", ","kind":"text"},{"text":"Property","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:SP","kind":"typeIdentifier","text":"UnsafePointer"},{"kind":"text","text":"<"},{"text":"Property","kind":"typeIdentifier"},{"text":">?","kind":"text"}],"url":"\/documentation\/compute\/unsafemutablepointer\/pointer(to:)-8cyek"},"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable":{"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Comparable","kind":"identifier"}],"url":"\/documentation\/compute\/comparable","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Pointee","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","navigatorTitle":[{"kind":"identifier","text":"Comparable"}],"abstract":[{"type":"text","text":"A type that can be compared using the relational operators "},{"type":"codeVoice","code":"<"},{"type":"text","text":", "},{"code":"<=","type":"codeVoice"},{"type":"text","text":", "},{"code":">=","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"type":"text","text":"."}],"title":"Comparable","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}],"role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Pointee"},{"type":"text","text":" is "},{"type":"codeVoice","code":"__sFILE"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Sequence"}],"title":"Sequence","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Sequence","kind":"identifier"}],"url":"\/documentation\/compute\/sequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/moveAssign(from:count:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"moveAssign","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"from"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sp","text":"UnsafeMutablePointer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Pointee","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"count","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"url":"\/documentation\/compute\/unsafemutablepointer\/moveassign(from:count:)","deprecated":true,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/moveAssign(from:count:)","abstract":[],"title":"moveAssign(from:count:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/CustomReflectable-Implementations":{"kind":"article","title":"CustomReflectable Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/CustomReflectable-Implementations","url":"\/documentation\/compute\/unsafemutablepointer\/customreflectable-implementations","type":"topic","role":"collectionGroup","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomReflectable":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","abstract":[{"type":"text","text":"A type that explicitly supplies its own mirror."}],"role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Pointee"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","navigatorTitle":[{"kind":"identifier","text":"CustomReflectable"}],"title":"CustomReflectable","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"CustomReflectable","kind":"identifier"}],"url":"\/documentation\/compute\/customreflectable"}}}