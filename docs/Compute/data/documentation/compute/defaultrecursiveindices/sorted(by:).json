{"abstract":[{"text":"Returns the elements of the sequence, sorted using the given predicate as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the comparison between elements."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/defaultrecursiveindices\/sorted(by:)"]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultRecursiveIndices","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultRecursiveIndices\/Sequence-Implementations"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultRecursiveIndices\/sorted(by:)"},"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"sorted"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"by"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"areInIncreasingOrder"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> [","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}]},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"A predicate that returns "},{"code":"true","type":"codeVoice"},{"type":"text","text":" if its"},{"text":" ","type":"text"},{"text":"first argument should be ordered before its second argument;","type":"text"},{"text":" ","type":"text"},{"text":"otherwise, ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"areInIncreasingOrder"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"text":"Return Value","anchor":"return-value","type":"heading"},{"inlineContent":[{"text":"A sorted array of the sequence’s elements.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"When you want to sort a sequence of elements that don’t conform to the"},{"text":" ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":" protocol, pass a predicate to this method that returns","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":" when the first element should be ordered before the second. The"},{"type":"text","text":" "},{"type":"text","text":"elements of the resulting array are ordered according to the given"},{"text":" ","type":"text"},{"type":"text","text":"predicate."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In the following example, the predicate provides an ordering for an array"},{"type":"text","text":" "},{"text":"of a custom ","type":"text"},{"type":"codeVoice","code":"HTTPResponse"},{"type":"text","text":" type. The predicate orders errors before"},{"text":" ","type":"text"},{"text":"successes and sorts the error responses by their error code.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["enum HTTPResponse {","    case ok","    case error(Int)","}","","let responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]","let sortedResponses = responses.sorted {","    switch ($0, $1) {","    \/\/ Order errors by code","    case let (.error(aCode), .error(bCode)):","        return aCode < bCode","","    \/\/ All successes are equivalent, so none is before any other","    case (.ok, .ok): return false","","    \/\/ Order errors before successes","    case (.error, .ok): return true","    case (.ok, .error): return false","    }","}","print(sortedResponses)","\/\/ Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\""],"syntax":null},{"inlineContent":[{"type":"text","text":"You also use this method to sort elements that conform to the"},{"type":"text","text":" "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" protocol in descending order. To sort your sequence in"},{"type":"text","text":" "},{"type":"text","text":"descending order, pass the greater-than operator ("},{"code":">","type":"codeVoice"},{"type":"text","text":") as the"},{"type":"text","text":" "},{"type":"codeVoice","code":"areInIncreasingOrder"},{"text":" parameter.","type":"text"}],"type":"paragraph"},{"code":["let students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]","let descendingStudents = students.sorted(by: >)","print(descendingStudents)","\/\/ Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\""],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"Calling the related "},{"code":"sorted()","type":"codeVoice"},{"type":"text","text":" method is equivalent to calling this"},{"type":"text","text":" "},{"type":"text","text":"method and passing the less-than operator ("},{"code":"<","type":"codeVoice"},{"type":"text","text":") as the predicate."}],"type":"paragraph"},{"syntax":null,"code":["print(students.sorted())","\/\/ Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"","print(students.sorted(by: <))","\/\/ Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The predicate must be a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"strict weak ordering","type":"text"}]},{"type":"text","text":" over the elements. That"},{"type":"text","text":" "},{"type":"text","text":"is, for any elements "},{"type":"codeVoice","code":"a"},{"text":", ","type":"text"},{"code":"b","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"c"},{"text":", the following conditions must","type":"text"},{"text":" ","type":"text"},{"text":"hold:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"areInIncreasingOrder(a, a)","type":"codeVoice"},{"text":" is always ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":". (Irreflexivity)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"areInIncreasingOrder(a, b)"},{"text":" and ","type":"text"},{"code":"areInIncreasingOrder(b, c)","type":"codeVoice"},{"type":"text","text":" are"},{"type":"text","text":" "},{"type":"text","text":"both "},{"code":"true","type":"codeVoice"},{"text":", then ","type":"text"},{"code":"areInIncreasingOrder(a, c)","type":"codeVoice"},{"text":" is also ","type":"text"},{"type":"codeVoice","code":"true"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"(Transitive comparability)","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Two elements are ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"incomparable"}]},{"type":"text","text":" if neither is ordered before the other"},{"type":"text","text":" "},{"type":"text","text":"according to the predicate. If "},{"code":"a","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"b","type":"codeVoice"},{"text":" are incomparable, and ","type":"text"},{"code":"b","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"code":"c","type":"codeVoice"},{"type":"text","text":" are incomparable, then "},{"code":"a","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"c"},{"text":" are also incomparable.","type":"text"},{"type":"text","text":" "},{"text":"(Transitive incomparability)","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"The sorting algorithm is guaranteed to be stable. A stable sort","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"preserves the relative order of elements for which"},{"text":" ","type":"text"},{"type":"codeVoice","code":"areInIncreasingOrder"},{"text":" does not establish an order.","type":"text"}]},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" log "},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" is the length of the sequence."}],"type":"paragraph"}],"name":"Complexity","type":"aside"}]}],"sections":[],"metadata":{"externalID":"s:STsE6sorted2bySay7ElementQzGSbAD_ADtKXE_tKF::SYNTHESIZED::s:7Compute23DefaultRecursiveIndicesV","symbolKind":"method","role":"symbol","extendedModule":"Swift","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"sorted","kind":"identifier"},{"kind":"text","text":"("},{"text":"by","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> [","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":"]"}],"roleHeading":"Instance Method","modules":[{"name":"Compute","relatedModules":["Swift"]}],"title":"sorted(by:)"},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/DefaultRecursiveIndices":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultRecursiveIndices","type":"topic","url":"\/documentation\/compute\/defaultrecursiveindices","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"DefaultRecursiveIndices","kind":"identifier"}],"navigatorTitle":[{"text":"DefaultRecursiveIndices","kind":"identifier"}],"title":"DefaultRecursiveIndices","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/DefaultRecursiveIndices/sorted(by:)":{"kind":"symbol","url":"\/documentation\/compute\/defaultrecursiveindices\/sorted(by:)","title":"sorted(by:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"sorted","kind":"identifier"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> ["},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultRecursiveIndices\/sorted(by:)","type":"topic","abstract":[{"text":"Returns the elements of the sequence, sorted using the given predicate as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the comparison between elements."}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/DefaultRecursiveIndices/Sequence-Implementations":{"role":"collectionGroup","kind":"article","title":"Sequence Implementations","url":"\/documentation\/compute\/defaultrecursiveindices\/sequence-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultRecursiveIndices\/Sequence-Implementations","type":"topic","abstract":[]}}}