{"schemaVersion":{"patch":0,"minor":3,"major":0},"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/com.swallow.documentation.Compute\/10Accelerate10BNNSScalarP","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AdditiveArithmetic","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDScalar","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedNumeric","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","doc:\/\/com.swallow.documentation.Compute\/7Swallow18AdditionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow21AnyCodableConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22ApproximatelyEquatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20ArithmeticOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16BooleanInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7BoundedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18BoundedRandomnableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18ByteOrderSwappableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow14CoderPrimitiveP","doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataDecodableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataEncodableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiscreteP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20DiscreteOrContinuousP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18DivisionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22FloatingPointInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow9InitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16IntegerInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow24MultiplicationOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableAdditionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow27MutableArithmeticOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableDivisionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow31MutableMultiplicationOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow28MutableSubtractionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow6NumberP","doc:\/\/com.swallow.documentation.Compute\/7Swallow17NumberConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow15NumberInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow11RandomnableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow26ShouldNotBeDecodedFromBoolP","doc:\/\/com.swallow.documentation.Compute\/7Swallow6SignedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22SignedIntegerInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16SignedOrUnsignedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow21SubtractionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP","doc:\/\/com.swallow.documentation.Compute\/7Swallow24UnsignedIntegerInitiableP"],"type":"conformsTo","kind":"relationships"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"@frozen","kind":"attribute"},{"text":" ","kind":"text"},{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Int64","kind":"identifier"}],"languages":["swift"]}],"kind":"declarations"}],"topicSections":[{"anchor":"Structures","title":"Structures","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/Words-swift.struct"]},{"generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/!=(_:_:)-1oald","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/&=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/&__=(_:_:)-3hmto","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/&__=(_:_:)-7f5t8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/*=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/+=(_:_:)-3qu38","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/-=(_:_:)-5vx5f","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/==(_:_:)-859y4","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/_(_:_:)-15gfv","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/_=(_:_:)-6kyxv","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/_=(_:_:)-8wdie","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/_=(_:_:)-8xard","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/_=(_:_:)-9q89m"],"title":"Operators","anchor":"Operators"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/init(_:)-4goni","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/init(_:)-5aiim","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/init(_:)-87ipw","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/init(bitPattern:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/init(exactly:)-5w39p","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/init(exactly:)-74h3v","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/init(exactly:)-87idz"],"title":"Initializers","generated":true,"anchor":"Initializers"},{"title":"Instance Properties","anchor":"Instance-Properties","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/byteSwapped","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/leadingZeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/magnitude-swift.property","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/nonzeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/trailingZeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/words-swift.property"],"generated":true},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/addingReportingOverflow(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/dividedReportingOverflow(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/dividingFullWidth(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/multipliedFullWidth(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/multipliedReportingOverflow(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/remainderReportingOverflow(dividingBy:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/signum()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/subtractingReportingOverflow(_:)"],"generated":true,"anchor":"Instance-Methods","title":"Instance Methods"},{"title":"Type Aliases","generated":true,"anchor":"Type-Aliases","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/IntegerLiteralType","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/Magnitude-swift.typealias","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/Stride"]},{"title":"Type Properties","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/bitWidth-swift.type.property"],"generated":true,"anchor":"Type-Properties"},{"anchor":"Default-Implementations","title":"Default Implementations","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/AdditiveArithmetic-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/BinaryInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/Comparable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/CustomReflectable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/Decodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/Encodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/ExpressibleByIntegerLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/FixedWidthInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/SIMDScalar-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/SignedInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/SignedNumeric-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/Strideable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/_CustomPlaygroundQuickLookable-Implementations"],"generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/int64"]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"abstract":[{"type":"text","text":"A 64-bit signed integer value"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"sections":[],"metadata":{"modules":[{"name":"Compute"}],"externalID":"s:s5Int64V","roleHeading":"Structure","title":"Int64","navigatorTitle":[{"kind":"identifier","text":"Int64"}],"role":"symbol","symbolKind":"struct","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int64"}]},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64","interfaceLanguage":"swift"},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/init(bitPattern:)":{"kind":"symbol","url":"\/documentation\/compute\/int64\/init(bitpattern:)","title":"init(bitPattern:)","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"bitPattern"},{"text":": ","kind":"text"},{"text":"UInt64","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt64V"},{"text":")","kind":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/init(bitPattern:)","role":"symbol","abstract":[{"type":"text","text":"Creates a new instance with the same memory representation as the given"},{"type":"text","text":" "},{"type":"text","text":"value."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/addingReportingOverflow(_:)":{"title":"addingReportingOverflow(_:)","abstract":[{"text":"Returns the sum of this value and the given value, along with a Boolean","type":"text"},{"text":" ","type":"text"},{"text":"value indicating whether overflow occurred in the operation.","type":"text"}],"url":"\/documentation\/compute\/int64\/addingreportingoverflow(_:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/addingReportingOverflow(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"addingReportingOverflow"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s5Int64V","text":"Int64","kind":"typeIdentifier"},{"kind":"text","text":") -> (partialValue"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V","text":"Int64"},{"text":", overflow","kind":"text"},{"kind":"text","text":": "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/*=(_:_:)":{"title":"*=(_:_:)","kind":"symbol","abstract":[{"text":"Multiplies two values and stores the result in the left-hand-side","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"variable."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/*=(_:_:)","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"*=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Int64","preciseIdentifier":"s:s5Int64V"},{"kind":"text","text":", "},{"preciseIdentifier":"s:s5Int64V","text":"Int64","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/compute\/int64\/*=(_:_:)"},"doc://com.swallow.documentation.Compute/7Swallow16BooleanInitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16BooleanInitiableP","title":"Swallow.BooleanInitiable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/_=(_:_:)-6kyxv":{"url":"\/documentation\/compute\/int64\/_=(_:_:)-6kyxv","type":"topic","kind":"symbol","role":"symbol","title":"%=(_:_:)","abstract":[{"type":"text","text":"Divides the first value by the second and stores the remainder in the"},{"text":" ","type":"text"},{"type":"text","text":"left-hand-side variable."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/_=(_:_:)-6kyxv","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"%="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:s5Int64V","text":"Int64","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Int64","kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V"},{"text":")","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Hashable"}],"title":"Hashable","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that can be hashed into a "},{"type":"codeVoice","code":"Hasher"},{"type":"text","text":" to produce an integer hash value."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","url":"\/documentation\/compute\/hashable","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/ExpressibleByIntegerLiteral-Implementations":{"abstract":[],"type":"topic","url":"\/documentation\/compute\/int64\/expressiblebyintegerliteral-implementations","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/ExpressibleByIntegerLiteral-Implementations","role":"collectionGroup","title":"ExpressibleByIntegerLiteral Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/&=(_:_:)":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"&=","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"Int64","kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Int64","preciseIdentifier":"s:s5Int64V"},{"kind":"text","text":")"}],"url":"\/documentation\/compute\/int64\/&=(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/&=(_:_:)","type":"topic","kind":"symbol","title":"&=(_:_:)","abstract":[{"type":"text","text":"Stores the result of performing a bitwise AND operation on the two given"},{"type":"text","text":" "},{"text":"values in the left-hand-side variable.","type":"text"}],"role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow7BoundedP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7BoundedP","title":"Swallow.Bounded"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/magnitude-swift.property":{"abstract":[{"type":"text","text":"The magnitude of this value."}],"type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"magnitude"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt64","preciseIdentifier":"s:s6UInt64V"}],"kind":"symbol","role":"symbol","title":"magnitude","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/magnitude-swift.property","url":"\/documentation\/compute\/int64\/magnitude-swift.property"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64":{"url":"\/documentation\/compute\/int64","title":"Int64","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int64"}],"abstract":[{"type":"text","text":"A 64-bit signed integer value"},{"text":" ","type":"text"},{"text":"type.","type":"text"}],"navigatorTitle":[{"text":"Int64","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow22ApproximatelyEquatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22ApproximatelyEquatableP","title":"Swallow.ApproximatelyEquatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/SignedInteger-Implementations":{"role":"collectionGroup","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/SignedInteger-Implementations","type":"topic","kind":"article","title":"SignedInteger Implementations","url":"\/documentation\/compute\/int64\/signedinteger-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/words-swift.property":{"url":"\/documentation\/compute\/int64\/words-swift.property","type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"words","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s5Int64V","text":"Int64","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V5WordsV","text":"Words"}],"kind":"symbol","title":"words","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/words-swift.property","abstract":[{"type":"text","text":"A collection containing the words of this value’s binary"},{"text":" ","type":"text"},{"text":"representation, in order from the least significant to most significant.","type":"text"}]},"doc://com.swallow.documentation.Compute/7Swallow25MutableAdditionOperatableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableAdditionOperatableP","title":"Swallow.MutableAdditionOperatable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger":{"title":"FixedWidthInteger","kind":"symbol","navigatorTitle":[{"text":"FixedWidthInteger","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"FixedWidthInteger","kind":"identifier"}],"abstract":[{"text":"An integer type that uses a fixed size for every instance.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/fixedwidthinteger"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/nonzeroBitCount":{"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/nonzeroBitCount","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"nonzeroBitCount","kind":"identifier"},{"kind":"text","text":": "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"}],"type":"topic","kind":"symbol","url":"\/documentation\/compute\/int64\/nonzerobitcount","abstract":[{"text":"The number of bits equal to 1 in this value’s binary representation.","type":"text"}],"title":"nonzeroBitCount"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/init(exactly:)-74h3v":{"title":"init(exactly:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?("},{"text":"exactly","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Float16","kind":"typeIdentifier","preciseIdentifier":"s:s7Float16V"},{"kind":"text","text":")"}],"url":"\/documentation\/compute\/int64\/init(exactly:)-74h3v","kind":"symbol","abstract":[{"type":"text","text":"Creates an integer from the given floating-point value, if it can be"},{"text":" ","type":"text"},{"text":"represented exactly.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/init(exactly:)-74h3v","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/init(_:)-87ipw":{"url":"\/documentation\/compute\/int64\/init(_:)-87ipw","title":"init(_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/init(_:)-87ipw","kind":"symbol","type":"topic","abstract":[],"fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"Double","kind":"typeIdentifier","preciseIdentifier":"s:Sd"},{"text":")","kind":"text"}],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/signum()":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"signum","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"Int64","preciseIdentifier":"s:s5Int64V","kind":"typeIdentifier"}],"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Returns "},{"code":"-1","type":"codeVoice"},{"type":"text","text":" if this value is negative and "},{"type":"codeVoice","code":"1"},{"type":"text","text":" if it’s positive;"},{"text":" ","type":"text"},{"type":"text","text":"otherwise, "},{"type":"codeVoice","code":"0"},{"text":".","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/signum()","title":"signum()","url":"\/documentation\/compute\/int64\/signum()","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/Comparable-Implementations":{"role":"collectionGroup","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/Comparable-Implementations","type":"topic","kind":"article","title":"Comparable Implementations","url":"\/documentation\/compute\/int64\/comparable-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/LosslessStringConvertible":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LosslessStringConvertible","kind":"identifier"}],"kind":"symbol","title":"LosslessStringConvertible","abstract":[{"type":"text","text":"A type that can be represented as a string in a lossless, unambiguous way."}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"LosslessStringConvertible","kind":"identifier"}],"url":"\/documentation\/compute\/losslessstringconvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/BinaryInteger-Implementations":{"role":"collectionGroup","type":"topic","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/BinaryInteger-Implementations","abstract":[],"title":"BinaryInteger Implementations","url":"\/documentation\/compute\/int64\/binaryinteger-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Sendable","kind":"identifier"}],"title":"Sendable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","abstract":[],"url":"\/documentation\/compute\/sendable","role":"symbol","navigatorTitle":[{"text":"Sendable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/7Swallow11RandomnableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow11RandomnableP","title":"Swallow.Randomnable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/AdditiveArithmetic-Implementations":{"role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/AdditiveArithmetic-Implementations","abstract":[],"url":"\/documentation\/compute\/int64\/additivearithmetic-implementations","title":"AdditiveArithmetic Implementations","type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow18ByteOrderSwappableP":{"title":"Swallow.ByteOrderSwappable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18ByteOrderSwappableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/Words-swift.struct":{"title":"Int64.Words","abstract":[{"text":"A type that represents the words of this integer.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/Words-swift.struct","navigatorTitle":[{"kind":"identifier","text":"Words"}],"url":"\/documentation\/compute\/int64\/words-swift.struct","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Words"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/byteSwapped":{"title":"byteSwapped","type":"topic","url":"\/documentation\/compute\/int64\/byteswapped","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"byteSwapped"},{"kind":"text","text":": "},{"text":"Int64","kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/byteSwapped","abstract":[{"text":"A representation of this integer with the byte order swapped.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow18DivisionOperatableP":{"title":"Swallow.DivisionOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18DivisionOperatableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Encodable":{"url":"\/documentation\/compute\/encodable","navigatorTitle":[{"text":"Encodable","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Encodable","kind":"identifier"}],"abstract":[{"text":"A type that can encode itself to an external representation.","type":"text"}],"type":"topic","title":"Encodable","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable"},"doc://com.swallow.documentation.Compute/7Swallow21SubtractionOperatableP":{"title":"Swallow.SubtractionOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21SubtractionOperatableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/Equatable-Implementations":{"kind":"article","type":"topic","title":"Equatable Implementations","role":"collectionGroup","url":"\/documentation\/compute\/int64\/equatable-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/Equatable-Implementations","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable":{"url":"\/documentation\/compute\/comparable","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared using the relational operators ","type":"text"},{"code":"<","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Comparable"}],"title":"Comparable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Comparable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/AdditiveArithmetic":{"type":"topic","title":"AdditiveArithmetic","abstract":[{"text":"A type with values that support addition and subtraction.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AdditiveArithmetic"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AdditiveArithmetic","url":"\/documentation\/compute\/additivearithmetic","role":"symbol","navigatorTitle":[{"text":"AdditiveArithmetic","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/7Swallow26ShouldNotBeDecodedFromBoolP":{"title":"Swallow.ShouldNotBeDecodedFromBool","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow26ShouldNotBeDecodedFromBoolP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow28MutableSubtractionOperatableP":{"title":"Swallow.MutableSubtractionOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow28MutableSubtractionOperatableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/SIMDScalar-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/SIMDScalar-Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/compute\/int64\/simdscalar-implementations","type":"topic","title":"SIMDScalar Implementations","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/CustomReflectable-Implementations":{"url":"\/documentation\/compute\/int64\/customreflectable-implementations","role":"collectionGroup","kind":"article","title":"CustomReflectable Implementations","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/CustomReflectable-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/-=(_:_:)-5vx5f":{"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/-=(_:_:)-5vx5f","kind":"symbol","type":"topic","title":"-=(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"-=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Int64","preciseIdentifier":"s:s5Int64V"},{"text":", ","kind":"text"},{"text":"Int64","kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V"},{"text":")","kind":"text"}],"abstract":[{"text":"Subtracts the second value from the first and stores the difference in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"left-hand-side variable."}],"url":"\/documentation\/compute\/int64\/-=(_:_:)-5vx5f"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/Encodable-Implementations":{"role":"collectionGroup","kind":"article","title":"Encodable Implementations","url":"\/documentation\/compute\/int64\/encodable-implementations","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/Encodable-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/IntegerLiteralType":{"url":"\/documentation\/compute\/int64\/integerliteraltype","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"IntegerLiteralType","kind":"identifier"}],"title":"Int64.IntegerLiteralType","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/IntegerLiteralType","abstract":[{"text":"A type that represents an integer literal.","type":"text"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IntegerLiteralType","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow21AnyCodableConvertibleP":{"title":"Swallow.AnyCodableConvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21AnyCodableConvertibleP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/7Swallow27MutableArithmeticOperatableP":{"title":"Swallow.MutableArithmeticOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow27MutableArithmeticOperatableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow18BoundedRandomnableP":{"title":"Swallow.BoundedRandomnable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18BoundedRandomnableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/multipliedReportingOverflow(by:)":{"title":"multipliedReportingOverflow(by:)","type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"multipliedReportingOverflow","kind":"identifier"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V","text":"Int64"},{"kind":"text","text":") -> (partialValue"},{"kind":"text","text":": "},{"text":"Int64","kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V"},{"text":", overflow","kind":"text"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":")"}],"url":"\/documentation\/compute\/int64\/multipliedreportingoverflow(by:)","abstract":[{"type":"text","text":"Returns the product of this value and the given value, along with a"},{"type":"text","text":" "},{"text":"Boolean value indicating whether overflow occurred in the operation.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/multipliedReportingOverflow(by:)"},"doc://com.swallow.documentation.Compute/7Swallow20DiscreteOrContinuousP":{"title":"Swallow.DiscreteOrContinuous","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20DiscreteOrContinuousP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/multipliedFullWidth(by:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"multipliedFullWidth","kind":"identifier"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s5Int64V","text":"Int64","kind":"typeIdentifier"},{"text":") -> (high","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int64","preciseIdentifier":"s:s5Int64V"},{"text":", low","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int64","preciseIdentifier":"s:s5Int64V"},{"text":".","kind":"text"},{"preciseIdentifier":"s:s5Int64V9Magnitudea","text":"Magnitude","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","title":"multipliedFullWidth(by:)","abstract":[{"text":"Returns a tuple containing the high and low parts of the result of","type":"text"},{"text":" ","type":"text"},{"text":"multiplying this value by the given value.","type":"text"}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/multipliedFullWidth(by:)","url":"\/documentation\/compute\/int64\/multipliedfullwidth(by:)"},"doc://com.swallow.documentation.Compute/7Swallow16IntegerInitiableP":{"title":"Swallow.IntegerInitiable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16IntegerInitiableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/bitWidth-swift.type.property":{"type":"topic","title":"bitWidth","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/bitWidth-swift.type.property","abstract":[{"type":"text","text":"The number of bits used for the underlying binary representation of"},{"text":" ","type":"text"},{"text":"values of this type.","type":"text"}],"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"bitWidth","kind":"identifier"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"kind":"symbol","url":"\/documentation\/compute\/int64\/bitwidth-swift.type.property","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Strideable":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/strideable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Strideable"}],"navigatorTitle":[{"text":"Strideable","kind":"identifier"}],"abstract":[{"type":"text","text":"A type representing continuous, one-dimensional values that can be offset"},{"type":"text","text":" "},{"type":"text","text":"and measured."}],"title":"Strideable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/Magnitude-swift.typealias":{"type":"topic","abstract":[{"text":"A type that can represent the absolute value of any possible value of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this type."}],"kind":"symbol","title":"Int64.Magnitude","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Magnitude"}],"url":"\/documentation\/compute\/int64\/magnitude-swift.typealias","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/Magnitude-swift.typealias","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Magnitude"}]},"doc://com.swallow.documentation.Compute/7Swallow31MutableMultiplicationOperatableP":{"title":"Swallow.MutableMultiplicationOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow31MutableMultiplicationOperatableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/_(_:_:)-15gfv":{"url":"\/documentation\/compute\/int64\/_(_:_:)-15gfv","abstract":[{"text":"Returns a Boolean value indicating whether the value of the first","type":"text"},{"text":" ","type":"text"},{"text":"argument is less than that of the second argument.","type":"text"}],"title":"<(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/_(_:_:)-15gfv","role":"symbol","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"<","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Int64","preciseIdentifier":"s:s5Int64V"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V","text":"Int64"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/init(exactly:)-5w39p":{"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"?("},{"text":"exactly","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Double","preciseIdentifier":"s:Sd"},{"kind":"text","text":")"}],"kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Creates an integer from the given floating-point value, if it can be"},{"text":" ","type":"text"},{"type":"text","text":"represented exactly."}],"url":"\/documentation\/compute\/int64\/init(exactly:)-5w39p","title":"init(exactly:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/init(exactly:)-5w39p"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/dividingFullWidth(_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/dividingFullWidth(_:)","role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dividingFullWidth","kind":"identifier"},{"text":"((high","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V","text":"Int64"},{"text":", low","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V","text":"Int64"},{"text":".","kind":"text"},{"preciseIdentifier":"s:s5Int64V9Magnitudea","kind":"typeIdentifier","text":"Magnitude"},{"text":")) -> (quotient","kind":"text"},{"text":": ","kind":"text"},{"text":"Int64","kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V"},{"text":", remainder","kind":"text"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s5Int64V","kind":"typeIdentifier","text":"Int64"},{"kind":"text","text":")"}],"title":"dividingFullWidth(_:)","abstract":[{"type":"text","text":"Returns a tuple containing the quotient and remainder of dividing the"},{"text":" ","type":"text"},{"type":"text","text":"given value by this value."}],"url":"\/documentation\/compute\/int64\/dividingfullwidth(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMDScalar":{"kind":"symbol","navigatorTitle":[{"text":"SIMDScalar","kind":"identifier"}],"type":"topic","title":"SIMDScalar","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDScalar","abstract":[{"type":"text","text":"A type that can be used as an element in a SIMD vector."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SIMDScalar","kind":"identifier"}],"url":"\/documentation\/compute\/simdscalar"},"doc://com.swallow.documentation.Compute/documentation/Compute/Decodable":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Decodable","kind":"identifier"}],"title":"Decodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","abstract":[{"type":"text","text":"A type that can decode itself from an external representation."}],"url":"\/documentation\/compute\/decodable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Decodable"}]},"doc://com.swallow.documentation.Compute/7Swallow22SignedIntegerInitiableP":{"title":"Swallow.SignedIntegerInitiable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22SignedIntegerInitiableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/&__=(_:_:)-3hmto":{"kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"&<<="},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Int64","kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s5Int64V","text":"Int64","kind":"typeIdentifier"},{"kind":"text","text":")"}],"url":"\/documentation\/compute\/int64\/&__=(_:_:)-3hmto","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/&__=(_:_:)-3hmto","role":"symbol","type":"topic","abstract":[{"text":"Returns the result of shifting a value’s binary representation the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specified number of digits to the left, masking the shift amount to the"},{"text":" ","type":"text"},{"type":"text","text":"type’s bit width, and stores the result in the left-hand-side variable."}],"title":"&<<=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/SignedNumeric":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedNumeric","url":"\/documentation\/compute\/signednumeric","title":"SignedNumeric","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SignedNumeric"}],"navigatorTitle":[{"text":"SignedNumeric","kind":"identifier"}],"abstract":[{"type":"text","text":"A numeric type with a negation operation."}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/!=(_:_:)-1oald":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/!=(_:_:)-1oald","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"!="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Int64","preciseIdentifier":"s:s5Int64V"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s5Int64V","text":"Int64","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"role":"symbol","url":"\/documentation\/compute\/int64\/!=(_:_:)-1oald","abstract":[],"title":"!=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible":{"url":"\/documentation\/compute\/customstringconvertible","navigatorTitle":[{"kind":"identifier","text":"CustomStringConvertible"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomStringConvertible","kind":"identifier"}],"abstract":[{"text":"A type with a customized textual representation.","type":"text"}],"type":"topic","title":"CustomStringConvertible","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/BitwiseCopyable":{"title":"BitwiseCopyable","abstract":[],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BitwiseCopyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","url":"\/documentation\/compute\/bitwisecopyable","navigatorTitle":[{"kind":"identifier","text":"BitwiseCopyable"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomReflectable":{"url":"\/documentation\/compute\/customreflectable","role":"symbol","abstract":[{"text":"A type that explicitly supplies its own mirror.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","title":"CustomReflectable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomReflectable"}],"navigatorTitle":[{"kind":"identifier","text":"CustomReflectable"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow16SignedOrUnsignedP":{"title":"Swallow.SignedOrUnsigned","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16SignedOrUnsignedP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/Hashable-Implementations":{"role":"collectionGroup","url":"\/documentation\/compute\/int64\/hashable-implementations","type":"topic","abstract":[],"kind":"article","title":"Hashable Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/Hashable-Implementations"},"doc://com.swallow.documentation.Compute/7Swallow18AdditionOperatableP":{"title":"Swallow.AdditionOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18AdditionOperatableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/FixedWidthInteger-Implementations":{"role":"collectionGroup","type":"topic","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/FixedWidthInteger-Implementations","abstract":[],"title":"FixedWidthInteger Implementations","url":"\/documentation\/compute\/int64\/fixedwidthinteger-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/_=(_:_:)-8wdie":{"abstract":[{"text":"Stores the result of performing a bitwise XOR operation on the two given","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values in the left-hand-side variable."}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"^="},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"Int64","preciseIdentifier":"s:s5Int64V","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Int64","preciseIdentifier":"s:s5Int64V"},{"kind":"text","text":")"}],"kind":"symbol","title":"^=(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/_=(_:_:)-8wdie","type":"topic","role":"symbol","url":"\/documentation\/compute\/int64\/_=(_:_:)-8wdie"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/Strideable-Implementations":{"kind":"article","abstract":[],"url":"\/documentation\/compute\/int64\/strideable-implementations","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/Strideable-Implementations","type":"topic","title":"Strideable Implementations"},"doc://com.swallow.documentation.Compute/7Swallow20ByteTupleConvertibleP":{"title":"Swallow.ByteTupleConvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/CVarArg":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CVarArg"}],"abstract":[{"text":"A type whose instances can be encoded, and appropriately passed, as","type":"text"},{"text":" ","type":"text"},{"text":"elements of a C ","type":"text"},{"type":"codeVoice","code":"va_list"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"CVarArg","kind":"identifier"}],"title":"CVarArg","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","url":"\/documentation\/compute\/cvararg"},"doc://com.swallow.documentation.Compute/7Swallow20ArithmeticOperatableP":{"title":"Swallow.ArithmeticOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20ArithmeticOperatableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/==(_:_:)-859y4":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/==(_:_:)-859y4","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether two values are equal."}],"type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"=="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s5Int64V","text":"Int64","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V","text":"Int64"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"url":"\/documentation\/compute\/int64\/==(_:_:)-859y4","title":"==(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/_=(_:_:)-8xard":{"role":"symbol","title":"|=(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"|="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V","text":"Int64"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Int64","preciseIdentifier":"s:s5Int64V"},{"text":")","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/_=(_:_:)-8xard","url":"\/documentation\/compute\/int64\/_=(_:_:)-8xard","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Stores the result of performing a bitwise OR operation on the two given"},{"type":"text","text":" "},{"text":"values in the left-hand-side variable.","type":"text"}]},"doc://com.swallow.documentation.Compute/7Swallow22FloatingPointInitiableP":{"title":"Swallow.FloatingPointInitiable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22FloatingPointInitiableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"type":"topic","title":"Equatable","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","role":"symbol","url":"\/documentation\/compute\/equatable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/Stride":{"role":"symbol","navigatorTitle":[{"text":"Stride","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Stride"}],"url":"\/documentation\/compute\/int64\/stride","title":"Int64.Stride","abstract":[{"text":"A type that represents the distance between two values.","type":"text"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/Stride"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/Decodable-Implementations":{"type":"topic","title":"Decodable Implementations","abstract":[],"kind":"article","url":"\/documentation\/compute\/int64\/decodable-implementations","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/Decodable-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/trailingZeroBitCount":{"title":"trailingZeroBitCount","abstract":[{"type":"text","text":"The number of trailing zeros in this value’s binary representation."}],"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"trailingZeroBitCount"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/trailingZeroBitCount","role":"symbol","type":"topic","url":"\/documentation\/compute\/int64\/trailingzerobitcount","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByIntegerLiteral":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","url":"\/documentation\/compute\/expressiblebyintegerliteral","title":"ExpressibleByIntegerLiteral","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"navigatorTitle":[{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"abstract":[{"text":"A type that can be initialized with an integer literal.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/dividedReportingOverflow(by:)":{"url":"\/documentation\/compute\/int64\/dividedreportingoverflow(by:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dividedReportingOverflow","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s5Int64V","text":"Int64","kind":"typeIdentifier"},{"kind":"text","text":") -> (partialValue"},{"text":": ","kind":"text"},{"text":"Int64","kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V"},{"text":", overflow","kind":"text"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"kind":"symbol","title":"dividedReportingOverflow(by:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/dividedReportingOverflow(by:)","abstract":[{"text":"Returns the quotient obtained by dividing this value by the given value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"along with a Boolean value indicating whether overflow occurred in the"},{"type":"text","text":" "},{"text":"operation.","type":"text"}]},"doc://com.swallow.documentation.Compute/7Swallow7TrivialP":{"title":"Swallow.Trivial","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/init(_:)-5aiim":{"abstract":[{"text":"Creates an integer from the given floating-point value, rounding toward","type":"text"},{"type":"text","text":" "},{"text":"zero.","type":"text"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/init(_:)-5aiim","type":"topic","url":"\/documentation\/compute\/int64\/init(_:)-5aiim","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:s7Float16V","text":"Float16"},{"text":")","kind":"text"}],"title":"init(_:)"},"doc://com.swallow.documentation.Compute/7Swallow13DataDecodableP":{"title":"Swallow.DataDecodable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataDecodableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BinaryInteger"}],"navigatorTitle":[{"kind":"identifier","text":"BinaryInteger"}],"url":"\/documentation\/compute\/binaryinteger","type":"topic","abstract":[{"type":"text","text":"An integer type with a binary representation."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","title":"BinaryInteger","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Numeric":{"abstract":[{"type":"text","text":"A type with values that support multiplication."}],"kind":"symbol","url":"\/documentation\/compute\/numeric","navigatorTitle":[{"text":"Numeric","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Numeric"}],"title":"Numeric"},"doc://com.swallow.documentation.Compute/7Swallow9InitiableP":{"title":"Swallow.Initiable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow9InitiableP"},"doc://com.swallow.documentation.Compute/7Swallow24UnsignedIntegerInitiableP":{"title":"Swallow.UnsignedIntegerInitiable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow24UnsignedIntegerInitiableP"},"doc://com.swallow.documentation.Compute/7Swallow25MutableDivisionOperatableP":{"title":"Swallow.MutableDivisionOperatable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableDivisionOperatableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/SignedNumeric-Implementations":{"title":"SignedNumeric Implementations","url":"\/documentation\/compute\/int64\/signednumeric-implementations","role":"collectionGroup","type":"topic","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/SignedNumeric-Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/7Swallow13DataEncodableP":{"title":"Swallow.DataEncodable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataEncodableP"},"doc://com.swallow.documentation.Compute/7Swallow17NumberConvertibleP":{"title":"Swallow.NumberConvertible","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow17NumberConvertibleP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/_=(_:_:)-9q89m":{"title":"\/=(_:_:)","role":"symbol","url":"\/documentation\/compute\/int64\/_=(_:_:)-9q89m","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"\/=","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Int64","preciseIdentifier":"s:s5Int64V"},{"text":", ","kind":"text"},{"text":"Int64","preciseIdentifier":"s:s5Int64V","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic","abstract":[{"text":"Divides the first value by the second and stores the quotient in the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"left-hand-side variable."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/_=(_:_:)-9q89m"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/init(_:)-4goni":{"url":"\/documentation\/compute\/int64\/init(_:)-4goni","kind":"symbol","title":"init(_:)","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/init(_:)-4goni","role":"symbol","abstract":[],"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"Float","kind":"typeIdentifier","preciseIdentifier":"s:Sf"},{"text":")","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/&__=(_:_:)-7f5t8":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"&>>="},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:s5Int64V","text":"Int64","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s5Int64V","kind":"typeIdentifier","text":"Int64"},{"text":")","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/&__=(_:_:)-7f5t8","type":"topic","abstract":[{"text":"Calculates the result of shifting a value’s binary representation the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specified number of digits to the right, masking the shift amount to the"},{"type":"text","text":" "},{"type":"text","text":"type’s bit width, and stores the result in the left-hand-side variable."}],"title":"&>>=(_:_:)","url":"\/documentation\/compute\/int64\/&__=(_:_:)-7f5t8","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/_CustomPlaygroundQuickLookable-Implementations":{"url":"\/documentation\/compute\/int64\/_customplaygroundquicklookable-implementations","title":"_CustomPlaygroundQuickLookable Implementations","role":"collectionGroup","type":"topic","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/_CustomPlaygroundQuickLookable-Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/+=(_:_:)-3qu38":{"kind":"symbol","abstract":[{"text":"Adds two values and stores the result in the left-hand-side variable.","type":"text"}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"+=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Int64","kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s5Int64V","kind":"typeIdentifier","text":"Int64"},{"text":")","kind":"text"}],"url":"\/documentation\/compute\/int64\/+=(_:_:)-3qu38","role":"symbol","type":"topic","title":"+=(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/+=(_:_:)-3qu38"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/leadingZeroBitCount":{"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"leadingZeroBitCount","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"kind":"symbol","title":"leadingZeroBitCount","abstract":[{"type":"text","text":"The number of leading zeros in this value’s binary representation."}],"role":"symbol","type":"topic","url":"\/documentation\/compute\/int64\/leadingzerobitcount","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/leadingZeroBitCount"},"doc://com.swallow.documentation.Compute/7Swallow6NumberP":{"title":"Swallow.Number","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow6NumberP"},"doc://com.swallow.documentation.Compute/7Swallow24MultiplicationOperatableP":{"title":"Swallow.MultiplicationOperatable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow24MultiplicationOperatableP"},"doc://com.swallow.documentation.Compute/10Accelerate10BNNSScalarP":{"title":"Accelerate.BNNSScalar","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Accelerate10BNNSScalarP"},"doc://com.swallow.documentation.Compute/7Swallow8DiscreteP":{"title":"Swallow.Discrete","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiscreteP"},"doc://com.swallow.documentation.Compute/documentation/Compute/SignedInteger":{"abstract":[{"type":"text","text":"An integer type that can represent both positive and negative values."}],"kind":"symbol","url":"\/documentation\/compute\/signedinteger","navigatorTitle":[{"kind":"identifier","text":"SignedInteger"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedInteger","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SignedInteger","kind":"identifier"}],"title":"SignedInteger"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/remainderReportingOverflow(dividingBy:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/remainderReportingOverflow(dividingBy:)","abstract":[{"type":"text","text":"Returns the remainder after dividing this value by the given value, along"},{"text":" ","type":"text"},{"type":"text","text":"with a Boolean value indicating whether overflow occurred during division."}],"url":"\/documentation\/compute\/int64\/remainderreportingoverflow(dividingby:)","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"remainderReportingOverflow"},{"kind":"text","text":"("},{"kind":"externalParam","text":"dividingBy"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V","text":"Int64"},{"text":") -> (partialValue","kind":"text"},{"kind":"text","text":": "},{"text":"Int64","kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V"},{"text":", overflow","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":")"}],"role":"symbol","title":"remainderReportingOverflow(dividingBy:)"},"doc://com.swallow.documentation.Compute/7Swallow6SignedP":{"title":"Swallow.Signed","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow6SignedP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/init(exactly:)-87idz":{"url":"\/documentation\/compute\/int64\/init(exactly:)-87idz","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Creates an integer from the given floating-point value, if it can be"},{"type":"text","text":" "},{"type":"text","text":"represented exactly."}],"fragments":[{"kind":"identifier","text":"init"},{"text":"?(","kind":"text"},{"kind":"externalParam","text":"exactly"},{"text":": ","kind":"text"},{"text":"Float","kind":"typeIdentifier","preciseIdentifier":"s:Sf"},{"kind":"text","text":")"}],"title":"init(exactly:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/init(exactly:)-87idz","type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow15NumberInitiableP":{"title":"Swallow.NumberInitiable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow15NumberInitiableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/subtractingReportingOverflow(_:)":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"subtractingReportingOverflow"},{"kind":"text","text":"("},{"text":"Int64","preciseIdentifier":"s:s5Int64V","kind":"typeIdentifier"},{"text":") -> (partialValue","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V","text":"Int64"},{"text":", overflow","kind":"text"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","kind":"symbol","abstract":[{"text":"Returns the difference obtained by subtracting the given value from this","type":"text"},{"type":"text","text":" "},{"text":"value, along with a Boolean value indicating whether overflow occurred in","type":"text"},{"type":"text","text":" "},{"text":"the operation.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/subtractingReportingOverflow(_:)","url":"\/documentation\/compute\/int64\/subtractingreportingoverflow(_:)","title":"subtractingReportingOverflow(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"title":"Copyable","abstract":[{"type":"text","text":"A type whose values can be implicitly or explicitly copied."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Copyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","url":"\/documentation\/compute\/copyable","navigatorTitle":[{"text":"Copyable","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow14CoderPrimitiveP":{"title":"Swallow.CoderPrimitive","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow14CoderPrimitiveP"}}}