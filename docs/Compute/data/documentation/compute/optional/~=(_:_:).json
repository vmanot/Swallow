{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/~=(_:_:)"},"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether an argument matches "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}],"metadata":{"title":"~=(_:_:)","symbolKind":"op","role":"symbol","roleHeading":"Operator","extendedModule":"Swift","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"~="},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"_OptionalNilComparisonType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"borrowing","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Wrapped"},{"text":"?) -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"modules":[{"relatedModules":["Swift"],"name":"Compute"}],"externalID":"s:SqsRi_zrlE2teoiySbs26_OptionalNilComparisonTypeV_xSgtFZ"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"~=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"lhs","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"_OptionalNilComparisonType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"internalParam","text":"rhs"},{"text":": ","kind":"text"},{"kind":"keyword","text":"borrowing"},{"text":" ","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"Bool","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}]}]},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" literal."}],"type":"paragraph"}],"name":"lhs"},{"name":"rhs","content":[{"inlineContent":[{"text":"A value to match against ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use the pattern-matching operator ("},{"type":"codeVoice","code":"~="},{"type":"text","text":") to test whether an"},{"text":" ","type":"text"},{"type":"text","text":"optional instance is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" even when the wrapped valueâ€™s type does not"},{"type":"text","text":" "},{"text":"conform to the ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" protocol. The pattern-matching operator is used"},{"type":"text","text":" "},{"text":"internally in ","type":"text"},{"type":"codeVoice","code":"case"},{"text":" statements for pattern matching.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example declares the "},{"code":"stream","type":"codeVoice"},{"type":"text","text":" variable as an optional"},{"text":" ","type":"text"},{"type":"text","text":"instance of a hypothetical "},{"code":"DataStream","type":"codeVoice"},{"type":"text","text":" type, and then uses a "},{"code":"switch","type":"codeVoice"},{"text":" ","type":"text"},{"text":"statement to determine whether the stream is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" or has a configured","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value. When evaluating the "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" case of the "},{"code":"switch","type":"codeVoice"},{"text":" statement, this","type":"text"},{"type":"text","text":" "},{"type":"text","text":"operator is called behind the scenes."}]},{"syntax":null,"type":"codeListing","code":["var stream: DataStream? = nil","switch stream {","case nil:","    print(\"No data stream is configured.\")","case let x?:","    print(\"The data stream has \\(x.availableBytes) bytes available.\")","}","\/\/ Prints \"No data stream is configured.\""]},{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"To test whether an instance is ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" in an "},{"type":"codeVoice","code":"if"},{"text":" statement, use the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"equal-to operator ("},{"type":"codeVoice","code":"=="},{"text":") instead of the pattern-matching operator. The","type":"text"},{"type":"text","text":" "},{"text":"pattern-matching operator is primarily intended to enable ","type":"text"},{"type":"codeVoice","code":"case"},{"text":" ","type":"text"},{"type":"text","text":"statement pattern matching."}]}]}]}],"sections":[],"variants":[{"paths":["\/documentation\/compute\/optional\/~=(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Optional":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"Optional","kind":"identifier"}],"url":"\/documentation\/compute\/optional","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"Optional","kind":"identifier"}],"abstract":[{"type":"text","text":"A type that represents either a wrapped value or the absence of a value."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional","title":"Optional"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/~=(_:_:)":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"~="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"_OptionalNilComparisonType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"keyword","text":"borrowing"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"abstract":[{"text":"Returns a Boolean value indicating whether an argument matches ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}],"url":"\/documentation\/compute\/optional\/~=(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/~=(_:_:)","title":"~=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}