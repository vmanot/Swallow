{"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/==(_:_:)-m6x","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"=="},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"internalParam","text":"lhs"},{"kind":"text","text":": "},{"text":"Wrapped","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"text":"rhs","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"kind":"text","text":"?) -> "},{"preciseIdentifier":"s:Sb","text":"Bool","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"typeIdentifier"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"lhs","content":[{"type":"paragraph","inlineContent":[{"text":"An optional value to compare.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Another optional value to compare."}],"type":"paragraph"}],"name":"rhs"}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this equal-to operator ("},{"type":"codeVoice","code":"=="},{"type":"text","text":") to compare any two optional instances of"},{"type":"text","text":" "},{"text":"a type that conforms to the ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol. The comparison returns"},{"text":" ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" if both arguments are "},{"type":"codeVoice","code":"nil"},{"text":" or if the two arguments wrap values","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that are equal. Conversely, the comparison returns "},{"type":"codeVoice","code":"false"},{"text":" if only one of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the arguments is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" or if the two arguments wrap values that are not"},{"text":" ","type":"text"},{"type":"text","text":"equal."}]},{"type":"codeListing","code":["let group1 = [1, 2, 3, 4, 5]","let group2 = [1, 3, 5, 7, 9]","if group1.first == group2.first {","    print(\"The two groups start the same.\")","}","\/\/ Prints \"The two groups start the same.\""],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also use this operator to compare a non-optional value to an"},{"text":" ","type":"text"},{"text":"optional that wraps the same type. The non-optional value is wrapped as an","type":"text"},{"text":" ","type":"text"},{"text":"optional before the comparison is made. In the following example, the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"numberToMatch"},{"text":" constant is wrapped as an optional before comparing to the","type":"text"},{"type":"text","text":" "},{"text":"optional ","type":"text"},{"code":"numberFromString","type":"codeVoice"},{"type":"text","text":":"}]},{"code":["let numberToMatch: Int = 23","let numberFromString: Int? = Int(\"23\")      \/\/ Optional(23)","if numberToMatch == numberFromString {","    print(\"It's a match!\")","}","\/\/ Prints \"It's a match!\""],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"An instance that is expressed as a literal can also be used with this","type":"text"},{"type":"text","text":" "},{"text":"operator. In the next example, an integer literal is compared with the","type":"text"},{"text":" ","type":"text"},{"text":"optional integer ","type":"text"},{"type":"codeVoice","code":"numberFromString"},{"type":"text","text":". The literal "},{"code":"23","type":"codeVoice"},{"type":"text","text":" is inferred as an"},{"type":"text","text":" "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" instance and then wrapped as an optional before the comparison is"},{"text":" ","type":"text"},{"text":"performed.","type":"text"}]},{"syntax":null,"code":["if 23 == numberFromString {","    print(\"It's a match!\")","}","\/\/ Prints \"It's a match!\""],"type":"codeListing"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/Equatable-Implementations"]]},"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether two optional instances are"},{"text":" ","type":"text"},{"type":"text","text":"equal."}],"sections":[],"kind":"symbol","metadata":{"externalID":"s:SqsSQRzlE2eeoiySbxSg_ABtFZ","roleHeading":"Operator","extendedModule":"Swift","symbolKind":"op","title":"==(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"=="},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"Wrapped","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"typeIdentifier","text":"Wrapped"},{"text":"?) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"modules":[{"name":"Compute","relatedModules":["Swift"]}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Wrapped"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]},"role":"symbol"},"variants":[{"paths":["\/documentation\/compute\/optional\/==(_:_:)-m6x"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/==(_:_:)-m6x":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/==(_:_:)-m6x","title":"==(_:_:)","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether two optional instances are"},{"type":"text","text":" "},{"type":"text","text":"equal."}],"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/optional\/==(_:_:)-m6x","type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Wrapped"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]},"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"=="},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":"?, "},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":"?) -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"Optional","kind":"identifier"}],"url":"\/documentation\/compute\/optional","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"Optional","kind":"identifier"}],"abstract":[{"type":"text","text":"A type that represents either a wrapped value or the absence of a value."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional","title":"Optional"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/Equatable-Implementations":{"abstract":[],"title":"Equatable Implementations","url":"\/documentation\/compute\/optional\/equatable-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/Equatable-Implementations","kind":"article","type":"topic","role":"collectionGroup"}}}