{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the left-hand-side argument is"},{"text":" ","type":"text"},{"text":"not ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/!=(_:_:)-38b38"},"metadata":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"!="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"borrowing","kind":"keyword"},{"kind":"text","text":" "},{"text":"Wrapped","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"kind":"typeIdentifier","text":"_OptionalNilComparisonType"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"role":"symbol","externalID":"s:SqsRi_zrlE2neoiySbxSg_s26_OptionalNilComparisonTypeVtFZ","extendedModule":"Swift","roleHeading":"Operator","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"title":"!=(_:_:)","symbolKind":"op"},"sections":[],"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"!=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"internalParam","text":"lhs"},{"text":": ","kind":"text"},{"text":"borrowing","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"text":"rhs","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"_OptionalNilComparisonType"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","preciseIdentifier":"s:Sb","text":"Bool"}]}]},{"parameters":[{"name":"lhs","content":[{"inlineContent":[{"text":"A value to compare to ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"name":"rhs","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" literal."}]}]}],"kind":"parameters"},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"inlineContent":[{"text":"You can use this not-equal-to operator (","type":"text"},{"type":"codeVoice","code":"!="},{"text":") to test whether an optional","type":"text"},{"type":"text","text":" "},{"text":"instance is not ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" even when the wrapped valueâ€™s type does not conform","type":"text"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following example declares the ","type":"text"},{"code":"stream","type":"codeVoice"},{"type":"text","text":" variable as an optional"},{"type":"text","text":" "},{"type":"text","text":"instance of a hypothetical "},{"type":"codeVoice","code":"DataStream"},{"type":"text","text":" type. Although "},{"code":"DataStream","type":"codeVoice"},{"type":"text","text":" is not"},{"type":"text","text":" "},{"type":"text","text":"an "},{"code":"Equatable","type":"codeVoice"},{"text":" type, this operator allows checking whether ","type":"text"},{"code":"stream","type":"codeVoice"},{"type":"text","text":" wraps"},{"type":"text","text":" "},{"type":"text","text":"a value and is therefore not "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"type":"codeListing","code":["var stream: DataStream? = fetchDataStream()","if stream != nil {","    print(\"The data stream has been configured.\")","}","\/\/ Prints \"The data stream has been configured.\""],"syntax":null}]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional"]]},"variants":[{"paths":["\/documentation\/compute\/optional\/!=(_:_:)-38b38"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/!=(_:_:)-38b38":{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the left-hand-side argument is"},{"text":" ","type":"text"},{"type":"text","text":"not "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/!=(_:_:)-38b38","url":"\/documentation\/compute\/optional\/!=(_:_:)-38b38","title":"!=(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"!=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"borrowing","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":"?, "},{"text":"_OptionalNilComparisonType","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"Optional","kind":"identifier"}],"url":"\/documentation\/compute\/optional","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"Optional","kind":"identifier"}],"abstract":[{"type":"text","text":"A type that represents either a wrapped value or the absence of a value."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional","title":"Optional"}}}