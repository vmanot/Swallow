{"abstract":[{"text":"Returns a Boolean value indicating whether the right-hand-side argument is","type":"text"},{"text":" ","type":"text"},{"text":"not ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"!="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"internalParam","text":"lhs"},{"text":": ","kind":"text"},{"text":"_OptionalNilComparisonType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"internalParam","text":"rhs"},{"kind":"text","text":": "},{"kind":"keyword","text":"borrowing"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Wrapped"},{"text":"?) -> ","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","preciseIdentifier":"s:Sb","text":"Bool"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"lhs","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" literal."}]}]},{"name":"rhs","content":[{"inlineContent":[{"text":"A value to compare to ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"inlineContent":[{"text":"You can use this not-equal-to operator (","type":"text"},{"type":"codeVoice","code":"!="},{"type":"text","text":") to test whether an optional"},{"text":" ","type":"text"},{"type":"text","text":"instance is not "},{"type":"codeVoice","code":"nil"},{"text":" even when the wrapped valueâ€™s type does not conform","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following example declares the "},{"type":"codeVoice","code":"stream"},{"type":"text","text":" variable as an optional"},{"type":"text","text":" "},{"type":"text","text":"instance of a hypothetical "},{"type":"codeVoice","code":"DataStream"},{"text":" type. Although ","type":"text"},{"type":"codeVoice","code":"DataStream"},{"type":"text","text":" is not"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" type, this operator allows checking whether "},{"code":"stream","type":"codeVoice"},{"text":" wraps","type":"text"},{"text":" ","type":"text"},{"text":"a value and is therefore not ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["var stream: DataStream? = fetchDataStream()","if nil != stream {","    print(\"The data stream has been configured.\")","}","\/\/ Prints \"The data stream has been configured.\""],"syntax":null}]}],"sections":[],"kind":"symbol","identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/!=(_:_:)-6xpzw","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/optional\/!=(_:_:)-6xpzw"]}],"metadata":{"roleHeading":"Operator","externalID":"s:SqsRi_zrlE2neoiySbs26_OptionalNilComparisonTypeV_xSgtFZ","modules":[{"name":"Compute","relatedModules":["Swift"]}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"!=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"_OptionalNilComparisonType","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"keyword","text":"borrowing"},{"text":" ","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"kind":"text","text":"?) -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"title":"!=(_:_:)","symbolKind":"op","role":"symbol","extendedModule":"Swift"},"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/!=(_:_:)-6xpzw":{"kind":"symbol","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"!="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"_OptionalNilComparisonType"},{"kind":"text","text":", "},{"text":"borrowing","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Wrapped"},{"text":"?) -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"url":"\/documentation\/compute\/optional\/!=(_:_:)-6xpzw","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/!=(_:_:)-6xpzw","abstract":[{"text":"Returns a Boolean value indicating whether the right-hand-side argument is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"not "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}],"title":"!=(_:_:)","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"Optional","kind":"identifier"}],"url":"\/documentation\/compute\/optional","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"Optional","kind":"identifier"}],"abstract":[{"type":"text","text":"A type that represents either a wrapped value or the absence of a value."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional","title":"Optional"}}}