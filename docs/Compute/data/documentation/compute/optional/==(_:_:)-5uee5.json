{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/optional\/==(_:_:)-5uee5"]}],"metadata":{"title":"==(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"==","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"keyword","text":"borrowing"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Wrapped"},{"text":"?, ","kind":"text"},{"kind":"typeIdentifier","text":"_OptionalNilComparisonType"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"role":"symbol","symbolKind":"op","modules":[{"name":"Compute","relatedModules":["Swift"]}],"roleHeading":"Operator","externalID":"s:SqsRi_zrlE2eeoiySbxSg_s26_OptionalNilComparisonTypeVtFZ","extendedModule":"Swift"},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/==(_:_:)-5uee5","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"abstract":[{"text":"Returns a Boolean value indicating whether the left-hand-side argument is","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}],"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"=="},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"lhs","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"borrowing"},{"text":" ","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"text":"rhs","kind":"internalParam"},{"kind":"text","text":": "},{"text":"_OptionalNilComparisonType","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A value to compare to ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}],"name":"lhs"},{"name":"rhs","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" literal."}]}]}],"kind":"parameters"},{"content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"You can use this equal-to operator (","type":"text"},{"type":"codeVoice","code":"=="},{"text":") to test whether an optional","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"instance is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" even when the wrapped valueâ€™s type does not conform to"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"text":"The following example declares the ","type":"text"},{"type":"codeVoice","code":"stream"},{"type":"text","text":" variable as an optional"},{"text":" ","type":"text"},{"type":"text","text":"instance of a hypothetical "},{"code":"DataStream","type":"codeVoice"},{"text":" type. Although ","type":"text"},{"code":"DataStream","type":"codeVoice"},{"text":" is not","type":"text"},{"text":" ","type":"text"},{"text":"an ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" type, this operator allows checking whether "},{"type":"codeVoice","code":"stream"},{"text":" is","type":"text"},{"type":"text","text":" "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]},{"syntax":null,"code":["var stream: DataStream? = nil","if stream == nil {","    print(\"No data stream is configured.\")","}","\/\/ Prints \"No data stream is configured.\""],"type":"codeListing"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Optional":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"Optional","kind":"identifier"}],"url":"\/documentation\/compute\/optional","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"Optional","kind":"identifier"}],"abstract":[{"type":"text","text":"A type that represents either a wrapped value or the absence of a value."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional","title":"Optional"},"doc://com.swallow.documentation.Compute/documentation/Compute/Optional/==(_:_:)-5uee5":{"title":"==(_:_:)","kind":"symbol","abstract":[{"text":"Returns a Boolean value indicating whether the left-hand-side argument is","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"url":"\/documentation\/compute\/optional\/==(_:_:)-5uee5","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"==","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"borrowing","kind":"keyword"},{"kind":"text","text":" "},{"text":"Wrapped","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"_OptionalNilComparisonType","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Optional\/==(_:_:)-5uee5"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}