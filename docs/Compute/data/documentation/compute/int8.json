{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/int8"]}],"abstract":[{"text":"An 8-bit signed integer value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type."}],"kind":"symbol","sections":[],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"metadata":{"symbolKind":"struct","navigatorTitle":[{"kind":"identifier","text":"Int8"}],"externalID":"s:s4Int8V","role":"symbol","modules":[{"name":"Compute"}],"roleHeading":"Structure","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Int8","kind":"identifier"}],"title":"Int8"},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"topicSections":[{"generated":true,"title":"Structures","anchor":"Structures","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/Words-swift.struct"]},{"anchor":"Operators","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/!=(_:_:)-5bht9","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/&=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/&__=(_:_:)-17e9w","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/&__=(_:_:)-7gdrc","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/*=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/+=(_:_:)-113rc","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/-=(_:_:)-oery","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/==(_:_:)-21buw","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/_(_:_:)-1kdfe","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/_=(_:_:)-19gzu","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/_=(_:_:)-2auqb","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/_=(_:_:)-2mpgr","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/_=(_:_:)-3o9cs"],"title":"Operators"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/init(_:)-44cer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/init(_:)-47zy8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/init(_:)-6g8q9","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/init(bitPattern:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/init(exactly:)-6zkv6","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/init(exactly:)-72z4","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/init(exactly:)-78es1"],"generated":true,"title":"Initializers","anchor":"Initializers"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/byteSwapped","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/leadingZeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/magnitude-swift.property","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/nonzeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/trailingZeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/words-swift.property"],"anchor":"Instance-Properties","generated":true,"title":"Instance Properties"},{"title":"Instance Methods","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/addingReportingOverflow(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/dividedReportingOverflow(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/dividingFullWidth(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/multipliedFullWidth(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/multipliedReportingOverflow(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/remainderReportingOverflow(dividingBy:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/signum()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/subtractingReportingOverflow(_:)"],"anchor":"Instance-Methods","generated":true},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/IntegerLiteralType","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/Magnitude-swift.typealias","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/Stride"],"title":"Type Aliases","anchor":"Type-Aliases","generated":true},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/bitWidth-swift.type.property"],"generated":true,"title":"Type Properties","anchor":"Type-Properties"},{"generated":true,"anchor":"Default-Implementations","title":"Default Implementations","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/AdditiveArithmetic-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/BinaryInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/Comparable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/CustomReflectable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/Decodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/Encodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/ExpressibleByIntegerLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/FixedWidthInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/SIMDScalar-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/SignedInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/SignedNumeric-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/Strideable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/_CustomPlaygroundQuickLookable-Implementations"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"@frozen","kind":"attribute"},{"text":" ","kind":"text"},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Int8","kind":"identifier"}],"platforms":["macOS"]}]}],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/com.swallow.documentation.Compute\/10Accelerate10BNNSScalarP","doc:\/\/com.swallow.documentation.Compute\/10Accelerate23vDSP_IntegerConvertableP","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AdditiveArithmetic","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDScalar","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedNumeric","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","doc:\/\/com.swallow.documentation.Compute\/7Swallow18AdditionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22ApproximatelyEquatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20ArithmeticOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow21BitPatternConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16BooleanInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7BoundedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18BoundedRandomnableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18ByteOrderSwappableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow14CoderPrimitiveP","doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataDecodableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataEncodableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiscreteP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20DiscreteOrContinuousP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18DivisionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22FloatingPointInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow9InitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16IntegerInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow24MultiplicationOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableAdditionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow27MutableArithmeticOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableDivisionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow31MutableMultiplicationOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow28MutableSubtractionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow6NumberP","doc:\/\/com.swallow.documentation.Compute\/7Swallow17NumberConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow15NumberInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow11RandomnableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow26ShouldNotBeDecodedFromBoolP","doc:\/\/com.swallow.documentation.Compute\/7Swallow6SignedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22SignedIntegerInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16SignedOrUnsignedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow21SubtractionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP","doc:\/\/com.swallow.documentation.Compute\/7Swallow24UnsignedIntegerInitiableP"]}],"references":{"doc://com.swallow.documentation.Compute/7Swallow6NumberP":{"title":"Swallow.Number","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow6NumberP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Encodable":{"url":"\/documentation\/compute\/encodable","navigatorTitle":[{"text":"Encodable","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Encodable","kind":"identifier"}],"abstract":[{"text":"A type that can encode itself to an external representation.","type":"text"}],"type":"topic","title":"Encodable","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/&=(_:_:)":{"role":"symbol","abstract":[{"text":"Stores the result of performing a bitwise AND operation on the two given","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values in the left-hand-side variable."}],"title":"&=(_:_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"&=","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Int8V","text":"Int8"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Int8","preciseIdentifier":"s:s4Int8V"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/&=(_:_:)","url":"\/documentation\/compute\/int8\/&=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/_=(_:_:)-3o9cs":{"title":"%=(_:_:)","abstract":[{"text":"Divides the first value by the second and stores the remainder in the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"left-hand-side variable."}],"type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"%="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Int8V","text":"Int8"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Int8","preciseIdentifier":"s:s4Int8V"},{"text":")","kind":"text"}],"kind":"symbol","url":"\/documentation\/compute\/int8\/_=(_:_:)-3o9cs","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/_=(_:_:)-3o9cs","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/dividedReportingOverflow(by:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dividedReportingOverflow"},{"kind":"text","text":"("},{"text":"by","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int8","kind":"typeIdentifier","preciseIdentifier":"s:s4Int8V"},{"text":") -> (partialValue","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int8","preciseIdentifier":"s:s4Int8V"},{"kind":"text","text":", overflow"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"role":"symbol","title":"dividedReportingOverflow(by:)","url":"\/documentation\/compute\/int8\/dividedreportingoverflow(by:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/dividedReportingOverflow(by:)","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Returns the quotient obtained by dividing this value by the given value,"},{"text":" ","type":"text"},{"type":"text","text":"along with a Boolean value indicating whether overflow occurred in the"},{"type":"text","text":" "},{"text":"operation.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/_(_:_:)-1kdfe":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/_(_:_:)-1kdfe","title":"<(_:_:)","role":"symbol","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the value of the first"},{"type":"text","text":" "},{"type":"text","text":"argument is less than that of the second argument."}],"type":"topic","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"<","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s4Int8V","text":"Int8","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Int8V","text":"Int8"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"url":"\/documentation\/compute\/int8\/_(_:_:)-1kdfe"},"doc://com.swallow.documentation.Compute/7Swallow14CoderPrimitiveP":{"title":"Swallow.CoderPrimitive","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow14CoderPrimitiveP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/bitWidth-swift.type.property":{"title":"bitWidth","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/bitWidth-swift.type.property","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"bitWidth","kind":"identifier"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"type":"topic","kind":"symbol","url":"\/documentation\/compute\/int8\/bitwidth-swift.type.property","abstract":[{"text":"The number of bits used for the underlying binary representation of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values of this type."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/SignedNumeric":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedNumeric","url":"\/documentation\/compute\/signednumeric","title":"SignedNumeric","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SignedNumeric"}],"navigatorTitle":[{"text":"SignedNumeric","kind":"identifier"}],"abstract":[{"type":"text","text":"A numeric type with a negation operation."}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Decodable":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Decodable","kind":"identifier"}],"title":"Decodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","abstract":[{"type":"text","text":"A type that can decode itself from an external representation."}],"url":"\/documentation\/compute\/decodable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Decodable"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/BinaryInteger-Implementations":{"abstract":[],"url":"\/documentation\/compute\/int8\/binaryinteger-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/BinaryInteger-Implementations","kind":"article","title":"BinaryInteger Implementations","role":"collectionGroup","type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow6SignedP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow6SignedP","title":"Swallow.Signed"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/CustomReflectable-Implementations":{"url":"\/documentation\/compute\/int8\/customreflectable-implementations","kind":"article","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/CustomReflectable-Implementations","title":"CustomReflectable Implementations","role":"collectionGroup","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/init(exactly:)-72z4":{"type":"topic","title":"init(exactly:)","fragments":[{"kind":"identifier","text":"init"},{"text":"?(","kind":"text"},{"text":"exactly","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sd","text":"Double","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Creates an integer from the given floating-point value, if it can be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"represented exactly."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/init(exactly:)-72z4","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/int8\/init(exactly:)-72z4"},"doc://com.swallow.documentation.Compute/7Swallow25MutableAdditionOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableAdditionOperatableP","title":"Swallow.MutableAdditionOperatable"},"doc://com.swallow.documentation.Compute/7Swallow21SubtractionOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21SubtractionOperatableP","title":"Swallow.SubtractionOperatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/AdditiveArithmetic":{"type":"topic","title":"AdditiveArithmetic","abstract":[{"text":"A type with values that support addition and subtraction.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AdditiveArithmetic"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AdditiveArithmetic","url":"\/documentation\/compute\/additivearithmetic","role":"symbol","navigatorTitle":[{"text":"AdditiveArithmetic","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/7Swallow16BooleanInitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16BooleanInitiableP","title":"Swallow.BooleanInitiable"},"doc://com.swallow.documentation.Compute/documentation/Compute/CVarArg":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CVarArg"}],"abstract":[{"text":"A type whose instances can be encoded, and appropriately passed, as","type":"text"},{"text":" ","type":"text"},{"text":"elements of a C ","type":"text"},{"type":"codeVoice","code":"va_list"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"CVarArg","kind":"identifier"}],"title":"CVarArg","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","url":"\/documentation\/compute\/cvararg"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/Comparable-Implementations":{"title":"Comparable Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/Comparable-Implementations","role":"collectionGroup","kind":"article","abstract":[],"type":"topic","url":"\/documentation\/compute\/int8\/comparable-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/byteSwapped":{"role":"symbol","abstract":[{"type":"text","text":"A representation of this integer with the byte order swapped."}],"title":"byteSwapped","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"byteSwapped","kind":"identifier"},{"kind":"text","text":": "},{"text":"Int8","preciseIdentifier":"s:s4Int8V","kind":"typeIdentifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/byteSwapped","url":"\/documentation\/compute\/int8\/byteswapped"},"doc://com.swallow.documentation.Compute/7Swallow18BoundedRandomnableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18BoundedRandomnableP","title":"Swallow.BoundedRandomnable"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMDScalar":{"kind":"symbol","navigatorTitle":[{"text":"SIMDScalar","kind":"identifier"}],"type":"topic","title":"SIMDScalar","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDScalar","abstract":[{"type":"text","text":"A type that can be used as an element in a SIMD vector."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SIMDScalar","kind":"identifier"}],"url":"\/documentation\/compute\/simdscalar"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/init(exactly:)-6zkv6":{"role":"symbol","abstract":[{"type":"text","text":"Creates an integer from the given floating-point value, if it can be"},{"type":"text","text":" "},{"text":"represented exactly.","type":"text"}],"title":"init(exactly:)","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"?("},{"text":"exactly","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Float","preciseIdentifier":"s:Sf","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/init(exactly:)-6zkv6","url":"\/documentation\/compute\/int8\/init(exactly:)-6zkv6"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/&__=(_:_:)-17e9w":{"title":"&>>=(_:_:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/&__=(_:_:)-17e9w","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"&>>="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Int8","preciseIdentifier":"s:s4Int8V"},{"kind":"text","text":", "},{"preciseIdentifier":"s:s4Int8V","text":"Int8","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic","kind":"symbol","url":"\/documentation\/compute\/int8\/&__=(_:_:)-17e9w","abstract":[{"type":"text","text":"Calculates the result of shifting a value’s binary representation the"},{"text":" ","type":"text"},{"type":"text","text":"specified number of digits to the right, masking the shift amount to the"},{"type":"text","text":" "},{"type":"text","text":"type’s bit width, and stores the result in the left-hand-side variable."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/*=(_:_:)":{"role":"symbol","abstract":[{"type":"text","text":"Multiplies two values and stores the result in the left-hand-side"},{"type":"text","text":" "},{"type":"text","text":"variable."}],"title":"*=(_:_:)","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"*="},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:s4Int8V","text":"Int8","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Int8","preciseIdentifier":"s:s4Int8V","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/*=(_:_:)","url":"\/documentation\/compute\/int8\/*=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/FixedWidthInteger-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/FixedWidthInteger-Implementations","abstract":[],"title":"FixedWidthInteger Implementations","url":"\/documentation\/compute\/int8\/fixedwidthinteger-implementations","role":"collectionGroup","kind":"article","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/init(_:)-47zy8":{"kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"Double","kind":"typeIdentifier","preciseIdentifier":"s:Sd"},{"kind":"text","text":")"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/init(_:)-47zy8","type":"topic","url":"\/documentation\/compute\/int8\/init(_:)-47zy8","abstract":[],"title":"init(_:)","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow26ShouldNotBeDecodedFromBoolP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow26ShouldNotBeDecodedFromBoolP","title":"Swallow.ShouldNotBeDecodedFromBool","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/nonzeroBitCount":{"role":"symbol","abstract":[{"type":"text","text":"The number of bits equal to 1 in this value’s binary representation."}],"title":"nonzeroBitCount","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"nonzeroBitCount","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/nonzeroBitCount","url":"\/documentation\/compute\/int8\/nonzerobitcount"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/words-swift.property":{"title":"words","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/words-swift.property","kind":"symbol","url":"\/documentation\/compute\/int8\/words-swift.property","abstract":[{"text":"A collection containing the words of this value’s binary","type":"text"},{"type":"text","text":" "},{"type":"text","text":"representation, in order from the least significant to most significant."}],"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"words","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int8","preciseIdentifier":"s:s4Int8V"},{"text":".","kind":"text"},{"preciseIdentifier":"s:s4Int8V5WordsV","kind":"typeIdentifier","text":"Words"}],"type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow18DivisionOperatableP":{"type":"unresolvable","title":"Swallow.DivisionOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18DivisionOperatableP"},"doc://com.swallow.documentation.Compute/7Swallow28MutableSubtractionOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow28MutableSubtractionOperatableP","title":"Swallow.MutableSubtractionOperatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Sendable","kind":"identifier"}],"title":"Sendable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","abstract":[],"url":"\/documentation\/compute\/sendable","role":"symbol","navigatorTitle":[{"text":"Sendable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/leadingZeroBitCount":{"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"leadingZeroBitCount","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"url":"\/documentation\/compute\/int8\/leadingzerobitcount","type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/leadingZeroBitCount","abstract":[{"type":"text","text":"The number of leading zeros in this value’s binary representation."}],"kind":"symbol","title":"leadingZeroBitCount"},"doc://com.swallow.documentation.Compute/7Swallow8DiscreteP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiscreteP","title":"Swallow.Discrete"},"doc://com.swallow.documentation.Compute/7Swallow18AdditionOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18AdditionOperatableP","title":"Swallow.AdditionOperatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Hashable"}],"title":"Hashable","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that can be hashed into a "},{"type":"codeVoice","code":"Hasher"},{"type":"text","text":" to produce an integer hash value."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","url":"\/documentation\/compute\/hashable","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/IntegerLiteralType":{"title":"Int8.IntegerLiteralType","role":"symbol","navigatorTitle":[{"text":"IntegerLiteralType","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/IntegerLiteralType","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IntegerLiteralType"}],"type":"topic","kind":"symbol","url":"\/documentation\/compute\/int8\/integerliteraltype","abstract":[{"type":"text","text":"A type that represents an integer literal."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/init(_:)-6g8q9":{"abstract":[],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/init(_:)-6g8q9","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:Sf","kind":"typeIdentifier","text":"Float"},{"kind":"text","text":")"}],"title":"init(_:)","type":"topic","url":"\/documentation\/compute\/int8\/init(_:)-6g8q9"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/&__=(_:_:)-7gdrc":{"role":"symbol","abstract":[{"type":"text","text":"Returns the result of shifting a value’s binary representation the"},{"type":"text","text":" "},{"type":"text","text":"specified number of digits to the left, masking the shift amount to the"},{"type":"text","text":" "},{"type":"text","text":"type’s bit width, and stores the result in the left-hand-side variable."}],"title":"&<<=(_:_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"&<<=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Int8","kind":"typeIdentifier","preciseIdentifier":"s:s4Int8V"},{"kind":"text","text":", "},{"text":"Int8","kind":"typeIdentifier","preciseIdentifier":"s:s4Int8V"},{"text":")","kind":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/&__=(_:_:)-7gdrc","url":"\/documentation\/compute\/int8\/&__=(_:_:)-7gdrc"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/init(bitPattern:)":{"title":"init(bitPattern:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/init(bitPattern:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"bitPattern","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier","text":"UInt8"},{"text":")","kind":"text"}],"type":"topic","kind":"symbol","url":"\/documentation\/compute\/int8\/init(bitpattern:)","abstract":[{"text":"Creates a new instance with the same memory representation as the given","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value."}]},"doc://com.swallow.documentation.Compute/7Swallow16IntegerInitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16IntegerInitiableP","title":"Swallow.IntegerInitiable"},"doc://com.swallow.documentation.Compute/7Swallow7BoundedP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7BoundedP","title":"Swallow.Bounded"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/_=(_:_:)-2mpgr":{"abstract":[{"type":"text","text":"Stores the result of performing a bitwise XOR operation on the two given"},{"text":" ","type":"text"},{"text":"values in the left-hand-side variable.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/_=(_:_:)-2mpgr","url":"\/documentation\/compute\/int8\/_=(_:_:)-2mpgr","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"^=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"Int8","kind":"typeIdentifier","preciseIdentifier":"s:s4Int8V"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Int8","preciseIdentifier":"s:s4Int8V"},{"kind":"text","text":")"}],"kind":"symbol","title":"^=(_:_:)","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/Decodable-Implementations":{"type":"topic","url":"\/documentation\/compute\/int8\/decodable-implementations","role":"collectionGroup","kind":"article","abstract":[],"title":"Decodable Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/Decodable-Implementations"},"doc://com.swallow.documentation.Compute/7Swallow15NumberInitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow15NumberInitiableP","title":"Swallow.NumberInitiable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/ExpressibleByIntegerLiteral-Implementations":{"title":"ExpressibleByIntegerLiteral Implementations","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/ExpressibleByIntegerLiteral-Implementations","type":"topic","kind":"article","url":"\/documentation\/compute\/int8\/expressiblebyintegerliteral-implementations","abstract":[]},"doc://com.swallow.documentation.Compute/7Swallow21BitPatternConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21BitPatternConvertibleP","title":"Swallow.BitPatternConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/SIMDScalar-Implementations":{"url":"\/documentation\/compute\/int8\/simdscalar-implementations","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/SIMDScalar-Implementations","kind":"article","type":"topic","title":"SIMDScalar Implementations"},"doc://com.swallow.documentation.Compute/7Swallow13DataEncodableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataEncodableP","title":"Swallow.DataEncodable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/multipliedReportingOverflow(by:)":{"role":"symbol","abstract":[{"type":"text","text":"Returns the product of this value and the given value, along with a"},{"text":" ","type":"text"},{"text":"Boolean value indicating whether overflow occurred in the operation.","type":"text"}],"title":"multipliedReportingOverflow(by:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"multipliedReportingOverflow"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int8","preciseIdentifier":"s:s4Int8V"},{"kind":"text","text":") -> (partialValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Int8V","text":"Int8"},{"text":", overflow","kind":"text"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/multipliedReportingOverflow(by:)","url":"\/documentation\/compute\/int8\/multipliedreportingoverflow(by:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/AdditiveArithmetic-Implementations":{"role":"collectionGroup","kind":"article","title":"AdditiveArithmetic Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/AdditiveArithmetic-Implementations","type":"topic","abstract":[],"url":"\/documentation\/compute\/int8\/additivearithmetic-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Strideable":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/strideable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Strideable"}],"navigatorTitle":[{"text":"Strideable","kind":"identifier"}],"abstract":[{"type":"text","text":"A type representing continuous, one-dimensional values that can be offset"},{"type":"text","text":" "},{"type":"text","text":"and measured."}],"title":"Strideable"},"doc://com.swallow.documentation.Compute/7Swallow16SignedOrUnsignedP":{"title":"Swallow.SignedOrUnsigned","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16SignedOrUnsignedP"},"doc://com.swallow.documentation.Compute/documentation/Compute/SignedInteger":{"abstract":[{"type":"text","text":"An integer type that can represent both positive and negative values."}],"kind":"symbol","url":"\/documentation\/compute\/signedinteger","navigatorTitle":[{"kind":"identifier","text":"SignedInteger"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedInteger","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SignedInteger","kind":"identifier"}],"title":"SignedInteger"},"doc://com.swallow.documentation.Compute/7Swallow9InitiableP":{"title":"Swallow.Initiable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow9InitiableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"title":"Copyable","abstract":[{"type":"text","text":"A type whose values can be implicitly or explicitly copied."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Copyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","url":"\/documentation\/compute\/copyable","navigatorTitle":[{"text":"Copyable","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/Words-swift.struct":{"abstract":[{"type":"text","text":"A type that represents the words of this integer."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/Words-swift.struct","type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Words"}],"url":"\/documentation\/compute\/int8\/words-swift.struct","navigatorTitle":[{"kind":"identifier","text":"Words"}],"title":"Int8.Words"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/==(_:_:)-21buw":{"title":"==(_:_:)","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"==","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"preciseIdentifier":"s:s4Int8V","text":"Int8","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Int8","kind":"typeIdentifier","preciseIdentifier":"s:s4Int8V"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"url":"\/documentation\/compute\/int8\/==(_:_:)-21buw","abstract":[{"text":"Returns a Boolean value indicating whether two values are equal.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/==(_:_:)-21buw"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/_=(_:_:)-2auqb":{"title":"\/=(_:_:)","type":"topic","abstract":[{"type":"text","text":"Divides the first value by the second and stores the quotient in the"},{"type":"text","text":" "},{"text":"left-hand-side variable.","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/_=(_:_:)-2auqb","url":"\/documentation\/compute\/int8\/_=(_:_:)-2auqb","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"\/=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"Int8","preciseIdentifier":"s:s4Int8V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Int8","preciseIdentifier":"s:s4Int8V","kind":"typeIdentifier"},{"kind":"text","text":")"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BinaryInteger"}],"navigatorTitle":[{"kind":"identifier","text":"BinaryInteger"}],"url":"\/documentation\/compute\/binaryinteger","type":"topic","abstract":[{"type":"text","text":"An integer type with a binary representation."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","title":"BinaryInteger","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow7TrivialP":{"title":"Swallow.Trivial","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP"},"doc://com.swallow.documentation.Compute/7Swallow20ByteTupleConvertibleP":{"title":"Swallow.ByteTupleConvertible","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Numeric":{"abstract":[{"type":"text","text":"A type with values that support multiplication."}],"kind":"symbol","url":"\/documentation\/compute\/numeric","navigatorTitle":[{"text":"Numeric","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Numeric"}],"title":"Numeric"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/SignedNumeric-Implementations":{"url":"\/documentation\/compute\/int8\/signednumeric-implementations","type":"topic","abstract":[],"role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/SignedNumeric-Implementations","title":"SignedNumeric Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"type":"topic","title":"Equatable","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","role":"symbol","url":"\/documentation\/compute\/equatable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/7Swallow24MultiplicationOperatableP":{"title":"Swallow.MultiplicationOperatable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow24MultiplicationOperatableP"},"doc://com.swallow.documentation.Compute/7Swallow27MutableArithmeticOperatableP":{"title":"Swallow.MutableArithmeticOperatable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow27MutableArithmeticOperatableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/Encodable-Implementations":{"title":"Encodable Implementations","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/Encodable-Implementations","type":"topic","kind":"article","url":"\/documentation\/compute\/int8\/encodable-implementations","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/Equatable-Implementations":{"type":"topic","abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/Equatable-Implementations","title":"Equatable Implementations","role":"collectionGroup","url":"\/documentation\/compute\/int8\/equatable-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/addingReportingOverflow(_:)":{"role":"symbol","abstract":[{"type":"text","text":"Returns the sum of this value and the given value, along with a Boolean"},{"type":"text","text":" "},{"type":"text","text":"value indicating whether overflow occurred in the operation."}],"title":"addingReportingOverflow(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"addingReportingOverflow"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Int8","preciseIdentifier":"s:s4Int8V"},{"text":") -> (partialValue","kind":"text"},{"text":": ","kind":"text"},{"text":"Int8","preciseIdentifier":"s:s4Int8V","kind":"typeIdentifier"},{"kind":"text","text":", overflow"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/addingReportingOverflow(_:)","url":"\/documentation\/compute\/int8\/addingreportingoverflow(_:)"},"doc://com.swallow.documentation.Compute/7Swallow18ByteOrderSwappableP":{"title":"Swallow.ByteOrderSwappable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18ByteOrderSwappableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/init(exactly:)-78es1":{"url":"\/documentation\/compute\/int8\/init(exactly:)-78es1","role":"symbol","kind":"symbol","title":"init(exactly:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/init(exactly:)-78es1","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"text":"?(","kind":"text"},{"text":"exactly","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Float16","preciseIdentifier":"s:s7Float16V"},{"kind":"text","text":")"}],"abstract":[{"text":"Creates an integer from the given floating-point value, if it can be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"represented exactly."}]},"doc://com.swallow.documentation.Compute/7Swallow31MutableMultiplicationOperatableP":{"title":"Swallow.MutableMultiplicationOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow31MutableMultiplicationOperatableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow20DiscreteOrContinuousP":{"title":"Swallow.DiscreteOrContinuous","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20DiscreteOrContinuousP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/magnitude-swift.property":{"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"magnitude","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"}],"abstract":[{"type":"text","text":"The magnitude of this value."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/magnitude-swift.property","url":"\/documentation\/compute\/int8\/magnitude-swift.property","title":"magnitude","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/Stride":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/Stride","abstract":[{"type":"text","text":"A type that represents the distance between two values."}],"navigatorTitle":[{"kind":"identifier","text":"Stride"}],"title":"Int8.Stride","url":"\/documentation\/compute\/int8\/stride","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Stride","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/7Swallow13DataDecodableP":{"title":"Swallow.DataDecodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataDecodableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/trailingZeroBitCount":{"abstract":[{"text":"The number of trailing zeros in this value’s binary representation.","type":"text"}],"role":"symbol","type":"topic","url":"\/documentation\/compute\/int8\/trailingzerobitcount","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/trailingZeroBitCount","title":"trailingZeroBitCount","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"trailingZeroBitCount","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/Strideable-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/Strideable-Implementations","url":"\/documentation\/compute\/int8\/strideable-implementations","type":"topic","kind":"article","title":"Strideable Implementations","abstract":[],"role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByIntegerLiteral":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","url":"\/documentation\/compute\/expressiblebyintegerliteral","title":"ExpressibleByIntegerLiteral","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"navigatorTitle":[{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"abstract":[{"text":"A type that can be initialized with an integer literal.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/BitwiseCopyable":{"title":"BitwiseCopyable","abstract":[],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BitwiseCopyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","url":"\/documentation\/compute\/bitwisecopyable","navigatorTitle":[{"kind":"identifier","text":"BitwiseCopyable"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/+=(_:_:)-113rc":{"title":"+=(_:_:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/+=(_:_:)-113rc","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"+=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Int8V","text":"Int8"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Int8V","text":"Int8"},{"text":")","kind":"text"}],"type":"topic","kind":"symbol","url":"\/documentation\/compute\/int8\/+=(_:_:)-113rc","abstract":[{"text":"Adds two values and stores the result in the left-hand-side variable.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/!=(_:_:)-5bht9":{"role":"symbol","abstract":[],"title":"!=(_:_:)","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"!="},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Int8","preciseIdentifier":"s:s4Int8V"},{"text":", ","kind":"text"},{"text":"Int8","preciseIdentifier":"s:s4Int8V","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/!=(_:_:)-5bht9","url":"\/documentation\/compute\/int8\/!=(_:_:)-5bht9"},"doc://com.swallow.documentation.Compute/7Swallow22FloatingPointInitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22FloatingPointInitiableP","title":"Swallow.FloatingPointInitiable"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger":{"title":"FixedWidthInteger","kind":"symbol","navigatorTitle":[{"text":"FixedWidthInteger","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"FixedWidthInteger","kind":"identifier"}],"abstract":[{"text":"An integer type that uses a fixed size for every instance.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/fixedwidthinteger"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/remainderReportingOverflow(dividingBy:)":{"role":"symbol","title":"remainderReportingOverflow(dividingBy:)","kind":"symbol","url":"\/documentation\/compute\/int8\/remainderreportingoverflow(dividingby:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"remainderReportingOverflow"},{"kind":"text","text":"("},{"text":"dividingBy","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Int8V","text":"Int8"},{"kind":"text","text":") -> (partialValue"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Int8V","text":"Int8"},{"text":", overflow","kind":"text"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":")"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/remainderReportingOverflow(dividingBy:)","type":"topic","abstract":[{"type":"text","text":"Returns the remainder after dividing this value by the given value, along"},{"type":"text","text":" "},{"text":"with a Boolean value indicating whether overflow occurred during division.","type":"text"}]},"doc://com.swallow.documentation.Compute/7Swallow20ArithmeticOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20ArithmeticOperatableP","title":"Swallow.ArithmeticOperatable"},"doc://com.swallow.documentation.Compute/7Swallow22SignedIntegerInitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22SignedIntegerInitiableP","title":"Swallow.SignedIntegerInitiable"},"doc://com.swallow.documentation.Compute/10Accelerate10BNNSScalarP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Accelerate10BNNSScalarP","title":"Accelerate.BNNSScalar"},"doc://com.swallow.documentation.Compute/documentation/Compute/LosslessStringConvertible":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LosslessStringConvertible","kind":"identifier"}],"kind":"symbol","title":"LosslessStringConvertible","abstract":[{"type":"text","text":"A type that can be represented as a string in a lossless, unambiguous way."}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"LosslessStringConvertible","kind":"identifier"}],"url":"\/documentation\/compute\/losslessstringconvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible"},"doc://com.swallow.documentation.Compute/7Swallow24UnsignedIntegerInitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow24UnsignedIntegerInitiableP","title":"Swallow.UnsignedIntegerInitiable"},"doc://com.swallow.documentation.Compute/7Swallow25MutableDivisionOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableDivisionOperatableP","title":"Swallow.MutableDivisionOperatable"},"doc://com.swallow.documentation.Compute/10Accelerate23vDSP_IntegerConvertableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Accelerate23vDSP_IntegerConvertableP","title":"Accelerate.vDSP_IntegerConvertable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/_CustomPlaygroundQuickLookable-Implementations":{"abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/_CustomPlaygroundQuickLookable-Implementations","url":"\/documentation\/compute\/int8\/_customplaygroundquicklookable-implementations","kind":"article","title":"_CustomPlaygroundQuickLookable Implementations","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/init(_:)-44cer":{"title":"init(_:)","url":"\/documentation\/compute\/int8\/init(_:)-44cer","type":"topic","abstract":[{"text":"Creates an integer from the given floating-point value, rounding toward","type":"text"},{"type":"text","text":" "},{"text":"zero.","type":"text"}],"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s7Float16V","text":"Float16"},{"text":")","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/init(_:)-44cer","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/multipliedFullWidth(by:)":{"role":"symbol","abstract":[{"type":"text","text":"Returns a tuple containing the high and low parts of the result of"},{"text":" ","type":"text"},{"type":"text","text":"multiplying this value by the given value."}],"title":"multipliedFullWidth(by:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"multipliedFullWidth"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Int8V","text":"Int8"},{"text":") -> (high","kind":"text"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s4Int8V","kind":"typeIdentifier","text":"Int8"},{"text":", low","kind":"text"},{"kind":"text","text":": "},{"text":"Int8","kind":"typeIdentifier","preciseIdentifier":"s:s4Int8V"},{"kind":"text","text":"."},{"text":"Magnitude","kind":"typeIdentifier","preciseIdentifier":"s:s4Int8V9Magnitudea"},{"text":")","kind":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/multipliedFullWidth(by:)","url":"\/documentation\/compute\/int8\/multipliedfullwidth(by:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/subtractingReportingOverflow(_:)":{"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/subtractingReportingOverflow(_:)","url":"\/documentation\/compute\/int8\/subtractingreportingoverflow(_:)","title":"subtractingReportingOverflow(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"subtractingReportingOverflow","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Int8V","text":"Int8"},{"kind":"text","text":") -> (partialValue"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s4Int8V","kind":"typeIdentifier","text":"Int8"},{"kind":"text","text":", overflow"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"type":"topic","abstract":[{"text":"Returns the difference obtained by subtracting the given value from this","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value, along with a Boolean value indicating whether overflow occurred in"},{"text":" ","type":"text"},{"text":"the operation.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible":{"url":"\/documentation\/compute\/customstringconvertible","navigatorTitle":[{"kind":"identifier","text":"CustomStringConvertible"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomStringConvertible","kind":"identifier"}],"abstract":[{"text":"A type with a customized textual representation.","type":"text"}],"type":"topic","title":"CustomStringConvertible","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/_=(_:_:)-19gzu":{"kind":"symbol","url":"\/documentation\/compute\/int8\/_=(_:_:)-19gzu","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"|=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"Int8","kind":"typeIdentifier","preciseIdentifier":"s:s4Int8V"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Int8V","text":"Int8"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Stores the result of performing a bitwise OR operation on the two given"},{"type":"text","text":" "},{"text":"values in the left-hand-side variable.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/_=(_:_:)-19gzu","role":"symbol","title":"|=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/signum()":{"url":"\/documentation\/compute\/int8\/signum()","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/signum()","kind":"symbol","title":"signum()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"signum","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"Int8","preciseIdentifier":"s:s4Int8V"}],"abstract":[{"text":"Returns ","type":"text"},{"type":"codeVoice","code":"-1"},{"text":" if this value is negative and ","type":"text"},{"type":"codeVoice","code":"1"},{"text":" if it’s positive;","type":"text"},{"type":"text","text":" "},{"type":"text","text":"otherwise, "},{"code":"0","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow11RandomnableP":{"title":"Swallow.Randomnable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow11RandomnableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable":{"url":"\/documentation\/compute\/comparable","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared using the relational operators ","type":"text"},{"code":"<","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Comparable"}],"title":"Comparable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Comparable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Int8"}],"url":"\/documentation\/compute\/int8","title":"Int8","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Int8"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8","abstract":[{"text":"An 8-bit signed integer value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/SignedInteger-Implementations":{"abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/SignedInteger-Implementations","url":"\/documentation\/compute\/int8\/signedinteger-implementations","kind":"article","type":"topic","title":"SignedInteger Implementations","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/Hashable-Implementations":{"url":"\/documentation\/compute\/int8\/hashable-implementations","role":"collectionGroup","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/Hashable-Implementations","title":"Hashable Implementations","type":"topic","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomReflectable":{"url":"\/documentation\/compute\/customreflectable","role":"symbol","abstract":[{"text":"A type that explicitly supplies its own mirror.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","title":"CustomReflectable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomReflectable"}],"navigatorTitle":[{"kind":"identifier","text":"CustomReflectable"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow17NumberConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow17NumberConvertibleP","title":"Swallow.NumberConvertible"},"doc://com.swallow.documentation.Compute/7Swallow22ApproximatelyEquatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22ApproximatelyEquatableP","title":"Swallow.ApproximatelyEquatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/dividingFullWidth(_:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dividingFullWidth"},{"text":"((high","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int8","preciseIdentifier":"s:s4Int8V"},{"kind":"text","text":", low"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s4Int8V","kind":"typeIdentifier","text":"Int8"},{"kind":"text","text":"."},{"text":"Magnitude","preciseIdentifier":"s:s4Int8V9Magnitudea","kind":"typeIdentifier"},{"text":")) -> (quotient","kind":"text"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s4Int8V","kind":"typeIdentifier","text":"Int8"},{"kind":"text","text":", remainder"},{"text":": ","kind":"text"},{"text":"Int8","kind":"typeIdentifier","preciseIdentifier":"s:s4Int8V"},{"text":")","kind":"text"}],"type":"topic","url":"\/documentation\/compute\/int8\/dividingfullwidth(_:)","title":"dividingFullWidth(_:)","abstract":[{"type":"text","text":"Returns a tuple containing the quotient and remainder of dividing the"},{"text":" ","type":"text"},{"text":"given value by this value.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/dividingFullWidth(_:)","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/Magnitude-swift.typealias":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/Magnitude-swift.typealias","role":"symbol","navigatorTitle":[{"text":"Magnitude","kind":"identifier"}],"url":"\/documentation\/compute\/int8\/magnitude-swift.typealias","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Magnitude"}],"abstract":[{"type":"text","text":"A type that can represent the absolute value of any possible value of"},{"type":"text","text":" "},{"type":"text","text":"this type."}],"kind":"symbol","title":"Int8.Magnitude"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/-=(_:_:)-oery":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/-=(_:_:)-oery","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"-="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"preciseIdentifier":"s:s4Int8V","kind":"typeIdentifier","text":"Int8"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Int8","preciseIdentifier":"s:s4Int8V"},{"text":")","kind":"text"}],"kind":"symbol","type":"topic","title":"-=(_:_:)","url":"\/documentation\/compute\/int8\/-=(_:_:)-oery","abstract":[{"text":"Subtracts the second value from the first and stores the difference in the","type":"text"},{"type":"text","text":" "},{"text":"left-hand-side variable.","type":"text"}]}}}