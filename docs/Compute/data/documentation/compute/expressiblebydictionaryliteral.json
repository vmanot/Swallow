{"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"metadata":{"role":"symbol","modules":[{"name":"Compute"}],"navigatorTitle":[{"text":"ExpressibleByDictionaryLiteral","kind":"identifier"}],"symbolKind":"protocol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ExpressibleByDictionaryLiteral","kind":"identifier"}],"title":"ExpressibleByDictionaryLiteral","roleHeading":"Protocol","externalID":"s:s30ExpressibleByDictionaryLiteralP"},"topicSections":[{"generated":true,"title":"Associated Types","anchor":"Associated-Types","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByDictionaryLiteral\/Key","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByDictionaryLiteral\/Value"]},{"anchor":"Initializers","title":"Initializers","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByDictionaryLiteral\/init(dictionaryLiteral:)"],"generated":true}],"relationshipsSections":[{"type":"conformingTypes","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalMap","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyValuePairs"],"kind":"relationships","title":"Conforming Types"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/expressiblebydictionaryliteral"]}],"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByDictionaryLiteral"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ExpressibleByDictionaryLiteral"}],"platforms":["macOS"]}]},{"content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A dictionary literal is a simple way of writing a list of key-value pairs."},{"type":"text","text":" "},{"text":"You write each key-value pair with a colon (","type":"text"},{"code":":","type":"codeVoice"},{"text":") separating the key and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the value. The dictionary literal is made up of one or more key-value"},{"type":"text","text":" "},{"type":"text","text":"pairs, separated by commas and surrounded with square brackets."}]},{"type":"paragraph","inlineContent":[{"text":"To declare a dictionary, assign a dictionary literal to a variable or","type":"text"},{"type":"text","text":" "},{"text":"constant:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let countryCodes = [\"BR\": \"Brazil\", \"GH\": \"Ghana\",","                    \"JP\": \"Japan\", \"US\": \"United States\"]","\/\/ 'countryCodes' has type [String: String]","","print(countryCodes[\"BR\"]!)","\/\/ Prints \"Brazil\""]},{"inlineContent":[{"type":"text","text":"When the context provides enough type information, you can use a special"},{"type":"text","text":" "},{"type":"text","text":"form of the dictionary literal, square brackets surrounding a single"},{"type":"text","text":" "},{"type":"text","text":"colon, to initialize an empty dictionary."}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["var frequencies: [String: Int] = [:]","print(frequencies.count)","\/\/ Prints \"0\""]},{"type":"heading","text":"Conforming to the ExpressibleByDictionaryLiteral Protocol","anchor":"Conforming-to-the-ExpressibleByDictionaryLiteral-Protocol","level":1},{"inlineContent":[{"text":"To add the capability to be initialized with a dictionary literal to your","type":"text"},{"text":" ","type":"text"},{"text":"own custom types, declare an ","type":"text"},{"code":"init(dictionaryLiteral:)","type":"codeVoice"},{"type":"text","text":" initializer. The"},{"text":" ","type":"text"},{"text":"following example shows the dictionary literal initializer for a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"hypothetical "},{"code":"CountedSet","type":"codeVoice"},{"text":" type, which uses setlike semantics while keeping","type":"text"},{"type":"text","text":" "},{"text":"track of the count for duplicate elements:","type":"text"}],"type":"paragraph"},{"code":["struct CountedSet<Element: Hashable>: Collection, SetAlgebra {","    \/\/ implementation details","","    \/\/\/ Updates the count stored in the set for the given element,","    \/\/\/ adding the element if necessary.","    \/\/\/","    \/\/\/ - Parameter n: The new count for `element`. `n` must be greater","    \/\/\/   than or equal to zero.","    \/\/\/ - Parameter element: The element to set the new count on.","    mutating func updateCount(_ n: Int, for element: Element)","}","","extension CountedSet: ExpressibleByDictionaryLiteral {","    init(dictionaryLiteral elements: (Element, Int)...) {","        self.init()","        for (element, count) in elements {","            self.updateCount(count, for: element)","        }","    }","}"],"type":"codeListing","syntax":null}],"kind":"content"}],"abstract":[{"text":"A type that can be initialized using a dictionary literal.","type":"text"}],"sections":[],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByDictionaryLiteral":{"kind":"symbol","title":"ExpressibleByDictionaryLiteral","abstract":[{"type":"text","text":"A type that can be initialized using a dictionary literal."}],"url":"\/documentation\/compute\/expressiblebydictionaryliteral","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ExpressibleByDictionaryLiteral","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByDictionaryLiteral","navigatorTitle":[{"text":"ExpressibleByDictionaryLiteral","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByDictionaryLiteral/Value":{"abstract":[{"text":"The value type of a dictionary literal.","type":"text"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByDictionaryLiteral\/Value","title":"Value","fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Value"}],"required":true,"url":"\/documentation\/compute\/expressiblebydictionaryliteral\/value","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/BidirectionalMap":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalMap","url":"\/documentation\/compute\/bidirectionalmap","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalMap"}],"navigatorTitle":[{"text":"BidirectionalMap","kind":"identifier"}],"title":"BidirectionalMap","abstract":[{"type":"text","text":"A bidirectional map between two "},{"type":"codeVoice","code":"Hashable"},{"text":" types.","type":"text"}],"kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Left"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Right"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Dictionary":{"title":"Dictionary","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Dictionary","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary","type":"topic","navigatorTitle":[{"text":"Dictionary","kind":"identifier"}],"abstract":[{"type":"text","text":"A collection whose elements are key-value pairs."}],"conformance":{"constraints":[{"type":"codeVoice","code":"Key"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"text":", ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/dictionary"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByDictionaryLiteral/init(dictionaryLiteral:)":{"url":"\/documentation\/compute\/expressiblebydictionaryliteral\/init(dictionaryliteral:)","required":true,"type":"topic","title":"init(dictionaryLiteral:)","abstract":[{"type":"text","text":"Creates an instance initialized with the given key-value pairs."}],"kind":"symbol","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"dictionaryLiteral"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s30ExpressibleByDictionaryLiteralP3KeyQa","text":"Key"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","preciseIdentifier":"s:s30ExpressibleByDictionaryLiteralP5ValueQa","kind":"typeIdentifier"},{"text":")...)","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByDictionaryLiteral\/init(dictionaryLiteral:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/KeyValuePairs":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeyValuePairs"}],"navigatorTitle":[{"kind":"identifier","text":"KeyValuePairs"}],"url":"\/documentation\/compute\/keyvaluepairs","title":"KeyValuePairs","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyValuePairs","role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A lightweight collection of key-value pairs."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren":{"url":"\/documentation\/compute\/arraytreechildren","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ArrayTreeChildren","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"TreeValue","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]},"abstract":[],"kind":"symbol","navigatorTitle":[{"text":"ArrayTreeChildren","kind":"identifier"}],"title":"ArrayTreeChildren","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByDictionaryLiteral/Key":{"title":"Key","url":"\/documentation\/compute\/expressiblebydictionaryliteral\/key","required":true,"role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByDictionaryLiteral\/Key","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Key","kind":"identifier"}],"abstract":[{"type":"text","text":"The key type of a dictionary literal."}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}