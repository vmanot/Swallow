{"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"sections":[],"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AdditiveArithmetic","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable"],"type":"inheritsFrom","title":"Inherits From"},{"kind":"relationships","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsignedInteger"],"type":"inheritedBy","title":"Inherited By"},{"title":"Conforming Types","type":"conformingTypes","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt128","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8"],"kind":"relationships"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BinaryInteger"},{"text":" : ","kind":"text"},{"text":"CustomStringConvertible","preciseIdentifier":"s:s23CustomStringConvertibleP","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible"},{"kind":"text","text":", "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","preciseIdentifier":"s:SH","text":"Hashable"},{"kind":"text","text":", "},{"text":"Numeric","preciseIdentifier":"s:Sj","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","text":"Strideable","preciseIdentifier":"s:Sx"},{"text":" ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Magnitude","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric\/Magnitude-swift.associatedtype","kind":"typeIdentifier","preciseIdentifier":"s:Sj9MagnitudeQa"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"BinaryInteger","preciseIdentifier":"s:Sz","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric\/Magnitude-swift.associatedtype","text":"Magnitude","preciseIdentifier":"s:Sj9MagnitudeQa"},{"kind":"text","text":" == "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Sj9MagnitudeQa","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric\/Magnitude-swift.associatedtype","text":"Magnitude"},{"kind":"text","text":"."},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric\/Magnitude-swift.associatedtype","preciseIdentifier":"s:Sj9MagnitudeQa","text":"Magnitude"}]}]},{"content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"BinaryInteger"},{"text":" protocol is the basis for all the integer types","type":"text"},{"text":" ","type":"text"},{"text":"provided by the standard library. All of the standard library’s integer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"types, such as "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" and "},{"type":"codeVoice","code":"UInt32"},{"text":", conform to ","type":"text"},{"code":"BinaryInteger","type":"codeVoice"},{"type":"text","text":"."}]},{"level":1,"text":"Converting Between Numeric Types","anchor":"Converting-Between-Numeric-Types","type":"heading"},{"inlineContent":[{"text":"You can create new instances of a type that conforms to the ","type":"text"},{"type":"codeVoice","code":"BinaryInteger"},{"text":" ","type":"text"},{"text":"protocol from a floating-point number or another binary integer of any","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type. The "},{"type":"codeVoice","code":"BinaryInteger"},{"type":"text","text":" protocol provides initializers for four"},{"text":" ","type":"text"},{"type":"text","text":"different kinds of conversion."}],"type":"paragraph"},{"anchor":"Range-Checked-Conversion","text":"Range-Checked Conversion","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"You use the default "},{"code":"init(_:)","type":"codeVoice"},{"type":"text","text":" initializer to create a new instance when"},{"type":"text","text":" "},{"text":"you’re sure that the value passed is representable in the new type. For","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"example, an instance of "},{"code":"Int16","type":"codeVoice"},{"text":" can represent the value ","type":"text"},{"code":"500","type":"codeVoice"},{"text":", so the","type":"text"},{"text":" ","type":"text"},{"text":"first conversion in the code sample below succeeds. That same value is too","type":"text"},{"type":"text","text":" "},{"text":"large to represent as an ","type":"text"},{"code":"Int8","type":"codeVoice"},{"text":" instance, so the second conversion fails,","type":"text"},{"type":"text","text":" "},{"text":"triggering a runtime error.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let x: Int = 500","let y = Int16(x)","\/\/ y == 500","","let z = Int8(x)","\/\/ Error: Not enough bits to represent..."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you create a binary integer from a floating-point value using the"},{"type":"text","text":" "},{"type":"text","text":"default initializer, the value is rounded toward zero before the range is"},{"text":" ","type":"text"},{"type":"text","text":"checked. In the following example, the value "},{"code":"127.75","type":"codeVoice"},{"text":" is rounded to ","type":"text"},{"code":"127","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which is representable by the "},{"code":"Int8","type":"codeVoice"},{"text":" type.  ","type":"text"},{"type":"codeVoice","code":"128.25"},{"type":"text","text":" is rounded to "},{"code":"128","type":"codeVoice"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which is not representable as an "},{"type":"codeVoice","code":"Int8"},{"type":"text","text":" instance, triggering a runtime"},{"text":" ","type":"text"},{"type":"text","text":"error."}]},{"type":"codeListing","code":["let e = Int8(127.75)","\/\/ e == 127","","let f = Int8(128.25)","\/\/ Error: Double value cannot be converted..."],"syntax":null},{"text":"Exact Conversion","level":2,"type":"heading","anchor":"Exact-Conversion"},{"inlineContent":[{"text":"Use the ","type":"text"},{"code":"init?(exactly:)","type":"codeVoice"},{"text":" initializer to create a new instance after","type":"text"},{"type":"text","text":" "},{"text":"checking whether the passed value is representable. Instead of trapping on","type":"text"},{"type":"text","text":" "},{"type":"text","text":"out-of-range values, using the failable "},{"code":"init?(exactly:)","type":"codeVoice"},{"type":"text","text":" "},{"text":"initializer results in ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["let x = Int16(exactly: 500)","\/\/ x == Optional(500)","","let y = Int8(exactly: 500)","\/\/ y == nil"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"text":"When converting floating-point values, the ","type":"text"},{"code":"init?(exactly:)","type":"codeVoice"},{"text":" initializer","type":"text"},{"type":"text","text":" "},{"text":"checks both that the passed value has no fractional part and that the","type":"text"},{"type":"text","text":" "},{"text":"value is representable in the resulting type.","type":"text"}]},{"syntax":null,"type":"codeListing","code":["let e = Int8(exactly: 23.0)       \/\/ integral value, representable","\/\/ e == Optional(23)","","let f = Int8(exactly: 23.75)      \/\/ fractional value, representable","\/\/ f == nil","","let g = Int8(exactly: 500.0)      \/\/ integral value, nonrepresentable","\/\/ g == nil"]},{"level":2,"type":"heading","anchor":"Clamping-Conversion","text":"Clamping Conversion"},{"inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"init(clamping:)"},{"text":" initializer to create a new instance of a binary","type":"text"},{"type":"text","text":" "},{"text":"integer type where out-of-range values are clamped to the representable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"range of the type. For a type "},{"type":"codeVoice","code":"T"},{"type":"text","text":", the resulting value is in the range"},{"text":" ","type":"text"},{"type":"codeVoice","code":"T.min...T.max"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["let x = Int16(clamping: 500)","\/\/ x == 500","","let y = Int8(clamping: 500)","\/\/ y == 127","","let z = UInt8(clamping: -500)","\/\/ z == 0"],"type":"codeListing"},{"anchor":"Bit-Pattern-Conversion","level":2,"type":"heading","text":"Bit Pattern Conversion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"init(truncatingIfNeeded:)"},{"text":" initializer to create a new instance","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with the same bit pattern as the passed value, extending or truncating the"},{"type":"text","text":" "},{"text":"value’s representation as necessary. Note that the value may not be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"preserved, particularly when converting between signed to unsigned integer"},{"type":"text","text":" "},{"type":"text","text":"types or when the destination type has a smaller bit width than the source"},{"type":"text","text":" "},{"type":"text","text":"type. The following example shows how extending and truncating work for"},{"text":" ","type":"text"},{"text":"nonnegative integers:","type":"text"}]},{"syntax":null,"type":"codeListing","code":["let q: Int16 = 850","\/\/ q == 0b00000011_01010010","","let r = Int8(truncatingIfNeeded: q)      \/\/ truncate 'q' to fit in 8 bits","\/\/ r == 82","\/\/   == 0b01010010","","let s = Int16(truncatingIfNeeded: r)     \/\/ extend 'r' to fill 16 bits","\/\/ s == 82","\/\/   == 0b00000000_01010010"]},{"type":"paragraph","inlineContent":[{"text":"Any padding is performed by ","type":"text"},{"inlineContent":[{"type":"text","text":"sign-extending"}],"type":"emphasis"},{"text":" the passed value. When","type":"text"},{"type":"text","text":" "},{"type":"text","text":"nonnegative integers are extended, the result is padded with zeroes. When"},{"type":"text","text":" "},{"text":"negative integers are extended, the result is padded with ones. This","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"example shows several extending conversions of a negative value—note"},{"type":"text","text":" "},{"text":"that negative values are sign-extended even when converting to an unsigned","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type."}]},{"syntax":null,"code":["let t: Int8 = -100","\/\/ t == -100","\/\/ t's binary representation == 0b10011100","","let u = UInt8(truncatingIfNeeded: t)","\/\/ u == 156","\/\/ u's binary representation == 0b10011100","","let v = Int16(truncatingIfNeeded: t)","\/\/ v == -100","\/\/ v's binary representation == 0b11111111_10011100","","let w = UInt16(truncatingIfNeeded: t)","\/\/ w == 65436","\/\/ w's binary representation == 0b11111111_10011100"],"type":"codeListing"},{"anchor":"Comparing-Across-Integer-Types","text":"Comparing Across Integer Types","type":"heading","level":1},{"inlineContent":[{"type":"text","text":"You can use relational operators, such as the less-than and equal-to"},{"text":" ","type":"text"},{"type":"text","text":"operators ("},{"type":"codeVoice","code":"<"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"=="},{"type":"text","text":"), to compare instances of different binary integer"},{"type":"text","text":" "},{"type":"text","text":"types. The following example compares instances of the "},{"code":"Int","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"UInt"},{"text":", and","type":"text"},{"type":"text","text":" "},{"code":"UInt8","type":"codeVoice"},{"type":"text","text":" types:"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let x: Int = -23","let y: UInt = 1_000","let z: UInt8 = 23","","if x < y {","    print(\"\\(x) is less than \\(y).\")","}","\/\/ Prints \"-23 is less than 1000.\"","","if z > x {","    print(\"\\(z) is greater than \\(x).\")","}","\/\/ Prints \"23 is greater than -23.\""]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/binaryinteger"]}],"topicSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/!=(_:_:)-4ljme","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/!=(_:_:)-9ooa7","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/&(_:_:)-sk15","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/&=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/*(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/*=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/+(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/+=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/-(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/-=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/_(_:_:)-30ngi","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/_(_:_:)-3qw5d","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/_(_:_:)-6qhsw","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/_(_:_:)-8zc6l","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/_=(_:_:)-1fatv","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/_=(_:_:)-20xv1","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/_=(_:_:)-4vfmj","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/_=(_:_:)-79wgi","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/__(_:_:)-28lmu","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/__(_:_:)-4vnij","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/__=(_:_:)-5lhky","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/__=(_:_:)-9pzpp","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/~(_:)-91dtt"],"anchor":"Operators","title":"Operators","generated":true},{"anchor":"Associated-Types","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/Words-swift.associatedtype"],"title":"Associated Types","generated":true},{"title":"Initializers","anchor":"Initializers","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/init()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/init(_:)-2ln0u","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/init(_:)-8gmdl","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/init(clamping:)-6ewp0","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/init(exactly:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/init(truncatingIfNeeded:)-5b20c"]},{"anchor":"Instance-Properties","generated":true,"title":"Instance Properties","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/bitWidth","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/trailingZeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/words-swift.property"]},{"title":"Instance Methods","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/isMultiple(of:)-4vcaa","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/quotientAndRemainder(dividingBy:)-2n3uu","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/signum()-7hog6"],"generated":true,"anchor":"Instance-Methods"},{"generated":true,"anchor":"Type-Properties","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/isSigned-2nca7"],"title":"Type Properties"}],"kind":"symbol","metadata":{"externalID":"s:Sz","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"BinaryInteger","kind":"identifier"}],"modules":[{"name":"Compute"}],"symbolKind":"protocol","title":"BinaryInteger","roleHeading":"Protocol","navigatorTitle":[{"text":"BinaryInteger","kind":"identifier"}]},"abstract":[{"text":"An integer type with a binary representation.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/init(exactly:)":{"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"exactly","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/compute\/binaryinteger\/init(exactly:)","abstract":[{"text":"Creates an integer from the given floating-point value, if it can be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"represented exactly."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/init(exactly:)","type":"topic","required":true,"defaultImplementations":3,"title":"init(exactly:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int16":{"title":"Int16","abstract":[{"text":"A 16-bit signed integer value","type":"text"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int16","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int16"}],"type":"topic","url":"\/documentation\/compute\/int16","navigatorTitle":[{"kind":"identifier","text":"Int16"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Hashable"}],"title":"Hashable","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that can be hashed into a "},{"type":"codeVoice","code":"Hasher"},{"type":"text","text":" to produce an integer hash value."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","url":"\/documentation\/compute\/hashable","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/quotientAndRemainder(dividingBy:)-2n3uu":{"type":"topic","title":"quotientAndRemainder(dividingBy:)","kind":"symbol","url":"\/documentation\/compute\/binaryinteger\/quotientandremainder(dividingby:)-2n3uu","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"quotientAndRemainder","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"dividingBy"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") -> (quotient","kind":"text"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", remainder","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":")","kind":"text"}],"abstract":[{"text":"Returns the quotient and remainder of this value divided by the given","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value."}],"required":true,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/quotientAndRemainder(dividingBy:)-2n3uu","defaultImplementations":1,"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/-(_:_:)":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Subtracts one value from another and produces their difference."}],"url":"\/documentation\/compute\/binaryinteger\/-(_:_:)","title":"-(_:_:)","required":true,"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/-(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"-"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/*(_:_:)":{"type":"topic","kind":"symbol","title":"*(_:_:)","url":"\/documentation\/compute\/binaryinteger\/*(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/*(_:_:)","role":"symbol","required":true,"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"*","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"type":"text","text":"Multiplies two values and produces their product."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByIntegerLiteral":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","url":"\/documentation\/compute\/expressiblebyintegerliteral","title":"ExpressibleByIntegerLiteral","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"navigatorTitle":[{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"abstract":[{"text":"A type that can be initialized with an integer literal.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int128":{"url":"\/documentation\/compute\/int128","abstract":[{"type":"text","text":"A 128-bit signed integer type."}],"title":"Int128","role":"symbol","navigatorTitle":[{"text":"Int128","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int128"}],"kind":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/_(_:_:)-30ngi":{"kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"%"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"type":"topic","required":true,"url":"\/documentation\/compute\/binaryinteger\/_(_:_:)-30ngi","role":"symbol","abstract":[{"text":"Returns the remainder of dividing the first value by the second.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/_(_:_:)-30ngi","title":"%(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt":{"kind":"symbol","navigatorTitle":[{"text":"UInt","kind":"identifier"}],"type":"topic","title":"UInt","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt","abstract":[{"text":"An unsigned integer value type.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt","kind":"identifier"}],"url":"\/documentation\/compute\/uint"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/isMultiple(of:)-4vcaa":{"required":true,"url":"\/documentation\/compute\/binaryinteger\/ismultiple(of:)-4vcaa","abstract":[{"text":"Returns ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" if this value is a multiple of the given value, and "},{"code":"false","type":"codeVoice"},{"type":"text","text":" "},{"text":"otherwise.","type":"text"}],"kind":"symbol","role":"symbol","defaultImplementations":2,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/isMultiple(of:)-4vcaa","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"isMultiple","kind":"identifier"},{"kind":"text","text":"("},{"text":"of","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"type":"topic","title":"isMultiple(of:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/init(clamping:)-6ewp0":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/init(clamping:)-6ewp0","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"clamping","kind":"externalParam"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"defaultImplementations":1,"role":"symbol","type":"topic","kind":"symbol","required":true,"title":"init(clamping:)","abstract":[{"type":"text","text":"Creates a new instance with the representable value that’s closest to the"},{"type":"text","text":" "},{"text":"given integer.","type":"text"}],"url":"\/documentation\/compute\/binaryinteger\/init(clamping:)-6ewp0"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/words-swift.property":{"kind":"symbol","url":"\/documentation\/compute\/binaryinteger\/words-swift.property","title":"words","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"words","kind":"identifier"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Words","preciseIdentifier":"s:Sz5WordsQa","kind":"typeIdentifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/words-swift.property","required":true,"role":"symbol","abstract":[{"type":"text","text":"A collection containing the words of this value’s binary"},{"text":" ","type":"text"},{"type":"text","text":"representation, in order from the least significant to most significant."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/_=(_:_:)-79wgi":{"kind":"symbol","type":"topic","url":"\/documentation\/compute\/binaryinteger\/_=(_:_:)-79wgi","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"%=","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":")"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/_=(_:_:)-79wgi","abstract":[{"type":"text","text":"Divides the first value by the second and stores the remainder in the"},{"text":" ","type":"text"},{"text":"left-hand-side variable.","type":"text"}],"required":true,"title":"%=(_:_:)","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/init(_:)-8gmdl":{"title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"defaultImplementations":4,"abstract":[{"type":"text","text":"Creates a new instance from the given integer."}],"kind":"symbol","role":"symbol","url":"\/documentation\/compute\/binaryinteger\/init(_:)-8gmdl","required":true,"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/init(_:)-8gmdl"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/__=(_:_:)-9pzpp":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/__=(_:_:)-9pzpp","url":"\/documentation\/compute\/binaryinteger\/__=(_:_:)-9pzpp","required":true,"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"<<=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"RHS"},{"kind":"text","text":">("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"RHS"},{"kind":"text","text":")"}],"defaultImplementations":1,"type":"topic","abstract":[{"type":"text","text":"Stores the result of shifting a value’s binary representation the"},{"text":" ","type":"text"},{"type":"text","text":"specified number of digits to the left in the left-hand-side variable."}],"role":"symbol","title":"<<=(_:_:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Numeric/Magnitude-swift.associatedtype":{"url":"\/documentation\/compute\/numeric\/magnitude-swift.associatedtype","kind":"symbol","abstract":[{"type":"text","text":"A type that can represent the absolute value of any possible value of the"},{"text":" ","type":"text"},{"type":"text","text":"conforming type."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric\/Magnitude-swift.associatedtype","type":"topic","title":"Magnitude","required":true,"role":"symbol","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Magnitude"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:SL","text":"Comparable","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Numeric","preciseIdentifier":"s:Sj","kind":"typeIdentifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/__=(_:_:)-5lhky":{"role":"symbol","kind":"symbol","title":">>=(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/__=(_:_:)-5lhky","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":">>=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"<"},{"text":"RHS","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"RHS","kind":"typeIdentifier"},{"text":")","kind":"text"}],"defaultImplementations":1,"type":"topic","abstract":[{"text":"Stores the result of shifting a value’s binary representation the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specified number of digits to the right in the left-hand-side variable."}],"url":"\/documentation\/compute\/binaryinteger\/__=(_:_:)-5lhky","required":true},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/_(_:_:)-3qw5d":{"defaultImplementations":1,"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"^"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"kind":"symbol","title":"^(_:_:)","abstract":[{"text":"Returns the result of performing a bitwise XOR operation on the two given","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values."}],"required":true,"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/_(_:_:)-3qw5d","role":"symbol","url":"\/documentation\/compute\/binaryinteger\/_(_:_:)-3qw5d"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/signum()-7hog6":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"signum"},{"kind":"text","text":"() -> "},{"text":"Self","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/signum()-7hog6","abstract":[{"text":"Returns ","type":"text"},{"code":"-1","type":"codeVoice"},{"type":"text","text":" if this value is negative and "},{"code":"1","type":"codeVoice"},{"type":"text","text":" if it’s positive;"},{"type":"text","text":" "},{"type":"text","text":"otherwise, "},{"code":"0","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","type":"topic","defaultImplementations":1,"title":"signum()","url":"\/documentation\/compute\/binaryinteger\/signum()-7hog6","required":true},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"type":"topic","title":"Equatable","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","role":"symbol","url":"\/documentation\/compute\/equatable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/bitWidth":{"role":"symbol","kind":"symbol","title":"bitWidth","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/bitWidth","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"bitWidth"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"defaultImplementations":1,"type":"topic","abstract":[{"type":"text","text":"The number of bits in the current binary representation of this value."}],"url":"\/documentation\/compute\/binaryinteger\/bitwidth","required":true},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/+=(_:_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/+=(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"+="},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":")"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/binaryinteger\/+=(_:_:)","required":true,"abstract":[{"text":"Adds two values and stores the result in the left-hand-side variable.","type":"text"}],"title":"+=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Numeric":{"abstract":[{"type":"text","text":"A type with values that support multiplication."}],"kind":"symbol","url":"\/documentation\/compute\/numeric","navigatorTitle":[{"text":"Numeric","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Numeric"}],"title":"Numeric"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/_=(_:_:)-4vfmj":{"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"|=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":")"}],"kind":"symbol","required":true,"url":"\/documentation\/compute\/binaryinteger\/_=(_:_:)-4vfmj","abstract":[{"text":"Stores the result of performing a bitwise OR operation on the two given","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"values in the left-hand-side variable."}],"title":"|=(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/_=(_:_:)-4vfmj","type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/__(_:_:)-4vnij":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/__(_:_:)-4vnij","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":">>","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"RHS"},{"text":">(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"RHS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"title":">>(_:_:)","defaultImplementations":2,"url":"\/documentation\/compute\/binaryinteger\/__(_:_:)-4vnij","type":"topic","abstract":[{"type":"text","text":"Returns the result of shifting a value’s binary representation the"},{"type":"text","text":" "},{"type":"text","text":"specified number of digits to the right."}],"required":true,"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/&(_:_:)-sk15":{"kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"&","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"defaultImplementations":1,"type":"topic","required":true,"url":"\/documentation\/compute\/binaryinteger\/&(_:_:)-sk15","role":"symbol","abstract":[{"type":"text","text":"Returns the result of performing a bitwise AND operation on the two given"},{"text":" ","type":"text"},{"type":"text","text":"values."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/&(_:_:)-sk15","title":"&(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/trailingZeroBitCount":{"required":true,"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"trailingZeroBitCount"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"type":"topic","url":"\/documentation\/compute\/binaryinteger\/trailingzerobitcount","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/trailingZeroBitCount","abstract":[{"type":"text","text":"The number of trailing zeros in this value’s binary representation."}],"kind":"symbol","title":"trailingZeroBitCount","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","title":"UInt32","abstract":[{"type":"text","text":"A 32-bit unsigned integer value"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"UInt32","kind":"identifier"}],"url":"\/documentation\/compute\/uint32","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt32","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/&=(_:_:)":{"url":"\/documentation\/compute\/binaryinteger\/&=(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"&=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":")"}],"role":"symbol","abstract":[{"text":"Stores the result of performing a bitwise AND operation on the two given","type":"text"},{"type":"text","text":" "},{"text":"values in the left-hand-side variable.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/&=(_:_:)","required":true,"title":"&=(_:_:)","type":"topic","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/init(_:)-2ln0u":{"abstract":[{"type":"text","text":"Creates an integer from the given floating-point value, rounding toward"},{"text":" ","type":"text"},{"type":"text","text":"zero."}],"title":"init(_:)","required":true,"role":"symbol","url":"\/documentation\/compute\/binaryinteger\/init(_:)-2ln0u","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"kind":"symbol","defaultImplementations":4,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/init(_:)-2ln0u","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int32","kind":"identifier"}],"abstract":[{"text":"A 32-bit signed integer value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type."}],"kind":"symbol","navigatorTitle":[{"text":"Int32","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/int32","title":"Int32","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32"},"doc://com.swallow.documentation.Compute/documentation/Compute/SignedInteger":{"abstract":[{"type":"text","text":"An integer type that can represent both positive and negative values."}],"kind":"symbol","url":"\/documentation\/compute\/signedinteger","navigatorTitle":[{"kind":"identifier","text":"SignedInteger"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedInteger","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SignedInteger","kind":"identifier"}],"title":"SignedInteger"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/~(_:)-91dtt":{"title":"~(_:)","url":"\/documentation\/compute\/binaryinteger\/~(_:)-91dtt","kind":"symbol","required":true,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/~(_:)-91dtt","defaultImplementations":1,"abstract":[{"type":"text","text":"Returns the inverse of the bits set in the argument."}],"role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"~","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Int8"}],"url":"\/documentation\/compute\/int8","title":"Int8","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Int8"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8","abstract":[{"text":"An 8-bit signed integer value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/-=(_:_:)":{"title":"-=(_:_:)","role":"symbol","kind":"symbol","required":true,"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"-=","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Subtracts the second value from the first and stores the difference in the"},{"type":"text","text":" "},{"text":"left-hand-side variable.","type":"text"}],"url":"\/documentation\/compute\/binaryinteger\/-=(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/-=(_:_:)","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/__(_:_:)-28lmu":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/__(_:_:)-28lmu","required":true,"abstract":[{"text":"Returns the result of shifting a value’s binary representation the","type":"text"},{"type":"text","text":" "},{"text":"specified number of digits to the left.","type":"text"}],"kind":"symbol","title":"<<(_:_:)","url":"\/documentation\/compute\/binaryinteger\/__(_:_:)-28lmu","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"<<","kind":"identifier"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"text":"RHS","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"RHS","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"}],"defaultImplementations":2,"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt128":{"url":"\/documentation\/compute\/uint128","type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt128","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UInt128"}],"title":"UInt128","abstract":[{"text":"A 128-bit unsigned integer type.","type":"text"}],"navigatorTitle":[{"text":"UInt128","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Strideable":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/strideable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Strideable"}],"navigatorTitle":[{"text":"Strideable","kind":"identifier"}],"abstract":[{"type":"text","text":"A type representing continuous, one-dimensional values that can be offset"},{"type":"text","text":" "},{"type":"text","text":"and measured."}],"title":"Strideable"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/!=(_:_:)-9ooa7":{"type":"topic","title":"!=(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"!="},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"text":"Other","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Other"},{"kind":"text","text":") -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/!=(_:_:)-9ooa7","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the two given values are not"},{"text":" ","type":"text"},{"text":"equal.","type":"text"}],"url":"\/documentation\/compute\/binaryinteger\/!=(_:_:)-9ooa7"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/Words-swift.associatedtype":{"type":"topic","required":true,"kind":"symbol","title":"Words","fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"text":"Words","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"RandomAccessCollection","kind":"typeIdentifier","preciseIdentifier":"s:Sk"}],"abstract":[{"type":"text","text":"A type that represents the words of a binary integer."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/Words-swift.associatedtype","url":"\/documentation\/compute\/binaryinteger\/words-swift.associatedtype","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt64":{"navigatorTitle":[{"text":"UInt64","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","title":"UInt64","abstract":[{"text":"A 64-bit unsigned integer value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type."}],"url":"\/documentation\/compute\/uint64","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt64","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/_(_:_:)-8zc6l":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/_(_:_:)-8zc6l","title":"\/(_:_:)","type":"topic","abstract":[{"text":"Returns the quotient of dividing the first value by the second.","type":"text"}],"required":true,"kind":"symbol","role":"symbol","url":"\/documentation\/compute\/binaryinteger\/_(_:_:)-8zc6l","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"\/","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/_=(_:_:)-1fatv":{"title":"^=(_:_:)","role":"symbol","kind":"symbol","type":"topic","required":true,"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"^=","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":")"}],"url":"\/documentation\/compute\/binaryinteger\/_=(_:_:)-1fatv","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/_=(_:_:)-1fatv","abstract":[{"text":"Stores the result of performing a bitwise XOR operation on the two given","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"values in the left-hand-side variable."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/+(_:_:)":{"abstract":[{"text":"Adds two values and produces their sum.","type":"text"}],"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"+"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"required":true,"url":"\/documentation\/compute\/binaryinteger\/+(_:_:)","role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/+(_:_:)","title":"+(_:_:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/init()":{"kind":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/init()","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"()"}],"title":"init()","abstract":[{"type":"text","text":"Creates a new value equal to zero."}],"role":"symbol","url":"\/documentation\/compute\/binaryinteger\/init()"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/isSigned-2nca7":{"kind":"symbol","abstract":[{"type":"text","text":"A Boolean value indicating whether this type is a signed integer type."}],"defaultImplementations":2,"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"isSigned"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/isSigned-2nca7","url":"\/documentation\/compute\/binaryinteger\/issigned-2nca7","required":true,"title":"isSigned","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64":{"url":"\/documentation\/compute\/int64","title":"Int64","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int64"}],"abstract":[{"type":"text","text":"A 64-bit signed integer value"},{"text":" ","type":"text"},{"text":"type.","type":"text"}],"navigatorTitle":[{"text":"Int64","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/_(_:_:)-6qhsw":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/_(_:_:)-6qhsw","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"|","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"kind":"symbol","defaultImplementations":1,"required":true,"role":"symbol","abstract":[{"type":"text","text":"Returns the result of performing a bitwise OR operation on the two given"},{"type":"text","text":" "},{"type":"text","text":"values."}],"type":"topic","url":"\/documentation\/compute\/binaryinteger\/_(_:_:)-6qhsw","title":"|(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger":{"title":"FixedWidthInteger","kind":"symbol","navigatorTitle":[{"text":"FixedWidthInteger","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"FixedWidthInteger","kind":"identifier"}],"abstract":[{"text":"An integer type that uses a fixed size for every instance.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/fixedwidthinteger"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible":{"url":"\/documentation\/compute\/customstringconvertible","navigatorTitle":[{"kind":"identifier","text":"CustomStringConvertible"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomStringConvertible","kind":"identifier"}],"abstract":[{"text":"A type with a customized textual representation.","type":"text"}],"type":"topic","title":"CustomStringConvertible","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/AdditiveArithmetic":{"type":"topic","title":"AdditiveArithmetic","abstract":[{"text":"A type with values that support addition and subtraction.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AdditiveArithmetic"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AdditiveArithmetic","url":"\/documentation\/compute\/additivearithmetic","role":"symbol","navigatorTitle":[{"text":"AdditiveArithmetic","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/_=(_:_:)-20xv1":{"type":"topic","title":"\/=(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"\/="},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","required":true,"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/_=(_:_:)-20xv1","abstract":[{"type":"text","text":"Divides the first value by the second and stores the quotient in the"},{"type":"text","text":" "},{"text":"left-hand-side variable.","type":"text"}],"url":"\/documentation\/compute\/binaryinteger\/_=(_:_:)-20xv1"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/init(truncatingIfNeeded:)-5b20c":{"role":"symbol","kind":"symbol","required":true,"title":"init(truncatingIfNeeded:)","url":"\/documentation\/compute\/binaryinteger\/init(truncatingifneeded:)-5b20c","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"truncatingIfNeeded"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Creates a new instance from the bit pattern of the given instance by"},{"type":"text","text":" "},{"type":"text","text":"sign-extending or truncating to fit this type."}],"type":"topic","defaultImplementations":1,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/init(truncatingIfNeeded:)-5b20c"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/*=(_:_:)":{"title":"*=(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/*=(_:_:)","role":"symbol","abstract":[{"type":"text","text":"Multiplies two values and stores the result in the left-hand-side"},{"type":"text","text":" "},{"text":"variable.","type":"text"}],"kind":"symbol","type":"topic","required":true,"url":"\/documentation\/compute\/binaryinteger\/*=(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"*=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":")"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsignedInteger":{"url":"\/documentation\/compute\/unsignedinteger","abstract":[{"type":"text","text":"An integer type that can represent only nonnegative values."}],"kind":"symbol","navigatorTitle":[{"text":"UnsignedInteger","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsignedInteger","title":"UnsignedInteger","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsignedInteger"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BinaryInteger"}],"navigatorTitle":[{"kind":"identifier","text":"BinaryInteger"}],"url":"\/documentation\/compute\/binaryinteger","type":"topic","abstract":[{"type":"text","text":"An integer type with a binary representation."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","title":"BinaryInteger","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger/!=(_:_:)-4ljme":{"kind":"symbol","title":"!=(_:_:)","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"!=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"url":"\/documentation\/compute\/binaryinteger\/!=(_:_:)-4ljme","role":"symbol","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger\/!=(_:_:)-4ljme"},"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable":{"url":"\/documentation\/compute\/comparable","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared using the relational operators ","type":"text"},{"code":"<","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Comparable"}],"title":"Comparable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Comparable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UInt8","kind":"identifier"}],"navigatorTitle":[{"text":"UInt8","kind":"identifier"}],"title":"UInt8","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8","url":"\/documentation\/compute\/uint8","kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"An 8-bit unsigned integer value"},{"text":" ","type":"text"},{"text":"type.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt16":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UInt16","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UInt16"}],"title":"UInt16","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt16","url":"\/documentation\/compute\/uint16","kind":"symbol","role":"symbol","abstract":[{"text":"A 16-bit unsigned integer value","type":"text"},{"text":" ","type":"text"},{"text":"type.","type":"text"}],"type":"topic"}}}