{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/anybidirectionalcollection\/joined(separator:)-6ag5z"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyBidirectionalCollection\/joined(separator:)-6ag5z"},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"extendedModule":"Swift","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"joined"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"separator"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"}],"roleHeading":"Instance Method","conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"modules":[{"name":"Compute","relatedModules":["Swift"]}],"externalID":"s:SKsSS7ElementRtzrlE6joined9separatorS2S_tF::SYNTHESIZED::s:s26AnyBidirectionalCollectionV","title":"joined(separator:)","symbolKind":"method"},"sections":[],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyBidirectionalCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyBidirectionalCollection\/BidirectionalCollection-Implementations"]]},"abstract":[{"text":"Returns a new string by concatenating the elements of the sequence,","type":"text"},{"text":" ","type":"text"},{"text":"adding the given separator between each element.","type":"text"}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"joined","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"kind":"text","text":": "},{"text":"String","preciseIdentifier":"s:SS","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","kind":"typeIdentifier"},{"kind":"text","text":" = \"\") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","preciseIdentifier":"s:SS","text":"String"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"name":"separator","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A string to insert between each of the elements"},{"text":" ","type":"text"},{"type":"text","text":"in this sequence. The default separator is an empty string."}]}]}],"kind":"parameters"},{"content":[{"type":"heading","level":2,"anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"text":"A single, concatenated string.","type":"text"}]}],"kind":"content"},{"kind":"content","content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"text":"The following example shows how an array of strings can be joined to a","type":"text"},{"type":"text","text":" "},{"text":"single, comma-separated string:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]","let list = cast.joined(separator: \", \")","print(list)","\/\/ Prints \"Vivien, Marlon, Kim, Karl\""]}]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/AnyBidirectionalCollection/joined(separator:)-6ag5z":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyBidirectionalCollection\/joined(separator:)-6ag5z","abstract":[{"type":"text","text":"Returns a new string by concatenating the elements of the sequence,"},{"text":" ","type":"text"},{"type":"text","text":"adding the given separator between each element."}],"role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"joined"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"}],"kind":"symbol","url":"\/documentation\/compute\/anybidirectionalcollection\/joined(separator:)-6ag5z","title":"joined(separator:)","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/String":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"String"}],"title":"String","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"String","kind":"identifier"}],"abstract":[{"type":"text","text":"A Unicode string value that is a collection of characters."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/string"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyBidirectionalCollection/BidirectionalCollection-Implementations":{"title":"BidirectionalCollection Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyBidirectionalCollection\/BidirectionalCollection-Implementations","type":"topic","abstract":[],"kind":"article","role":"collectionGroup","url":"\/documentation\/compute\/anybidirectionalcollection\/bidirectionalcollection-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyBidirectionalCollection":{"abstract":[{"text":"A type-erased wrapper over any collection with indices that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"support bidirectional traversal."}],"navigatorTitle":[{"text":"AnyBidirectionalCollection","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyBidirectionalCollection","title":"AnyBidirectionalCollection","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AnyBidirectionalCollection","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/anybidirectionalcollection"}}}