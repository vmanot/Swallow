{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/anybidirectionalcollection\/reduce(_:_:)-92rez"]}],"sections":[],"abstract":[{"text":"Returns the result of combining the elements of the sequence using the","type":"text"},{"text":" ","type":"text"},{"text":"given closure.","type":"text"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyBidirectionalCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyBidirectionalCollection\/Sequence-Implementations"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyBidirectionalCollection\/reduce(_:_:)-92rez"},"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"modules":[{"name":"Compute","relatedModules":["Swift"]}],"title":"reduce(_:_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"reduce"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Result"},{"text":">(","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Result"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Result"}],"extendedModule":"Swift","externalID":"s:STsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlF::SYNTHESIZED::s:s26AnyBidirectionalCollectionV","symbolKind":"method","roleHeading":"Instance Method","role":"symbol"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"reduce","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"initialResult"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"text":", ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"nextPartialResult","kind":"internalParam"},{"kind":"text","text":": ("},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Result","kind":"typeIdentifier"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"initialResult","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value to use as the initial accumulating value."},{"type":"text","text":" "},{"code":"initialResult","type":"codeVoice"},{"text":" is passed to ","type":"text"},{"code":"nextPartialResult","type":"codeVoice"},{"type":"text","text":" the first time the"},{"type":"text","text":" "},{"text":"closure is executed.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"A closure that combines an accumulating value and","type":"text"},{"text":" ","type":"text"},{"text":"an element of the sequence into a new accumulating value, to be used","type":"text"},{"type":"text","text":" "},{"text":"in the next call of the ","type":"text"},{"code":"nextPartialResult","type":"codeVoice"},{"type":"text","text":" closure or returned to"},{"text":" ","type":"text"},{"type":"text","text":"the caller."}],"type":"paragraph"}],"name":"nextPartialResult"}]},{"kind":"content","content":[{"text":"Return Value","level":2,"anchor":"return-value","type":"heading"},{"inlineContent":[{"text":"The final accumulated value. If the sequence has no elements,","type":"text"},{"text":" ","type":"text"},{"text":"the result is ","type":"text"},{"code":"initialResult","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"reduce(_:_:)"},{"type":"text","text":" method to produce a single value from the elements"},{"type":"text","text":" "},{"type":"text","text":"of an entire sequence. For example, you can use this method on an array"},{"type":"text","text":" "},{"type":"text","text":"of numbers to find their sum or product."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"code":"nextPartialResult","type":"codeVoice"},{"type":"text","text":" closure is called sequentially with an"},{"text":" ","type":"text"},{"type":"text","text":"accumulating value initialized to "},{"code":"initialResult","type":"codeVoice"},{"type":"text","text":" and each element of"},{"type":"text","text":" "},{"text":"the sequence. This example shows how to find the sum of an array of","type":"text"},{"text":" ","type":"text"},{"text":"numbers.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let numbers = [1, 2, 3, 4]","let numberSum = numbers.reduce(0, { x, y in","    x + y","})","\/\/ numberSum == 10"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"numbers.reduce(_:_:)"},{"text":" is called, the following steps occur:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"nextPartialResult"},{"text":" closure is called with ","type":"text"},{"type":"codeVoice","code":"initialResult"},{"text":"—","type":"text"},{"code":"0","type":"codeVoice"},{"type":"text","text":" "},{"text":"in this case—and the first element of ","type":"text"},{"code":"numbers","type":"codeVoice"},{"type":"text","text":", returning the sum:"},{"text":" ","type":"text"},{"type":"codeVoice","code":"1"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The closure is called again repeatedly with the previous call’s return","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value and each element of the sequence."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"When the sequence is exhausted, the last value returned from the"},{"type":"text","text":" "},{"type":"text","text":"closure is returned to the caller."}],"type":"paragraph"}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"text":"If the sequence has no elements, ","type":"text"},{"code":"nextPartialResult","type":"codeVoice"},{"type":"text","text":" is never executed"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"initialResult","type":"codeVoice"},{"type":"text","text":" is the result of the call to "},{"code":"reduce(_:_:)","type":"codeVoice"},{"type":"text","text":"."}]},{"style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":"), where "},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"type":"text","text":" is the length of the sequence."}],"type":"paragraph"}],"name":"Complexity"}],"kind":"content"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/AnyBidirectionalCollection/reduce(_:_:)-92rez":{"url":"\/documentation\/compute\/anybidirectionalcollection\/reduce(_:_:)-92rez","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyBidirectionalCollection\/reduce(_:_:)-92rez","title":"reduce(_:_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reduce","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Result","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"Result","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}],"type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Returns the result of combining the elements of the sequence using the"},{"type":"text","text":" "},{"type":"text","text":"given closure."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyBidirectionalCollection/Sequence-Implementations":{"role":"collectionGroup","title":"Sequence Implementations","type":"topic","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyBidirectionalCollection\/Sequence-Implementations","abstract":[],"url":"\/documentation\/compute\/anybidirectionalcollection\/sequence-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyBidirectionalCollection":{"abstract":[{"text":"A type-erased wrapper over any collection with indices that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"support bidirectional traversal."}],"navigatorTitle":[{"text":"AnyBidirectionalCollection","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyBidirectionalCollection","title":"AnyBidirectionalCollection","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AnyBidirectionalCollection","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/anybidirectionalcollection"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}