{"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequence\/joined(separator:)-5e92i","interfaceLanguage":"swift"},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/lazysequence\/joined(separator:)-5e92i"]}],"metadata":{"roleHeading":"Instance Method","modules":[{"name":"Compute","relatedModules":["Swift"]}],"role":"symbol","externalID":"s:SKsSS7ElementRtzrlE6joined9separatorS2S_tF::SYNTHESIZED::s:s12LazySequenceV","symbolKind":"method","conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"String"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"extendedModule":"Swift","title":"joined(separator:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"joined","kind":"identifier"},{"kind":"text","text":"("},{"text":"separator","kind":"externalParam"},{"kind":"text","text":": "},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"}]},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequence\/BidirectionalCollection-Implementations"]]},"sections":[],"abstract":[{"text":"Returns a new string by concatenating the elements of the sequence,","type":"text"},{"text":" ","type":"text"},{"text":"adding the given separator between each element.","type":"text"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"joined","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String"},{"text":" = \"\") -> ","kind":"text"},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","text":"String"}],"platforms":["macOS"]}]},{"parameters":[{"name":"separator","content":[{"type":"paragraph","inlineContent":[{"text":"A string to insert between each of the elements","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in this sequence. The default separator is an empty string."}]}]}],"kind":"parameters"},{"content":[{"level":2,"anchor":"return-value","type":"heading","text":"Return Value"},{"inlineContent":[{"type":"text","text":"A single, concatenated string."}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"inlineContent":[{"text":"The following example shows how an array of strings can be joined to a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"single, comma-separated string:"}],"type":"paragraph"},{"syntax":null,"code":["let cast = [\"Vivien\", \"Marlon\", \"Kim\", \"Karl\"]","let list = cast.joined(separator: \", \")","print(list)","\/\/ Prints \"Vivien, Marlon, Kim, Karl\""],"type":"codeListing"}]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/String":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"String"}],"title":"String","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"String","kind":"identifier"}],"abstract":[{"type":"text","text":"A Unicode string value that is a collection of characters."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/string"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequence/joined(separator:)-5e92i":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequence\/joined(separator:)-5e92i","role":"symbol","title":"joined(separator:)","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"String","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"abstract":[{"type":"text","text":"Returns a new string by concatenating the elements of the sequence,"},{"text":" ","type":"text"},{"text":"adding the given separator between each element.","type":"text"}],"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"joined","kind":"identifier"},{"kind":"text","text":"("},{"text":"separator","kind":"externalParam"},{"kind":"text","text":": "},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":") -> ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"}],"url":"\/documentation\/compute\/lazysequence\/joined(separator:)-5e92i"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequence":{"abstract":[{"text":"A sequence containing the same elements as a ","type":"text"},{"code":"Base","type":"codeVoice"},{"type":"text","text":" sequence, but"},{"text":" ","type":"text"},{"type":"text","text":"on which some operations such as "},{"type":"codeVoice","code":"map"},{"text":" and ","type":"text"},{"code":"filter","type":"codeVoice"},{"text":" are","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"implemented lazily."}],"role":"symbol","navigatorTitle":[{"text":"LazySequence","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazySequence"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequence","type":"topic","title":"LazySequence","url":"\/documentation\/compute\/lazysequence"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequence/BidirectionalCollection-Implementations":{"kind":"article","role":"collectionGroup","type":"topic","title":"BidirectionalCollection Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequence\/BidirectionalCollection-Implementations","url":"\/documentation\/compute\/lazysequence\/bidirectionalcollection-implementations","abstract":[]}}}