{"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"text":"Returns a sequence containing all but the given number of initial","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequence\/dropFirst(_:)","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"Compute","relatedModules":["Swift"]}],"roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dropFirst"},{"kind":"text","text":"("},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"text":"DropFirstSequence","kind":"typeIdentifier","preciseIdentifier":"s:s17DropFirstSequenceV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"externalID":"s:STsE9dropFirstys04DropB8SequenceVyxGSiF::SYNTHESIZED::s:s12LazySequenceV","extendedModule":"Swift","symbolKind":"method","title":"dropFirst(_:)","role":"symbol"},"sections":[],"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dropFirst"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"k","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":" = 1) -> "},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DropFirstSequence","kind":"typeIdentifier","preciseIdentifier":"s:s17DropFirstSequenceV","text":"DropFirstSequence"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The number of elements to drop from the beginning of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the sequence. "},{"code":"k","type":"codeVoice"},{"type":"text","text":" must be greater than or equal to zero."}]}],"name":"k"}]},{"content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"inlineContent":[{"text":"A sequence starting after the specified number of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"elements."}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the number of elements to drop exceeds the number of elements in"},{"text":" ","type":"text"},{"text":"the sequence, the result is an empty sequence.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let numbers = [1, 2, 3, 4, 5]","print(numbers.dropFirst(2))","\/\/ Prints \"[3, 4, 5]\"","print(numbers.dropFirst(10))","\/\/ Prints \"[]\""]},{"name":"Complexity","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O(1), with O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"k"}]},{"text":") deferred to each iteration of the result,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"k"}]},{"type":"text","text":" is the number of elements to drop from the beginning of"},{"type":"text","text":" "},{"type":"text","text":"the sequence."}]}],"style":"note","type":"aside"}]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequence\/Sequence-Implementations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/lazysequence\/dropfirst(_:)"]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequence/Sequence-Implementations":{"title":"Sequence Implementations","type":"topic","abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequence\/Sequence-Implementations","url":"\/documentation\/compute\/lazysequence\/sequence-implementations","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequence":{"abstract":[{"text":"A sequence containing the same elements as a ","type":"text"},{"code":"Base","type":"codeVoice"},{"type":"text","text":" sequence, but"},{"text":" ","type":"text"},{"type":"text","text":"on which some operations such as "},{"type":"codeVoice","code":"map"},{"text":" and ","type":"text"},{"code":"filter","type":"codeVoice"},{"text":" are","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"implemented lazily."}],"role":"symbol","navigatorTitle":[{"text":"LazySequence","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazySequence"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequence","type":"topic","title":"LazySequence","url":"\/documentation\/compute\/lazysequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequence/dropFirst(_:)":{"kind":"symbol","url":"\/documentation\/compute\/lazysequence\/dropfirst(_:)","abstract":[{"text":"Returns a sequence containing all but the given number of initial","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequence\/dropFirst(_:)","title":"dropFirst(_:)","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"dropFirst","kind":"identifier"},{"kind":"text","text":"("},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"DropFirstSequence","kind":"typeIdentifier","preciseIdentifier":"s:s17DropFirstSequenceV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/DropFirstSequence":{"abstract":[{"type":"text","text":"A sequence that lazily consumes and drops "},{"type":"codeVoice","code":"n"},{"type":"text","text":" elements from an underlying"},{"text":" ","type":"text"},{"code":"Base","type":"codeVoice"},{"type":"text","text":" iterator before possibly returning the first available element."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DropFirstSequence"}],"type":"topic","role":"symbol","url":"\/documentation\/compute\/dropfirstsequence","navigatorTitle":[{"kind":"identifier","text":"DropFirstSequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DropFirstSequence","title":"DropFirstSequence","kind":"symbol"}}}