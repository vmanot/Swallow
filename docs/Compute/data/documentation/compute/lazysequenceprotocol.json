{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"LazySequenceProtocol","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"Sequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","kind":"typeIdentifier","preciseIdentifier":"s:ST"}]}]},{"content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Lazy sequences can be used to avoid needless storage allocation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and computation, because they use an underlying sequence for"},{"type":"text","text":" "},{"text":"storage and compute their elements on demand. For example, ","type":"text"},{"type":"codeVoice","code":"doubled"},{"text":" in","type":"text"},{"type":"text","text":" "},{"text":"this code sample is a sequence containing the values ","type":"text"},{"type":"codeVoice","code":"2"},{"type":"text","text":", "},{"type":"codeVoice","code":"4"},{"text":", and ","type":"text"},{"code":"6","type":"codeVoice"},{"text":".","type":"text"}]},{"syntax":null,"code":["let doubled = [1, 2, 3].lazy.map { $0 * 2 }"],"type":"codeListing"},{"inlineContent":[{"text":"Each time an element of the lazy sequence ","type":"text"},{"type":"codeVoice","code":"doubled"},{"text":" is accessed, the","type":"text"},{"type":"text","text":" "},{"text":"closure accesses and transforms an element of the underlying array.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Sequence operations that take closure arguments, such as "},{"code":"map(_:)","type":"codeVoice"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"code":"filter(_:)","type":"codeVoice"},{"type":"text","text":", are normally eager: They use the closure immediately and"},{"type":"text","text":" "},{"type":"text","text":"return a new array. When you use the "},{"type":"codeVoice","code":"lazy"},{"type":"text","text":" property, you give the standard"},{"type":"text","text":" "},{"text":"library explicit permission to store the closure and the sequence","type":"text"},{"text":" ","type":"text"},{"text":"in the result, and defer computation until it is needed.","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","anchor":"Adding-New-Lazy-Operations","text":"Adding New Lazy Operations"},{"type":"paragraph","inlineContent":[{"text":"To add a new lazy sequence operation, extend this protocol with","type":"text"},{"type":"text","text":" "},{"text":"a method that returns a lazy wrapper that itself conforms to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"LazySequenceProtocol"},{"text":".  For example, an eager ","type":"text"},{"type":"codeVoice","code":"scan(_:_:)"},{"text":" ","type":"text"},{"type":"text","text":"method is defined as follows:"}]},{"code":["extension Sequence {","    \/\/\/ Returns an array containing the results of","    \/\/\/","    \/\/\/   p.reduce(initial, nextPartialResult)","    \/\/\/","    \/\/\/ for each prefix `p` of `self`, in order from shortest to","    \/\/\/ longest. For example:","    \/\/\/","    \/\/\/     (1..<6).scan(0, +) \/\/ [0, 1, 3, 6, 10, 15]","    \/\/\/","    \/\/\/ - Complexity: O(n)","    func scan<Result>(","        _ initial: Result,","        _ nextPartialResult: (Result, Element) -> Result","    ) -> [Result] {","        var result = [initial]","        for x in self {","            result.append(nextPartialResult(result.last!, x))","        }","        return result","    }","}"],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"You can build a sequence type that lazily computes the elements in the"},{"type":"text","text":" "},{"text":"result of a scan:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct LazyScanSequence<Base: Sequence, Result>","    : LazySequenceProtocol","{","    let initial: Result","    let base: Base","    let nextPartialResult:","        (Result, Base.Element) -> Result","","    struct Iterator: IteratorProtocol {","        var base: Base.Iterator","        var nextElement: Result?","        let nextPartialResult:","            (Result, Base.Element) -> Result","        ","        mutating func next() -> Result? {","            return nextElement.map { result in","                nextElement = base.next().map {","                    nextPartialResult(result, $0)","                }","                return result","            }","        }","    }","    ","    func makeIterator() -> Iterator {","        return Iterator(","            base: base.makeIterator(),","            nextElement: initial as Result?,","            nextPartialResult: nextPartialResult)","    }","}"],"syntax":null},{"inlineContent":[{"type":"text","text":"Finally, you can give all lazy sequences a lazy "},{"code":"scan(_:_:)","type":"codeVoice"},{"type":"text","text":" method:"}],"type":"paragraph"},{"code":["extension LazySequenceProtocol {","    func scan<Result>(","        _ initial: Result,","        _ nextPartialResult: @escaping (Result, Element) -> Result","    ) -> LazyScanSequence<Self, Result> {","        return LazyScanSequence(","            initial: initial, base: self, nextPartialResult: nextPartialResult)","    }","}"],"type":"codeListing","syntax":null},{"inlineContent":[{"text":"With this type and extension method, you can call ","type":"text"},{"type":"codeVoice","code":".lazy.scan(_:_:)"},{"text":" on any","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sequence to create a lazily computed scan. The resulting "},{"code":"LazyScanSequence","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"is itself lazy, too, so further sequence operations also defer computation."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The explicit permission to implement operations lazily applies"},{"type":"text","text":" "},{"type":"text","text":"only in contexts where the sequence is statically known to conform to"},{"type":"text","text":" "},{"type":"codeVoice","code":"LazySequenceProtocol"},{"text":". In the following example, because the extension","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"applies only to "},{"code":"Sequence","type":"codeVoice"},{"text":", side-effects such as the accumulation of","type":"text"},{"text":" ","type":"text"},{"code":"result","type":"codeVoice"},{"text":" are never unexpectedly dropped or deferred:","type":"text"}]},{"syntax":null,"code":["extension Sequence where Element == Int {","    func sum() -> Int {","        var result = 0","        _ = self.map { result += $0 }","        return result","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Donâ€™t actually use ","type":"text"},{"code":"map","type":"codeVoice"},{"text":" for this purpose, however, because it creates","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and discards the resulting array. Instead, use "},{"code":"reduce","type":"codeVoice"},{"type":"text","text":" for summing"},{"text":" ","type":"text"},{"type":"text","text":"operations, or "},{"code":"forEach","type":"codeVoice"},{"type":"text","text":" or a "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loop for operations with side"},{"type":"text","text":" "},{"text":"effects.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence"],"type":"inheritsFrom","title":"Inherits From"},{"title":"Inherited By","kind":"relationships","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyCollectionProtocol"],"type":"inheritedBy"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyDropWhileSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReversedCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Slice"],"kind":"relationships","type":"conformingTypes","title":"Conforming Types"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"topicSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/Elements-swift.associatedtype"],"generated":true,"anchor":"Associated-Types","title":"Associated Types"},{"title":"Instance Properties","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/elements-6570c","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/lazy-2u2ey","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/lazy-4q4ln"],"generated":true,"anchor":"Instance-Properties"},{"anchor":"Instance-Methods","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/compactMap(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/drop(while:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/filter(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/flatMap(_:)-11y2e","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/flatMap(_:)-9blrr","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/joined()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/map(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/prefix(while:)"],"title":"Instance Methods"}],"metadata":{"title":"LazySequenceProtocol","navigatorTitle":[{"text":"LazySequenceProtocol","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LazySequenceProtocol","kind":"identifier"}],"role":"symbol","symbolKind":"protocol","modules":[{"name":"Compute"}],"roleHeading":"Protocol","externalID":"s:s20LazySequenceProtocolP"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/lazysequenceprotocol"]}],"kind":"symbol","sections":[],"abstract":[{"type":"text","text":"A sequence on which normally-eager sequence operations are implemented"},{"text":" ","type":"text"},{"text":"lazily.","type":"text"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequence":{"navigatorTitle":[{"kind":"identifier","text":"LazySequence"}],"title":"LazySequence","abstract":[{"type":"text","text":"A sequence containing the same elements as a "},{"type":"codeVoice","code":"Base"},{"text":" sequence, but","type":"text"},{"text":" ","type":"text"},{"text":"on which some operations such as ","type":"text"},{"type":"codeVoice","code":"map"},{"type":"text","text":" and "},{"code":"filter","type":"codeVoice"},{"type":"text","text":" are"},{"type":"text","text":" "},{"type":"text","text":"implemented lazily."}],"role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazySequence"}],"type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"code":"Collection","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/compute\/lazysequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequenceProtocol":{"type":"topic","url":"\/documentation\/compute\/lazysequenceprotocol","role":"symbol","title":"LazySequenceProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"LazySequenceProtocol","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol","navigatorTitle":[{"text":"LazySequenceProtocol","kind":"identifier"}],"abstract":[{"text":"A sequence on which normally-eager sequence operations are implemented","type":"text"},{"type":"text","text":" "},{"type":"text","text":"lazily."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequenceProtocol/lazy-4q4ln":{"type":"topic","title":"lazy","url":"\/documentation\/compute\/lazysequenceprotocol\/lazy-4q4ln","abstract":[],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/lazy-4q4ln","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"lazy","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12LazySequenceV","kind":"typeIdentifier","text":"LazySequence"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:s20LazySequenceProtocolP8ElementsQa","text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequenceProtocol/Elements-swift.associatedtype":{"required":true,"role":"symbol","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":" that can contain the same elements as this one,"},{"text":" ","type":"text"},{"type":"text","text":"possibly with a simpler type."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/Elements-swift.associatedtype","type":"topic","kind":"symbol","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Elements","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"Sequence","preciseIdentifier":"s:ST","kind":"typeIdentifier"},{"text":" = ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"title":"Elements","url":"\/documentation\/compute\/lazysequenceprotocol\/elements-swift.associatedtype"},"doc://com.swallow.documentation.Compute/documentation/Compute/Slice":{"navigatorTitle":[{"kind":"identifier","text":"Slice"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Slice","kind":"identifier"}],"title":"Slice","abstract":[{"text":"A view into a subsequence of elements of another collection.","type":"text"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"text":" and ","type":"text"},{"code":"LazySequenceProtocol","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Slice","kind":"symbol","url":"\/documentation\/compute\/slice","type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequenceProtocol/joined()":{"abstract":[{"text":"Returns a lazy sequence that concatenates the elements of this sequence of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sequences."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"joined","kind":"identifier"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:s12LazySequenceV","text":"LazySequence","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"FlattenSequence","preciseIdentifier":"s:s15FlattenSequenceV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:s20LazySequenceProtocolP8ElementsQa","text":"Elements","kind":"typeIdentifier"},{"text":">>","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/joined()","kind":"symbol","type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":"."}]},"url":"\/documentation\/compute\/lazysequenceprotocol\/joined()","role":"symbol","title":"joined()"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterSequence":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence","url":"\/documentation\/compute\/lazyfiltersequence","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"LazyFilterSequence","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"LazyFilterSequence"}],"title":"LazyFilterSequence","abstract":[{"text":"A sequence whose elements consist of the elements of some base","type":"text"},{"type":"text","text":" "},{"text":"sequence that also satisfy a given predicate.","type":"text"}],"kind":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"code":"Collection","type":"codeVoice"},{"text":".","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyCollectionProtocol":{"title":"LazyCollectionProtocol","url":"\/documentation\/compute\/lazycollectionprotocol","role":"symbol","abstract":[],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyCollectionProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazyCollectionProtocol"}],"navigatorTitle":[{"text":"LazyCollectionProtocol","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyMapSequence":{"url":"\/documentation\/compute\/lazymapsequence","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Sequence"},{"text":" whose elements consist of those in a ","type":"text"},{"code":"Base","type":"codeVoice"},{"type":"text","text":" "},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":" passed through a transform function returning "},{"type":"codeVoice","code":"Element"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These elements are computed lazily, each time theyâ€™re read, by"},{"type":"text","text":" "},{"type":"text","text":"calling the transform function on a base element."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"LazyMapSequence"}],"type":"topic","title":"LazyMapSequence","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"LazyMapSequence","kind":"identifier"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Base","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":", "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":"."}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyDropWhileSequence":{"title":"LazyDropWhileSequence","url":"\/documentation\/compute\/lazydropwhilesequence","abstract":[{"type":"text","text":"A sequence whose elements consist of the elements that follow the initial"},{"text":" ","type":"text"},{"text":"consecutive elements of some base sequence that satisfy a given predicate.","type":"text"}],"conformance":{"constraints":[{"code":"Base","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LazyDropWhileSequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyDropWhileSequence","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"LazyDropWhileSequence","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequenceProtocol/prefix(while:)":{"kind":"symbol","url":"\/documentation\/compute\/lazysequenceprotocol\/prefix(while:)","role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/prefix(while:)","abstract":[{"type":"text","text":"Returns a lazy sequence of the initial consecutive elements that satisfy"},{"text":" ","type":"text"},{"type":"codeVoice","code":"predicate"},{"text":".","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"prefix","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"while"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s20LazySequenceProtocolP8ElementsQa","text":"Elements"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s23LazyPrefixWhileSequenceV","text":"LazyPrefixWhileSequence"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:s20LazySequenceProtocolP8ElementsQa","kind":"typeIdentifier","text":"Elements"},{"text":">","kind":"text"}],"title":"prefix(while:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequenceProtocol/filter(_:)":{"title":"filter(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"filter","kind":"identifier"},{"text":"((","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s20LazySequenceProtocolP8ElementsQa","text":"Elements"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s18LazyFilterSequenceV","text":"LazyFilterSequence"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:s20LazySequenceProtocolP8ElementsQa","text":"Elements"},{"text":">","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/filter(_:)","kind":"symbol","role":"symbol","abstract":[{"text":"Returns the elements of ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" that satisfy "},{"code":"isIncluded","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic","url":"\/documentation\/compute\/lazysequenceprotocol\/filter(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequenceProtocol/elements-6570c":{"kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"elements","kind":"identifier"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:s20LazySequenceProtocolP8ElementsQa","kind":"typeIdentifier","text":"Elements"}],"type":"topic","url":"\/documentation\/compute\/lazysequenceprotocol\/elements-6570c","title":"elements","abstract":[{"type":"text","text":"A sequence containing the same elements as this one, possibly with"},{"type":"text","text":" "},{"text":"a simpler type.","type":"text"}],"defaultImplementations":1,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/elements-6570c","required":true,"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequenceProtocol/flatMap(_:)-9blrr":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"flatMap","kind":"identifier"},{"kind":"text","text":"<"},{"text":"SegmentOfResult","kind":"genericParameter"},{"kind":"text","text":">(("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Elements","kind":"typeIdentifier","preciseIdentifier":"s:s20LazySequenceProtocolP8ElementsQa"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") -> "},{"text":"SegmentOfResult","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"LazySequence","preciseIdentifier":"s:s12LazySequenceV"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s15FlattenSequenceV","text":"FlattenSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s15LazyMapSequenceV","text":"LazyMapSequence","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier","preciseIdentifier":"s:s20LazySequenceProtocolP8ElementsQa"},{"text":", ","kind":"text"},{"text":"SegmentOfResult","kind":"typeIdentifier"},{"kind":"text","text":">>>"}],"abstract":[{"type":"text","text":"Returns the concatenated results of mapping the given transformation over"},{"text":" ","type":"text"},{"text":"this sequence.","type":"text"}],"url":"\/documentation\/compute\/lazysequenceprotocol\/flatmap(_:)-9blrr","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/flatMap(_:)-9blrr","role":"symbol","title":"flatMap(_:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequenceProtocol/lazy-2u2ey":{"abstract":[],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lazy","kind":"identifier"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s20LazySequenceProtocolP8ElementsQa","text":"Elements"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/lazy-2u2ey","kind":"symbol","type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"Elements"},{"type":"text","text":" conforms to "},{"code":"LazySequenceProtocol","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/compute\/lazysequenceprotocol\/lazy-2u2ey","role":"symbol","title":"lazy"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReversedCollection":{"title":"ReversedCollection","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ReversedCollection","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReversedCollection","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A collection that presents the elements of its base collection"},{"type":"text","text":" "},{"type":"text","text":"in reverse order."}],"type":"topic","url":"\/documentation\/compute\/reversedcollection","navigatorTitle":[{"kind":"identifier","text":"ReversedCollection"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"code":"BidirectionalCollection","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"LazySequenceProtocol","type":"codeVoice"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequenceProtocol/compactMap(_:)":{"abstract":[{"text":"Returns the non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" results of mapping the given transformation over","type":"text"},{"text":" ","type":"text"},{"text":"this sequence.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"compactMap","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ElementOfResult"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier","preciseIdentifier":"s:s20LazySequenceProtocolP8ElementsQa"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"ElementOfResult","kind":"typeIdentifier"},{"kind":"text","text":"?) -> "},{"preciseIdentifier":"s:s15LazyMapSequenceV","text":"LazyMapSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"LazyFilterSequence","preciseIdentifier":"s:s18LazyFilterSequenceV"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s15LazyMapSequenceV","text":"LazyMapSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier","preciseIdentifier":"s:s20LazySequenceProtocolP8ElementsQa"},{"text":", ","kind":"text"},{"text":"ElementOfResult","kind":"typeIdentifier"},{"text":"?>>, ","kind":"text"},{"kind":"typeIdentifier","text":"ElementOfResult"},{"kind":"text","text":">"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/compactMap(_:)","kind":"symbol","type":"topic","url":"\/documentation\/compute\/lazysequenceprotocol\/compactmap(_:)","role":"symbol","title":"compactMap(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequenceProtocol/map(_:)":{"title":"map(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"map","kind":"identifier"},{"kind":"text","text":"<"},{"text":"U","kind":"genericParameter"},{"kind":"text","text":">(("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"U"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s15LazyMapSequenceV","text":"LazyMapSequence"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Elements","kind":"typeIdentifier","preciseIdentifier":"s:s20LazySequenceProtocolP8ElementsQa"},{"text":", ","kind":"text"},{"text":"U","kind":"typeIdentifier"},{"kind":"text","text":">"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/map(_:)","kind":"symbol","role":"symbol","abstract":[{"text":"Returns a ","type":"text"},{"type":"codeVoice","code":"LazyMapSequence"},{"type":"text","text":" over this "},{"type":"codeVoice","code":"Sequence"},{"text":".  The elements of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the result are computed lazily, each time they are read, by"},{"text":" ","type":"text"},{"type":"text","text":"calling "},{"code":"transform","type":"codeVoice"},{"type":"text","text":" function on a base element."}],"type":"topic","url":"\/documentation\/compute\/lazysequenceprotocol\/map(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequenceProtocol/flatMap(_:)-11y2e":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/flatMap(_:)-11y2e","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"flatMap"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ElementOfResult"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Elements","preciseIdentifier":"s:s20LazySequenceProtocolP8ElementsQa","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":") -> ","kind":"text"},{"text":"ElementOfResult","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s15LazyMapSequenceV","text":"LazyMapSequence"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"LazyFilterSequence","preciseIdentifier":"s:s18LazyFilterSequenceV"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s15LazyMapSequenceV","text":"LazyMapSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements","preciseIdentifier":"s:s20LazySequenceProtocolP8ElementsQa"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ElementOfResult"},{"text":"?>>, ","kind":"text"},{"kind":"typeIdentifier","text":"ElementOfResult"},{"text":">","kind":"text"}],"deprecated":true,"kind":"symbol","type":"topic","title":"flatMap(_:)","url":"\/documentation\/compute\/lazysequenceprotocol\/flatmap(_:)-11y2e","abstract":[{"text":"Returns the non-","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" results of mapping the given transformation over"},{"type":"text","text":" "},{"text":"this sequence.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"url":"\/documentation\/compute\/sequence","navigatorTitle":[{"kind":"identifier","text":"Sequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","title":"Sequence","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Sequence","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequenceProtocol/drop(while:)":{"type":"topic","abstract":[{"type":"text","text":"Returns a lazy sequence that skips any initial elements that satisfy"},{"type":"text","text":" "},{"type":"codeVoice","code":"predicate"},{"type":"text","text":"."}],"title":"drop(while:)","kind":"symbol","url":"\/documentation\/compute\/lazysequenceprotocol\/drop(while:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol\/drop(while:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"drop","kind":"identifier"},{"text":"(","kind":"text"},{"text":"while","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier","preciseIdentifier":"s:s20LazySequenceProtocolP8ElementsQa"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s21LazyDropWhileSequenceV","kind":"typeIdentifier","text":"LazyDropWhileSequence"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier","preciseIdentifier":"s:s20LazySequenceProtocolP8ElementsQa"},{"kind":"text","text":">"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileSequence":{"title":"LazyPrefixWhileSequence","url":"\/documentation\/compute\/lazyprefixwhilesequence","role":"symbol","conformance":{"constraints":[{"code":"Base","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Collection"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"abstract":[{"type":"text","text":"A sequence whose elements consist of the initial consecutive elements of"},{"text":" ","type":"text"},{"type":"text","text":"some base sequence that satisfy a given predicate."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazyPrefixWhileSequence"}],"navigatorTitle":[{"text":"LazyPrefixWhileSequence","kind":"identifier"}],"type":"topic"}}}