{"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/Sequence-Implementations"]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/reduce(into:_:)"},"kind":"symbol","metadata":{"symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"reduce","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"text":"Result","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ()) ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Result"}],"roleHeading":"Instance Method","title":"reduce(into:_:)","role":"symbol","externalID":"s:STsE6reduce4into_qd__qd__n_yqd__z_7ElementQztKXEtKlF::SYNTHESIZED::s:7Compute17ArrayTreeChildrenV","extendedModule":"Swift","modules":[{"relatedModules":["Swift"],"name":"Compute"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/arraytreechildren\/reduce(into:_:)"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"reduce","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Result"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"into"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"initialResult"},{"text":": ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"updateAccumulatingResult"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ()) ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Result"}],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"initialResult","content":[{"inlineContent":[{"type":"text","text":"The value to use as the initial accumulating value."}],"type":"paragraph"}]},{"name":"updateAccumulatingResult","content":[{"inlineContent":[{"text":"A closure that updates the accumulating","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value with an element of the sequence."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"text":"Return Value","anchor":"return-value","type":"heading","level":2},{"inlineContent":[{"text":"The final accumulated value. If the sequence has no elements,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the result is "},{"code":"initialResult","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"inlineContent":[{"type":"text","text":"Use the "},{"code":"reduce(into:_:)","type":"codeVoice"},{"type":"text","text":" method to produce a single value from the"},{"type":"text","text":" "},{"text":"elements of an entire sequence. For example, you can use this method on an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"array of integers to filter adjacent equal entries or count frequencies."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method is preferred over "},{"code":"reduce(_:_:)","type":"codeVoice"},{"type":"text","text":" for efficiency when the"},{"type":"text","text":" "},{"type":"text","text":"result is a copy-on-write type, for example an Array or a Dictionary."}]},{"inlineContent":[{"type":"text","text":"The "},{"code":"updateAccumulatingResult","type":"codeVoice"},{"type":"text","text":" closure is called sequentially with a"},{"type":"text","text":" "},{"type":"text","text":"mutable accumulating value initialized to "},{"code":"initialResult","type":"codeVoice"},{"text":" and each element","type":"text"},{"text":" ","type":"text"},{"text":"of the sequence. This example shows how to build a dictionary of letter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"frequencies of a string."}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let letters = \"abracadabra\"","let letterCount = letters.reduce(into: [:]) { counts, letter in","    counts[letter, default: 0] += 1","}","\/\/ letterCount == [\"a\": 5, \"b\": 2, \"r\": 2, \"c\": 1, \"d\": 1]"]},{"type":"paragraph","inlineContent":[{"text":"When ","type":"text"},{"type":"codeVoice","code":"letters.reduce(into:_:)"},{"type":"text","text":" is called, the following steps occur:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"updateAccumulatingResult"},{"type":"text","text":" closure is called with the initial"},{"text":" ","type":"text"},{"type":"text","text":"accumulating value—"},{"code":"[:]","type":"codeVoice"},{"text":" in this case—and the first character of","type":"text"},{"text":" ","type":"text"},{"code":"letters","type":"codeVoice"},{"text":", modifying the accumulating value by setting ","type":"text"},{"code":"1","type":"codeVoice"},{"type":"text","text":" for the key"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\"a\""},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The closure is called again repeatedly with the updated accumulating"},{"type":"text","text":" "},{"type":"text","text":"value and each element of the sequence."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the sequence is exhausted, the accumulating value is returned to"},{"type":"text","text":" "},{"type":"text","text":"the caller."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the sequence has no elements, "},{"type":"codeVoice","code":"updateAccumulatingResult"},{"type":"text","text":" is never"},{"type":"text","text":" "},{"type":"text","text":"executed and "},{"type":"codeVoice","code":"initialResult"},{"type":"text","text":" is the result of the call to"},{"text":" ","type":"text"},{"code":"reduce(into:_:)","type":"codeVoice"},{"type":"text","text":"."}]},{"name":"Complexity","content":[{"type":"paragraph","inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" is the length of the sequence."}]}],"style":"note","type":"aside"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"Returns the result of combining the elements of the sequence using the"},{"text":" ","type":"text"},{"type":"text","text":"given closure."}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren/Sequence-Implementations":{"kind":"article","title":"Sequence Implementations","abstract":[],"role":"collectionGroup","type":"topic","url":"\/documentation\/compute\/arraytreechildren\/sequence-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/Sequence-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ArrayTreeChildren","kind":"identifier"}],"title":"ArrayTreeChildren","navigatorTitle":[{"text":"ArrayTreeChildren","kind":"identifier"}],"type":"topic","abstract":[],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren","url":"\/documentation\/compute\/arraytreechildren","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren/reduce(into:_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/reduce(into:_:)","type":"topic","title":"reduce(into:_:)","kind":"symbol","abstract":[{"type":"text","text":"Returns the result of combining the elements of the sequence using the"},{"text":" ","type":"text"},{"type":"text","text":"given closure."}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reduce"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Result"},{"text":">(","kind":"text"},{"text":"into","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Result"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ()) ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Result"}],"url":"\/documentation\/compute\/arraytreechildren\/reduce(into:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]}}}