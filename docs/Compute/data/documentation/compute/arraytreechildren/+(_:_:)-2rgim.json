{"abstract":[{"text":"Creates a new collection by concatenating the elements of two collections.","type":"text"}],"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"+","kind":"identifier"},{"kind":"text","text":" "},{"text":"<","kind":"text"},{"text":"Other","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"internalParam","text":"lhs"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"rhs","kind":"internalParam"},{"kind":"text","text":": "},{"text":"Other","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":" "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Other","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableCollection","preciseIdentifier":"s:Sm","text":"RangeReplaceableCollection","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Other"},{"kind":"text","text":"."},{"text":"Element","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"}],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"name":"lhs","content":[{"type":"paragraph","inlineContent":[{"text":"A range-replaceable collection.","type":"text"}]}]},{"name":"rhs","content":[{"inlineContent":[{"text":"Another range-replaceable collection.","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"The two arguments must have the same ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":" type. For example, you can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"concatenate the elements of two integer arrays."}]},{"type":"codeListing","syntax":null,"code":["let lowerNumbers = [1, 2, 3, 4]","let higherNumbers: ContiguousArray = [5, 6, 7, 8, 9, 10]","let allNumbers = lowerNumbers + higherNumbers","print(allNumbers)","\/\/ Prints \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\""]},{"inlineContent":[{"type":"text","text":"The resulting collection has the type of the argument on the left-hand"},{"text":" ","type":"text"},{"type":"text","text":"side. In the example above, "},{"type":"codeVoice","code":"moreNumbers"},{"text":" has the same type as ","type":"text"},{"type":"codeVoice","code":"numbers"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which is ","type":"text"},{"code":"[Int]","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"}],"metadata":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"+"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Other"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Other"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"externalID":"s:SmsE1poiyxx_qd__tSmRd__7ElementQyd__ABRtzlFZ::SYNTHESIZED::s:7Compute17ArrayTreeChildrenV","extendedModule":"Swift","modules":[{"name":"Compute","relatedModules":["Swift"]}],"title":"+(_:_:)","role":"symbol","roleHeading":"Operator","symbolKind":"op"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/arraytreechildren\/+(_:_:)-2rgim"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/RangeReplaceableCollection-Implementations"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/+(_:_:)-2rgim"},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren/RangeReplaceableCollection-Implementations":{"kind":"article","url":"\/documentation\/compute\/arraytreechildren\/rangereplaceablecollection-implementations","abstract":[],"title":"RangeReplaceableCollection Implementations","role":"collectionGroup","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/RangeReplaceableCollection-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ArrayTreeChildren","kind":"identifier"}],"title":"ArrayTreeChildren","navigatorTitle":[{"text":"ArrayTreeChildren","kind":"identifier"}],"type":"topic","abstract":[],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren","url":"\/documentation\/compute\/arraytreechildren","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren/+(_:_:)-2rgim":{"url":"\/documentation\/compute\/arraytreechildren\/+(_:_:)-2rgim","abstract":[{"type":"text","text":"Creates a new collection by concatenating the elements of two collections."}],"kind":"symbol","role":"symbol","type":"topic","title":"+(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"+","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"<"},{"text":"Other","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Other"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/+(_:_:)-2rgim"},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeReplaceableCollection":{"type":"topic","title":"RangeReplaceableCollection","abstract":[{"text":"A collection that supports replacement of an arbitrary subrange of elements","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with the elements of another collection."}],"url":"\/documentation\/compute\/rangereplaceablecollection","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"RangeReplaceableCollection","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableCollection","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"RangeReplaceableCollection","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequenceâ€™s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]}}}