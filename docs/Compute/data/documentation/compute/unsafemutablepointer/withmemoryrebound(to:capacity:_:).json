{"kind":"symbol","metadata":{"title":"withMemoryRebound(to:capacity:_:)","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withMemoryRebound"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"E"},{"text":", ","kind":"text"},{"text":"Result","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"capacity"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":", ("},{"text":"UnsafeMutablePointer","kind":"typeIdentifier","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Result","kind":"typeIdentifier"}],"externalID":"s:SpsRi_zrlE17withMemoryRebound2to8capacity_qd_1_qd__m_Siqd_1_Spyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lF","extendedModule":"Swift","symbolKind":"method","role":"symbol","modules":[{"name":"Compute","relatedModules":["Swift"]}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/unsafemutablepointer\/withmemoryrebound(to:capacity:_:)"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/withMemoryRebound(to:capacity:_:)"},"abstract":[{"type":"text","text":"Executes the given closure while temporarily binding memory to"},{"type":"text","text":" "},{"type":"text","text":"the specified number of instances of the given type."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withMemoryRebound","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"E","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Result","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"type","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"capacity"},{"kind":"text","text":" "},{"kind":"internalParam","text":"count"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"body"},{"text":": (","kind":"text"},{"text":"UnsafeMutablePointer","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":"("},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Result"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":") -> "},{"text":"Result","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Error","kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":", "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":" : ~Copyable, "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":" : ~Copyable"}]}]},{"kind":"parameters","parameters":[{"name":"type","content":[{"type":"paragraph","inlineContent":[{"text":"The type to temporarily bind the memory referenced by this","type":"text"},{"type":"text","text":" "},{"type":"text","text":"pointer. The type "},{"code":"T","type":"codeVoice"},{"type":"text","text":" must be layout compatible"},{"type":"text","text":" "},{"type":"text","text":"with the pointer’s "},{"type":"codeVoice","code":"Pointee"},{"type":"text","text":" type."}]}]},{"name":"count","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The number of instances of "},{"type":"codeVoice","code":"T"},{"text":" in the re-bound region.","type":"text"}]}]},{"name":"body","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes a mutable typed pointer to the"},{"text":" ","type":"text"},{"type":"text","text":"same memory as this pointer, only bound to type "},{"type":"codeVoice","code":"T"},{"type":"text","text":". The closure’s"},{"type":"text","text":" "},{"type":"text","text":"pointer argument is valid only for the duration of the closure’s"},{"type":"text","text":" "},{"text":"execution. If ","type":"text"},{"code":"body","type":"codeVoice"},{"text":" has a return value, that value is also used as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the return value for the "},{"type":"codeVoice","code":"withMemoryRebound(to:capacity:_:)"},{"text":" method.","type":"text"}]}]}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Return Value","anchor":"return-value"},{"inlineContent":[{"text":"The return value, if any, of the ","type":"text"},{"type":"codeVoice","code":"body"},{"text":" closure parameter.","type":"text"}],"type":"paragraph"}]},{"content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this method when you have a pointer to memory bound to one type and"},{"type":"text","text":" "},{"text":"you need to access that memory as instances of another type. Accessing","type":"text"},{"text":" ","type":"text"},{"text":"memory as a type ","type":"text"},{"type":"codeVoice","code":"T"},{"text":" requires that the memory be bound to that type. A","type":"text"},{"type":"text","text":" "},{"text":"memory location may only be bound to one type at a time, so accessing","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the same memory as an unrelated type without first rebinding the memory"},{"text":" ","type":"text"},{"text":"is undefined.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The region of memory that starts at this pointer and covers "},{"code":"count","type":"codeVoice"},{"type":"text","text":" "},{"text":"strides of ","type":"text"},{"type":"codeVoice","code":"T"},{"text":" instances must be bound to ","type":"text"},{"code":"Pointee","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Any instance of "},{"code":"T","type":"codeVoice"},{"text":" within the re-bound region may be initialized or","type":"text"},{"type":"text","text":" "},{"text":"uninitialized. Every instance of ","type":"text"},{"type":"codeVoice","code":"Pointee"},{"text":" overlapping with a given","type":"text"},{"type":"text","text":" "},{"text":"instance of ","type":"text"},{"code":"T","type":"codeVoice"},{"type":"text","text":" should have the same initialization state (i.e."},{"text":" ","type":"text"},{"text":"initialized or uninitialized.) Accessing a ","type":"text"},{"code":"T","type":"codeVoice"},{"text":" whose underlying","type":"text"},{"type":"text","text":" "},{"code":"Pointee","type":"codeVoice"},{"type":"text","text":" storage is in a mixed initialization state shall be"},{"type":"text","text":" "},{"type":"text","text":"undefined behaviour."}]},{"type":"paragraph","inlineContent":[{"text":"The following example temporarily rebinds the memory of a ","type":"text"},{"code":"UInt64","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"pointer to "},{"type":"codeVoice","code":"Int64"},{"type":"text","text":", then modifies the signed integer."}]},{"type":"codeListing","syntax":null,"code":["let uint64Pointer: UnsafeMutablePointer<UInt64> = fetchValue()","uint64Pointer.withMemoryRebound(to: Int64.self, capacity: 1) {","    $0.pointee.negate()","}"]},{"inlineContent":[{"type":"text","text":"Because this pointer’s memory is no longer bound to its "},{"code":"Pointee","type":"codeVoice"},{"type":"text","text":" type"},{"type":"text","text":" "},{"type":"text","text":"while the "},{"code":"body","type":"codeVoice"},{"text":" closure executes, do not access memory using the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"original pointer from within "},{"type":"codeVoice","code":"body"},{"type":"text","text":". Instead, use the "},{"type":"codeVoice","code":"body"},{"text":" closure’s","type":"text"},{"type":"text","text":" "},{"type":"text","text":"pointer argument to access the values in memory as instances of type"},{"text":" ","type":"text"},{"type":"codeVoice","code":"T"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"After executing "},{"type":"codeVoice","code":"body"},{"text":", this method rebinds memory back to the original","type":"text"},{"text":" ","type":"text"},{"code":"Pointee","type":"codeVoice"},{"type":"text","text":" type."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"Only use this method to rebind the pointer’s memory to a type"},{"text":" ","type":"text"},{"type":"text","text":"that is layout compatible with the "},{"code":"Pointee","type":"codeVoice"},{"type":"text","text":" type. The stride of the"},{"type":"text","text":" "},{"type":"text","text":"temporary type ("},{"code":"T","type":"codeVoice"},{"type":"text","text":") may be an integer multiple or a whole fraction"},{"text":" ","type":"text"},{"text":"of ","type":"text"},{"code":"Pointee","type":"codeVoice"},{"type":"text","text":"’s stride, for example to point to one element of"},{"type":"text","text":" "},{"type":"text","text":"an aggregate."},{"text":" ","type":"text"},{"type":"text","text":"To bind a region of memory to a type that does not match these"},{"text":" ","type":"text"},{"type":"text","text":"requirements, convert the pointer to a raw pointer and use the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"bindMemory(to:)"},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"If "},{"type":"codeVoice","code":"T"},{"type":"text","text":" and "},{"code":"Pointee","type":"codeVoice"},{"type":"text","text":" have different alignments, this pointer"},{"text":" ","type":"text"},{"type":"text","text":"must be aligned with the larger of the two alignments."}],"type":"paragraph"}],"style":"note","name":"Note","type":"aside"}],"kind":"content"}],"sections":[],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer/withMemoryRebound(to:capacity:_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer\/withMemoryRebound(to:capacity:_:)","abstract":[{"type":"text","text":"Executes the given closure while temporarily binding memory to"},{"type":"text","text":" "},{"type":"text","text":"the specified number of instances of the given type."}],"role":"symbol","type":"topic","title":"withMemoryRebound(to:capacity:_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withMemoryRebound","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"E"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Result"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type, "},{"text":"capacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"preciseIdentifier":"s:Sp","text":"UnsafeMutablePointer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}],"url":"\/documentation\/compute\/unsafemutablepointer\/withmemoryrebound(to:capacity:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafeMutablePointer"}],"url":"\/documentation\/compute\/unsafemutablepointer","type":"topic","abstract":[{"type":"text","text":"A pointer for accessing and manipulating data of a"},{"text":" ","type":"text"},{"text":"specific type.","type":"text"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnsafeMutablePointer"}],"title":"UnsafeMutablePointer"},"doc://com.swallow.documentation.Compute/documentation/Compute/Error":{"url":"\/documentation\/compute\/error","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Error"}],"navigatorTitle":[{"text":"Error","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Error","type":"topic","role":"symbol","abstract":[{"type":"text","text":"A type representing an error value that can be thrown."}],"kind":"symbol","title":"Error"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}