{"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/documentation\/compute\/arraytreechildren"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren","interfaceLanguage":"swift"},"kind":"symbol","sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ArrayTreeChildren","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"TreeValue"},{"kind":"text","text":">"}]}]}],"metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ArrayTreeChildren","kind":"identifier"}],"symbolKind":"struct","roleHeading":"Structure","role":"symbol","title":"ArrayTreeChildren","navigatorTitle":[{"kind":"identifier","text":"ArrayTreeChildren"}],"externalID":"s:7Compute17ArrayTreeChildrenV","modules":[{"name":"Compute"}]},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"topicSections":[{"title":"Initializers","generated":true,"anchor":"Initializers","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/init()"]},{"anchor":"Type-Aliases","title":"Type Aliases","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/Element"]},{"title":"Default Implementations","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/BidirectionalCollection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/Collection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/ExpressibleByArrayLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/ExpressibleByDictionaryLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/MutableCollection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/RandomAccessCollection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/RangeReplaceableCollection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/Sequence-Implementations"],"anchor":"Default-Implementations","generated":true}],"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByArrayLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByDictionaryLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomAccessCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","doc:\/\/com.swallow.documentation.Compute\/7Swallow9CountableP"],"kind":"relationships","title":"Conforms To"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByArrayLiteral":{"kind":"symbol","url":"\/documentation\/compute\/expressiblebyarrayliteral","conformance":{"constraints":[{"type":"codeVoice","code":"TreeValue"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"navigatorTitle":[{"kind":"identifier","text":"ExpressibleByArrayLiteral"}],"abstract":[{"type":"text","text":"A type that can be initialized using an array literal."}],"title":"ExpressibleByArrayLiteral","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressibleByArrayLiteral"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByArrayLiteral"},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"abstract":[{"type":"text","text":"A type that can be compared for value equality."}],"title":"Equatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Equatable"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"TreeValue"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]},"role":"symbol","url":"\/documentation\/compute\/equatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren/Sequence-Implementations":{"kind":"article","title":"Sequence Implementations","abstract":[],"role":"collectionGroup","type":"topic","url":"\/documentation\/compute\/arraytreechildren\/sequence-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/Sequence-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ArrayTreeChildren","kind":"identifier"}],"title":"ArrayTreeChildren","navigatorTitle":[{"text":"ArrayTreeChildren","kind":"identifier"}],"type":"topic","abstract":[],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren","url":"\/documentation\/compute\/arraytreechildren","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeReplaceableCollection":{"kind":"symbol","url":"\/documentation\/compute\/rangereplaceablecollection","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"TreeValue","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" and "},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":"."}]},"navigatorTitle":[{"kind":"identifier","text":"RangeReplaceableCollection"}],"abstract":[{"text":"A collection that supports replacement of an arbitrary subrange of elements","type":"text"},{"type":"text","text":" "},{"text":"with the elements of another collection.","type":"text"}],"title":"RangeReplaceableCollection","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"RangeReplaceableCollection","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableCollection"},"doc://com.swallow.documentation.Compute/documentation/Compute/RandomAccessCollection":{"abstract":[{"text":"A collection that supports efficient random-access index traversal.","type":"text"}],"title":"RandomAccessCollection","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomAccessCollection","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"RandomAccessCollection","kind":"identifier"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"RandomAccessCollection"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"TreeValue"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]},"role":"symbol","url":"\/documentation\/compute\/randomaccesscollection"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren/Hashable-Implementations":{"kind":"article","url":"\/documentation\/compute\/arraytreechildren\/hashable-implementations","abstract":[],"title":"Hashable Implementations","role":"collectionGroup","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/Hashable-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren/Element":{"abstract":[{"text":"A type representing the sequenceâ€™s elements.","type":"text"}],"title":"ArrayTreeChildren.Element","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/Element","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"Element","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"Element","kind":"identifier"}],"role":"symbol","url":"\/documentation\/compute\/arraytreechildren\/element"},"doc://com.swallow.documentation.Compute/7Swallow9CountableP":{"type":"unresolvable","title":"Swallow.Countable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow9CountableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren/BidirectionalCollection-Implementations":{"kind":"article","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/BidirectionalCollection-Implementations","url":"\/documentation\/compute\/arraytreechildren\/bidirectionalcollection-implementations","abstract":[],"role":"collectionGroup","title":"BidirectionalCollection Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren/MutableCollection-Implementations":{"abstract":[],"title":"MutableCollection Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/MutableCollection-Implementations","kind":"article","type":"topic","role":"collectionGroup","url":"\/documentation\/compute\/arraytreechildren\/mutablecollection-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren/RangeReplaceableCollection-Implementations":{"kind":"article","url":"\/documentation\/compute\/arraytreechildren\/rangereplaceablecollection-implementations","abstract":[],"title":"RangeReplaceableCollection Implementations","role":"collectionGroup","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/RangeReplaceableCollection-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren/ExpressibleByArrayLiteral-Implementations":{"abstract":[],"title":"ExpressibleByArrayLiteral Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/ExpressibleByArrayLiteral-Implementations","kind":"article","type":"topic","role":"collectionGroup","url":"\/documentation\/compute\/arraytreechildren\/expressiblebyarrayliteral-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"kind":"symbol","url":"\/documentation\/compute\/hashable","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"TreeValue","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}]},"navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"abstract":[{"type":"text","text":"A type that can be hashed into a "},{"type":"codeVoice","code":"Hasher"},{"type":"text","text":" to produce an integer hash value."}],"title":"Hashable","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Hashable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection":{"abstract":[{"text":"A sequence whose elements can be traversed multiple times,","type":"text"},{"text":" ","type":"text"},{"text":"nondestructively, and accessed by an indexed subscript.","type":"text"}],"title":"Collection","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Collection","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"Collection","kind":"identifier"}],"conformance":{"constraints":[{"type":"codeVoice","code":"TreeValue"},{"text":" conforms to ","type":"text"},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","url":"\/documentation\/compute\/collection"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"kind":"symbol","url":"\/documentation\/compute\/sequence","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"TreeValue"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]},"navigatorTitle":[{"kind":"identifier","text":"Sequence"}],"abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}],"title":"Sequence","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Sequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren/ExpressibleByDictionaryLiteral-Implementations":{"url":"\/documentation\/compute\/arraytreechildren\/expressiblebydictionaryliteral-implementations","title":"ExpressibleByDictionaryLiteral Implementations","role":"collectionGroup","type":"topic","kind":"article","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/ExpressibleByDictionaryLiteral-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"abstract":[{"text":"A type whose values can be implicitly or explicitly copied.","type":"text"}],"title":"Copyable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Copyable","kind":"identifier"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Copyable"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"TreeValue"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" and "},{"code":"Escapable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"role":"symbol","url":"\/documentation\/compute\/copyable"},"doc://com.swallow.documentation.Compute/documentation/Compute/MutableCollection":{"kind":"symbol","url":"\/documentation\/compute\/mutablecollection","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"TreeValue","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"code":"Escapable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"navigatorTitle":[{"kind":"identifier","text":"MutableCollection"}],"abstract":[{"type":"text","text":"A collection that supports subscript assignment."}],"title":"MutableCollection","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MutableCollection"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableCollection"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren/Collection-Implementations":{"role":"collectionGroup","title":"Collection Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/Collection-Implementations","type":"topic","url":"\/documentation\/compute\/arraytreechildren\/collection-implementations","abstract":[],"kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"abstract":[],"title":"Sendable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Sendable","kind":"identifier"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"Sendable"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"TreeValue","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Escapable"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":".","type":"text"}]},"role":"symbol","url":"\/documentation\/compute\/sendable"},"doc://com.swallow.documentation.Compute/documentation/Compute/BidirectionalCollection":{"kind":"symbol","url":"\/documentation\/compute\/bidirectionalcollection","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"TreeValue","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" and "},{"code":"Escapable","type":"codeVoice"},{"text":".","type":"text"}]},"navigatorTitle":[{"kind":"identifier","text":"BidirectionalCollection"}],"abstract":[{"type":"text","text":"A collection that supports backward as well as forward traversal."}],"title":"BidirectionalCollection","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BidirectionalCollection"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalCollection"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren/init()":{"abstract":[{"text":"Creates a new, empty collection.","type":"text"}],"title":"init()","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/init()","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/compute\/arraytreechildren\/init()"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren/Equatable-Implementations":{"kind":"article","url":"\/documentation\/compute\/arraytreechildren\/equatable-implementations","abstract":[],"title":"Equatable Implementations","role":"collectionGroup","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/Equatable-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren/RandomAccessCollection-Implementations":{"abstract":[],"title":"RandomAccessCollection Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren\/RandomAccessCollection-Implementations","kind":"article","type":"topic","role":"collectionGroup","url":"\/documentation\/compute\/arraytreechildren\/randomaccesscollection-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByDictionaryLiteral":{"kind":"symbol","url":"\/documentation\/compute\/expressiblebydictionaryliteral","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"TreeValue"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]},"navigatorTitle":[{"kind":"identifier","text":"ExpressibleByDictionaryLiteral"}],"abstract":[{"text":"A type that can be initialized using a dictionary literal.","type":"text"}],"title":"ExpressibleByDictionaryLiteral","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ExpressibleByDictionaryLiteral","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByDictionaryLiteral"}}}