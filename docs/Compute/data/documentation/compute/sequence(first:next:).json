{"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/sequence(first:next:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"variants":[{"paths":["\/documentation\/compute\/sequence(first:next:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"text":"Returns a sequence formed from ","type":"text"},{"code":"first","type":"codeVoice"},{"text":" and repeated lazy applications of","type":"text"},{"text":" ","type":"text"},{"code":"next","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"sequence","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"first"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"next","kind":"externalParam"},{"kind":"text","text":": "},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"?) -> "},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnfoldFirstSequence","text":"UnfoldFirstSequence","preciseIdentifier":"s:s19UnfoldFirstSequencea","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}]}]},{"parameters":[{"name":"first","content":[{"inlineContent":[{"text":"The first element to be returned from the sequence.","type":"text"}],"type":"paragraph"}]},{"name":"next","content":[{"inlineContent":[{"text":"A closure that accepts the previous sequence element and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"returns the next element."}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A sequence that starts with "},{"code":"first","type":"codeVoice"},{"text":" and continues with every","type":"text"},{"type":"text","text":" "},{"text":"value returned by passing the previous element to ","type":"text"},{"code":"next","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"inlineContent":[{"text":"The first element in the sequence is always ","type":"text"},{"type":"codeVoice","code":"first"},{"type":"text","text":", and each successive"},{"text":" ","type":"text"},{"type":"text","text":"element is the result of invoking "},{"type":"codeVoice","code":"next"},{"type":"text","text":" with the previous element. The"},{"text":" ","type":"text"},{"type":"text","text":"sequence ends when "},{"type":"codeVoice","code":"next"},{"text":" returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":". If ","type":"text"},{"type":"codeVoice","code":"next"},{"text":" never returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":", the"},{"type":"text","text":" "},{"text":"sequence is infinite.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This function can be used to replace many cases that were previously handled","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"using C-style "},{"type":"codeVoice","code":"for"},{"type":"text","text":" loops."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["\/\/ Walk the elements of a tree from a node up to the root","for node in sequence(first: leaf, next: { $0.parent }) {","  \/\/ node is leaf, then leaf.parent, then leaf.parent.parent, etc.","}","","\/\/ Iterate over all powers of two (ignoring overflow)","for value in sequence(first: 1, next: { $0 * 2 }) {","  \/\/ value is 1, then 2, then 4, then 8, etc.","}"]}],"kind":"content"}],"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"sequence"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"first","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"next","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"UnfoldFirstSequence","kind":"typeIdentifier","preciseIdentifier":"s:s19UnfoldFirstSequencea"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"modules":[{"name":"Compute"}],"role":"symbol","externalID":"s:s8sequence5first4nexts14UnfoldSequenceVyxxSg_SbtGx_AFxctlF","title":"sequence(first:next:)","roleHeading":"Function","symbolKind":"func"},"sections":[],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnfoldFirstSequence":{"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnfoldFirstSequence"}],"type":"topic","role":"symbol","title":"UnfoldFirstSequence","abstract":[{"text":"The return type of ","type":"text"},{"code":"sequence(first:next:)","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/compute\/unfoldfirstsequence","navigatorTitle":[{"text":"UnfoldFirstSequence","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnfoldFirstSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/sequence(first:next:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/sequence(first:next:)","title":"sequence(first:next:)","role":"symbol","abstract":[{"text":"Returns a sequence formed from ","type":"text"},{"code":"first","type":"codeVoice"},{"text":" and repeated lazy applications of","type":"text"},{"text":" ","type":"text"},{"code":"next","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"sequence","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"first","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"next","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s19UnfoldFirstSequencea","text":"UnfoldFirstSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"text":">","kind":"text"}],"url":"\/documentation\/compute\/sequence(first:next:)"}}}