{"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/__(_:_:)-9xjze"},"metadata":{"modules":[{"name":"Compute"}],"externalID":"s:s2qqoiyxxSgn_xyKXKtKRi_zlF","symbolKind":"op","role":"symbol","roleHeading":"Operator","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"??"},{"kind":"text","text":" "},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"keyword","text":"consuming"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"T"},{"text":"?, ","kind":"text"},{"kind":"attribute","text":"@autoclosure "},{"text":"() ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"title":"??(_:_:)"},"abstract":[{"text":"Performs a nil-coalescing operation, returning the wrapped value of an","type":"text"},{"text":" ","type":"text"},{"code":"Optional","type":"codeVoice"},{"text":" instance or a default value.","type":"text"}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"??","kind":"identifier"},{"kind":"text","text":" "},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"internalParam","text":"optional"},{"text":": ","kind":"text"},{"text":"consuming","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?, "},{"text":"defaultValue","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"attribute","text":"@autoclosure "},{"text":"() ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":" : ~Copyable"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"name":"optional","content":[{"inlineContent":[{"text":"An optional value.","type":"text"}],"type":"paragraph"}]},{"name":"defaultValue","content":[{"inlineContent":[{"text":"A value to use as a default. ","type":"text"},{"code":"defaultValue","type":"codeVoice"},{"type":"text","text":" is the same"},{"type":"text","text":" "},{"type":"text","text":"type as the "},{"code":"Wrapped","type":"codeVoice"},{"type":"text","text":" type of "},{"type":"codeVoice","code":"optional"},{"type":"text","text":"."}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"A nil-coalescing operation unwraps the left-hand side if it has a value, or","type":"text"},{"text":" ","type":"text"},{"text":"it returns the right-hand side as a default. The result of this operation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"will have the non-optional type of the left-hand sideâ€™s "},{"code":"Wrapped","type":"codeVoice"},{"text":" type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This operator uses short-circuit evaluation: "},{"code":"optional","type":"codeVoice"},{"text":" is checked first,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"defaultValue","type":"codeVoice"},{"type":"text","text":" is evaluated only if "},{"code":"optional","type":"codeVoice"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":". For example:"}]},{"code":["func getDefault() -> Int {","    print(\"Calculating default...\")","    return 42","}","","let goodNumber = Int(\"100\") ?? getDefault()","\/\/ goodNumber == 100","","let notSoGoodNumber = Int(\"invalid-input\") ?? getDefault()","\/\/ Prints \"Calculating default...\"","\/\/ notSoGoodNumber == 42"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, "},{"code":"goodNumber","type":"codeVoice"},{"type":"text","text":" is assigned a value of "},{"type":"codeVoice","code":"100"},{"text":" because","type":"text"},{"text":" ","type":"text"},{"code":"Int(\"100\")","type":"codeVoice"},{"text":" succeeded in returning a non-","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" result. When"},{"text":" ","type":"text"},{"type":"codeVoice","code":"notSoGoodNumber"},{"text":" is initialized, ","type":"text"},{"code":"Int(\"invalid-input\")","type":"codeVoice"},{"text":" fails and returns","type":"text"},{"type":"text","text":" "},{"code":"nil","type":"codeVoice"},{"text":", and so the ","type":"text"},{"code":"getDefault()","type":"codeVoice"},{"text":" method is called to supply a default","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value."}]}]}],"kind":"symbol","variants":[{"paths":["\/documentation\/compute\/__(_:_:)-9xjze"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/__(_:_:)-9xjze":{"type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/__(_:_:)-9xjze","url":"\/documentation\/compute\/__(_:_:)-9xjze","abstract":[{"text":"Performs a nil-coalescing operation, returning the wrapped value of an","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Optional"},{"text":" instance or a default value.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"??"},{"text":" ","kind":"text"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"consuming","kind":"keyword"},{"kind":"text","text":" "},{"text":"T","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"@autoclosure ","kind":"attribute"},{"kind":"text","text":"() "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","title":"??(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}