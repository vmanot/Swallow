{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withMemoryRebound"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":", ","kind":"text"},{"text":"Result","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"E"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"type"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"body","kind":"internalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer","text":"UnsafeMutableBufferPointer","preciseIdentifier":"s:Sr"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":") -> "},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Error","kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"}]}]},{"parameters":[{"name":"type","content":[{"type":"paragraph","inlineContent":[{"text":"The type to temporarily bind the memory referenced by this","type":"text"},{"type":"text","text":" "},{"text":"buffer slice.","type":"text"}]}]},{"name":"body","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes a typed pointer to the"},{"text":" ","type":"text"},{"type":"text","text":"same memory as this pointer, only bound to type "},{"type":"codeVoice","code":"T"},{"text":". The closure’s","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"pointer argument is valid only for the duration of the closure’s"},{"type":"text","text":" "},{"text":"execution. If ","type":"text"},{"type":"codeVoice","code":"body"},{"text":" has a return value, that value is also used as","type":"text"},{"type":"text","text":" "},{"text":"the return value for the ","type":"text"},{"type":"codeVoice","code":"withMemoryRebound(to:capacity:_:)"},{"text":" method.","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"text":"Return Value","type":"heading","level":2,"anchor":"return-value"},{"inlineContent":[{"type":"text","text":"The return value, if any, of the "},{"code":"body","type":"codeVoice"},{"text":" closure parameter.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"Use this method when you have a buffer slice to raw memory and you need"},{"type":"text","text":" "},{"text":"to access that memory as instances of a given type ","type":"text"},{"type":"codeVoice","code":"T"},{"text":". Accessing","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"memory as a type "},{"type":"codeVoice","code":"T"},{"text":" requires that the memory be bound to that type.","type":"text"},{"text":" ","type":"text"},{"text":"A memory location may only be bound to one type at a time, so accessing","type":"text"},{"type":"text","text":" "},{"text":"the same memory as an unrelated type without first rebinding the memory","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is undefined."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Any instance of "},{"code":"T","type":"codeVoice"},{"text":" within the re-bound region may be initialized or","type":"text"},{"text":" ","type":"text"},{"text":"uninitialized. The memory underlying any individual instance of ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":" "},{"type":"text","text":"must have the same initialization state (i.e.  initialized or"},{"type":"text","text":" "},{"type":"text","text":"uninitialized.) Accessing a "},{"type":"codeVoice","code":"T"},{"text":" whose underlying memory","type":"text"},{"text":" ","type":"text"},{"text":"is in a mixed initialization state shall be undefined behaviour.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the byte count of the original buffer slice is not a multiple of"},{"text":" ","type":"text"},{"text":"the stride of ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":", then the re-bound buffer is shorter"},{"type":"text","text":" "},{"type":"text","text":"than the original buffer."}]},{"type":"paragraph","inlineContent":[{"text":"After executing ","type":"text"},{"type":"codeVoice","code":"body"},{"text":", this method rebinds memory back to its original","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"binding state. This can be unbound memory, or bound to a different type."}]},{"style":"note","type":"aside","content":[{"inlineContent":[{"text":"The buffer slice’s start address must match the","type":"text"},{"text":" ","type":"text"},{"text":"alignment of ","type":"text"},{"type":"codeVoice","code":"T"},{"text":" (as reported by ","type":"text"},{"code":"MemoryLayout<T>.alignment","type":"codeVoice"},{"text":"). That is,","type":"text"},{"type":"text","text":" "},{"code":"Int(bitPattern: base.baseAddress+startIndex) % MemoryLayout<T>.alignment","type":"codeVoice"},{"text":" ","type":"text"},{"text":"must equal zero.","type":"text"}],"type":"paragraph"}],"name":"Note"},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"A raw buffer slice may represent memory that has been bound to"},{"type":"text","text":" "},{"type":"text","text":"a type. If that is the case, then "},{"code":"T","type":"codeVoice"},{"text":" must be layout compatible with the","type":"text"},{"text":" ","type":"text"},{"text":"type to which the memory has been bound. This requirement does not","type":"text"},{"type":"text","text":" "},{"type":"text","text":"apply if the raw buffer represents memory that has not been bound"},{"type":"text","text":" "},{"text":"to any type.","type":"text"}],"type":"paragraph"}]}]}],"variants":[{"paths":["\/documentation\/compute\/slice\/withmemoryrebound(to:_:)-3jeob"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Executes the given closure while temporarily binding the buffer slice to"},{"type":"text","text":" "},{"text":"instances of type ","type":"text"},{"type":"codeVoice","code":"T"},{"text":".","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Slice\/withMemoryRebound(to:_:)-3jeob"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Slice"]]},"metadata":{"role":"symbol","title":"withMemoryRebound(to:_:)","externalID":"s:s5SliceVsSwRszrlE17withMemoryRebound2to_qd_0_qd__m_qd_0_Sryqd__Gqd_1_YKXEtqd_1_YKs5ErrorRd_1_r1_lF","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Base","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"UnsafeMutableRawBufferPointer"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"roleHeading":"Instance Method","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withMemoryRebound"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Result","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"E"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":".Type, (","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sr","text":"UnsafeMutableBufferPointer"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"E"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result"}],"extendedModule":"Swift"},"sections":[],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Slice/withMemoryRebound(to:_:)-3jeob":{"type":"topic","abstract":[{"text":"Executes the given closure while temporarily binding the buffer slice to","type":"text"},{"type":"text","text":" "},{"text":"instances of type ","type":"text"},{"code":"T","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","title":"withMemoryRebound(to:_:)","role":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Base"},{"text":" is ","type":"text"},{"code":"UnsafeMutableRawBufferPointer","type":"codeVoice"},{"text":".","type":"text"}]},"url":"\/documentation\/compute\/slice\/withmemoryrebound(to:_:)-3jeob","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Slice\/withMemoryRebound(to:_:)-3jeob","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withMemoryRebound","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":", ","kind":"text"},{"text":"Result","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"E","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":".Type, ("},{"text":"UnsafeMutableBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:Sr"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":") -> "},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Result"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Slice":{"kind":"symbol","title":"Slice","abstract":[{"type":"text","text":"A view into a subsequence of elements of another collection."}],"url":"\/documentation\/compute\/slice","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Slice","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Slice","navigatorTitle":[{"text":"Slice","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Error":{"url":"\/documentation\/compute\/error","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Error"}],"navigatorTitle":[{"text":"Error","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Error","type":"topic","role":"symbol","abstract":[{"type":"text","text":"A type representing an error value that can be thrown."}],"kind":"symbol","title":"Error"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableBufferPointer":{"kind":"symbol","url":"\/documentation\/compute\/unsafemutablebufferpointer","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UnsafeMutableBufferPointer","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UnsafeMutableBufferPointer"}],"abstract":[{"type":"text","text":"A nonowning collection interface to a buffer of mutable"},{"text":" ","type":"text"},{"text":"elements stored contiguously in memory.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer","title":"UnsafeMutableBufferPointer","type":"topic","role":"symbol"}}}