{"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withMemoryRebound","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":", "},{"text":"Result","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"E"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"kind":"text","text":" "},{"text":"type","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"body"},{"text":": (","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SR","text":"UnsafeBufferPointer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Result"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Error"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"type","content":[{"inlineContent":[{"type":"text","text":"The type to temporarily bind the memory referenced by this"},{"type":"text","text":" "},{"text":"buffer slice.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes a typed pointer to the"},{"type":"text","text":" "},{"text":"same memory as this pointer, only bound to type ","type":"text"},{"code":"T","type":"codeVoice"},{"type":"text","text":". The closure’s"},{"text":" ","type":"text"},{"text":"pointer argument is valid only for the duration of the closure’s","type":"text"},{"type":"text","text":" "},{"text":"execution. If ","type":"text"},{"code":"body","type":"codeVoice"},{"type":"text","text":" has a return value, that value is also used as"},{"type":"text","text":" "},{"type":"text","text":"the return value for the "},{"code":"withMemoryRebound(to:capacity:_:)","type":"codeVoice"},{"type":"text","text":" method."}]}],"name":"body"}]},{"kind":"content","content":[{"type":"heading","anchor":"return-value","text":"Return Value","level":2},{"inlineContent":[{"type":"text","text":"The return value, if any, of the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" closure parameter."}],"type":"paragraph"}]},{"content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"Use this method when you have a buffer slice to raw memory and you need"},{"type":"text","text":" "},{"type":"text","text":"to access that memory as instances of a given type "},{"type":"codeVoice","code":"T"},{"type":"text","text":". Accessing"},{"text":" ","type":"text"},{"type":"text","text":"memory as a type "},{"type":"codeVoice","code":"T"},{"text":" requires that the memory be bound to that type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"A memory location may only be bound to one type at a time, so accessing"},{"type":"text","text":" "},{"text":"the same memory as an unrelated type without first rebinding the memory","type":"text"},{"type":"text","text":" "},{"text":"is undefined.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Any instance of "},{"code":"T","type":"codeVoice"},{"text":" within the re-bound region may be initialized or","type":"text"},{"text":" ","type":"text"},{"text":"uninitialized. The memory underlying any individual instance of ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":" "},{"type":"text","text":"must have the same initialization state (i.e.  initialized or"},{"type":"text","text":" "},{"type":"text","text":"uninitialized.) Accessing a "},{"type":"codeVoice","code":"T"},{"type":"text","text":" whose underlying memory"},{"text":" ","type":"text"},{"type":"text","text":"is in a mixed initialization state shall be undefined behaviour."}],"type":"paragraph"},{"inlineContent":[{"text":"If the byte count of the original buffer slice is not a multiple of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the stride of "},{"type":"codeVoice","code":"T"},{"type":"text","text":", then the re-bound buffer is shorter"},{"text":" ","type":"text"},{"text":"than the original buffer.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"After executing ","type":"text"},{"code":"body","type":"codeVoice"},{"text":", this method rebinds memory back to its original","type":"text"},{"type":"text","text":" "},{"text":"binding state. This can be unbound memory, or bound to a different type.","type":"text"}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The buffer slice’s start address must match the"},{"type":"text","text":" "},{"text":"alignment of ","type":"text"},{"type":"codeVoice","code":"T"},{"text":" (as reported by ","type":"text"},{"type":"codeVoice","code":"MemoryLayout<T>.alignment"},{"text":"). That is,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Int(bitPattern: base.baseAddress+startIndex) % MemoryLayout<T>.alignment"},{"type":"text","text":" "},{"text":"must equal zero.","type":"text"}]}],"type":"aside","style":"note"},{"content":[{"inlineContent":[{"text":"A raw buffer slice may represent memory that has been bound to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a type. If that is the case, then "},{"code":"T","type":"codeVoice"},{"type":"text","text":" must be layout compatible with the"},{"type":"text","text":" "},{"text":"type to which the memory has been bound. This requirement does not","type":"text"},{"type":"text","text":" "},{"type":"text","text":"apply if the raw buffer represents memory that has not been bound"},{"text":" ","type":"text"},{"type":"text","text":"to any type."}],"type":"paragraph"}],"name":"Note","type":"aside","style":"note"}],"kind":"content"}],"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"extendedModule":"Swift","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"withMemoryRebound","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Result","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"E","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type, (","kind":"text"},{"preciseIdentifier":"s:SR","text":"UnsafeBufferPointer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Result"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Result","kind":"typeIdentifier"}],"modules":[{"name":"Compute","relatedModules":["Swift"]}],"title":"withMemoryRebound(to:_:)","externalID":"s:s5SliceVsSWRszrlE17withMemoryRebound2to_qd_0_qd__m_qd_0_SRyqd__Gqd_1_YKXEtqd_1_YKs5ErrorRd_1_r1_lF","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" is "},{"type":"codeVoice","code":"UnsafeRawBufferPointer"},{"text":".","type":"text"}]}},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Slice\/withMemoryRebound(to:_:)-31406"},"abstract":[{"text":"Executes the given closure while temporarily binding the buffer slice to","type":"text"},{"type":"text","text":" "},{"text":"instances of type ","type":"text"},{"code":"T","type":"codeVoice"},{"type":"text","text":"."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/slice\/withmemoryrebound(to:_:)-31406"]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Slice"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Slice/withMemoryRebound(to:_:)-31406":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/slice\/withmemoryrebound(to:_:)-31406","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withMemoryRebound","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":", ","kind":"text"},{"text":"Result","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"E","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"text":".Type, (","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SR","text":"UnsafeBufferPointer"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Result"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" is "},{"code":"UnsafeRawBufferPointer","type":"codeVoice"},{"text":".","type":"text"}]},"abstract":[{"text":"Executes the given closure while temporarily binding the buffer slice to","type":"text"},{"type":"text","text":" "},{"text":"instances of type ","type":"text"},{"code":"T","type":"codeVoice"},{"text":".","type":"text"}],"title":"withMemoryRebound(to:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Slice\/withMemoryRebound(to:_:)-31406"},"doc://com.swallow.documentation.Compute/documentation/Compute/Slice":{"kind":"symbol","title":"Slice","abstract":[{"type":"text","text":"A view into a subsequence of elements of another collection."}],"url":"\/documentation\/compute\/slice","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Slice","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Slice","navigatorTitle":[{"text":"Slice","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeBufferPointer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer","abstract":[{"type":"text","text":"A nonowning collection interface to a buffer of"},{"type":"text","text":" "},{"text":"elements stored contiguously in memory.","type":"text"}],"role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeBufferPointer","kind":"identifier"}],"title":"UnsafeBufferPointer","navigatorTitle":[{"kind":"identifier","text":"UnsafeBufferPointer"}],"url":"\/documentation\/compute\/unsafebufferpointer"},"doc://com.swallow.documentation.Compute/documentation/Compute/Error":{"url":"\/documentation\/compute\/error","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Error"}],"navigatorTitle":[{"text":"Error","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Error","type":"topic","role":"symbol","abstract":[{"type":"text","text":"A type representing an error value that can be thrown."}],"kind":"symbol","title":"Error"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}