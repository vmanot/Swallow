{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withMemoryRebound","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Result","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Element"},{"kind":"text","text":">("},{"kind":"externalParam","text":"to"},{"kind":"text","text":" "},{"kind":"internalParam","text":"type"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"body","kind":"internalParam"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:Sr","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer","text":"UnsafeMutableBufferPointer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":" "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Base","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer","preciseIdentifier":"s:Sr","text":"UnsafeMutableBufferPointer"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"text":">","kind":"text"}]}]},{"kind":"parameters","parameters":[{"name":"type","content":[{"inlineContent":[{"text":"The type to temporarily bind the memory referenced by this","type":"text"},{"text":" ","type":"text"},{"text":"buffer slice. The type ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":" must be layout compatible"},{"text":" ","type":"text"},{"type":"text","text":"with the pointer’s "},{"type":"codeVoice","code":"Element"},{"text":" type.","type":"text"}],"type":"paragraph"}]},{"name":"body","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes a typed buffer to the"},{"type":"text","text":" "},{"text":"same memory as this buffer slice, only bound to type ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":". The buffer"},{"type":"text","text":" "},{"type":"text","text":"parameter contains a number of complete instances of "},{"type":"codeVoice","code":"T"},{"type":"text","text":" based"},{"type":"text","text":" "},{"text":"on the capacity of the original buffer and the stride of ","type":"text"},{"type":"codeVoice","code":"Element"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The closure’s buffer argument is valid only for the duration of the"},{"text":" ","type":"text"},{"type":"text","text":"closure’s execution. If "},{"type":"codeVoice","code":"body"},{"text":" has a return value, that value","type":"text"},{"text":" ","type":"text"},{"text":"is also used as the return value for the ","type":"text"},{"type":"codeVoice","code":"withMemoryRebound(to:_:)"},{"type":"text","text":" "},{"text":"method.","type":"text"}]}]}]},{"kind":"content","content":[{"text":"Return Value","anchor":"return-value","level":2,"type":"heading"},{"inlineContent":[{"text":"The return value, if any, of the ","type":"text"},{"code":"body","type":"codeVoice"},{"type":"text","text":" closure parameter."}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"inlineContent":[{"text":"Use this method when you have a buffer slice of memory bound to one type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and you need to access that memory as a buffer of another type. Accessing"},{"type":"text","text":" "},{"text":"memory as type ","type":"text"},{"type":"codeVoice","code":"T"},{"text":" requires that the memory be bound to that type. A","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"memory location may only be bound to one type at a time, so accessing"},{"text":" ","type":"text"},{"text":"the same memory as an unrelated type without first rebinding the memory","type":"text"},{"type":"text","text":" "},{"text":"is undefined.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The number of instances of "},{"code":"T","type":"codeVoice"},{"type":"text","text":" referenced by the rebound buffer may be"},{"text":" ","type":"text"},{"text":"different than the number of instances of ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":" referenced by the","type":"text"},{"type":"text","text":" "},{"text":"original buffer slice. The number of instances of ","type":"text"},{"code":"T","type":"codeVoice"},{"type":"text","text":" will be calculated"},{"type":"text","text":" "},{"text":"at runtime.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Any instance of "},{"type":"codeVoice","code":"T"},{"type":"text","text":" within the re-bound region may be initialized or"},{"text":" ","type":"text"},{"text":"uninitialized. Every instance of ","type":"text"},{"type":"codeVoice","code":"Pointee"},{"text":" overlapping with a given","type":"text"},{"type":"text","text":" "},{"text":"instance of ","type":"text"},{"code":"T","type":"codeVoice"},{"text":" should have the same initialization state (i.e.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"initialized or uninitialized.) Accessing a "},{"type":"codeVoice","code":"T"},{"text":" whose underlying","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"Pointee"},{"type":"text","text":" storage is in a mixed initialization state shall be"},{"text":" ","type":"text"},{"type":"text","text":"undefined behaviour."}],"type":"paragraph"},{"inlineContent":[{"text":"Because this range of memory is no longer bound to its ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":" type","type":"text"},{"text":" ","type":"text"},{"text":"while the ","type":"text"},{"code":"body","type":"codeVoice"},{"text":" closure executes, do not access memory using the","type":"text"},{"text":" ","type":"text"},{"text":"original buffer slice from within ","type":"text"},{"type":"codeVoice","code":"body"},{"text":". Instead,","type":"text"},{"type":"text","text":" "},{"text":"use the ","type":"text"},{"type":"codeVoice","code":"body"},{"type":"text","text":" closure’s buffer argument to access the values"},{"text":" ","type":"text"},{"type":"text","text":"in memory as instances of type "},{"type":"codeVoice","code":"T"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"After executing ","type":"text"},{"code":"body","type":"codeVoice"},{"text":", this method rebinds memory back to the original","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Element"},{"text":" type.","type":"text"}]},{"style":"note","name":"Note","content":[{"inlineContent":[{"text":"Only use this method to rebind the buffer slice’s memory to a type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that is layout compatible with the currently bound "},{"code":"Element","type":"codeVoice"},{"type":"text","text":" type."},{"text":" ","type":"text"},{"type":"text","text":"The stride of the temporary type ("},{"code":"T","type":"codeVoice"},{"text":") may be an integer multiple","type":"text"},{"type":"text","text":" "},{"type":"text","text":"or a whole fraction of "},{"code":"Element","type":"codeVoice"},{"type":"text","text":"‘s stride."},{"text":" ","type":"text"},{"type":"text","text":"To bind a region of memory to a type that does not match these"},{"type":"text","text":" "},{"type":"text","text":"requirements, convert the buffer slice to a raw buffer and use the"},{"type":"text","text":" "},{"text":"raw buffer’s ","type":"text"},{"type":"codeVoice","code":"withMemoryRebound(to:)"},{"type":"text","text":" method."},{"text":" ","type":"text"},{"type":"text","text":"If "},{"type":"codeVoice","code":"T"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Element"},{"type":"text","text":" have different alignments, this buffer slice"},{"text":" ","type":"text"},{"type":"text","text":"must be aligned with the larger of the two alignments."}],"type":"paragraph"}],"type":"aside"}]}],"sections":[],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Slice\/withMemoryRebound(to:_:)-2hfy7","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Instance Method","extendedModule":"Swift","conformance":{"constraints":[{"type":"codeVoice","code":"Base"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withMemoryRebound"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Element"},{"kind":"text","text":">("},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":".Type, ("},{"kind":"typeIdentifier","text":"UnsafeMutableBufferPointer","preciseIdentifier":"s:Sr"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result"}],"title":"withMemoryRebound(to:_:)","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"externalID":"s:s5SliceV17withMemoryRebound2to_qd_0_qd__m_qd_0_Sryqd__GKXEtKSryqd_1_GRszr1_lF","role":"symbol","symbolKind":"method"},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/slice\/withmemoryrebound(to:_:)-2hfy7"]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Slice"]]},"kind":"symbol","abstract":[{"text":"Executes the given closure while temporarily binding the memory referenced","type":"text"},{"type":"text","text":" "},{"text":"by this buffer slice to the given type.","type":"text"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableBufferPointer":{"kind":"symbol","url":"\/documentation\/compute\/unsafemutablebufferpointer","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UnsafeMutableBufferPointer","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UnsafeMutableBufferPointer"}],"abstract":[{"type":"text","text":"A nonowning collection interface to a buffer of mutable"},{"text":" ","type":"text"},{"text":"elements stored contiguously in memory.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer","title":"UnsafeMutableBufferPointer","type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Slice":{"kind":"symbol","title":"Slice","abstract":[{"type":"text","text":"A view into a subsequence of elements of another collection."}],"url":"\/documentation\/compute\/slice","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Slice","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Slice","navigatorTitle":[{"text":"Slice","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Slice/withMemoryRebound(to:_:)-2hfy7":{"role":"symbol","title":"withMemoryRebound(to:_:)","url":"\/documentation\/compute\/slice\/withmemoryrebound(to:_:)-2hfy7","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withMemoryRebound"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":", "},{"text":"Result","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Element","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":".Type, ("},{"preciseIdentifier":"s:Sr","text":"UnsafeMutableBufferPointer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Slice\/withMemoryRebound(to:_:)-2hfy7","abstract":[{"text":"Executes the given closure while temporarily binding the memory referenced","type":"text"},{"type":"text","text":" "},{"text":"by this buffer slice to the given type.","type":"text"}],"kind":"symbol"}}}