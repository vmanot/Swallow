{"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ContiguousArray\/withContiguousMutableStorageIfAvailable(_:)-5k8vo","interfaceLanguage":"swift"},"abstract":[{"text":"Executes a closure on the collection’s contiguous storage.","type":"text"}],"metadata":{"title":"withContiguousMutableStorageIfAvailable(_:)","roleHeading":"Instance Method","modules":[{"name":"Compute","relatedModules":["Swift"]}],"externalID":"s:SMsE39withContiguousMutableStorageIfAvailableyqd__Sgqd__Sry7ElementQzGzKXEKlF::SYNTHESIZED::s:s15ContiguousArrayV","extendedModule":"Swift","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withContiguousMutableStorageIfAvailable"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">(("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"UnsafeMutableBufferPointer","preciseIdentifier":"s:Sr","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"role":"symbol"},"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ContiguousArray","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ContiguousArray\/MutableCollection-Implementations"]]},"sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"mutating"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withContiguousMutableStorageIfAvailable"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"body"},{"kind":"text","text":": ("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:Sr","kind":"typeIdentifier","text":"UnsafeMutableBufferPointer","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"text":"?","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"body","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that receives an in-out"},{"type":"text","text":" "},{"type":"codeVoice","code":"UnsafeMutableBufferPointer"},{"type":"text","text":" to the collection’s contiguous storage."}]}]}]},{"content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value returned from "},{"code":"body","type":"codeVoice"},{"type":"text","text":", unless the collection doesn’t"},{"text":" ","type":"text"},{"type":"text","text":"support contiguous storage, in which case the method ignores "},{"type":"codeVoice","code":"body"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"type":"text","text":"returns "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]}],"kind":"content"},{"content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"This method calls "},{"type":"codeVoice","code":"body(buffer)"},{"type":"text","text":", where "},{"code":"buffer","type":"codeVoice"},{"type":"text","text":" provides access to the"},{"text":" ","type":"text"},{"type":"text","text":"contiguous mutable storage of the entire collection. If the contiguous"},{"type":"text","text":" "},{"type":"text","text":"storage doesn’t exist, the collection creates it. If the collection"},{"text":" ","type":"text"},{"text":"doesn’t support an internal representation in the form of contiguous","type":"text"},{"type":"text","text":" "},{"type":"text","text":"mutable storage, this method doesn’t call "},{"type":"codeVoice","code":"body"},{"text":" — it immediately","type":"text"},{"text":" ","type":"text"},{"text":"returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The optimizer can often eliminate bounds- and uniqueness-checking"},{"type":"text","text":" "},{"type":"text","text":"within an algorithm. When that fails, however, invoking the same"},{"text":" ","type":"text"},{"type":"text","text":"algorithm on the "},{"type":"codeVoice","code":"buffer"},{"type":"text","text":" argument may let you trade safety for speed."}]},{"inlineContent":[{"type":"text","text":"Always perform any necessary cleanup in the closure, because the"},{"type":"text","text":" "},{"text":"method makes no guarantees about the state of the collection if the","type":"text"},{"type":"text","text":" "},{"text":"closure throws an error. Your changes to the collection may be absent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from the collection after throwing the error, because the closure could"},{"text":" ","type":"text"},{"type":"text","text":"receive a temporary copy rather than direct access to the collection’s"},{"text":" ","type":"text"},{"type":"text","text":"storage."}],"type":"paragraph"},{"style":"warning","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Your "},{"code":"body","type":"codeVoice"},{"text":" closure must not replace ","type":"text"},{"code":"buffer","type":"codeVoice"},{"type":"text","text":". This leads"},{"type":"text","text":" "},{"type":"text","text":"to a crash in all implementations of this method within the standard"},{"type":"text","text":" "},{"type":"text","text":"library."}]}],"name":"Warning"},{"inlineContent":[{"text":"Successive calls to this method may provide a different pointer on each","type":"text"},{"type":"text","text":" "},{"type":"text","text":"call. Don’t store "},{"code":"buffer","type":"codeVoice"},{"type":"text","text":" outside of this method."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" that provides its own implementation of this method"},{"text":" ","type":"text"},{"text":"must provide contiguous storage to its elements in the same order","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as they appear in the collection. This guarantees that it’s possible to"},{"type":"text","text":" "},{"type":"text","text":"generate contiguous mutable storage to any of its subsequences by slicing"},{"type":"text","text":" "},{"type":"codeVoice","code":"buffer"},{"type":"text","text":" with a range formed from the distances to the subsequence’s"},{"type":"text","text":" "},{"code":"startIndex","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"endIndex","type":"codeVoice"},{"type":"text","text":", respectively."}]}],"kind":"content"}],"kind":"symbol","variants":[{"paths":["\/documentation\/compute\/contiguousarray\/withcontiguousmutablestorageifavailable(_:)-5k8vo"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/ContiguousArray/MutableCollection-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ContiguousArray\/MutableCollection-Implementations","kind":"article","abstract":[],"type":"topic","url":"\/documentation\/compute\/contiguousarray\/mutablecollection-implementations","title":"MutableCollection Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/ContiguousArray":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ContiguousArray","url":"\/documentation\/compute\/contiguousarray","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ContiguousArray"}],"title":"ContiguousArray","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContiguousArray"}],"role":"symbol","abstract":[{"text":"A contiguously stored array.","type":"text"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ContiguousArray/withContiguousMutableStorageIfAvailable(_:)-5k8vo":{"type":"topic","title":"withContiguousMutableStorageIfAvailable(_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ContiguousArray\/withContiguousMutableStorageIfAvailable(_:)-5k8vo","abstract":[{"type":"text","text":"Executes a closure on the collection’s contiguous storage."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withContiguousMutableStorageIfAvailable","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"preciseIdentifier":"s:Sr","kind":"typeIdentifier","text":"UnsafeMutableBufferPointer"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":"?"}],"kind":"symbol","url":"\/documentation\/compute\/contiguousarray\/withcontiguousmutablestorageifavailable(_:)-5k8vo","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableBufferPointer":{"kind":"symbol","url":"\/documentation\/compute\/unsafemutablebufferpointer","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UnsafeMutableBufferPointer","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UnsafeMutableBufferPointer"}],"abstract":[{"type":"text","text":"A nonowning collection interface to a buffer of mutable"},{"text":" ","type":"text"},{"text":"elements stored contiguously in memory.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer","title":"UnsafeMutableBufferPointer","type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}