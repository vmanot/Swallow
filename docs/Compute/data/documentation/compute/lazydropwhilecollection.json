{"variants":[{"paths":["\/documentation\/compute\/lazydropwhilecollection"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyDropWhileCollection","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazyDropWhileCollection"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":"> = ","kind":"text"},{"kind":"typeIdentifier","text":"LazyDropWhileSequence","preciseIdentifier":"s:s21LazyDropWhileSequenceV","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyDropWhileSequence"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"Collection","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","preciseIdentifier":"s:Sl"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"text":"The performance of accessing ","type":"text"},{"code":"startIndex","type":"codeVoice"},{"type":"text","text":", "},{"code":"first","type":"codeVoice"},{"type":"text","text":", or any methods"},{"text":" ","type":"text"},{"text":"that depend on ","type":"text"},{"code":"startIndex","type":"codeVoice"},{"text":" depends on how many elements satisfy the","type":"text"},{"text":" ","type":"text"},{"text":"predicate at the start of the collection, and may not offer the usual","type":"text"},{"type":"text","text":" "},{"text":"performance given by the ","type":"text"},{"type":"codeVoice","code":"Collection"},{"text":" protocol. Be aware, therefore,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that general operations on lazy collections may not have the"},{"type":"text","text":" "},{"type":"text","text":"documented complexity."}],"type":"paragraph"}]}]}],"metadata":{"role":"symbol","roleHeading":"Type Alias","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"LazyDropWhileCollection","kind":"identifier"}],"externalID":"s:s23LazyDropWhileCollectiona","symbolKind":"typealias","navigatorTitle":[{"text":"LazyDropWhileCollection","kind":"identifier"}],"title":"LazyDropWhileCollection","modules":[{"name":"Compute"}]},"abstract":[{"type":"text","text":"A lazy wrapper that includes the elements of an underlying"},{"text":" ","type":"text"},{"type":"text","text":"collection after any initial consecutive elements that satisfy a"},{"text":" ","type":"text"},{"type":"text","text":"predicate."}],"sections":[],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Collection"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","url":"\/documentation\/compute\/collection","abstract":[{"type":"text","text":"A sequence whose elements can be traversed multiple times,"},{"text":" ","type":"text"},{"text":"nondestructively, and accessed by an indexed subscript.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Collection"}],"title":"Collection"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyDropWhileSequence":{"abstract":[{"type":"text","text":"A sequence whose elements consist of the elements that follow the initial"},{"type":"text","text":" "},{"type":"text","text":"consecutive elements of some base sequence that satisfy a given predicate."}],"role":"symbol","navigatorTitle":[{"text":"LazyDropWhileSequence","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazyDropWhileSequence"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyDropWhileSequence","type":"topic","title":"LazyDropWhileSequence","url":"\/documentation\/compute\/lazydropwhilesequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyDropWhileCollection":{"kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LazyDropWhileCollection"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyDropWhileCollection","abstract":[{"text":"A lazy wrapper that includes the elements of an underlying","type":"text"},{"text":" ","type":"text"},{"text":"collection after any initial consecutive elements that satisfy a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"predicate."}],"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyDropWhileCollection"}],"url":"\/documentation\/compute\/lazydropwhilecollection","title":"LazyDropWhileCollection"}}}