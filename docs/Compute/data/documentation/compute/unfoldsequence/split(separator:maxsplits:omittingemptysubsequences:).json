{"variants":[{"paths":["\/documentation\/compute\/unfoldsequence\/split(separator:maxsplits:omittingemptysubsequences:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnfoldSequence\/split(separator:maxSplits:omittingEmptySubsequences:)","interfaceLanguage":"swift"},"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Returns the longest possible subsequences of the sequence, in order,"},{"type":"text","text":" "},{"type":"text","text":"around elements equal to the given element."}],"kind":"symbol","metadata":{"role":"symbol","roleHeading":"Instance Method","symbolKind":"method","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"separator"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"maxSplits","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"text":") -> [","kind":"text"},{"text":"ArraySlice","preciseIdentifier":"s:s10ArraySliceV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"kind":"text","text":">]"}],"extendedModule":"Swift","conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"externalID":"s:STsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSays10ArraySliceVyABGGAB_SiSbtF::SYNTHESIZED::s:s14UnfoldSequenceV","title":"split(separator:maxSplits:omittingEmptySubsequences:)"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"kind":"text","text":"("},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":" = Int.max, "},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":" = true) -> [","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","preciseIdentifier":"s:s10ArraySliceV","text":"ArraySlice","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","text":"Element"},{"text":">]","kind":"text"}],"languages":["swift"]}]},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The element that should be split upon."}],"type":"paragraph"}],"name":"separator"},{"name":"maxSplits","content":[{"type":"paragraph","inlineContent":[{"text":"The maximum number of times to split the sequence, or one","type":"text"},{"text":" ","type":"text"},{"text":"less than the number of subsequences to return. If ","type":"text"},{"code":"maxSplits + 1","type":"codeVoice"},{"type":"text","text":" "},{"text":"subsequences are returned, the last one is a suffix of the original","type":"text"},{"text":" ","type":"text"},{"text":"sequence containing the remaining elements. ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" must be"},{"type":"text","text":" "},{"type":"text","text":"greater than or equal to zero. The default value is "},{"type":"codeVoice","code":"Int.max"},{"text":".","type":"text"}]}]},{"name":"omittingEmptySubsequences","content":[{"inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"false"},{"type":"text","text":", an empty subsequence is"},{"type":"text","text":" "},{"text":"returned in the result for each consecutive pair of ","type":"text"},{"type":"codeVoice","code":"separator"},{"text":" ","type":"text"},{"type":"text","text":"elements in the sequence and for each instance of "},{"code":"separator","type":"codeVoice"},{"type":"text","text":" at the"},{"text":" ","type":"text"},{"type":"text","text":"start or end of the sequence. If "},{"type":"codeVoice","code":"true"},{"type":"text","text":", only nonempty subsequences"},{"text":" ","type":"text"},{"type":"text","text":"are returned. The default value is "},{"type":"codeVoice","code":"true"},{"text":".","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"level":2,"type":"heading","anchor":"return-value","text":"Return Value"},{"inlineContent":[{"text":"An array of subsequences, split from this sequence’s elements.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The resulting array consists of at most "},{"type":"codeVoice","code":"maxSplits + 1"},{"type":"text","text":" subsequences."},{"text":" ","type":"text"},{"text":"Elements that are used to split the sequence are not returned as part of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"any subsequence."}]},{"type":"paragraph","inlineContent":[{"text":"The following examples show the effects of the ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"text":" and","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"text":" parameters when splitting a string at each","type":"text"},{"type":"text","text":" "},{"type":"text","text":"space character (” “). The first use of "},{"type":"codeVoice","code":"split"},{"text":" returns each word that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"was originally separated by one or more spaces."}]},{"code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","print(line.split(separator: \" \")","          .map(String.init))","\/\/ Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second example passes "},{"code":"1","type":"codeVoice"},{"text":" for the ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"text":" parameter, so the","type":"text"},{"text":" ","type":"text"},{"text":"original string is split just once, into two new strings.","type":"text"}]},{"type":"codeListing","code":["print(line.split(separator: \" \", maxSplits: 1)","          .map(String.init))","\/\/ Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\""],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"The final example passes ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"text":" ","type":"text"},{"type":"text","text":"parameter, so the returned array contains empty strings where spaces"},{"type":"text","text":" "},{"type":"text","text":"were repeated."}]},{"type":"codeListing","syntax":null,"code":["print(line.split(separator: \" \", omittingEmptySubsequences: false)","          .map(String.init))","\/\/ Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""]},{"type":"aside","name":"Complexity","content":[{"type":"paragraph","inlineContent":[{"text":"O(","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" is the length of the sequence."}]}],"style":"note"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnfoldSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnfoldSequence\/Sequence-Implementations"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","role":"symbol","abstract":[{"type":"text","text":"A slice of an "},{"code":"Array","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"ContiguousArray"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"ArraySlice"},{"text":" instance.","type":"text"}],"title":"ArraySlice","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArraySlice"}],"navigatorTitle":[{"kind":"identifier","text":"ArraySlice"}],"url":"\/documentation\/compute\/arrayslice","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnfoldSequence":{"navigatorTitle":[{"text":"UnfoldSequence","kind":"identifier"}],"kind":"symbol","role":"symbol","title":"UnfoldSequence","type":"topic","url":"\/documentation\/compute\/unfoldsequence","abstract":[{"text":"A sequence whose elements are produced via repeated applications of a","type":"text"},{"type":"text","text":" "},{"text":"closure to some mutable state.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UnfoldSequence","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnfoldSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnfoldSequence/split(separator:maxSplits:omittingEmptySubsequences:)":{"abstract":[{"type":"text","text":"Returns the longest possible subsequences of the sequence, in order,"},{"text":" ","type":"text"},{"type":"text","text":"around elements equal to the given element."}],"role":"symbol","url":"\/documentation\/compute\/unfoldsequence\/split(separator:maxsplits:omittingemptysubsequences:)","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"title":"split(separator:maxSplits:omittingEmptySubsequences:)","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnfoldSequence\/split(separator:maxSplits:omittingEmptySubsequences:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":") -> ["},{"text":"ArraySlice","kind":"typeIdentifier","preciseIdentifier":"s:s10ArraySliceV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":">]","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnfoldSequence/Sequence-Implementations":{"abstract":[],"url":"\/documentation\/compute\/unfoldsequence\/sequence-implementations","type":"topic","title":"Sequence Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnfoldSequence\/Sequence-Implementations","kind":"article","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}