{"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"title":"*(_:_:)","role":"symbol","roleHeading":"Operator","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"externalID":"s:Su1moiyS2u_SutFZ","symbolKind":"op","extendedModule":"Swift","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"*","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":") -> ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"}]},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/*(_:_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Multiplies two values and produces their product."}],"variants":[{"paths":["\/documentation\/compute\/uint\/*(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"*","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"lhs","kind":"internalParam"},{"kind":"text","text":": "},{"text":"UInt","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"rhs","kind":"internalParam"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":") -> ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt","text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"}],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"text":"The first value to multiply.","type":"text"}],"type":"paragraph"}],"name":"lhs"},{"name":"rhs","content":[{"type":"paragraph","inlineContent":[{"text":"The second value to multiply.","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"The multiplication operator (","type":"text"},{"code":"*","type":"codeVoice"},{"type":"text","text":") calculates the product of its two"},{"text":" ","type":"text"},{"text":"arguments. For example:","type":"text"}]},{"syntax":null,"code":["2 * 3                   \/\/ 6","100 * 21                \/\/ 2100","-10 * 15                \/\/ -150","3.5 * 2.25              \/\/ 7.875"],"type":"codeListing"},{"inlineContent":[{"text":"You cannot use ","type":"text"},{"type":"codeVoice","code":"*"},{"type":"text","text":" with arguments of different types. To multiply values"},{"type":"text","text":" "},{"type":"text","text":"of different types, convert one of the values to the other value’s type."}],"type":"paragraph"},{"code":["let x: Int8 = 21","let y: Int = 1000000","Int(x) * y              \/\/ 21000000"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The product of the two arguments must be representable in the arguments’"},{"text":" ","type":"text"},{"type":"text","text":"type. In the following example, the result of "},{"code":"21 * 21","type":"codeVoice"},{"text":" is greater than","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the maximum representable "},{"code":"Int8","type":"codeVoice"},{"type":"text","text":" value:"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["x * 21                  \/\/ Overflow error"]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"Overflow checking is not performed in ","type":"text"},{"type":"codeVoice","code":"-Ounchecked"},{"text":" builds.","type":"text"}]}],"type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"text":"If you want to opt out of overflow checking and wrap the result in case","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of any overflow, use the overflow multiplication operator ("},{"type":"codeVoice","code":"&*"},{"type":"text","text":")."}]},{"code":["x &* 21                \/\/ -115"],"type":"codeListing","syntax":null}]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/BinaryInteger-Implementations"]]},"kind":"symbol","references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt":{"kind":"symbol","navigatorTitle":[{"text":"UInt","kind":"identifier"}],"type":"topic","title":"UInt","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt","abstract":[{"text":"An unsigned integer value type.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt","kind":"identifier"}],"url":"\/documentation\/compute\/uint"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/*(_:_:)":{"title":"*(_:_:)","kind":"symbol","url":"\/documentation\/compute\/uint\/*(_:_:)","abstract":[{"type":"text","text":"Multiplies two values and produces their product."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/*(_:_:)","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"*","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/BinaryInteger-Implementations":{"kind":"article","url":"\/documentation\/compute\/uint\/binaryinteger-implementations","title":"BinaryInteger Implementations","role":"collectionGroup","type":"topic","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/BinaryInteger-Implementations"}}}