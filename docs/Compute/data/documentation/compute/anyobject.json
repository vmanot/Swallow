{"abstract":[{"type":"text","text":"The protocol to which all classes implicitly conform."}],"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"symbolKind":"typealias","role":"symbol","modules":[{"name":"Compute"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyObject"}],"title":"AnyObject","externalID":"s:s9AnyObjecta","navigatorTitle":[{"kind":"identifier","text":"AnyObject"}],"roleHeading":"Type Alias"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyObject"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You use "},{"type":"codeVoice","code":"AnyObject"},{"text":" when you need the flexibility of an untyped object or","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when you use bridged Objective-C methods and properties that return an"},{"text":" ","type":"text"},{"type":"text","text":"untyped result. "},{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":" can be used as the concrete type for an"},{"type":"text","text":" "},{"type":"text","text":"instance of any class, class type, or class-only protocol. For example:"}]},{"type":"codeListing","syntax":null,"code":["class FloatRef {","    let value: Float","    init(_ value: Float) {","        self.value = value","    }","}","","let x = FloatRef(2.3)","let y: AnyObject = x","let z: AnyObject = FloatRef.self"]},{"inlineContent":[{"type":"codeVoice","code":"AnyObject"},{"text":" can also be used as the concrete type for an instance of a type","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that bridges to an Objective-C class. Many value types in Swift bridge to"},{"text":" ","type":"text"},{"type":"text","text":"Objective-C counterparts, like "},{"code":"String","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let s: AnyObject = \"This is a bridged string.\" as NSString","print(s is NSString)","\/\/ Prints \"true\"","","let v: AnyObject = 100 as NSNumber","print(type(of: v))","\/\/ Prints \"__NSCFNumber\""]},{"type":"paragraph","inlineContent":[{"text":"The flexible behavior of the ","type":"text"},{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":" protocol is similar to"},{"type":"text","text":" "},{"type":"text","text":"Objective-C’s "},{"code":"id","type":"codeVoice"},{"type":"text","text":" type. For this reason, imported Objective-C types"},{"type":"text","text":" "},{"text":"frequently use ","type":"text"},{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":" as the type for properties, method parameters,"},{"type":"text","text":" "},{"type":"text","text":"and return values."}]},{"text":"Casting AnyObject Instances to a Known Type","level":1,"anchor":"Casting-AnyObject-Instances-to-a-Known-Type","type":"heading"},{"inlineContent":[{"type":"text","text":"Objects with a concrete type of "},{"code":"AnyObject","type":"codeVoice"},{"text":" maintain a specific dynamic","type":"text"},{"text":" ","type":"text"},{"text":"type and can be cast to that type using one of the type-cast operators","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"("},{"type":"codeVoice","code":"as"},{"type":"text","text":", "},{"code":"as?","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"as!","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This example uses the conditional downcast operator (","type":"text"},{"code":"as?","type":"codeVoice"},{"text":") to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"conditionally cast the "},{"code":"s","type":"codeVoice"},{"text":" constant declared above to an instance of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift’s "},{"code":"String","type":"codeVoice"},{"text":" type.","type":"text"}],"type":"paragraph"},{"code":["if let message = s as? String {","    print(\"Successful cast to String: \\(message)\")","}","\/\/ Prints \"Successful cast to String: This is a bridged string.\""],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"If you have prior knowledge that an "},{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":" instance has a particular"},{"type":"text","text":" "},{"text":"type, you can use the unconditional downcast operator (","type":"text"},{"type":"codeVoice","code":"as!"},{"text":"). Performing","type":"text"},{"text":" ","type":"text"},{"text":"an invalid cast triggers a runtime error.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let message = s as! String","print(\"Successful cast to String: \\(message)\")","\/\/ Prints \"Successful cast to String: This is a bridged string.\"","","let badCase = v as! String","\/\/ Runtime error"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Casting is always safe in the context of a "},{"code":"switch","type":"codeVoice"},{"text":" statement.","type":"text"}]},{"syntax":null,"code":["let mixedArray: [AnyObject] = [s, v]","for object in mixedArray {","    switch object {","    case let x as String:","        print(\"'\\(x)' is a String\")","    default:","        print(\"'\\(object)' is not a String\")","    }","}","\/\/ Prints \"'This is a bridged string.' is a String\"","\/\/ Prints \"'100' is not a String\""],"type":"codeListing"},{"level":1,"text":"Accessing Objective-C Methods and Properties","type":"heading","anchor":"Accessing-Objective-C-Methods-and-Properties"},{"type":"paragraph","inlineContent":[{"text":"When you use ","type":"text"},{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":" as a concrete type, you have at your disposal"},{"type":"text","text":" "},{"type":"text","text":"every "},{"type":"codeVoice","code":"@objc"},{"text":" method and property—that is, methods and properties","type":"text"},{"type":"text","text":" "},{"text":"imported from Objective-C or marked with the ","type":"text"},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" attribute. Because"},{"type":"text","text":" "},{"text":"Swift can’t guarantee at compile time that these methods and properties","type":"text"},{"text":" ","type":"text"},{"text":"are actually available on an ","type":"text"},{"code":"AnyObject","type":"codeVoice"},{"type":"text","text":" instance’s underlying type, these"},{"text":" ","type":"text"},{"code":"@objc","type":"codeVoice"},{"text":" symbols are available as implicitly unwrapped optional methods and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"properties, respectively."}]},{"inlineContent":[{"type":"text","text":"This example defines an "},{"type":"codeVoice","code":"IntegerRef"},{"type":"text","text":" type with an "},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" method named"},{"text":" ","type":"text"},{"code":"getIntegerValue()","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","code":["class IntegerRef {","    let value: Int","    init(_ value: Int) {","        self.value = value","    }","","    @objc func getIntegerValue() -> Int {","        return value","    }","}","","func getObject() -> AnyObject {","    return IntegerRef(100)","}","","let obj: AnyObject = getObject()"],"syntax":null},{"inlineContent":[{"type":"text","text":"In the example, "},{"type":"codeVoice","code":"obj"},{"type":"text","text":" has a static type of "},{"type":"codeVoice","code":"AnyObject"},{"text":" and a dynamic type","type":"text"},{"type":"text","text":" "},{"text":"of ","type":"text"},{"type":"codeVoice","code":"IntegerRef"},{"text":". You can use optional chaining to call the ","type":"text"},{"code":"@objc","type":"codeVoice"},{"text":" method","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"getIntegerValue()"},{"type":"text","text":" on "},{"code":"obj","type":"codeVoice"},{"text":" safely. If you’re sure of the dynamic type of","type":"text"},{"type":"text","text":" "},{"code":"obj","type":"codeVoice"},{"text":", you can call ","type":"text"},{"code":"getIntegerValue()","type":"codeVoice"},{"type":"text","text":" directly."}],"type":"paragraph"},{"syntax":null,"code":["let possibleValue = obj.getIntegerValue?()","print(possibleValue)","\/\/ Prints \"Optional(100)\"","","let certainValue = obj.getIntegerValue()","print(certainValue)","\/\/ Prints \"100\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If the dynamic type of ","type":"text"},{"type":"codeVoice","code":"obj"},{"text":" doesn’t implement a ","type":"text"},{"code":"getIntegerValue()","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"method, the system returns a runtime error when you initialize"},{"type":"text","text":" "},{"type":"codeVoice","code":"certainValue"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, if you need to test whether "},{"type":"codeVoice","code":"obj.getIntegerValue()"},{"text":" exists,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"use optional binding before calling the method."}]},{"type":"codeListing","syntax":null,"code":["if let f = obj.getIntegerValue {","    print(\"The value of 'obj' is \\(f())\")","} else {","    print(\"'obj' does not have a 'getIntegerValue()' method\")","}","\/\/ Prints \"The value of 'obj' is 100\""]}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyObject"},"variants":[{"paths":["\/documentation\/compute\/anyobject"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyObject":{"role":"symbol","kind":"symbol","title":"AnyObject","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyObject","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"AnyObject","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"The protocol to which all classes implicitly conform."}],"url":"\/documentation\/compute\/anyobject","navigatorTitle":[{"text":"AnyObject","kind":"identifier"}]}}}