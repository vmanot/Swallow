{"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/Sequence-Implementations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/array\/foreach(_:)"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"forEach"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"body","kind":"internalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Void","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}],"platforms":["macOS"]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A closure that takes an element of the sequence as a","type":"text"},{"type":"text","text":" "},{"text":"parameter.","type":"text"}]}],"name":"body"}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The two loops in the following example produce the same output:"}]},{"type":"codeListing","code":["let numberWords = [\"one\", \"two\", \"three\"]","for word in numberWords {","    print(word)","}","\/\/ Prints \"one\"","\/\/ Prints \"two\"","\/\/ Prints \"three\"","","numberWords.forEach { word in","    print(word)","}","\/\/ Same as above"],"syntax":null},{"inlineContent":[{"text":"Using the ","type":"text"},{"code":"forEach","type":"codeVoice"},{"type":"text","text":" method is distinct from a "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"text":" loop in two","type":"text"},{"type":"text","text":" "},{"text":"important ways:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"You cannot use a ","type":"text"},{"code":"break","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"continue"},{"type":"text","text":" statement to exit the current"},{"text":" ","type":"text"},{"type":"text","text":"call of the "},{"code":"body","type":"codeVoice"},{"text":" closure or skip subsequent calls.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Using the "},{"code":"return","type":"codeVoice"},{"type":"text","text":" statement in the "},{"code":"body","type":"codeVoice"},{"type":"text","text":" closure will exit only from"},{"text":" ","type":"text"},{"text":"the current call to ","type":"text"},{"type":"codeVoice","code":"body"},{"text":", not from any outer scope, and won’t skip","type":"text"},{"text":" ","type":"text"},{"text":"subsequent calls.","type":"text"}]}]}],"type":"orderedList"}]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/forEach(_:)","interfaceLanguage":"swift"},"sections":[],"abstract":[{"type":"text","text":"Calls the given closure on each element in the sequence in the same order"},{"text":" ","type":"text"},{"type":"text","text":"as a "},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop."}],"kind":"symbol","metadata":{"symbolKind":"method","title":"forEach(_:)","extendedModule":"Swift","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"forEach"},{"kind":"text","text":"(("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}],"modules":[{"relatedModules":["Swift"],"name":"Compute"}],"role":"symbol","roleHeading":"Instance Method","externalID":"s:STsE7forEachyyy7ElementQzKXEKF::SYNTHESIZED::s:Sa"},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Void":{"abstract":[{"text":"The return type of functions that don’t explicitly specify a return type,","type":"text"},{"text":" ","type":"text"},{"text":"that is, an empty tuple ","type":"text"},{"type":"codeVoice","code":"()"},{"type":"text","text":"."}],"type":"topic","title":"Void","url":"\/documentation\/compute\/void","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Void"}],"navigatorTitle":[{"text":"Void","kind":"identifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Void"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array":{"abstract":[{"type":"text","text":"An ordered, random-access collection."}],"type":"topic","title":"Array","kind":"symbol","navigatorTitle":[{"text":"Array","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array","role":"symbol","url":"\/documentation\/compute\/array","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Array","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/forEach(_:)":{"title":"forEach(_:)","abstract":[{"type":"text","text":"Calls the given closure on each element in the sequence in the same order"},{"text":" ","type":"text"},{"type":"text","text":"as a "},{"code":"for","type":"codeVoice"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loop."}],"kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"forEach","kind":"identifier"},{"kind":"text","text":"(("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/forEach(_:)","role":"symbol","url":"\/documentation\/compute\/array\/foreach(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/Sequence-Implementations":{"abstract":[],"type":"topic","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/Sequence-Implementations","url":"\/documentation\/compute\/array\/sequence-implementations","role":"collectionGroup","title":"Sequence Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]}}}