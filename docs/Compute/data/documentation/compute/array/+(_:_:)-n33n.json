{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"+"},{"kind":"text","text":" "},{"text":"<","kind":"text"},{"text":"Other","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"internalParam","text":"lhs"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"rhs","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Other"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"text":" ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"Other","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","text":"Sequence","preciseIdentifier":"s:ST"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"kind":"typeIdentifier","text":"Other"},{"kind":"text","text":"."},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"}],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A range-replaceable collection."}]}],"name":"lhs"},{"name":"rhs","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A collection or finite sequence."}]}]}]},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"The two arguments must have the same ","type":"text"},{"type":"codeVoice","code":"Element"},{"text":" type. For example, you can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"concatenate the elements of an integer array and a "},{"code":"Range<Int>","type":"codeVoice"},{"type":"text","text":" instance."}]},{"syntax":null,"code":["let numbers = [1, 2, 3, 4]","let moreNumbers = numbers + (5...10)","print(moreNumbers)","\/\/ Prints \"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\""],"type":"codeListing"},{"inlineContent":[{"text":"The resulting collection has the type of the argument on the left-hand","type":"text"},{"text":" ","type":"text"},{"text":"side. In the example above, ","type":"text"},{"code":"moreNumbers","type":"codeVoice"},{"type":"text","text":" has the same type as "},{"type":"codeVoice","code":"numbers"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which is "},{"code":"[Int]","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/+(_:_:)-n33n"},"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/RangeReplaceableCollection-Implementations"]]},"abstract":[{"type":"text","text":"Creates a new collection by concatenating the elements of a collection and"},{"text":" ","type":"text"},{"type":"text","text":"a sequence."}],"kind":"symbol","sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/array\/+(_:_:)-n33n"]}],"metadata":{"modules":[{"name":"Compute","relatedModules":["Swift"]}],"extendedModule":"Swift","role":"symbol","title":"+(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"+","kind":"identifier"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Other"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"Other","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"externalID":"s:SmsE1poiyxx_qd__tSTRd__7ElementQyd__ABRtzlFZ::SYNTHESIZED::s:Sa","symbolKind":"op","roleHeading":"Operator"},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Array":{"abstract":[{"type":"text","text":"An ordered, random-access collection."}],"type":"topic","title":"Array","kind":"symbol","navigatorTitle":[{"text":"Array","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array","role":"symbol","url":"\/documentation\/compute\/array","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Array","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/RangeReplaceableCollection-Implementations":{"role":"collectionGroup","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/RangeReplaceableCollection-Implementations","type":"topic","kind":"article","title":"RangeReplaceableCollection Implementations","url":"\/documentation\/compute\/array\/rangereplaceablecollection-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"url":"\/documentation\/compute\/sequence","navigatorTitle":[{"kind":"identifier","text":"Sequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","title":"Sequence","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Sequence","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequenceâ€™s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/+(_:_:)-n33n":{"url":"\/documentation\/compute\/array\/+(_:_:)-n33n","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/+(_:_:)-n33n","type":"topic","kind":"symbol","title":"+(_:_:)","abstract":[{"text":"Creates a new collection by concatenating the elements of a collection and","type":"text"},{"text":" ","type":"text"},{"text":"a sequence.","type":"text"}],"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"+"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"text":"Other","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Other"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}]}}}