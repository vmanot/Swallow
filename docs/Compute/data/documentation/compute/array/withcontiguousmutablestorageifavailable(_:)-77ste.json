{"variants":[{"paths":["\/documentation\/compute\/array\/withcontiguousmutablestorageifavailable(_:)-77ste"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/withContiguousMutableStorageIfAvailable(_:)-77ste","interfaceLanguage":"swift"},"metadata":{"symbolKind":"method","role":"symbol","externalID":"s:Sa39withContiguousMutableStorageIfAvailableyqd__Sgqd__SryxGzKXEKlF","extendedModule":"Swift","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"title":"withContiguousMutableStorageIfAvailable(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withContiguousMutableStorageIfAvailable"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">(("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:Sr","text":"UnsafeMutableBufferPointer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":"?","kind":"text"}],"roleHeading":"Instance Method"},"kind":"symbol","sections":[],"abstract":[{"text":"Executes a closure on the collection’s contiguous storage.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/MutableCollection-Implementations"]]},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"mutating"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withContiguousMutableStorageIfAvailable","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"body"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:Sr","text":"UnsafeMutableBufferPointer"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":"?"}]}],"kind":"declarations"},{"parameters":[{"name":"body","content":[{"inlineContent":[{"text":"A closure that receives an in-out","type":"text"},{"text":" ","type":"text"},{"code":"UnsafeMutableBufferPointer","type":"codeVoice"},{"type":"text","text":" to the collection’s contiguous storage."}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"inlineContent":[{"type":"text","text":"The value returned from "},{"code":"body","type":"codeVoice"},{"type":"text","text":", unless the collection doesn’t"},{"text":" ","type":"text"},{"text":"support contiguous storage, in which case the method ignores ","type":"text"},{"type":"codeVoice","code":"body"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"text","text":"returns "},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"This method calls "},{"code":"body(buffer)","type":"codeVoice"},{"type":"text","text":", where "},{"type":"codeVoice","code":"buffer"},{"type":"text","text":" provides access to the"},{"type":"text","text":" "},{"type":"text","text":"contiguous mutable storage of the entire collection. If the contiguous"},{"text":" ","type":"text"},{"type":"text","text":"storage doesn’t exist, the collection creates it. If the collection"},{"type":"text","text":" "},{"text":"doesn’t support an internal representation in the form of contiguous","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"mutable storage, this method doesn’t call "},{"type":"codeVoice","code":"body"},{"type":"text","text":" — it immediately"},{"type":"text","text":" "},{"text":"returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"The optimizer can often eliminate bounds- and uniqueness-checking","type":"text"},{"type":"text","text":" "},{"type":"text","text":"within an algorithm. When that fails, however, invoking the same"},{"type":"text","text":" "},{"type":"text","text":"algorithm on the "},{"type":"codeVoice","code":"buffer"},{"text":" argument may let you trade safety for speed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Always perform any necessary cleanup in the closure, because the","type":"text"},{"text":" ","type":"text"},{"text":"method makes no guarantees about the state of the collection if the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"closure throws an error. Your changes to the collection may be absent"},{"type":"text","text":" "},{"type":"text","text":"from the collection after throwing the error, because the closure could"},{"type":"text","text":" "},{"type":"text","text":"receive a temporary copy rather than direct access to the collection’s"},{"type":"text","text":" "},{"type":"text","text":"storage."}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"Your ","type":"text"},{"type":"codeVoice","code":"body"},{"type":"text","text":" closure must not replace "},{"type":"codeVoice","code":"buffer"},{"type":"text","text":". This leads"},{"text":" ","type":"text"},{"text":"to a crash in all implementations of this method within the standard","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"library."}],"type":"paragraph"}],"name":"Warning","type":"aside","style":"warning"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Successive calls to this method may provide a different pointer on each"},{"text":" ","type":"text"},{"text":"call. Don’t store ","type":"text"},{"type":"codeVoice","code":"buffer"},{"text":" outside of this method.","type":"text"}]},{"inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" that provides its own implementation of this method"},{"type":"text","text":" "},{"type":"text","text":"must provide contiguous storage to its elements in the same order"},{"type":"text","text":" "},{"text":"as they appear in the collection. This guarantees that it’s possible to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"generate contiguous mutable storage to any of its subsequences by slicing"},{"text":" ","type":"text"},{"code":"buffer","type":"codeVoice"},{"type":"text","text":" with a range formed from the distances to the subsequence’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"startIndex"},{"type":"text","text":" and "},{"code":"endIndex","type":"codeVoice"},{"text":", respectively.","type":"text"}],"type":"paragraph"}]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Array":{"abstract":[{"type":"text","text":"An ordered, random-access collection."}],"type":"topic","title":"Array","kind":"symbol","navigatorTitle":[{"text":"Array","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array","role":"symbol","url":"\/documentation\/compute\/array","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Array","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/MutableCollection-Implementations":{"url":"\/documentation\/compute\/array\/mutablecollection-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/MutableCollection-Implementations","title":"MutableCollection Implementations","kind":"article","role":"collectionGroup","type":"topic","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Array/withContiguousMutableStorageIfAvailable(_:)-77ste":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array\/withContiguousMutableStorageIfAvailable(_:)-77ste","kind":"symbol","abstract":[{"text":"Executes a closure on the collection’s contiguous storage.","type":"text"}],"role":"symbol","url":"\/documentation\/compute\/array\/withcontiguousmutablestorageifavailable(_:)-77ste","title":"withContiguousMutableStorageIfAvailable(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withContiguousMutableStorageIfAvailable","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"UnsafeMutableBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:Sr"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":"?","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableBufferPointer":{"kind":"symbol","url":"\/documentation\/compute\/unsafemutablebufferpointer","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UnsafeMutableBufferPointer","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UnsafeMutableBufferPointer"}],"abstract":[{"type":"text","text":"A nonowning collection interface to a buffer of mutable"},{"text":" ","type":"text"},{"text":"elements stored contiguously in memory.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer","title":"UnsafeMutableBufferPointer","type":"topic","role":"symbol"}}}