{"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","interfaceLanguage":"swift"},"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"@frozen","kind":"attribute"},{"text":" ","kind":"text"},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Bool"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Bool"},{"text":" represents Boolean values in Swift. Create instances of ","type":"text"},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" by"},{"type":"text","text":" "},{"text":"using one of the Boolean literals ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":", or by assigning the"},{"type":"text","text":" "},{"text":"result of a Boolean method or operation to a variable or constant.","type":"text"}]},{"code":["var godotHasArrived = false","","let numbers = 1...5","let containsTen = numbers.contains(10)","print(containsTen)","\/\/ Prints \"false\"","","let (a, b) = (100, 101)","let aFirst = a < b","print(aFirst)","\/\/ Prints \"true\""],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift uses only simple Boolean values in conditional contexts to help avoid"},{"type":"text","text":" "},{"type":"text","text":"accidental programming errors and to help maintain the clarity of each"},{"type":"text","text":" "},{"type":"text","text":"control statement. Unlike in other programming languages, in Swift, integers"},{"type":"text","text":" "},{"text":"and strings cannot be used where a Boolean value is required.","type":"text"}]},{"inlineContent":[{"text":"For example, the following code sample does not compile, because it","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"attempts to use the integer "},{"type":"codeVoice","code":"i"},{"text":" in a logical context:","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["var i = 5","while i {","    print(i)","    i -= 1","}","\/\/ error: Cannot convert value of type 'Int' to expected condition type 'Bool'"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The correct approach in Swift is to compare the "},{"type":"codeVoice","code":"i"},{"text":" value with zero in the","type":"text"},{"text":" ","type":"text"},{"code":"while","type":"codeVoice"},{"type":"text","text":" statement."}]},{"code":["while i != 0 {","    print(i)","    i -= 1","}"],"syntax":null,"type":"codeListing"},{"text":"Using Imported Boolean values","level":1,"anchor":"Using-Imported-Boolean-values","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The C ","type":"text"},{"code":"bool","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Boolean"},{"text":" types and the Objective-C ","type":"text"},{"code":"BOOL","type":"codeVoice"},{"type":"text","text":" type are all"},{"type":"text","text":" "},{"text":"bridged into Swift as ","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":". The single ","type":"text"},{"type":"codeVoice","code":"Bool"},{"text":" type in Swift guarantees","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that functions, methods, and properties imported from C and Objective-C"},{"type":"text","text":" "},{"text":"have a consistent type interface.","type":"text"}]}]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"variants":[{"paths":["\/documentation\/compute\/bool"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Bool","kind":"identifier"}],"modules":[{"name":"Compute"}],"externalID":"s:Sb","navigatorTitle":[{"text":"Bool","kind":"identifier"}],"role":"symbol","title":"Bool","roleHeading":"Structure","symbolKind":"struct"},"kind":"symbol","topicSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/!(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/&&(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/__(_:_:)"],"title":"Operators","generated":true,"anchor":"Operators"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/init()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/init(_:)-25sp9"],"anchor":"Initializers","title":"Initializers","generated":true},{"title":"Instance Methods","anchor":"Instance-Methods","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/toggle()"],"generated":true},{"anchor":"Type-Methods","title":"Type Methods","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/random()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/random(using:)"],"generated":true},{"anchor":"Default-Implementations","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/CustomReflectable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/CustomStringConvertible-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/Decodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/Encodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/ExpressibleByBooleanLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/LosslessStringConvertible-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/_CustomPlaygroundQuickLookable-Implementations"],"generated":true,"title":"Default Implementations"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"code":"true","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}],"relationshipsSections":[{"kind":"relationships","type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/com.swallow.documentation.Compute\/10Accelerate10BNNSScalarP","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByBooleanLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","doc:\/\/com.swallow.documentation.Compute\/7Swallow21AnyCodableConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7BooleanP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16BooleanInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18ByteOrderSwappableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow14CoderPrimitiveP","doc:\/\/com.swallow.documentation.Compute\/7Swallow19EitherRepresentableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22EitherValueConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22FloatingPointInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16IntegerInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow17NumberConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow15NumberInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22SignedIntegerInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP","doc:\/\/com.swallow.documentation.Compute\/7Swallow24UnsignedIntegerInitiableP"]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Bool/ExpressibleByBooleanLiteral-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/ExpressibleByBooleanLiteral-Implementations","title":"ExpressibleByBooleanLiteral Implementations","role":"collectionGroup","type":"topic","url":"\/documentation\/compute\/bool\/expressiblebybooleanliteral-implementations","kind":"article","abstract":[]},"doc://com.swallow.documentation.Compute/7Swallow19EitherRepresentableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow19EitherRepresentableP","title":"Swallow.EitherRepresentable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool/random(using:)":{"url":"\/documentation\/compute\/bool\/random(using:)","title":"random(using:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"random"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"using","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Returns a random Boolean value, using the given generator as a source for"},{"type":"text","text":" "},{"type":"text","text":"randomness."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/random(using:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/CVarArg":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CVarArg"}],"abstract":[{"text":"A type whose instances can be encoded, and appropriately passed, as","type":"text"},{"text":" ","type":"text"},{"text":"elements of a C ","type":"text"},{"type":"codeVoice","code":"va_list"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"CVarArg","kind":"identifier"}],"title":"CVarArg","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","url":"\/documentation\/compute\/cvararg"},"doc://com.swallow.documentation.Compute/7Swallow18ByteOrderSwappableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18ByteOrderSwappableP","title":"Swallow.ByteOrderSwappable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"type":"topic","title":"Equatable","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","role":"symbol","url":"\/documentation\/compute\/equatable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomReflectable":{"url":"\/documentation\/compute\/customreflectable","role":"symbol","abstract":[{"text":"A type that explicitly supplies its own mirror.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","title":"CustomReflectable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomReflectable"}],"navigatorTitle":[{"kind":"identifier","text":"CustomReflectable"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool/Hashable-Implementations":{"abstract":[],"kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/Hashable-Implementations","type":"topic","url":"\/documentation\/compute\/bool\/hashable-implementations","title":"Hashable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool/LosslessStringConvertible-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/LosslessStringConvertible-Implementations","url":"\/documentation\/compute\/bool\/losslessstringconvertible-implementations","role":"collectionGroup","kind":"article","title":"LosslessStringConvertible Implementations","type":"topic","abstract":[]},"doc://com.swallow.documentation.Compute/7Swallow16IntegerInitiableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16IntegerInitiableP","title":"Swallow.IntegerInitiable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow17NumberConvertibleP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow17NumberConvertibleP","title":"Swallow.NumberConvertible","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow7BooleanP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7BooleanP","title":"Swallow.Boolean","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Encodable":{"url":"\/documentation\/compute\/encodable","navigatorTitle":[{"text":"Encodable","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Encodable","kind":"identifier"}],"abstract":[{"text":"A type that can encode itself to an external representation.","type":"text"}],"type":"topic","title":"Encodable","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable"},"doc://com.swallow.documentation.Compute/7Swallow14CoderPrimitiveP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow14CoderPrimitiveP","title":"Swallow.CoderPrimitive","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow7TrivialP":{"type":"unresolvable","title":"Swallow.Trivial","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool/&&(_:_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/&&(_:_:)","title":"&&(_:_:)","role":"symbol","type":"topic","url":"\/documentation\/compute\/bool\/&&(_:_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"&&"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", ","kind":"text"},{"text":"@autoclosure ","kind":"attribute"},{"text":"() ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"text":"Performs a logical AND operation on two Boolean values.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool/init()":{"kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"type":"topic","role":"symbol","title":"init()","url":"\/documentation\/compute\/bool\/init()","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/init()","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Decodable":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Decodable","kind":"identifier"}],"title":"Decodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","abstract":[{"type":"text","text":"A type that can decode itself from an external representation."}],"url":"\/documentation\/compute\/decodable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Decodable"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool/__(_:_:)":{"abstract":[{"text":"Performs a logical OR operation on two Boolean values.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/__(_:_:)","role":"symbol","kind":"symbol","url":"\/documentation\/compute\/bool\/__(_:_:)","title":"||(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"||"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"@autoclosure ","kind":"attribute"},{"text":"() ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool/Encodable-Implementations":{"url":"\/documentation\/compute\/bool\/encodable-implementations","role":"collectionGroup","kind":"article","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/Encodable-Implementations","title":"Encodable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool/Equatable-Implementations":{"title":"Equatable Implementations","url":"\/documentation\/compute\/bool\/equatable-implementations","role":"collectionGroup","type":"topic","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/Equatable-Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/LosslessStringConvertible":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LosslessStringConvertible","kind":"identifier"}],"kind":"symbol","title":"LosslessStringConvertible","abstract":[{"type":"text","text":"A type that can be represented as a string in a lossless, unambiguous way."}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"LosslessStringConvertible","kind":"identifier"}],"url":"\/documentation\/compute\/losslessstringconvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool/init(_:)-25sp9":{"type":"topic","abstract":[],"kind":"symbol","url":"\/documentation\/compute\/bool\/init(_:)-25sp9","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/init(_:)-25sp9","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"text":")","kind":"text"}]},"doc://com.swallow.documentation.Compute/7Swallow16BooleanInitiableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16BooleanInitiableP","title":"Swallow.BooleanInitiable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool/!(_:)":{"abstract":[{"text":"Performs a logical NOT operation on a Boolean value.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/!(_:)","role":"symbol","kind":"symbol","url":"\/documentation\/compute\/bool\/!(_:)","title":"!(_:)","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"!","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool/random()":{"role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/random()","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"random","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"title":"random()","url":"\/documentation\/compute\/bool\/random()","abstract":[{"type":"text","text":"Returns a random Boolean value."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool/toggle()":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/toggle()","title":"toggle()","role":"symbol","type":"topic","url":"\/documentation\/compute\/bool\/toggle()","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"toggle","kind":"identifier"},{"kind":"text","text":"()"}],"abstract":[{"text":"Toggles the Boolean variable’s value.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Sendable","kind":"identifier"}],"title":"Sendable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","abstract":[],"url":"\/documentation\/compute\/sendable","role":"symbol","navigatorTitle":[{"text":"Sendable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool/CustomReflectable-Implementations":{"abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/CustomReflectable-Implementations","role":"collectionGroup","kind":"article","url":"\/documentation\/compute\/bool\/customreflectable-implementations","title":"CustomReflectable Implementations"},"doc://com.swallow.documentation.Compute/7Swallow20ByteTupleConvertibleP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP","title":"Swallow.ByteTupleConvertible","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible":{"url":"\/documentation\/compute\/customstringconvertible","navigatorTitle":[{"kind":"identifier","text":"CustomStringConvertible"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomStringConvertible","kind":"identifier"}],"abstract":[{"text":"A type with a customized textual representation.","type":"text"}],"type":"topic","title":"CustomStringConvertible","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/BitwiseCopyable":{"title":"BitwiseCopyable","abstract":[],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BitwiseCopyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","url":"\/documentation\/compute\/bitwisecopyable","navigatorTitle":[{"kind":"identifier","text":"BitwiseCopyable"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByBooleanLiteral":{"abstract":[{"type":"text","text":"A type that can be initialized with the Boolean literals "},{"type":"codeVoice","code":"true"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/compute\/expressiblebybooleanliteral","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByBooleanLiteral","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ExpressibleByBooleanLiteral"}],"kind":"symbol","navigatorTitle":[{"text":"ExpressibleByBooleanLiteral","kind":"identifier"}],"title":"ExpressibleByBooleanLiteral"},"doc://com.swallow.documentation.Compute/7Swallow22SignedIntegerInitiableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22SignedIntegerInitiableP","title":"Swallow.SignedIntegerInitiable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool/CustomStringConvertible-Implementations":{"url":"\/documentation\/compute\/bool\/customstringconvertible-implementations","type":"topic","title":"CustomStringConvertible Implementations","role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/CustomStringConvertible-Implementations","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool/Decodable-Implementations":{"title":"Decodable Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/Decodable-Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/compute\/bool\/decodable-implementations","type":"topic","abstract":[]},"doc://com.swallow.documentation.Compute/10Accelerate10BNNSScalarP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/10Accelerate10BNNSScalarP","title":"Accelerate.BNNSScalar","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow21AnyCodableConvertibleP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21AnyCodableConvertibleP","title":"Swallow.AnyCodableConvertible","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"title":"Copyable","abstract":[{"type":"text","text":"A type whose values can be implicitly or explicitly copied."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Copyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","url":"\/documentation\/compute\/copyable","navigatorTitle":[{"text":"Copyable","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow22EitherValueConvertibleP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22EitherValueConvertibleP","title":"Swallow.EitherValueConvertible","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Hashable"}],"title":"Hashable","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that can be hashed into a "},{"type":"codeVoice","code":"Hasher"},{"type":"text","text":" to produce an integer hash value."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","url":"\/documentation\/compute\/hashable","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow15NumberInitiableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow15NumberInitiableP","title":"Swallow.NumberInitiable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow22FloatingPointInitiableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22FloatingPointInitiableP","title":"Swallow.FloatingPointInitiable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow24UnsignedIntegerInitiableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow24UnsignedIntegerInitiableP","title":"Swallow.UnsignedIntegerInitiable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool/_CustomPlaygroundQuickLookable-Implementations":{"title":"_CustomPlaygroundQuickLookable Implementations","url":"\/documentation\/compute\/bool\/_customplaygroundquicklookable-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool\/_CustomPlaygroundQuickLookable-Implementations","kind":"article","role":"collectionGroup","abstract":[],"type":"topic"}}}