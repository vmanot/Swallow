{"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"metadata":{"title":"PartialRangeFrom","symbolKind":"struct","modules":[{"name":"Compute"}],"role":"symbol","roleHeading":"Structure","externalID":"s:s16PartialRangeFromV","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"PartialRangeFrom","kind":"identifier"}],"navigatorTitle":[{"text":"PartialRangeFrom","kind":"identifier"}]},"sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"@frozen","kind":"attribute"},{"text":" ","kind":"text"},{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PartialRangeFrom","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Bound","kind":"genericParameter"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Bound"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","kind":"typeIdentifier","preciseIdentifier":"s:SL","text":"Comparable"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"inlineContent":[{"text":"You create ","type":"text"},{"code":"PartialRangeFrom","type":"codeVoice"},{"type":"text","text":" instances by using the postfix range operator"},{"text":" ","type":"text"},{"type":"text","text":"(postfix "},{"code":"...","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let atLeastFive = 5..."]},{"type":"paragraph","inlineContent":[{"text":"You can use a partial range to quickly check if a value is contained in a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"particular range of values. For example:"}]},{"code":["atLeastFive.contains(4)","\/\/ false","atLeastFive.contains(5)","\/\/ true","atLeastFive.contains(6)","\/\/ true"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use a partial range of a collection’s indices to represent the"},{"text":" ","type":"text"},{"type":"text","text":"range from the partial range’s lower bound up to the end of the"},{"text":" ","type":"text"},{"type":"text","text":"collection."}]},{"syntax":null,"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[3...])","\/\/ Prints \"[40, 50, 60, 70]\""],"type":"codeListing"},{"type":"heading","level":2,"anchor":"Using-a-Partial-Range-as-a-Sequence","text":"Using a Partial Range as a Sequence"},{"inlineContent":[{"type":"text","text":"When a partial range uses integers as its lower and upper bounds, or any"},{"type":"text","text":" "},{"type":"text","text":"other type that conforms to the "},{"type":"codeVoice","code":"Strideable"},{"type":"text","text":" protocol with an integer"},{"type":"text","text":" "},{"type":"text","text":"stride, you can use that range in a "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop or with any sequence"},{"type":"text","text":" "},{"type":"text","text":"method that doesn’t require that the sequence is finite. The elements of"},{"type":"text","text":" "},{"type":"text","text":"a partial range are the consecutive values from its lower bound continuing"},{"text":" ","type":"text"},{"type":"text","text":"upward indefinitely."}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["func isTheMagicNumber(_ x: Int) -> Bool {","    return x == 3","}","","for x in 1... {","    if isTheMagicNumber(x) {","        print(\"\\(x) is the magic number!\")","        break","    } else {","        print(\"\\(x) wasn't it...\")","    }","}","\/\/ \"1 wasn't it...\"","\/\/ \"2 wasn't it...\"","\/\/ \"3 is the magic number!\""]},{"inlineContent":[{"type":"text","text":"Because a "},{"type":"codeVoice","code":"PartialRangeFrom"},{"type":"text","text":" sequence counts upward indefinitely, do not"},{"text":" ","type":"text"},{"text":"use one with methods that read the entire sequence before returning, such","type":"text"},{"type":"text","text":" "},{"text":"as ","type":"text"},{"code":"map(_:)","type":"codeVoice"},{"type":"text","text":", "},{"code":"filter(_:)","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"suffix(_:)","type":"codeVoice"},{"text":". It is safe to use operations","type":"text"},{"type":"text","text":" "},{"text":"that put an upper limit on the number of elements they access, such as","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"prefix(_:)"},{"type":"text","text":" or "},{"code":"dropFirst(_:)","type":"codeVoice"},{"text":", and operations that you can guarantee","type":"text"},{"text":" ","type":"text"},{"text":"will terminate, such as passing a closure you know will eventually return","type":"text"},{"text":" ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"first(where:)"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In the following example, the ","type":"text"},{"code":"asciiTable","type":"codeVoice"},{"type":"text","text":" sequence is made by zipping"},{"type":"text","text":" "},{"type":"text","text":"together the characters in the "},{"code":"alphabet","type":"codeVoice"},{"type":"text","text":" string with a partial range"},{"type":"text","text":" "},{"text":"starting at 65, the ASCII value of the capital letter A. Iterating over","type":"text"},{"type":"text","text":" "},{"type":"text","text":"two zipped sequences continues only as long as the shorter of the two"},{"text":" ","type":"text"},{"text":"sequences, so the iteration stops at the end of ","type":"text"},{"code":"alphabet","type":"codeVoice"},{"type":"text","text":"."}]},{"code":["let alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","let asciiTable = zip(65..., alphabet)","for (code, letter) in asciiTable {","    print(code, letter)","}","\/\/ \"65 A\"","\/\/ \"66 B\"","\/\/ \"67 C\"","\/\/ ...","\/\/ \"89 Y\"","\/\/ \"90 Z\""],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"The behavior of incrementing indefinitely is determined by the type of"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Bound"},{"type":"text","text":". For example, iterating over an instance of"},{"type":"text","text":" "},{"code":"PartialRangeFrom<Int>","type":"codeVoice"},{"type":"text","text":" traps when the sequence’s next value would be"},{"text":" ","type":"text"},{"text":"above ","type":"text"},{"type":"codeVoice","code":"Int.max"},{"type":"text","text":"."}],"type":"paragraph"}]}],"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A partial interval extending upward from a lower bound."}],"topicSections":[{"title":"Initializers","anchor":"Initializers","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom\/init(_:)"]},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom\/lowerBound"],"title":"Instance Properties","generated":true,"anchor":"Instance-Properties"},{"generated":true,"title":"Default Implementations","anchor":"Default-Implementations","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom\/Decodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom\/Encodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom\/RangeExpression-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom\/Sequence-Implementations"]}],"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence"],"type":"conformsTo","kind":"relationships"}],"variants":[{"paths":["\/documentation\/compute\/partialrangefrom"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeFrom/init(_:)":{"title":"init(_:)","role":"symbol","type":"topic","abstract":[],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Bound"},{"text":")","kind":"text"}],"url":"\/documentation\/compute\/partialrangefrom\/init(_:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom\/init(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeFrom":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"PartialRangeFrom","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom","url":"\/documentation\/compute\/partialrangefrom","navigatorTitle":[{"kind":"identifier","text":"PartialRangeFrom"}],"abstract":[{"type":"text","text":"A partial interval extending upward from a lower bound."}],"role":"symbol","title":"PartialRangeFrom"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"url":"\/documentation\/compute\/sequence","type":"topic","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Sequence"}],"navigatorTitle":[{"text":"Sequence","kind":"identifier"}],"conformance":{"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Strideable"},{"type":"text","text":" and "},{"code":"Bound.Stride","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"SignedInteger","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"title":"Sequence","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeExpression":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression","abstract":[{"text":"A type that can be used to slice a collection.","type":"text"}],"url":"\/documentation\/compute\/rangeexpression","title":"RangeExpression","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RangeExpression"}],"navigatorTitle":[{"text":"RangeExpression","kind":"identifier"}],"role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Decodable":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/compute\/decodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","title":"Decodable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Decodable","kind":"identifier"}],"navigatorTitle":[{"text":"Decodable","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"text":" and ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":".","type":"text"}]},"abstract":[{"type":"text","text":"A type that can decode itself from an external representation."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeFrom/Sequence-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom\/Sequence-Implementations","type":"topic","title":"Sequence Implementations","kind":"article","url":"\/documentation\/compute\/partialrangefrom\/sequence-implementations","role":"collectionGroup","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/compute\/copyable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","title":"Copyable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Copyable"}],"navigatorTitle":[{"text":"Copyable","kind":"identifier"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"abstract":[{"type":"text","text":"A type whose values can be implicitly or explicitly copied."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Encodable":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","abstract":[{"type":"text","text":"A type that can encode itself to an external representation."}],"url":"\/documentation\/compute\/encodable","title":"Encodable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Encodable"}],"navigatorTitle":[{"kind":"identifier","text":"Encodable"}],"role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Encodable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeFrom/Encodable-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom\/Encodable-Implementations","role":"collectionGroup","title":"Encodable Implementations","kind":"article","abstract":[],"url":"\/documentation\/compute\/partialrangefrom\/encodable-implementations","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"abstract":[],"title":"Sendable","url":"\/documentation\/compute\/sendable","navigatorTitle":[{"text":"Sendable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Sendable"}],"kind":"symbol","type":"topic","role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"text":" and ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeFrom/RangeExpression-Implementations":{"kind":"article","role":"collectionGroup","abstract":[],"url":"\/documentation\/compute\/partialrangefrom\/rangeexpression-implementations","title":"RangeExpression Implementations","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom\/RangeExpression-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeFrom/lowerBound":{"url":"\/documentation\/compute\/partialrangefrom\/lowerbound","type":"topic","title":"lowerBound","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom\/lowerBound","role":"symbol","abstract":[],"kind":"symbol","fragments":[{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"lowerBound"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bound"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable":{"url":"\/documentation\/compute\/comparable","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared using the relational operators ","type":"text"},{"code":"<","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Comparable"}],"title":"Comparable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Comparable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeFrom/Decodable-Implementations":{"title":"Decodable Implementations","url":"\/documentation\/compute\/partialrangefrom\/decodable-implementations","kind":"article","role":"collectionGroup","type":"topic","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom\/Decodable-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}