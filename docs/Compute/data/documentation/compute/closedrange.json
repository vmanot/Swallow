{"topicSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/init(_:)-er19","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/init(_:)-rhzn","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/init(uncheckedBounds:)"],"generated":true,"title":"Initializers","anchor":"Initializers"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/lowerBound","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/upperBound"],"anchor":"Instance-Properties","title":"Instance Properties","generated":true},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/clamped(to:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/overlaps(_:)-7dfep","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/overlaps(_:)-947dt"],"generated":true,"anchor":"Instance-Methods","title":"Instance Methods"},{"anchor":"Default-Implementations","title":"Default Implementations","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/BidirectionalCollection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/Collection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/CustomDebugStringConvertible-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/CustomReflectable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/CustomStringConvertible-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/Decodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/Encodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/RangeExpression-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/Sequence-Implementations"]}],"abstract":[{"type":"text","text":"An interval from a lower bound up to, and including, an upper bound."}],"metadata":{"role":"symbol","symbolKind":"struct","title":"ClosedRange","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ClosedRange","kind":"identifier"}],"roleHeading":"Structure","modules":[{"name":"Compute"}],"navigatorTitle":[{"text":"ClosedRange","kind":"identifier"}],"externalID":"s:SN"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"@frozen","kind":"attribute"},{"kind":"text","text":" "},{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ClosedRange","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Bound","kind":"genericParameter"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:SL","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","kind":"typeIdentifier","text":"Comparable"}],"platforms":["macOS"]}]},{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You create a "},{"type":"codeVoice","code":"ClosedRange"},{"type":"text","text":" instance by using the closed range"},{"type":"text","text":" "},{"text":"operator (","type":"text"},{"type":"codeVoice","code":"..."},{"text":").","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let throughFive = 0...5"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"code":"ClosedRange","type":"codeVoice"},{"type":"text","text":" instance contains both its lower bound and its"},{"type":"text","text":" "},{"text":"upper bound.","type":"text"}]},{"code":["throughFive.contains(3)","\/\/ true","throughFive.contains(10)","\/\/ false","throughFive.contains(5)","\/\/ true"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Because a closed range includes its upper bound, a closed range whose lower"},{"text":" ","type":"text"},{"type":"text","text":"bound is equal to the upper bound contains that value. Therefore, a"},{"type":"text","text":" "},{"code":"ClosedRange","type":"codeVoice"},{"type":"text","text":" instance cannot represent an empty range."}],"type":"paragraph"},{"code":["let zeroInclusive = 0...0","zeroInclusive.contains(0)","\/\/ true","zeroInclusive.isEmpty","\/\/ false"],"syntax":null,"type":"codeListing"},{"type":"heading","level":2,"text":"Using a Closed Range as a Collection of Consecutive Values","anchor":"Using-a-Closed-Range-as-a-Collection-of-Consecutive-Values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a closed range uses integers as its lower and upper bounds, or any"},{"type":"text","text":" "},{"type":"text","text":"other type that conforms to the "},{"type":"codeVoice","code":"Strideable"},{"text":" protocol with an integer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"stride, you can use that range in a "},{"code":"for","type":"codeVoice"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loop or with any sequence or"},{"text":" ","type":"text"},{"text":"collection method. The elements of the range are the consecutive values","type":"text"},{"text":" ","type":"text"},{"text":"from its lower bound up to, and including, its upper bound.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["for n in 3...5 {","    print(n)","}","\/\/ Prints \"3\"","\/\/ Prints \"4\"","\/\/ Prints \"5\""]},{"inlineContent":[{"text":"Because floating-point types such as ","type":"text"},{"code":"Float","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Double","type":"codeVoice"},{"type":"text","text":" are their own"},{"text":" ","type":"text"},{"code":"Stride","type":"codeVoice"},{"text":" types, they cannot be used as the bounds of a countable range. If","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you need to iterate over consecutive floating-point values, see the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"stride(from:through:by:)"},{"type":"text","text":" function."}],"type":"paragraph"}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"relationshipsSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomAccessCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","doc:\/\/com.swallow.documentation.Compute\/7Swallow27BoundInitiableRangeProtocolP","doc:\/\/com.swallow.documentation.Compute\/7Swallow19ClosedRangeProtocolP","doc:\/\/com.swallow.documentation.Compute\/7Swallow13RangeProtocolP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"variants":[{"paths":["\/documentation\/compute\/closedrange"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/CustomDebugStringConvertible":{"url":"\/documentation\/compute\/customdebugstringconvertible","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":"."}]},"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A type with a customized textual representation suitable for debugging"},{"text":" ","type":"text"},{"text":"purposes.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","title":"CustomDebugStringConvertible","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomDebugStringConvertible"}],"navigatorTitle":[{"text":"CustomDebugStringConvertible","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible":{"abstract":[{"text":"A type with a customized textual representation.","type":"text"}],"title":"CustomStringConvertible","url":"\/documentation\/compute\/customstringconvertible","navigatorTitle":[{"kind":"identifier","text":"CustomStringConvertible"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomStringConvertible","kind":"identifier"}],"kind":"symbol","type":"topic","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/upperBound":{"fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"upperBound"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bound"}],"type":"topic","role":"symbol","url":"\/documentation\/compute\/closedrange\/upperbound","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/upperBound","title":"upperBound","abstract":[]},"doc://com.swallow.documentation.Compute/7Swallow19ClosedRangeProtocolP":{"type":"unresolvable","title":"Swallow.ClosedRangeProtocol","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow19ClosedRangeProtocolP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection":{"url":"\/documentation\/compute\/collection","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Strideable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Bound.Stride"},{"text":" conforms to ","type":"text"},{"code":"SignedInteger","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A sequence whose elements can be traversed multiple times,"},{"type":"text","text":" "},{"type":"text","text":"nondestructively, and accessed by an indexed subscript."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","title":"Collection","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Collection"}],"navigatorTitle":[{"text":"Collection","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/CustomStringConvertible-Implementations":{"abstract":[],"type":"topic","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/CustomStringConvertible-Implementations","title":"CustomStringConvertible Implementations","url":"\/documentation\/compute\/closedrange\/customstringconvertible-implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/Equatable-Implementations":{"url":"\/documentation\/compute\/closedrange\/equatable-implementations","role":"collectionGroup","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/Equatable-Implementations","title":"Equatable Implementations","type":"topic","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/CustomDebugStringConvertible-Implementations":{"role":"collectionGroup","title":"CustomDebugStringConvertible Implementations","abstract":[],"url":"\/documentation\/compute\/closedrange\/customdebugstringconvertible-implementations","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/CustomDebugStringConvertible-Implementations","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/lowerBound":{"abstract":[],"type":"topic","title":"lowerBound","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/lowerBound","kind":"symbol","role":"symbol","fragments":[{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"text":"lowerBound","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bound"}],"url":"\/documentation\/compute\/closedrange\/lowerbound"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/init(uncheckedBounds:)":{"role":"symbol","abstract":[],"url":"\/documentation\/compute\/closedrange\/init(uncheckedbounds:)","title":"init(uncheckedBounds:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"uncheckedBounds","kind":"externalParam"},{"text":": (lower","kind":"text"},{"text":": ","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"kind":"text","text":", upper"},{"kind":"text","text":": "},{"text":"Bound","kind":"typeIdentifier"},{"text":"))","kind":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/init(uncheckedBounds:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/init(_:)-rhzn":{"url":"\/documentation\/compute\/closedrange\/init(_:)-rhzn","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Strideable"},{"text":" and ","type":"text"},{"code":"Bound.Stride","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"SignedInteger"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"deprecated":true,"kind":"symbol","role":"symbol","abstract":[{"text":"Now that Range is conditionally a collection when Bound: Strideable,","type":"text"},{"type":"text","text":" "},{"text":"CountableRange is no longer needed. This is a deprecated initializer","type":"text"},{"text":" ","type":"text"},{"text":"for any remaining uses of Range(countableRange).","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/init(_:)-rhzn","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"ClosedRange","preciseIdentifier":"s:SN","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Bound","kind":"typeIdentifier"},{"kind":"text","text":">)"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/Sequence-Implementations":{"url":"\/documentation\/compute\/closedrange\/sequence-implementations","type":"topic","abstract":[],"role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/Sequence-Implementations","title":"Sequence Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"url":"\/documentation\/compute\/sequence","type":"topic","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Sequence"}],"navigatorTitle":[{"text":"Sequence","kind":"identifier"}],"conformance":{"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Strideable"},{"type":"text","text":" and "},{"code":"Bound.Stride","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"SignedInteger","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"title":"Sequence","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Decodable":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/compute\/decodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","title":"Decodable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Decodable","kind":"identifier"}],"navigatorTitle":[{"text":"Decodable","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"text":" and ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":".","type":"text"}]},"abstract":[{"type":"text","text":"A type that can decode itself from an external representation."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/compute\/copyable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","title":"Copyable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Copyable"}],"navigatorTitle":[{"text":"Copyable","kind":"identifier"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"abstract":[{"type":"text","text":"A type whose values can be implicitly or explicitly copied."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/BidirectionalCollection-Implementations":{"type":"topic","url":"\/documentation\/compute\/closedrange\/bidirectionalcollection-implementations","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/BidirectionalCollection-Implementations","title":"BidirectionalCollection Implementations","role":"collectionGroup","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/Encodable-Implementations":{"abstract":[],"url":"\/documentation\/compute\/closedrange\/encodable-implementations","type":"topic","title":"Encodable Implementations","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/Encodable-Implementations","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable":{"url":"\/documentation\/compute\/comparable","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared using the relational operators ","type":"text"},{"code":"<","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Comparable"}],"title":"Comparable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Comparable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/7Swallow13RangeProtocolP":{"title":"Swallow.RangeProtocol","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow13RangeProtocolP"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/overlaps(_:)-947dt":{"title":"overlaps(_:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/overlaps(_:)-947dt","abstract":[],"role":"symbol","url":"\/documentation\/compute\/closedrange\/overlaps(_:)-947dt","type":"topic","conformance":{"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"overlaps","kind":"identifier"},{"kind":"text","text":"("},{"text":"Range","kind":"typeIdentifier","preciseIdentifier":"s:Sn"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"text":">) -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"url":"\/documentation\/compute\/equatable","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","title":"Equatable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}],"navigatorTitle":[{"text":"Equatable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/init(_:)-er19":{"role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Strideable"},{"type":"text","text":" and "},{"code":"Bound.Stride","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"SignedInteger","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[{"text":"Creates an instance equivalent to the given ","type":"text"},{"code":"Range","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/compute\/closedrange\/init(_:)-er19","title":"init(_:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Range","preciseIdentifier":"s:Sn"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/init(_:)-er19","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/clamped(to:)":{"url":"\/documentation\/compute\/closedrange\/clamped(to:)","conformance":{"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Returns a copy of this range clamped to the given limiting range."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/clamped(to:)","title":"clamped(to:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"clamped"},{"text":"(","kind":"text"},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"text":"ClosedRange","kind":"typeIdentifier","preciseIdentifier":"s:SN"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SN","text":"ClosedRange"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":">"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeExpression":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression","abstract":[{"text":"A type that can be used to slice a collection.","type":"text"}],"url":"\/documentation\/compute\/rangeexpression","title":"RangeExpression","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RangeExpression"}],"navigatorTitle":[{"text":"RangeExpression","kind":"identifier"}],"role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/Hashable-Implementations":{"role":"collectionGroup","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/Hashable-Implementations","title":"Hashable Implementations","kind":"article","url":"\/documentation\/compute\/closedrange\/hashable-implementations"},"doc://com.swallow.documentation.Compute/7Swallow27BoundInitiableRangeProtocolP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow27BoundInitiableRangeProtocolP","title":"Swallow.BoundInitiableRangeProtocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"abstract":[],"title":"Sendable","url":"\/documentation\/compute\/sendable","navigatorTitle":[{"text":"Sendable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Sendable"}],"kind":"symbol","type":"topic","role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"text":" and ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/BidirectionalCollection":{"url":"\/documentation\/compute\/bidirectionalcollection","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Strideable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Bound.Stride"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"SignedInteger"},{"text":".","type":"text"}]},"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A collection that supports backward as well as forward traversal."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalCollection","title":"BidirectionalCollection","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BidirectionalCollection"}],"navigatorTitle":[{"kind":"identifier","text":"BidirectionalCollection"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Encodable":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","abstract":[{"type":"text","text":"A type that can encode itself to an external representation."}],"url":"\/documentation\/compute\/encodable","title":"Encodable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Encodable"}],"navigatorTitle":[{"kind":"identifier","text":"Encodable"}],"role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Encodable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomReflectable":{"role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"abstract":[{"text":"A type that explicitly supplies its own mirror.","type":"text"}],"url":"\/documentation\/compute\/customreflectable","title":"CustomReflectable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomReflectable","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","navigatorTitle":[{"kind":"identifier","text":"CustomReflectable"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/Decodable-Implementations":{"kind":"article","role":"collectionGroup","type":"topic","abstract":[],"url":"\/documentation\/compute\/closedrange\/decodable-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/Decodable-Implementations","title":"Decodable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/RangeExpression-Implementations":{"abstract":[],"url":"\/documentation\/compute\/closedrange\/rangeexpression-implementations","title":"RangeExpression Implementations","role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/RangeExpression-Implementations","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/overlaps(_:)-7dfep":{"role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"overlaps","kind":"identifier"},{"kind":"text","text":"("},{"preciseIdentifier":"s:SN","text":"ClosedRange","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"title":"overlaps(_:)","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/overlaps(_:)-7dfep","url":"\/documentation\/compute\/closedrange\/overlaps(_:)-7dfep","type":"topic","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/CustomReflectable-Implementations":{"url":"\/documentation\/compute\/closedrange\/customreflectable-implementations","kind":"article","role":"collectionGroup","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/CustomReflectable-Implementations","title":"CustomReflectable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ClosedRange","kind":"identifier"}],"role":"symbol","title":"ClosedRange","url":"\/documentation\/compute\/closedrange","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange","abstract":[{"text":"An interval from a lower bound up to, and including, an upper bound.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"ClosedRange","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange/Collection-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange\/Collection-Implementations","type":"topic","abstract":[],"kind":"article","title":"Collection Implementations","url":"\/documentation\/compute\/closedrange\/collection-implementations","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"url":"\/documentation\/compute\/hashable","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","role":"symbol","title":"Hashable","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Hashable","kind":"identifier"}],"abstract":[{"type":"text","text":"A type that can be hashed into a "},{"type":"codeVoice","code":"Hasher"},{"text":" to produce an integer hash value.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"Hashable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/RandomAccessCollection":{"role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Strideable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Bound.Stride"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"SignedInteger"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"A collection that supports efficient random-access index traversal."}],"url":"\/documentation\/compute\/randomaccesscollection","title":"RandomAccessCollection","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"RandomAccessCollection","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomAccessCollection","navigatorTitle":[{"kind":"identifier","text":"RandomAccessCollection"}],"kind":"symbol"}}}