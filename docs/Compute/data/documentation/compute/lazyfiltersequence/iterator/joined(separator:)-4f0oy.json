{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator\/joined(separator:)-4f0oy"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"joined"},{"kind":"text","text":"<"},{"text":"Separator","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"separator"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Separator"},{"text":") -> ","kind":"text"},{"text":"JoinedSequence","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/JoinedSequence","preciseIdentifier":"s:s14JoinedSequenceV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"Separator","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","text":"Sequence"},{"text":", ","kind":"text"},{"text":"Separator","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","text":"Element"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","text":"Element"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"separator","content":[{"inlineContent":[{"text":"A sequence to insert between each of this","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"sequenceâ€™s elements."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"level":2,"anchor":"return-value","type":"heading","text":"Return Value"},{"inlineContent":[{"text":"The joined sequence of elements.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"This example shows how an array of "},{"type":"codeVoice","code":"[Int]"},{"type":"text","text":" instances can be joined, using"},{"text":" ","type":"text"},{"text":"another ","type":"text"},{"type":"codeVoice","code":"[Int]"},{"type":"text","text":" instance as the separator:"}],"type":"paragraph"},{"code":["let nestedNumbers = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]","let joined = nestedNumbers.joined(separator: [-1, -2])","print(Array(joined))","\/\/ Prints \"[1, 2, 3, -1, -2, 4, 5, 6, -1, -2, 7, 8, 9]\""],"syntax":null,"type":"codeListing"}]}],"variants":[{"paths":["\/documentation\/compute\/lazyfiltersequence\/iterator\/joined(separator:)-4f0oy"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"symbol","abstract":[{"text":"Returns the concatenated elements of this sequence of sequences,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"inserting the given separator between each element."}],"metadata":{"title":"joined(separator:)","role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"externalID":"s:STsST7ElementRpzrlE6joined9separators14JoinedSequenceVyxGqd___tSTRd__AA_AAQZAARtd__lF::SYNTHESIZED::s:s18LazyFilterSequenceV8IteratorV","roleHeading":"Instance Method","modules":[{"name":"Compute","relatedModules":["Swift"]}],"extendedModule":"Swift","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"joined"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Separator"},{"kind":"text","text":">("},{"kind":"externalParam","text":"separator"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Separator"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:s14JoinedSequenceV","text":"JoinedSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Sequence-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator\/Sequence-Implementations"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterSequence/Iterator":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator","abstract":[{"text":"An iterator over the elements traversed by some base iterator that also","type":"text"},{"type":"text","text":" "},{"text":"satisfy a given predicate.","type":"text"}],"title":"LazyFilterSequence.Iterator","url":"\/documentation\/compute\/lazyfiltersequence\/iterator","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Iterator"}],"conformance":{"constraints":[{"code":"Base","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterSequence/Iterator/joined(separator:)-4f0oy":{"abstract":[{"text":"Returns the concatenated elements of this sequence of sequences,","type":"text"},{"type":"text","text":" "},{"text":"inserting the given separator between each element.","type":"text"}],"title":"joined(separator:)","role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sequence"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator\/joined(separator:)-4f0oy","type":"topic","url":"\/documentation\/compute\/lazyfiltersequence\/iterator\/joined(separator:)-4f0oy","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"joined","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Separator"},{"kind":"text","text":">("},{"kind":"externalParam","text":"separator"},{"text":": ","kind":"text"},{"text":"Separator","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"JoinedSequence","preciseIdentifier":"s:s14JoinedSequenceV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"url":"\/documentation\/compute\/sequence","navigatorTitle":[{"kind":"identifier","text":"Sequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","title":"Sequence","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Sequence","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/JoinedSequence":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/JoinedSequence","title":"JoinedSequence","abstract":[{"type":"text","text":"A sequence that presents the elements of a base sequence of sequences"},{"type":"text","text":" "},{"text":"concatenated using a given separator.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"JoinedSequence","kind":"identifier"}],"url":"\/documentation\/compute\/joinedsequence","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JoinedSequence","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterSequence/Iterator/Sequence-Implementations":{"kind":"article","type":"topic","url":"\/documentation\/compute\/lazyfiltersequence\/iterator\/sequence-implementations","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator\/Sequence-Implementations","role":"collectionGroup","title":"Sequence Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterSequence/Sequence-Implementations":{"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Sequence-Implementations","abstract":[],"title":"Sequence Implementations","url":"\/documentation\/compute\/lazyfiltersequence\/sequence-implementations","role":"collectionGroup","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequenceâ€™s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterSequence":{"kind":"symbol","navigatorTitle":[{"text":"LazyFilterSequence","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence","abstract":[{"type":"text","text":"A sequence whose elements consist of the elements of some base"},{"type":"text","text":" "},{"type":"text","text":"sequence that also satisfy a given predicate."}],"title":"LazyFilterSequence","url":"\/documentation\/compute\/lazyfiltersequence","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"LazyFilterSequence","kind":"identifier"}],"type":"topic"}}}