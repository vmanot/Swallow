{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator\/reduce(_:_:)-8wupb"},"sections":[],"kind":"symbol","abstract":[{"type":"text","text":"Returns the result of combining the elements of the sequence using the"},{"text":" ","type":"text"},{"text":"given closure.","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"reduce","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Result","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"initialResult","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Result"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"nextPartialResult","kind":"internalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The value to use as the initial accumulating value.","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"initialResult"},{"text":" is passed to ","type":"text"},{"code":"nextPartialResult","type":"codeVoice"},{"type":"text","text":" the first time the"},{"type":"text","text":" "},{"text":"closure is executed.","type":"text"}]}],"name":"initialResult"},{"content":[{"inlineContent":[{"type":"text","text":"A closure that combines an accumulating value and"},{"type":"text","text":" "},{"type":"text","text":"an element of the sequence into a new accumulating value, to be used"},{"text":" ","type":"text"},{"text":"in the next call of the ","type":"text"},{"type":"codeVoice","code":"nextPartialResult"},{"text":" closure or returned to","type":"text"},{"type":"text","text":" "},{"text":"the caller.","type":"text"}],"type":"paragraph"}],"name":"nextPartialResult"}]},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"text":"The final accumulated value. If the sequence has no elements,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the result is "},{"type":"codeVoice","code":"initialResult"},{"type":"text","text":"."}]}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"code":"reduce(_:_:)","type":"codeVoice"},{"text":" method to produce a single value from the elements","type":"text"},{"text":" ","type":"text"},{"text":"of an entire sequence. For example, you can use this method on an array","type":"text"},{"type":"text","text":" "},{"text":"of numbers to find their sum or product.","type":"text"}]},{"inlineContent":[{"type":"text","text":"The "},{"code":"nextPartialResult","type":"codeVoice"},{"type":"text","text":" closure is called sequentially with an"},{"type":"text","text":" "},{"text":"accumulating value initialized to ","type":"text"},{"code":"initialResult","type":"codeVoice"},{"text":" and each element of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the sequence. This example shows how to find the sum of an array of"},{"type":"text","text":" "},{"text":"numbers.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let numbers = [1, 2, 3, 4]","let numberSum = numbers.reduce(0, { x, y in","    x + y","})","\/\/ numberSum == 10"],"syntax":null},{"inlineContent":[{"text":"When ","type":"text"},{"code":"numbers.reduce(_:_:)","type":"codeVoice"},{"text":" is called, the following steps occur:","type":"text"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"nextPartialResult","type":"codeVoice"},{"text":" closure is called with ","type":"text"},{"type":"codeVoice","code":"initialResult"},{"type":"text","text":"—"},{"type":"codeVoice","code":"0"},{"text":" ","type":"text"},{"text":"in this case—and the first element of ","type":"text"},{"code":"numbers","type":"codeVoice"},{"text":", returning the sum:","type":"text"},{"type":"text","text":" "},{"code":"1","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The closure is called again repeatedly with the previous call’s return"},{"type":"text","text":" "},{"text":"value and each element of the sequence.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"When the sequence is exhausted, the last value returned from the","type":"text"},{"type":"text","text":" "},{"text":"closure is returned to the caller.","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"If the sequence has no elements, "},{"type":"codeVoice","code":"nextPartialResult"},{"type":"text","text":" is never executed"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"initialResult"},{"type":"text","text":" is the result of the call to "},{"code":"reduce(_:_:)","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"style":"note","name":"Complexity","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"O(","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":" is the length of the sequence.","type":"text"}]}]}]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Sequence-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator\/Sequence-Implementations"]]},"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reduce","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Result","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":", ("},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Result","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}],"symbolKind":"method","externalID":"s:STsE6reduceyqd__qd___qd__qd___7ElementQztKXEtKlF::SYNTHESIZED::s:s18LazyFilterSequenceV8IteratorV","role":"symbol","modules":[{"name":"Compute","relatedModules":["Swift"]}],"title":"reduce(_:_:)","extendedModule":"Swift","roleHeading":"Instance Method"},"variants":[{"paths":["\/documentation\/compute\/lazyfiltersequence\/iterator\/reduce(_:_:)-8wupb"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterSequence/Iterator/Sequence-Implementations":{"kind":"article","type":"topic","url":"\/documentation\/compute\/lazyfiltersequence\/iterator\/sequence-implementations","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator\/Sequence-Implementations","role":"collectionGroup","title":"Sequence Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterSequence/Iterator":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator","abstract":[{"text":"An iterator over the elements traversed by some base iterator that also","type":"text"},{"type":"text","text":" "},{"text":"satisfy a given predicate.","type":"text"}],"title":"LazyFilterSequence.Iterator","url":"\/documentation\/compute\/lazyfiltersequence\/iterator","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Iterator"}],"conformance":{"constraints":[{"code":"Base","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterSequence/Iterator/reduce(_:_:)-8wupb":{"abstract":[{"text":"Returns the result of combining the elements of the sequence using the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"given closure."}],"title":"reduce(_:_:)","url":"\/documentation\/compute\/lazyfiltersequence\/iterator\/reduce(_:_:)-8wupb","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator\/reduce(_:_:)-8wupb","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reduce"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"text":"Result","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"Result","kind":"typeIdentifier"}],"type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterSequence/Sequence-Implementations":{"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Sequence-Implementations","abstract":[],"title":"Sequence Implementations","url":"\/documentation\/compute\/lazyfiltersequence\/sequence-implementations","role":"collectionGroup","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterSequence":{"kind":"symbol","navigatorTitle":[{"text":"LazyFilterSequence","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence","abstract":[{"type":"text","text":"A sequence whose elements consist of the elements of some base"},{"type":"text","text":" "},{"type":"text","text":"sequence that also satisfy a given predicate."}],"title":"LazyFilterSequence","url":"\/documentation\/compute\/lazyfiltersequence","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"LazyFilterSequence","kind":"identifier"}],"type":"topic"}}}