{"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator\/forEach(_:)","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"forEach","kind":"identifier"},{"kind":"text","text":"("},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"body","kind":"internalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Void","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"body","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes an element of the sequence as a"},{"text":" ","type":"text"},{"type":"text","text":"parameter."}]}]}]},{"kind":"content","content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The two loops in the following example produce the same output:"}]},{"type":"codeListing","code":["let numberWords = [\"one\", \"two\", \"three\"]","for word in numberWords {","    print(word)","}","\/\/ Prints \"one\"","\/\/ Prints \"two\"","\/\/ Prints \"three\"","","numberWords.forEach { word in","    print(word)","}","\/\/ Same as above"],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"Using the ","type":"text"},{"type":"codeVoice","code":"forEach"},{"type":"text","text":" method is distinct from a "},{"code":"for","type":"codeVoice"},{"text":"-","type":"text"},{"type":"codeVoice","code":"in"},{"text":" loop in two","type":"text"},{"text":" ","type":"text"},{"text":"important ways:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"You cannot use a "},{"type":"codeVoice","code":"break"},{"text":" or ","type":"text"},{"code":"continue","type":"codeVoice"},{"type":"text","text":" statement to exit the current"},{"type":"text","text":" "},{"type":"text","text":"call of the "},{"code":"body","type":"codeVoice"},{"text":" closure or skip subsequent calls.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Using the ","type":"text"},{"code":"return","type":"codeVoice"},{"type":"text","text":" statement in the "},{"type":"codeVoice","code":"body"},{"text":" closure will exit only from","type":"text"},{"type":"text","text":" "},{"text":"the current call to ","type":"text"},{"type":"codeVoice","code":"body"},{"type":"text","text":", not from any outer scope, and won’t skip"},{"type":"text","text":" "},{"text":"subsequent calls.","type":"text"}]}]}]}]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Sequence-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator\/Sequence-Implementations"]]},"variants":[{"paths":["\/documentation\/compute\/lazyfiltersequence\/iterator\/foreach(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"extendedModule":"Swift","modules":[{"name":"Compute","relatedModules":["Swift"]}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"forEach"},{"text":"((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}],"role":"symbol","title":"forEach(_:)","externalID":"s:STsE7forEachyyy7ElementQzKXEKF::SYNTHESIZED::s:s18LazyFilterSequenceV8IteratorV","symbolKind":"method","roleHeading":"Instance Method"},"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"abstract":[{"type":"text","text":"Calls the given closure on each element in the sequence in the same order"},{"type":"text","text":" "},{"type":"text","text":"as a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop."}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterSequence/Iterator/Sequence-Implementations":{"kind":"article","type":"topic","url":"\/documentation\/compute\/lazyfiltersequence\/iterator\/sequence-implementations","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator\/Sequence-Implementations","role":"collectionGroup","title":"Sequence Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterSequence/Sequence-Implementations":{"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Sequence-Implementations","abstract":[],"title":"Sequence Implementations","url":"\/documentation\/compute\/lazyfiltersequence\/sequence-implementations","role":"collectionGroup","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterSequence":{"kind":"symbol","navigatorTitle":[{"text":"LazyFilterSequence","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence","abstract":[{"type":"text","text":"A sequence whose elements consist of the elements of some base"},{"type":"text","text":" "},{"type":"text","text":"sequence that also satisfy a given predicate."}],"title":"LazyFilterSequence","url":"\/documentation\/compute\/lazyfiltersequence","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"LazyFilterSequence","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Void":{"abstract":[{"text":"The return type of functions that don’t explicitly specify a return type,","type":"text"},{"text":" ","type":"text"},{"text":"that is, an empty tuple ","type":"text"},{"type":"codeVoice","code":"()"},{"type":"text","text":"."}],"type":"topic","title":"Void","url":"\/documentation\/compute\/void","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Void"}],"navigatorTitle":[{"text":"Void","kind":"identifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Void"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterSequence/Iterator/forEach(_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator\/forEach(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"forEach"},{"text":"((","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}],"url":"\/documentation\/compute\/lazyfiltersequence\/iterator\/foreach(_:)","role":"symbol","kind":"symbol","type":"topic","abstract":[{"text":"Calls the given closure on each element in the sequence in the same order","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as a "},{"code":"for","type":"codeVoice"},{"text":"-","type":"text"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop."}],"title":"forEach(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterSequence/Iterator":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator","abstract":[{"text":"An iterator over the elements traversed by some base iterator that also","type":"text"},{"type":"text","text":" "},{"text":"satisfy a given predicate.","type":"text"}],"title":"LazyFilterSequence.Iterator","url":"\/documentation\/compute\/lazyfiltersequence\/iterator","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Iterator"}],"conformance":{"constraints":[{"code":"Base","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic"}}}