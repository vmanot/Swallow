{"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"paths":["\/documentation\/compute\/bidirectionalmap\/withcontiguousstorageifavailable(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalMap","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalMap\/Sequence-Implementations"]]},"metadata":{"role":"symbol","externalID":"s:STsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF::SYNTHESIZED::s:7Compute16BidirectionalMapV","roleHeading":"Instance Method","symbolKind":"method","modules":[{"name":"Compute","relatedModules":["Swift"]}],"extendedModule":"Swift","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withContiguousStorageIfAvailable","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">(("},{"preciseIdentifier":"s:SR","text":"UnsafeBufferPointer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":"?","kind":"text"}],"title":"withContiguousStorageIfAvailable(_:)"},"abstract":[{"type":"text","text":"Executes a closure on the sequence’s contiguous storage."}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalMap\/withContiguousStorageIfAvailable(_:)","interfaceLanguage":"swift"},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withContiguousStorageIfAvailable","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"body","kind":"internalParam"},{"text":": (","kind":"text"},{"text":"UnsafeBufferPointer","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer","preciseIdentifier":"s:SR"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":"?"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"body","content":[{"type":"paragraph","inlineContent":[{"text":"A closure that receives an ","type":"text"},{"type":"codeVoice","code":"UnsafeBufferPointer"},{"text":" to the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sequence’s contiguous storage."}]}]}]},{"kind":"content","content":[{"type":"heading","anchor":"return-value","text":"Return Value","level":2},{"type":"paragraph","inlineContent":[{"text":"The value returned from ","type":"text"},{"code":"body","type":"codeVoice"},{"type":"text","text":", unless the sequence doesn’t"},{"text":" ","type":"text"},{"type":"text","text":"support contiguous storage, in which case the method ignores "},{"type":"codeVoice","code":"body"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"text":"returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This method calls ","type":"text"},{"type":"codeVoice","code":"body(buffer)"},{"type":"text","text":", where "},{"code":"buffer","type":"codeVoice"},{"text":" is a pointer to the","type":"text"},{"type":"text","text":" "},{"text":"collection’s contiguous storage. If the contiguous storage doesn’t exist,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the collection creates it. If the collection doesn’t support an internal"},{"text":" ","type":"text"},{"text":"representation in a form of contiguous storage, the method doesn’t call","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"body"},{"text":" — it immediately returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"The optimizer can often eliminate bounds- and uniqueness-checking","type":"text"},{"type":"text","text":" "},{"type":"text","text":"within an algorithm. When that fails, however, invoking the same"},{"type":"text","text":" "},{"text":"algorithm on the ","type":"text"},{"type":"codeVoice","code":"buffer"},{"type":"text","text":" argument may let you trade safety for speed."}],"type":"paragraph"},{"inlineContent":[{"text":"Successive calls to this method may provide a different pointer on each","type":"text"},{"type":"text","text":" "},{"type":"text","text":"call. Don’t store "},{"code":"buffer","type":"codeVoice"},{"text":" outside of this method.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" that provides its own implementation of this method"},{"type":"text","text":" "},{"type":"text","text":"must provide contiguous storage to its elements in the same order"},{"text":" ","type":"text"},{"text":"as they appear in the collection. This guarantees that it’s possible to","type":"text"},{"type":"text","text":" "},{"text":"generate contiguous mutable storage to any of its subsequences by slicing","type":"text"},{"text":" ","type":"text"},{"code":"buffer","type":"codeVoice"},{"text":" with a range formed from the distances to the subsequence’s","type":"text"},{"type":"text","text":" "},{"code":"startIndex","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"endIndex","type":"codeVoice"},{"type":"text","text":", respectively."}],"type":"paragraph"}],"kind":"content"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BidirectionalMap":{"kind":"symbol","navigatorTitle":[{"text":"BidirectionalMap","kind":"identifier"}],"url":"\/documentation\/compute\/bidirectionalmap","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalMap"}],"abstract":[{"text":"A bidirectional map between two ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" types."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalMap","role":"symbol","title":"BidirectionalMap"},"doc://com.swallow.documentation.Compute/documentation/Compute/BidirectionalMap/withContiguousStorageIfAvailable(_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalMap\/withContiguousStorageIfAvailable(_:)","abstract":[{"type":"text","text":"Executes a closure on the sequence’s contiguous storage."}],"role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withContiguousStorageIfAvailable"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"text":">((","kind":"text"},{"text":"UnsafeBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SR"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"withContiguousStorageIfAvailable(_:)","url":"\/documentation\/compute\/bidirectionalmap\/withcontiguousstorageifavailable(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/BidirectionalMap/Sequence-Implementations":{"kind":"article","url":"\/documentation\/compute\/bidirectionalmap\/sequence-implementations","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalMap\/Sequence-Implementations","role":"collectionGroup","title":"Sequence Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeBufferPointer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer","abstract":[{"type":"text","text":"A nonowning collection interface to a buffer of"},{"type":"text","text":" "},{"text":"elements stored contiguously in memory.","type":"text"}],"role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeBufferPointer","kind":"identifier"}],"title":"UnsafeBufferPointer","navigatorTitle":[{"kind":"identifier","text":"UnsafeBufferPointer"}],"url":"\/documentation\/compute\/unsafebufferpointer"}}}