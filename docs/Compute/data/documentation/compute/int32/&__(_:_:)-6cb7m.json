{"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/FixedWidthInteger-Implementations"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"extendedModule":"Swift","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"&<<","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"}],"modules":[{"relatedModules":["Swift"],"name":"Compute"}],"symbolKind":"op","externalID":"s:s17FixedWidthIntegerPsE3alloiyxx_xtFZ::SYNTHESIZED::s:s5Int32V","title":"&<<(_:_:)","role":"symbol","roleHeading":"Operator"},"sections":[],"abstract":[{"text":"Returns the result of shifting a value’s binary representation the","type":"text"},{"type":"text","text":" "},{"text":"specified number of digits to the left, masking the shift amount to the","type":"text"},{"type":"text","text":" "},{"text":"type’s bit width.","type":"text"}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/&__(_:_:)-6cb7m","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/compute\/int32\/&__(_:_:)-6cb7m"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"&<<","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"internalParam","text":"lhs"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"rhs","kind":"internalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The value to shift."}],"type":"paragraph"}],"name":"lhs"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The number of bits to shift "},{"type":"codeVoice","code":"lhs"},{"text":" to the left. If ","type":"text"},{"code":"rhs","type":"codeVoice"},{"type":"text","text":" is"},{"text":" ","type":"text"},{"text":"outside the range ","type":"text"},{"type":"codeVoice","code":"0..<lhs.bitWidth"},{"type":"text","text":", it is masked to produce a"},{"type":"text","text":" "},{"text":"value within that range.","type":"text"}]}],"name":"rhs"}]},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"Use the masking left shift operator ("},{"type":"codeVoice","code":"&<<"},{"type":"text","text":") when you need to perform a"},{"text":" ","type":"text"},{"type":"text","text":"shift and are sure that the shift amount is in the range"},{"type":"text","text":" "},{"type":"codeVoice","code":"0..<lhs.bitWidth"},{"type":"text","text":". Before shifting, the masking left shift operator"},{"type":"text","text":" "},{"type":"text","text":"masks the shift to this range. The shift is performed using this masked"},{"text":" ","type":"text"},{"text":"value.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines "},{"code":"x","type":"codeVoice"},{"type":"text","text":" as an instance of "},{"code":"UInt8","type":"codeVoice"},{"text":", an 8-bit,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"unsigned integer type. If you use "},{"code":"2","type":"codeVoice"},{"text":" as the right-hand-side value in an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"operation on "},{"type":"codeVoice","code":"x"},{"type":"text","text":", the shift amount requires no masking."}]},{"syntax":null,"type":"codeListing","code":["let x: UInt8 = 30                 \/\/ 0b00011110","let y = x &<< 2","\/\/ y == 120                       \/\/ 0b01111000"]},{"inlineContent":[{"text":"However, if you use ","type":"text"},{"code":"8","type":"codeVoice"},{"text":" as the shift amount, the method first masks the","type":"text"},{"type":"text","text":" "},{"text":"shift amount to zero, and then performs the shift, resulting in no change","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to the original value."}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let z = x &<< 8","\/\/ z == 30                        \/\/ 0b00011110"]},{"type":"paragraph","inlineContent":[{"text":"If the bit width of the shifted integer type is a power of two, masking","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is performed using a bitmask; otherwise, masking is performed using a"},{"type":"text","text":" "},{"text":"modulo operation.","type":"text"}]}],"kind":"content"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/&__(_:_:)-6cb7m":{"abstract":[{"type":"text","text":"Returns the result of shifting a value’s binary representation the"},{"type":"text","text":" "},{"text":"specified number of digits to the left, masking the shift amount to the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type’s bit width."}],"kind":"symbol","title":"&<<(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/&__(_:_:)-6cb7m","role":"symbol","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"&<<","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"url":"\/documentation\/compute\/int32\/&__(_:_:)-6cb7m"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int32","kind":"identifier"}],"abstract":[{"text":"A 32-bit signed integer value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type."}],"kind":"symbol","navigatorTitle":[{"text":"Int32","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/int32","title":"Int32","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/FixedWidthInteger-Implementations":{"role":"collectionGroup","type":"topic","title":"FixedWidthInteger Implementations","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/FixedWidthInteger-Implementations","kind":"article","url":"\/documentation\/compute\/int32\/fixedwidthinteger-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}