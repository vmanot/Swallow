{"metadata":{"extendedModule":"Swift","title":"&<<(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"&<<"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"modules":[{"name":"Compute","relatedModules":["Swift"]}],"roleHeading":"Operator","symbolKind":"op","externalID":"s:s17FixedWidthIntegerPsE3alloiyxx_xtFZ::SYNTHESIZED::s:s6UInt32V","role":"symbol"},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/&__(_:_:)-5qjx7"},"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"abstract":[{"text":"Returns the result of shifting a value’s binary representation the","type":"text"},{"type":"text","text":" "},{"text":"specified number of digits to the left, masking the shift amount to the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type’s bit width."}],"variants":[{"paths":["\/documentation\/compute\/uint32\/&__(_:_:)-5qjx7"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"&<<"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"lhs","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"rhs","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"lhs","content":[{"inlineContent":[{"text":"The value to shift.","type":"text"}],"type":"paragraph"}]},{"name":"rhs","content":[{"inlineContent":[{"text":"The number of bits to shift ","type":"text"},{"type":"codeVoice","code":"lhs"},{"type":"text","text":" to the left. If "},{"type":"codeVoice","code":"rhs"},{"text":" is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"outside the range "},{"type":"codeVoice","code":"0..<lhs.bitWidth"},{"type":"text","text":", it is masked to produce a"},{"type":"text","text":" "},{"type":"text","text":"value within that range."}],"type":"paragraph"}]}]},{"content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"inlineContent":[{"text":"Use the masking left shift operator (","type":"text"},{"code":"&<<","type":"codeVoice"},{"text":") when you need to perform a","type":"text"},{"text":" ","type":"text"},{"text":"shift and are sure that the shift amount is in the range","type":"text"},{"type":"text","text":" "},{"code":"0..<lhs.bitWidth","type":"codeVoice"},{"type":"text","text":". Before shifting, the masking left shift operator"},{"type":"text","text":" "},{"type":"text","text":"masks the shift to this range. The shift is performed using this masked"},{"text":" ","type":"text"},{"text":"value.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following example defines ","type":"text"},{"type":"codeVoice","code":"x"},{"type":"text","text":" as an instance of "},{"code":"UInt8","type":"codeVoice"},{"type":"text","text":", an 8-bit,"},{"text":" ","type":"text"},{"type":"text","text":"unsigned integer type. If you use "},{"type":"codeVoice","code":"2"},{"text":" as the right-hand-side value in an","type":"text"},{"text":" ","type":"text"},{"text":"operation on ","type":"text"},{"type":"codeVoice","code":"x"},{"type":"text","text":", the shift amount requires no masking."}]},{"type":"codeListing","syntax":null,"code":["let x: UInt8 = 30                 \/\/ 0b00011110","let y = x &<< 2","\/\/ y == 120                       \/\/ 0b01111000"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, if you use "},{"type":"codeVoice","code":"8"},{"text":" as the shift amount, the method first masks the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"shift amount to zero, and then performs the shift, resulting in no change"},{"type":"text","text":" "},{"type":"text","text":"to the original value."}]},{"type":"codeListing","syntax":null,"code":["let z = x &<< 8","\/\/ z == 30                        \/\/ 0b00011110"]},{"inlineContent":[{"text":"If the bit width of the shifted integer type is a power of two, masking","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is performed using a bitmask; otherwise, masking is performed using a"},{"text":" ","type":"text"},{"text":"modulo operation.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/FixedWidthInteger-Implementations"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/FixedWidthInteger-Implementations":{"role":"collectionGroup","title":"FixedWidthInteger Implementations","url":"\/documentation\/compute\/uint32\/fixedwidthinteger-implementations","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/FixedWidthInteger-Implementations","abstract":[],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","title":"UInt32","abstract":[{"type":"text","text":"A 32-bit unsigned integer value"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"UInt32","kind":"identifier"}],"url":"\/documentation\/compute\/uint32","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt32","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/&__(_:_:)-5qjx7":{"title":"&<<(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"&<<","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/&__(_:_:)-5qjx7","kind":"symbol","role":"symbol","abstract":[{"text":"Returns the result of shifting a value’s binary representation the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specified number of digits to the left, masking the shift amount to the"},{"type":"text","text":" "},{"text":"type’s bit width.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/uint32\/&__(_:_:)-5qjx7"}}}