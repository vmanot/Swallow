{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/uint32\/&-=(_:_:)"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/&-=(_:_:)"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"&-="},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"lhs","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"rhs","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":")"}],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A numeric value.","type":"text"}]}],"name":"lhs"},{"name":"rhs","content":[{"inlineContent":[{"type":"text","text":"The value to subtract from "},{"type":"codeVoice","code":"lhs"},{"type":"text","text":"."}],"type":"paragraph"}]}]},{"content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"text":"The masking subtraction assignment operator (","type":"text"},{"code":"&-=","type":"codeVoice"},{"type":"text","text":") silently wraps any"},{"type":"text","text":" "},{"type":"text","text":"overflow that occurs during the operation. In the following example, the"},{"type":"text","text":" "},{"type":"text","text":"difference of "},{"type":"codeVoice","code":"10"},{"text":" and ","type":"text"},{"code":"21","type":"codeVoice"},{"type":"text","text":" is less than zero, the minimum representable"},{"text":" ","type":"text"},{"type":"codeVoice","code":"UInt"},{"text":" value, so the result is the result is the partial value after","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"discarding the overflowing bits."}]},{"type":"codeListing","syntax":null,"code":["var x: Int8 = 21","x &-= 10","\/\/ x == 11","var y: UInt8 = 10","y &-= 21","\/\/ y == 245 (after overflow)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more about arithmetic with overflow operators, see "},{"type":"reference","identifier":"https:\/\/docs.swift.org\/swift-book\/LanguageGuide\/AdvancedOperators.html#ID37","isActive":true},{"type":"text","text":" in "},{"type":"emphasis","inlineContent":[{"isActive":true,"identifier":"https:\/\/docs.swift.org\/swift-book\/","type":"reference"}]},{"type":"text","text":"."}]}],"kind":"content"}],"metadata":{"roleHeading":"Operator","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"&-=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":")"}],"modules":[{"relatedModules":["Swift"],"name":"Compute"}],"symbolKind":"op","title":"&-=(_:_:)","externalID":"s:s17FixedWidthIntegerPsE3aseoiyyxz_xtFZ::SYNTHESIZED::s:s6UInt32V","extendedModule":"Swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/FixedWidthInteger-Implementations"]]},"kind":"symbol","abstract":[{"text":"Subtracts the second value from the first and stores the difference in the","type":"text"},{"type":"text","text":" "},{"text":"left-hand-side variable, wrapping any overflow.","type":"text"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/FixedWidthInteger-Implementations":{"role":"collectionGroup","title":"FixedWidthInteger Implementations","url":"\/documentation\/compute\/uint32\/fixedwidthinteger-implementations","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/FixedWidthInteger-Implementations","abstract":[],"type":"topic"},"https://docs.swift.org/swift-book/":{"type":"link","url":"https:\/\/docs.swift.org\/swift-book\/","identifier":"https:\/\/docs.swift.org\/swift-book\/","title":"The Swift Programming Language","titleInlineContent":[{"type":"text","text":"The Swift Programming Language"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","title":"UInt32","abstract":[{"type":"text","text":"A 32-bit unsigned integer value"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"UInt32","kind":"identifier"}],"url":"\/documentation\/compute\/uint32","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt32","kind":"identifier"}]},"https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID37":{"type":"link","url":"https:\/\/docs.swift.org\/swift-book\/LanguageGuide\/AdvancedOperators.html#ID37","identifier":"https:\/\/docs.swift.org\/swift-book\/LanguageGuide\/AdvancedOperators.html#ID37","title":"Overflow Operators","titleInlineContent":[{"text":"Overflow","type":"text"},{"type":"text","text":" "},{"text":"Operators","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/&-=(_:_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/&-=(_:_:)","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"&-="},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":")"}],"kind":"symbol","type":"topic","title":"&-=(_:_:)","url":"\/documentation\/compute\/uint32\/&-=(_:_:)","abstract":[{"text":"Subtracts the second value from the first and stores the difference in the","type":"text"},{"type":"text","text":" "},{"text":"left-hand-side variable, wrapping any overflow.","type":"text"}]}}}