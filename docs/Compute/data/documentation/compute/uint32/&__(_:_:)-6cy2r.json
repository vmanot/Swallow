{"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"&>>"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"lhs","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","text":"UInt32"},{"kind":"text","text":", "},{"text":"rhs","kind":"internalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s6UInt32V","text":"UInt32","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","kind":"typeIdentifier","text":"UInt32","preciseIdentifier":"s:s6UInt32V"}]}],"kind":"declarations"},{"parameters":[{"name":"lhs","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value to shift."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The number of bits to shift "},{"code":"lhs","type":"codeVoice"},{"type":"text","text":" to the right. If "},{"code":"rhs","type":"codeVoice"},{"text":" is","type":"text"},{"text":" ","type":"text"},{"text":"outside the range ","type":"text"},{"type":"codeVoice","code":"0..<lhs.bitWidth"},{"text":", it is masked to produce a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value within that range."}]}],"name":"rhs"}],"kind":"parameters"},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"inlineContent":[{"text":"Use the masking right shift operator (","type":"text"},{"type":"codeVoice","code":"&>>"},{"type":"text","text":") when you need to perform a"},{"type":"text","text":" "},{"text":"shift and are sure that the shift amount is in the range","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"0..<lhs.bitWidth"},{"type":"text","text":". Before shifting, the masking right shift operator"},{"text":" ","type":"text"},{"type":"text","text":"masks the shift to this range. The shift is performed using this masked"},{"type":"text","text":" "},{"type":"text","text":"value."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following example defines ","type":"text"},{"code":"x","type":"codeVoice"},{"type":"text","text":" as an instance of "},{"code":"UInt8","type":"codeVoice"},{"text":", an 8-bit,","type":"text"},{"text":" ","type":"text"},{"text":"unsigned integer type. If you use ","type":"text"},{"code":"2","type":"codeVoice"},{"text":" as the right-hand-side value in an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"operation on "},{"code":"x","type":"codeVoice"},{"type":"text","text":", the shift amount requires no masking."}]},{"code":["let x: UInt8 = 30                 \/\/ 0b00011110","let y = x &>> 2","\/\/ y == 7                         \/\/ 0b00000111"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, if you use "},{"code":"8","type":"codeVoice"},{"type":"text","text":" as the shift amount, the method first masks the"},{"text":" ","type":"text"},{"type":"text","text":"shift amount to zero, and then performs the shift, resulting in no change"},{"type":"text","text":" "},{"text":"to the original value.","type":"text"}]},{"code":["let z = x &>> 8","\/\/ z == 30                        \/\/ 0b00011110"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the bit width of the shifted integer type is a power of two, masking"},{"type":"text","text":" "},{"type":"text","text":"is performed using a bitmask; otherwise, masking is performed using a"},{"type":"text","text":" "},{"type":"text","text":"modulo operation."}]}]}],"sections":[],"variants":[{"paths":["\/documentation\/compute\/uint32\/&__(_:_:)-6cy2r"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"Returns the result of shifting a value’s binary representation the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specified number of digits to the right, masking the shift amount to the"},{"type":"text","text":" "},{"type":"text","text":"type’s bit width."}],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/FixedWidthInteger-Implementations"]]},"metadata":{"title":"&>>(_:_:)","role":"symbol","extendedModule":"Swift","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"symbolKind":"op","externalID":"s:s6UInt32V3aggoiyA2B_ABtFZ","roleHeading":"Operator","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"&>>","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V","text":"UInt32"},{"kind":"text","text":", "},{"preciseIdentifier":"s:s6UInt32V","text":"UInt32","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"}]},"kind":"symbol","identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/&__(_:_:)-6cy2r","interfaceLanguage":"swift"},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","title":"UInt32","abstract":[{"type":"text","text":"A 32-bit unsigned integer value"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"UInt32","kind":"identifier"}],"url":"\/documentation\/compute\/uint32","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt32","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/FixedWidthInteger-Implementations":{"role":"collectionGroup","title":"FixedWidthInteger Implementations","url":"\/documentation\/compute\/uint32\/fixedwidthinteger-implementations","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/FixedWidthInteger-Implementations","abstract":[],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/&__(_:_:)-6cy2r":{"kind":"symbol","title":"&>>(_:_:)","abstract":[{"type":"text","text":"Returns the result of shifting a value’s binary representation the"},{"text":" ","type":"text"},{"type":"text","text":"specified number of digits to the right, masking the shift amount to the"},{"type":"text","text":" "},{"type":"text","text":"type’s bit width."}],"role":"symbol","url":"\/documentation\/compute\/uint32\/&__(_:_:)-6cy2r","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"&>>","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"UInt32","preciseIdentifier":"s:s6UInt32V"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V","text":"UInt32"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier","text":"UInt32"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/&__(_:_:)-6cy2r"}}}