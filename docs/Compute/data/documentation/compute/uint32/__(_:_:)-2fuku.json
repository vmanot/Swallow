{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":">>","kind":"identifier"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"text":"Other","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"lhs","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"kind":"internalParam","text":"rhs"},{"text":": ","kind":"text"},{"text":"Other","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Other"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","preciseIdentifier":"s:Sz","kind":"typeIdentifier","text":"BinaryInteger"}]}]},{"kind":"parameters","parameters":[{"name":"lhs","content":[{"inlineContent":[{"type":"text","text":"The value to shift."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The number of bits to shift "},{"type":"codeVoice","code":"lhs"},{"text":" to the right.","type":"text"}]}],"name":"rhs"}]},{"content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The "},{"code":">>","type":"codeVoice"},{"text":" operator performs a ","type":"text"},{"inlineContent":[{"type":"text","text":"smart shift"}],"type":"emphasis"},{"type":"text","text":", which defines a result for a"},{"text":" ","type":"text"},{"type":"text","text":"shift of any value."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Using a negative value for "},{"code":"rhs","type":"codeVoice"},{"text":" performs a left shift using","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"abs(rhs)"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Using a value for ","type":"text"},{"type":"codeVoice","code":"rhs"},{"text":" that is greater than or equal to the bit width","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of "},{"code":"lhs","type":"codeVoice"},{"text":" is an ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"overshift"}]},{"text":". An overshift results in ","type":"text"},{"type":"codeVoice","code":"-1"},{"type":"text","text":" for a"},{"type":"text","text":" "},{"type":"text","text":"negative value of "},{"code":"lhs","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"0"},{"text":" for a nonnegative value.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Using any other value for "},{"type":"codeVoice","code":"rhs"},{"type":"text","text":" performs a right shift on "},{"type":"codeVoice","code":"lhs"},{"text":" by that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"amount."}]}]}]},{"type":"paragraph","inlineContent":[{"text":"The following example defines ","type":"text"},{"type":"codeVoice","code":"x"},{"text":" as an instance of ","type":"text"},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":", an 8-bit,"},{"type":"text","text":" "},{"type":"text","text":"unsigned integer type. If you use "},{"type":"codeVoice","code":"2"},{"type":"text","text":" as the right-hand-side value in an"},{"text":" ","type":"text"},{"type":"text","text":"operation on "},{"type":"codeVoice","code":"x"},{"type":"text","text":", the value is shifted right by two bits."}]},{"syntax":null,"code":["let x: UInt8 = 30                 \/\/ 0b00011110","let y = x >> 2","\/\/ y == 7                         \/\/ 0b00000111"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"If you use ","type":"text"},{"code":"11","type":"codeVoice"},{"text":" as ","type":"text"},{"code":"rhs","type":"codeVoice"},{"text":", ","type":"text"},{"code":"x","type":"codeVoice"},{"type":"text","text":" is overshifted such that all of its bits"},{"type":"text","text":" "},{"type":"text","text":"are set to zero."}]},{"code":["let z = x >> 11","\/\/ z == 0                         \/\/ 0b00000000"],"type":"codeListing","syntax":null},{"inlineContent":[{"text":"Using a negative value as ","type":"text"},{"type":"codeVoice","code":"rhs"},{"text":" is the same as performing a left shift","type":"text"},{"type":"text","text":" "},{"type":"text","text":"using "},{"type":"codeVoice","code":"abs(rhs)"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let a = x >> -3","\/\/ a == 240                       \/\/ 0b11110000","let b = x << 3","\/\/ b == 240                       \/\/ 0b11110000"]},{"inlineContent":[{"text":"Right shift operations on negative values “fill in” the high bits with","type":"text"},{"type":"text","text":" "},{"text":"ones instead of zeros.","type":"text"}],"type":"paragraph"},{"code":["let q: Int8 = -30                 \/\/ 0b11100010","let r = q >> 2","\/\/ r == -8                        \/\/ 0b11111000","","let s = q >> 11","\/\/ s == -1                        \/\/ 0b11111111"],"type":"codeListing","syntax":null}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/uint32\/__(_:_:)-2fuku"]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/FixedWidthInteger-Implementations"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/__(_:_:)-2fuku"},"sections":[],"metadata":{"symbolKind":"op","role":"symbol","extendedModule":"Swift","title":">>(_:_:)","externalID":"s:s17FixedWidthIntegerPsE2ggoiyxx_qd__tSzRd__lFZ::SYNTHESIZED::s:s6UInt32V","modules":[{"name":"Compute","relatedModules":["Swift"]}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":">>","kind":"identifier"},{"text":" ","kind":"text"},{"text":"<","kind":"text"},{"text":"Other","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Other","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"roleHeading":"Operator"},"abstract":[{"type":"text","text":"Returns the result of shifting a value’s binary representation the"},{"text":" ","type":"text"},{"text":"specified number of digits to the right.","type":"text"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/__(_:_:)-2fuku":{"title":">>(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":">>","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Other"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Other"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/__(_:_:)-2fuku","kind":"symbol","role":"symbol","abstract":[{"text":"Returns the result of shifting a value’s binary representation the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specified number of digits to the right."}],"type":"topic","url":"\/documentation\/compute\/uint32\/__(_:_:)-2fuku"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","title":"UInt32","abstract":[{"type":"text","text":"A 32-bit unsigned integer value"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"UInt32","kind":"identifier"}],"url":"\/documentation\/compute\/uint32","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt32","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/FixedWidthInteger-Implementations":{"role":"collectionGroup","title":"FixedWidthInteger Implementations","url":"\/documentation\/compute\/uint32\/fixedwidthinteger-implementations","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/FixedWidthInteger-Implementations","abstract":[],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BinaryInteger"}],"navigatorTitle":[{"kind":"identifier","text":"BinaryInteger"}],"url":"\/documentation\/compute\/binaryinteger","type":"topic","abstract":[{"type":"text","text":"An integer type with a binary representation."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","title":"BinaryInteger","kind":"symbol","role":"symbol"}}}