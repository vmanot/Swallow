{"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"+"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"internalParam","text":"lhs"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s6UInt32V","text":"UInt32","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32"},{"kind":"text","text":", "},{"kind":"internalParam","text":"rhs"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s6UInt32V","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","text":"UInt32","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"UInt32","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"lhs","content":[{"inlineContent":[{"type":"text","text":"The first value to add."}],"type":"paragraph"}]},{"name":"rhs","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The second value to add."}]}]}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"The addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") calculates the sum of its two arguments. For"},{"type":"text","text":" "},{"type":"text","text":"example:"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["1 + 2                   \/\/ 3","-10 + 15                \/\/ 5","-15 + -5                \/\/ -20","21.5 + 3.25             \/\/ 24.75"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You cannot use "},{"type":"codeVoice","code":"+"},{"type":"text","text":" with arguments of different types. To add values of"},{"text":" ","type":"text"},{"text":"different types, convert one of the values to the other value’s type.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let x: Int8 = 21","let y: Int = 1000000","Int(x) + y              \/\/ 1000021"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sum of the two arguments must be representable in the arguments’"},{"type":"text","text":" "},{"text":"type. In the following example, the result of ","type":"text"},{"type":"codeVoice","code":"21 + 120"},{"type":"text","text":" is greater than"},{"type":"text","text":" "},{"type":"text","text":"the maximum representable "},{"type":"codeVoice","code":"Int8"},{"type":"text","text":" value:"}]},{"code":["x + 120                 \/\/ Overflow error"],"type":"codeListing","syntax":null},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Overflow checking is not performed in "},{"type":"codeVoice","code":"-Ounchecked"},{"type":"text","text":" builds."}]}]},{"inlineContent":[{"type":"text","text":"If you want to opt out of overflow checking and wrap the result in case"},{"text":" ","type":"text"},{"type":"text","text":"of any overflow, use the overflow addition operator ("},{"type":"codeVoice","code":"&+"},{"text":").","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["x &+ 120                \/\/ -115"]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/+(_:_:)"},"sections":[],"kind":"symbol","abstract":[{"text":"Adds two values and produces their sum.","type":"text"}],"variants":[{"paths":["\/documentation\/compute\/uint32\/+(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"extendedModule":"Swift","externalID":"s:s6UInt32V1poiyA2B_ABtFZ","symbolKind":"op","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"+","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier","text":"UInt32"},{"kind":"text","text":", "},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"},{"text":") -> ","kind":"text"},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"}],"roleHeading":"Operator","role":"symbol","title":"+(_:_:)","modules":[{"name":"Compute","relatedModules":["Swift"]}]},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/BinaryInteger-Implementations"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/+(_:_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/+(_:_:)","abstract":[{"type":"text","text":"Adds two values and produces their sum."}],"kind":"symbol","url":"\/documentation\/compute\/uint32\/+(_:_:)","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"+"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"UInt32","preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V","text":"UInt32"}],"type":"topic","title":"+(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","title":"UInt32","abstract":[{"type":"text","text":"A 32-bit unsigned integer value"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"UInt32","kind":"identifier"}],"url":"\/documentation\/compute\/uint32","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt32","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/BinaryInteger-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/BinaryInteger-Implementations","kind":"article","abstract":[],"title":"BinaryInteger Implementations","role":"collectionGroup","url":"\/documentation\/compute\/uint32\/binaryinteger-implementations","type":"topic"}}}