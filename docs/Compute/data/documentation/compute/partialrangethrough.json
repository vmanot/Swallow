{"kind":"symbol","relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable"],"kind":"relationships","title":"Conforms To"}],"sections":[],"metadata":{"roleHeading":"Structure","externalID":"s:s19PartialRangeThroughV","title":"PartialRangeThrough","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PartialRangeThrough"}],"navigatorTitle":[{"text":"PartialRangeThrough","kind":"identifier"}],"symbolKind":"struct","modules":[{"name":"Compute"}],"role":"symbol"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/partialrangethrough"]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"@frozen","kind":"attribute"},{"text":" ","kind":"text"},{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"PartialRangeThrough","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Bound","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bound","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:SL","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","text":"Comparable"}]}],"kind":"declarations"},{"content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"text":"You create ","type":"text"},{"code":"PartialRangeThrough","type":"codeVoice"},{"type":"text","text":" instances by using the prefix closed range"},{"text":" ","type":"text"},{"type":"text","text":"operator (prefix "},{"type":"codeVoice","code":"..."},{"type":"text","text":")."}],"type":"paragraph"},{"code":["let throughFive = ...5.0"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use a "},{"code":"PartialRangeThrough","type":"codeVoice"},{"text":" instance to quickly check if a value is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"contained in a particular range of values. For example:"}]},{"code":["throughFive.contains(4.0)     \/\/ true","throughFive.contains(5.0)     \/\/ true","throughFive.contains(6.0)     \/\/ false"],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"You can use a "},{"type":"codeVoice","code":"PartialRangeThrough"},{"text":" instance of a collection’s indices to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"represent the range from the start of the collection up to, and including,"},{"text":" ","type":"text"},{"type":"text","text":"the partial range’s upper bound."}],"type":"paragraph"},{"syntax":null,"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","print(numbers[...3])","\/\/ Prints \"[10, 20, 30, 40]\""],"type":"codeListing"}],"kind":"content"}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough\/init(_:)"],"generated":true,"anchor":"Initializers"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough\/upperBound"],"title":"Instance Properties","generated":true,"anchor":"Instance-Properties"},{"anchor":"Default-Implementations","generated":true,"title":"Default Implementations","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough\/Decodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough\/Encodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough\/RangeExpression-Implementations"]}],"abstract":[{"type":"text","text":"A partial interval up to, and including, an upper bound."}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Decodable":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/compute\/decodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","title":"Decodable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Decodable","kind":"identifier"}],"navigatorTitle":[{"text":"Decodable","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"text":" and ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":".","type":"text"}]},"abstract":[{"type":"text","text":"A type that can decode itself from an external representation."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"abstract":[],"title":"Sendable","url":"\/documentation\/compute\/sendable","navigatorTitle":[{"text":"Sendable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Sendable"}],"kind":"symbol","type":"topic","role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"text":" and ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Encodable":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","abstract":[{"type":"text","text":"A type that can encode itself to an external representation."}],"url":"\/documentation\/compute\/encodable","title":"Encodable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Encodable"}],"navigatorTitle":[{"kind":"identifier","text":"Encodable"}],"role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Encodable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeThrough":{"title":"PartialRangeThrough","type":"topic","abstract":[{"type":"text","text":"A partial interval up to, and including, an upper bound."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PartialRangeThrough"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PartialRangeThrough"}],"kind":"symbol","url":"\/documentation\/compute\/partialrangethrough"},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/compute\/copyable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","title":"Copyable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Copyable"}],"navigatorTitle":[{"text":"Copyable","kind":"identifier"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"abstract":[{"type":"text","text":"A type whose values can be implicitly or explicitly copied."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeThrough/upperBound":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough\/upperBound","abstract":[],"url":"\/documentation\/compute\/partialrangethrough\/upperbound","title":"upperBound","fragments":[{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"upperBound"},{"text":": ","kind":"text"},{"text":"Bound","kind":"typeIdentifier"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable":{"url":"\/documentation\/compute\/comparable","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared using the relational operators ","type":"text"},{"code":"<","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Comparable"}],"title":"Comparable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Comparable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeThrough/Encodable-Implementations":{"title":"Encodable Implementations","url":"\/documentation\/compute\/partialrangethrough\/encodable-implementations","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough\/Encodable-Implementations","abstract":[],"role":"collectionGroup","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeThrough/Decodable-Implementations":{"role":"collectionGroup","kind":"article","type":"topic","url":"\/documentation\/compute\/partialrangethrough\/decodable-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough\/Decodable-Implementations","title":"Decodable Implementations","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeExpression":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression","abstract":[{"text":"A type that can be used to slice a collection.","type":"text"}],"url":"\/documentation\/compute\/rangeexpression","title":"RangeExpression","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RangeExpression"}],"navigatorTitle":[{"text":"RangeExpression","kind":"identifier"}],"role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeThrough/init(_:)":{"role":"symbol","kind":"symbol","type":"topic","url":"\/documentation\/compute\/partialrangethrough\/init(_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough\/init(_:)","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":")"}],"abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeThrough/RangeExpression-Implementations":{"role":"collectionGroup","kind":"article","title":"RangeExpression Implementations","url":"\/documentation\/compute\/partialrangethrough\/rangeexpression-implementations","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeThrough\/RangeExpression-Implementations"}}}