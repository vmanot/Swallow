{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"&<<"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"lhs","kind":"internalParam"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64","kind":"typeIdentifier","text":"Int64","preciseIdentifier":"s:s5Int64V"},{"text":", ","kind":"text"},{"kind":"internalParam","text":"rhs"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s5Int64V","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64","text":"Int64","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V","text":"Int64","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64"}]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The value to shift.","type":"text"}]}],"name":"lhs"},{"content":[{"inlineContent":[{"type":"text","text":"The number of bits to shift "},{"code":"lhs","type":"codeVoice"},{"type":"text","text":" to the left. If "},{"code":"rhs","type":"codeVoice"},{"text":" is","type":"text"},{"type":"text","text":" "},{"text":"outside the range ","type":"text"},{"code":"0..<lhs.bitWidth","type":"codeVoice"},{"type":"text","text":", it is masked to produce a"},{"type":"text","text":" "},{"text":"value within that range.","type":"text"}],"type":"paragraph"}],"name":"rhs"}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Use the masking left shift operator (","type":"text"},{"code":"&<<","type":"codeVoice"},{"text":") when you need to perform a","type":"text"},{"type":"text","text":" "},{"text":"shift and are sure that the shift amount is in the range","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"0..<lhs.bitWidth"},{"text":". Before shifting, the masking left shift operator","type":"text"},{"type":"text","text":" "},{"type":"text","text":"masks the shift to this range. The shift is performed using this masked"},{"type":"text","text":" "},{"type":"text","text":"value."}]},{"type":"paragraph","inlineContent":[{"text":"The following example defines ","type":"text"},{"code":"x","type":"codeVoice"},{"type":"text","text":" as an instance of "},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":", an 8-bit,"},{"text":" ","type":"text"},{"text":"unsigned integer type. If you use ","type":"text"},{"code":"2","type":"codeVoice"},{"type":"text","text":" as the right-hand-side value in an"},{"type":"text","text":" "},{"text":"operation on ","type":"text"},{"type":"codeVoice","code":"x"},{"type":"text","text":", the shift amount requires no masking."}]},{"code":["let x: UInt8 = 30                 \/\/ 0b00011110","let y = x &<< 2","\/\/ y == 120                       \/\/ 0b01111000"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"text":"However, if you use ","type":"text"},{"type":"codeVoice","code":"8"},{"type":"text","text":" as the shift amount, the method first masks the"},{"type":"text","text":" "},{"type":"text","text":"shift amount to zero, and then performs the shift, resulting in no change"},{"type":"text","text":" "},{"type":"text","text":"to the original value."}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let z = x &<< 8","\/\/ z == 30                        \/\/ 0b00011110"]},{"inlineContent":[{"type":"text","text":"If the bit width of the shifted integer type is a power of two, masking"},{"type":"text","text":" "},{"text":"is performed using a bitmask; otherwise, masking is performed using a","type":"text"},{"type":"text","text":" "},{"text":"modulo operation.","type":"text"}],"type":"paragraph"}]}],"kind":"symbol","metadata":{"symbolKind":"op","externalID":"s:s5Int64V3alloiyA2B_ABtFZ","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"extendedModule":"Swift","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"&<<","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"Int64","kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s5Int64V","kind":"typeIdentifier","text":"Int64"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Int64","preciseIdentifier":"s:s5Int64V"}],"title":"&<<(_:_:)","roleHeading":"Operator"},"abstract":[{"type":"text","text":"Returns the result of shifting a value’s binary representation the"},{"text":" ","type":"text"},{"type":"text","text":"specified number of digits to the left, masking the shift amount to the"},{"text":" ","type":"text"},{"text":"type’s bit width.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/int64\/&__(_:_:)-gclw"]}],"sections":[],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/&__(_:_:)-gclw","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/FixedWidthInteger-Implementations"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/FixedWidthInteger-Implementations":{"role":"collectionGroup","type":"topic","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/FixedWidthInteger-Implementations","abstract":[],"title":"FixedWidthInteger Implementations","url":"\/documentation\/compute\/int64\/fixedwidthinteger-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/&__(_:_:)-gclw":{"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/&__(_:_:)-gclw","url":"\/documentation\/compute\/int64\/&__(_:_:)-gclw","type":"topic","abstract":[{"type":"text","text":"Returns the result of shifting a value’s binary representation the"},{"type":"text","text":" "},{"type":"text","text":"specified number of digits to the left, masking the shift amount to the"},{"text":" ","type":"text"},{"text":"type’s bit width.","type":"text"}],"title":"&<<(_:_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"&<<"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int64V","text":"Int64"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s5Int64V","kind":"typeIdentifier","text":"Int64"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Int64","preciseIdentifier":"s:s5Int64V"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64":{"url":"\/documentation\/compute\/int64","title":"Int64","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int64"}],"abstract":[{"type":"text","text":"A 64-bit signed integer value"},{"text":" ","type":"text"},{"text":"type.","type":"text"}],"navigatorTitle":[{"text":"Int64","kind":"identifier"}],"type":"topic","role":"symbol"}}}