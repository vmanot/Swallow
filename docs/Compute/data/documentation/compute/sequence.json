{"relationshipsSections":[{"title":"Inherited By","kind":"relationships","type":"inheritedBy","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExtensibleRecursiveSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyCollectionProtocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRectangularCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRecursiveSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRowMajorRectangularCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomAccessCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RectangularCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ResizableRecursiveSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RowMajorRectangularCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SequenceInitiableRecursiveSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol"]},{"title":"Conforming Types","kind":"relationships","type":"conformingTypes","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyBidirectionalCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyRandomAccessCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnySequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bag","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalMap","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BranchingArray","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionDifference","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionOfOne","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ContiguousArray","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultIndices","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultRecursiveIndices","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary\/Keys-swift.struct","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary\/Values-swift.struct","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DiscontiguousSlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DropFirstSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DropWhileSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EmptyCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EmptyCollection\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EnumeratedSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EnumeratedSequence\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EvictingQueue","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/GraphMatch","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IndexingIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/Words-swift.struct","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int16\/Words-swift.struct","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/Words-swift.struct","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/Words-swift.struct","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/Words-swift.struct","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/JoinedSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyValuePairs","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyDropWhileSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapSequence\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LinkedList","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Matrix","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PrefixSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PriorityQueue","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Queue","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeSet\/Ranges-swift.struct","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Repeated","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReversedCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReversedCollection\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Slice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideThrough","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideTo","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/UTF16View","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/UTF8View","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/UnicodeScalarView","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/UTF16View","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/UTF8View","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/UnicodeScalarView","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeChains","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeValuesTraversalSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/Words-swift.struct","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt128\/Words-swift.struct","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt16\/Words-swift.struct","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/Words-swift.struct","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64\/Words-swift.struct","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Words-swift.struct","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnfoldSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unicode\/Scalar\/UTF16View","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unicode\/Scalar\/UTF8View","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawBufferPointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawBufferPointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawBufferPointer\/Iterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Zip2Sequence"]}],"topicSections":[{"generated":true,"title":"Associated Types","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Iterator"],"anchor":"Associated-Types"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/lazy","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/underestimatedCount-3afwr"],"title":"Instance Properties","generated":true,"anchor":"Instance-Properties"},{"title":"Instance Methods","anchor":"Instance-Methods","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/allSatisfy(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/breadthFirstIterator(children:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/compactMap(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/contains(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/contains(where:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/count(where:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/depthFirstIterator(children:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/drop(while:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/dropFirst(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/dropLast(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/elementsEqual(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/elementsEqual(_:by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/enumerated()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/filter(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/first(where:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/flatMap(_:)-383uq","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/flatMap(_:)-jo2y","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/forEach(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/joined()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/joined(separator:)-5zjyj","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/joined(separator:)-7w47r","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/lexicographicallyPrecedes(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/lexicographicallyPrecedes(_:by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/makeIterator()-4v0ms","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/map(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/max()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/max(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/min()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/min(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/prefix(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/prefix(while:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/reduce(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/reduce(into:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/reversed()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/shuffled()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/shuffled(using:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/sorted()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/sorted(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/split(separator:maxSplits:omittingEmptySubsequences:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/starts(with:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/starts(with:by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/suffix(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/withContiguousStorageIfAvailable(_:)-4don7"]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Sequence"},{"kind":"text","text":"<"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":">","kind":"text"}],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"inlineContent":[{"type":"text","text":"A sequence is a list of values that you can step through one at a time. The"},{"text":" ","type":"text"},{"type":"text","text":"most common way to iterate over the elements of a sequence is to use a"},{"type":"text","text":" "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loop:"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let oneTwoThree = 1...3","for number in oneTwoThree {","    print(number)","}","\/\/ Prints \"1\"","\/\/ Prints \"2\"","\/\/ Prints \"3\""]},{"type":"paragraph","inlineContent":[{"text":"While seemingly simple, this capability gives you access to a large number","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of operations that you can perform on any sequence. As an example, to"},{"type":"text","text":" "},{"type":"text","text":"check whether a sequence includes a particular value, you can test each"},{"type":"text","text":" "},{"type":"text","text":"value sequentially until you’ve found a match or reached the end of the"},{"text":" ","type":"text"},{"type":"text","text":"sequence. This example checks to see whether a particular insect is in an"},{"type":"text","text":" "},{"text":"array.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let bugs = [\"Aphid\", \"Bumblebee\", \"Cicada\", \"Damselfly\", \"Earwig\"]","var hasMosquito = false","for bug in bugs {","    if bug == \"Mosquito\" {","        hasMosquito = true","        break","    }","}","print(\"'bugs' has a mosquito: \\(hasMosquito)\")","\/\/ Prints \"'bugs' has a mosquito: false\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"Sequence","type":"codeVoice"},{"text":" protocol provides default implementations for many common","type":"text"},{"type":"text","text":" "},{"type":"text","text":"operations that depend on sequential access to a sequence’s values. For"},{"type":"text","text":" "},{"text":"clearer, more concise code, the example above could use the array’s","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"contains(_:)"},{"type":"text","text":" method, which every sequence inherits from "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"instead of iterating manually:","type":"text"}]},{"type":"codeListing","code":["if bugs.contains(\"Mosquito\") {","    print(\"Break out the bug spray.\")","} else {","    print(\"Whew, no mosquitos!\")","}","\/\/ Prints \"Whew, no mosquitos!\""],"syntax":null},{"level":1,"text":"Repeated Access","anchor":"Repeated-Access","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":" protocol makes no requirement on conforming types regarding"},{"type":"text","text":" "},{"text":"whether they will be destructively consumed by iteration. As a","type":"text"},{"text":" ","type":"text"},{"text":"consequence, don’t assume that multiple ","type":"text"},{"code":"for","type":"codeVoice"},{"text":"-","type":"text"},{"type":"codeVoice","code":"in"},{"text":" loops on a sequence","type":"text"},{"type":"text","text":" "},{"type":"text","text":"will either resume iteration or restart from the beginning:"}]},{"type":"codeListing","syntax":null,"code":["for element in sequence {","    if ... some condition { break }","}","","for element in sequence {","    \/\/ No defined behavior","}"]},{"type":"paragraph","inlineContent":[{"text":"In this case, you cannot assume either that a sequence will be consumable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and will resume iteration, or that a sequence is a collection and will"},{"text":" ","type":"text"},{"text":"restart iteration from the first element. A conforming sequence that is","type":"text"},{"text":" ","type":"text"},{"text":"not a collection is allowed to produce an arbitrary sequence of elements","type":"text"},{"text":" ","type":"text"},{"text":"in the second ","type":"text"},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loop."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To establish that a type you’ve created supports nondestructive iteration,"},{"type":"text","text":" "},{"type":"text","text":"add conformance to the "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" protocol."}]},{"level":1,"type":"heading","anchor":"Conforming-to-the-Sequence-Protocol","text":"Conforming to the Sequence Protocol"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Making your own custom types conform to "},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":" enables many useful"},{"text":" ","type":"text"},{"text":"operations, like ","type":"text"},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"code":"in","type":"codeVoice"},{"type":"text","text":" looping and the "},{"type":"codeVoice","code":"contains"},{"type":"text","text":" method, without"},{"text":" ","type":"text"},{"text":"much effort. To add ","type":"text"},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":" conformance to your own custom type, add a"},{"text":" ","type":"text"},{"type":"codeVoice","code":"makeIterator()"},{"text":" method that returns an iterator.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Alternatively, if your type can act as its own iterator, implementing the"},{"text":" ","type":"text"},{"type":"text","text":"requirements of the "},{"code":"IteratorProtocol","type":"codeVoice"},{"type":"text","text":" protocol and declaring conformance"},{"type":"text","text":" "},{"text":"to both ","type":"text"},{"type":"codeVoice","code":"Sequence"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"IteratorProtocol"},{"type":"text","text":" are sufficient."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Here’s a definition of a ","type":"text"},{"code":"Countdown","type":"codeVoice"},{"text":" sequence that serves as its own","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"iterator. The "},{"type":"codeVoice","code":"makeIterator()"},{"text":" method is provided as a default","type":"text"},{"text":" ","type":"text"},{"text":"implementation.","type":"text"}]},{"type":"codeListing","code":["struct Countdown: Sequence, IteratorProtocol {","    var count: Int","","    mutating func next() -> Int? {","        if count == 0 {","            return nil","        } else {","            defer { count -= 1 }","            return count","        }","    }","}","","let threeToGo = Countdown(count: 3)","for i in threeToGo {","    print(i)","}","\/\/ Prints \"3\"","\/\/ Prints \"2\"","\/\/ Prints \"1\""],"syntax":null},{"type":"heading","text":"Expected Performance","anchor":"Expected-Performance","level":1},{"inlineContent":[{"type":"text","text":"A sequence should provide its iterator in O(1). The "},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":" protocol"},{"text":" ","type":"text"},{"type":"text","text":"makes no other requirements about element access, so routines that"},{"type":"text","text":" "},{"text":"traverse a sequence should be considered O(","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"type":"text","text":") unless documented"},{"text":" ","type":"text"},{"type":"text","text":"otherwise."}],"type":"paragraph"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/compute\/sequence"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"metadata":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Sequence","kind":"identifier"}],"symbolKind":"protocol","modules":[{"name":"Compute"}],"navigatorTitle":[{"text":"Sequence","kind":"identifier"}],"roleHeading":"Protocol","externalID":"s:ST","title":"Sequence"},"kind":"symbol","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UInt16/Words-swift.struct":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Words"}],"navigatorTitle":[{"text":"Words","kind":"identifier"}],"title":"UInt16.Words","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt16\/Words-swift.struct","url":"\/documentation\/compute\/uint16\/words-swift.struct","kind":"symbol","role":"symbol","abstract":[{"text":"A type that represents the words of this integer.","type":"text"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/makeIterator()-4v0ms":{"abstract":[{"type":"text","text":"Returns an iterator over the elements of this sequence."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/makeIterator()-4v0ms","type":"topic","required":true,"title":"makeIterator()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"makeIterator","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST8IteratorQa","text":"Iterator","kind":"typeIdentifier"}],"role":"symbol","url":"\/documentation\/compute\/sequence\/makeiterator()-4v0ms","kind":"symbol","defaultImplementations":2},"doc://com.swallow.documentation.Compute/documentation/Compute/ReversedCollection":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ReversedCollection","kind":"identifier"}],"navigatorTitle":[{"text":"ReversedCollection","kind":"identifier"}],"url":"\/documentation\/compute\/reversedcollection","kind":"symbol","title":"ReversedCollection","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReversedCollection","abstract":[{"type":"text","text":"A collection that presents the elements of its base collection"},{"type":"text","text":" "},{"text":"in reverse order.","type":"text"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"RandomAccessCollection"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/MutableRecursiveSequence":{"abstract":[],"kind":"symbol","title":"MutableRecursiveSequence","url":"\/documentation\/compute\/mutablerecursivesequence","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MutableRecursiveSequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRecursiveSequence","navigatorTitle":[{"kind":"identifier","text":"MutableRecursiveSequence"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bag":{"url":"\/documentation\/compute\/bag","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Bag","kind":"identifier"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"kind":"symbol","title":"Bag","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bag","navigatorTitle":[{"text":"Bag","kind":"identifier"}],"abstract":[],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/BranchingArray":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BranchingArray","abstract":[],"title":"BranchingArray","navigatorTitle":[{"text":"BranchingArray","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Branch","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"ExpressibleByNilLiteral"},{"text":", ","type":"text"},{"code":"Branch","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]},"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BranchingArray"}],"type":"topic","url":"\/documentation\/compute\/branchingarray","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ReversedCollection/Iterator":{"title":"ReversedCollection.Iterator","abstract":[{"type":"text","text":"A type that provides the sequence’s iteration interface and"},{"type":"text","text":" "},{"text":"encapsulates its iteration state.","type":"text"}],"url":"\/documentation\/compute\/reversedcollection\/iterator","kind":"symbol","type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"BidirectionalCollection"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReversedCollection\/Iterator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Iterator","kind":"identifier"}],"navigatorTitle":[{"text":"Iterator","kind":"identifier"}],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/IndexingIterator":{"url":"\/documentation\/compute\/indexingiterator","navigatorTitle":[{"kind":"identifier","text":"IndexingIterator"}],"abstract":[{"type":"text","text":"A type that iterates over a collection using its indices."}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IndexingIterator"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IndexingIterator","kind":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Elements","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"text":".","type":"text"}]},"role":"symbol","title":"IndexingIterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawBufferPointer/Iterator":{"title":"UnsafeRawBufferPointer.Iterator","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawBufferPointer\/Iterator","kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Iterator","kind":"identifier"}],"navigatorTitle":[{"text":"Iterator","kind":"identifier"}],"url":"\/documentation\/compute\/unsaferawbufferpointer\/iterator","abstract":[{"text":"An iterator over the bytes viewed by a raw buffer pointer.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableBufferPointer":{"role":"symbol","abstract":[{"type":"text","text":"A nonowning collection interface to a buffer of mutable"},{"type":"text","text":" "},{"text":"elements stored contiguously in memory.","type":"text"}],"title":"UnsafeMutableBufferPointer","url":"\/documentation\/compute\/unsafemutablebufferpointer","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnsafeMutableBufferPointer"}],"navigatorTitle":[{"text":"UnsafeMutableBufferPointer","kind":"identifier"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Escapable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableBufferPointer"},"doc://com.swallow.documentation.Compute/documentation/Compute/String/UTF8View":{"url":"\/documentation\/compute\/string\/utf8view","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UTF8View"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"UTF8View"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/UTF8View","abstract":[{"text":"A view of a string’s contents as a collection of UTF-8 code units.","type":"text"}],"type":"topic","title":"String.UTF8View"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/UTF16View":{"url":"\/documentation\/compute\/substring\/utf16view","role":"symbol","title":"Substring.UTF16View","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UTF16View"}],"abstract":[],"navigatorTitle":[{"text":"UTF16View","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/UTF16View","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt/Words-swift.struct":{"url":"\/documentation\/compute\/uint\/words-swift.struct","abstract":[{"text":"A type that represents the words of this integer.","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Words"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt\/Words-swift.struct","title":"UInt.Words","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Words","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyMapSequence/Iterator":{"abstract":[{"text":"A type that provides the sequence’s iteration interface and","type":"text"},{"type":"text","text":" "},{"text":"encapsulates its iteration state.","type":"text"}],"url":"\/documentation\/compute\/lazymapsequence\/iterator","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Base","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sequence","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Iterator"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapSequence\/Iterator","title":"LazyMapSequence.Iterator","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren":{"url":"\/documentation\/compute\/arraytreechildren","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ArrayTreeChildren","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"TreeValue","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]},"abstract":[],"kind":"symbol","navigatorTitle":[{"text":"ArrayTreeChildren","kind":"identifier"}],"title":"ArrayTreeChildren","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/SequenceInitiableRecursiveSequence":{"abstract":[],"kind":"symbol","title":"SequenceInitiableRecursiveSequence","url":"\/documentation\/compute\/sequenceinitiablerecursivesequence","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SequenceInitiableRecursiveSequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SequenceInitiableRecursiveSequence","navigatorTitle":[{"text":"SequenceInitiableRecursiveSequence","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/UTF8View":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UTF8View","kind":"identifier"}],"title":"Substring.UTF8View","navigatorTitle":[{"kind":"identifier","text":"UTF8View"}],"type":"topic","abstract":[],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/UTF8View","url":"\/documentation\/compute\/substring\/utf8view","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/min()":{"abstract":[{"text":"Returns the minimum element in the sequence.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"min","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":"?"}],"url":"\/documentation\/compute\/sequence\/min()","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/min()","title":"min()","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}]},"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/StrideTo":{"title":"StrideTo","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideTo","type":"topic","url":"\/documentation\/compute\/strideto","kind":"symbol","abstract":[{"text":"A sequence of values formed by striding over a half-open interval.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StrideTo"}],"navigatorTitle":[{"text":"StrideTo","kind":"identifier"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Strideable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/reduce(_:_:)":{"abstract":[{"type":"text","text":"Returns the result of combining the elements of the sequence using the"},{"type":"text","text":" "},{"type":"text","text":"given closure."}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/reduce(_:_:)","type":"topic","url":"\/documentation\/compute\/sequence\/reduce(_:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reduce"},{"text":"<","kind":"text"},{"text":"Result","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Result"},{"text":", (","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}],"title":"reduce(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Matrix":{"role":"symbol","abstract":[],"title":"Matrix","url":"\/documentation\/compute\/matrix","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Matrix","kind":"identifier"}],"navigatorTitle":[{"text":"Matrix","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Matrix","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/MutableRectangularCollection":{"role":"symbol","url":"\/documentation\/compute\/mutablerectangularcollection","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRectangularCollection","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MutableRectangularCollection"}],"abstract":[{"type":"text","text":"A rectangular collection that supports subscript assignment."}],"navigatorTitle":[{"kind":"identifier","text":"MutableRectangularCollection"}],"kind":"symbol","title":"MutableRectangularCollection"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/max()":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"max"},{"text":"() -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/max()","type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"title":"max()","url":"\/documentation\/compute\/sequence\/max()","abstract":[{"text":"Returns the maximum element in the sequence.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/flatMap(_:)-jo2y":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/flatMap(_:)-jo2y","abstract":[{"type":"text","text":"Returns an array containing the concatenated results of calling the"},{"type":"text","text":" "},{"text":"given transformation with each element of this sequence.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"flatMap","kind":"identifier"},{"kind":"text","text":"<"},{"text":"SegmentOfResult","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"SegmentOfResult","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ["},{"text":"SegmentOfResult","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":"]","kind":"text"}],"type":"topic","title":"flatMap(_:)","kind":"symbol","url":"\/documentation\/compute\/sequence\/flatmap(_:)-jo2y"},"doc://com.swallow.documentation.Compute/documentation/Compute/FlattenSequence":{"kind":"symbol","abstract":[{"text":"A sequence consisting of all the elements contained in each segment","type":"text"},{"text":" ","type":"text"},{"text":"contained in some ","type":"text"},{"code":"Base","type":"codeVoice"},{"type":"text","text":" sequence."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FlattenSequence","kind":"identifier"}],"navigatorTitle":[{"text":"FlattenSequence","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence","title":"FlattenSequence","url":"\/documentation\/compute\/flattensequence","role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":" and "},{"code":"Base.Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":"."}]},"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/Words-swift.struct":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Words","kind":"identifier"}],"url":"\/documentation\/compute\/uint32\/words-swift.struct","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/Words-swift.struct","abstract":[{"type":"text","text":"A type that represents the words of this integer."}],"title":"UInt32.Words","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Words"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/PartialRangeFrom":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PartialRangeFrom"}],"kind":"symbol","role":"symbol","url":"\/documentation\/compute\/partialrangefrom","abstract":[{"type":"text","text":"A partial interval extending upward from a lower bound."}],"navigatorTitle":[{"text":"PartialRangeFrom","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PartialRangeFrom","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Strideable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Bound.Stride"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"SignedInteger"},{"text":".","type":"text"}]},"title":"PartialRangeFrom"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawBufferPointer":{"title":"UnsafeRawBufferPointer","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawBufferPointer","kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UnsafeRawBufferPointer","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UnsafeRawBufferPointer"}],"url":"\/documentation\/compute\/unsaferawbufferpointer","abstract":[{"type":"text","text":"A  nonowning collection interface to the bytes in a"},{"text":" ","type":"text"},{"type":"text","text":"region of memory."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt128/Words-swift.struct":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Words"}],"kind":"symbol","title":"UInt128.Words","abstract":[{"type":"text","text":"A type that represents the words of a binary integer."}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Words"}],"url":"\/documentation\/compute\/uint128\/words-swift.struct","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt128\/Words-swift.struct"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/dropFirst(_:)":{"type":"topic","kind":"symbol","title":"dropFirst(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"dropFirst","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:s17DropFirstSequenceV","text":"DropFirstSequence","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"abstract":[{"text":"Returns a sequence containing all but the given number of initial","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/dropFirst(_:)","url":"\/documentation\/compute\/sequence\/dropfirst(_:)","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/breadthFirstIterator(children:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/breadthFirstIterator(children:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"breadthFirstIterator"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Children"},{"kind":"text","text":">("},{"text":"children","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") -> ("},{"text":"Children","kind":"typeIdentifier","preciseIdentifier":"s:ST7ComputeE20breadthFirstIterator8childrens03AnyD0Vy7ElementQzGqd__AGc_tSTRd__AFQyd__AGRSlF8ChildrenL_qd__mfp"},{"kind":"text","text":")) -> "},{"preciseIdentifier":"s:s11AnyIteratorV","kind":"typeIdentifier","text":"AnyIterator"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":">"}],"role":"symbol","abstract":[{"text":"Returns a breadth-first iterator over all the elements in the sequence.","type":"text"}],"title":"breadthFirstIterator(children:)","type":"topic","url":"\/documentation\/compute\/sequence\/breadthfirstiterator(children:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/underestimatedCount-3afwr":{"role":"symbol","url":"\/documentation\/compute\/sequence\/underestimatedcount-3afwr","title":"underestimatedCount","kind":"symbol","abstract":[{"type":"text","text":"A value less than or equal to the number of elements in the sequence,"},{"type":"text","text":" "},{"text":"calculated nondestructively.","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"underestimatedCount","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"required":true,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/underestimatedCount-3afwr","type":"topic","defaultImplementations":2},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/suffix(_:)":{"kind":"symbol","url":"\/documentation\/compute\/sequence\/suffix(_:)","abstract":[{"text":"Returns a subsequence, up to the given maximum length, containing the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"final elements of the sequence."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/suffix(_:)","title":"suffix(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"suffix"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":") -> ["},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":"]","kind":"text"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Range":{"role":"symbol","abstract":[{"type":"text","text":"A half-open interval from a lower bound up to, but not including, an upper"},{"type":"text","text":" "},{"text":"bound.","type":"text"}],"title":"Range","url":"\/documentation\/compute\/range","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Range"}],"navigatorTitle":[{"text":"Range","kind":"identifier"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"code":"Strideable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Bound.Stride","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"SignedInteger"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range"},"doc://com.swallow.documentation.Compute/documentation/Compute/RectangularCollection":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"RectangularCollection","kind":"identifier"}],"title":"RectangularCollection","url":"\/documentation\/compute\/rectangularcollection","abstract":[{"type":"text","text":"A sequence whose elements are laid out in a row & column layout."}],"type":"topic","navigatorTitle":[{"text":"RectangularCollection","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RectangularCollection"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/joined()":{"role":"symbol","title":"joined()","url":"\/documentation\/compute\/sequence\/joined()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"joined"},{"kind":"text","text":"() -> "},{"text":"FlattenSequence","kind":"typeIdentifier","preciseIdentifier":"s:s15FlattenSequenceV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/joined()","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"abstract":[{"type":"text","text":"Returns the elements of this sequence of sequences, concatenated."}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/lazy":{"type":"topic","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"lazy","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12LazySequenceV","text":"LazySequence","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"kind":"symbol","role":"symbol","url":"\/documentation\/compute\/sequence\/lazy","abstract":[{"text":"A sequence containing the same elements as this sequence,","type":"text"},{"type":"text","text":" "},{"text":"but on which some operations, such as ","type":"text"},{"type":"codeVoice","code":"map"},{"type":"text","text":" and "},{"code":"filter","type":"codeVoice"},{"type":"text","text":", are"},{"type":"text","text":" "},{"type":"text","text":"implemented lazily."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/lazy","title":"lazy"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","title":"ArraySlice","url":"\/documentation\/compute\/arrayslice","kind":"symbol","abstract":[{"type":"text","text":"A slice of an "},{"type":"codeVoice","code":"Array"},{"text":", ","type":"text"},{"type":"codeVoice","code":"ContiguousArray"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"ArraySlice"},{"type":"text","text":" instance."}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArraySlice"}],"navigatorTitle":[{"kind":"identifier","text":"ArraySlice"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/BidirectionalMap":{"kind":"symbol","navigatorTitle":[{"text":"BidirectionalMap","kind":"identifier"}],"url":"\/documentation\/compute\/bidirectionalmap","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalMap"}],"abstract":[{"text":"A bidirectional map between two ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" types."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalMap","role":"symbol","title":"BidirectionalMap"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8/Words-swift.struct":{"abstract":[{"type":"text","text":"A type that represents the words of this integer."}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Words","kind":"identifier"}],"url":"\/documentation\/compute\/uint8\/words-swift.struct","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8\/Words-swift.struct","title":"UInt8.Words","role":"symbol","type":"topic","navigatorTitle":[{"text":"Words","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/StrideThrough":{"title":"StrideThrough","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"StrideThrough","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideThrough","type":"topic","navigatorTitle":[{"text":"StrideThrough","kind":"identifier"}],"abstract":[{"text":"A sequence of values formed by striding over a closed interval.","type":"text"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Strideable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/stridethrough"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/lexicographicallyPrecedes(_:by:)":{"type":"topic","kind":"symbol","title":"lexicographicallyPrecedes(_:by:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"lexicographicallyPrecedes","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"OtherSequence"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"OtherSequence"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"by"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/lexicographicallyPrecedes(_:by:)","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the sequence precedes another"},{"type":"text","text":" "},{"type":"text","text":"sequence in a lexicographical (dictionary) ordering, using the given"},{"text":" ","type":"text"},{"type":"text","text":"predicate to compare elements."}],"url":"\/documentation\/compute\/sequence\/lexicographicallyprecedes(_:by:)","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/KeyValuePairs":{"abstract":[{"text":"A lightweight collection of key-value pairs.","type":"text"}],"title":"KeyValuePairs","kind":"symbol","navigatorTitle":[{"text":"KeyValuePairs","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyValuePairs","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Key","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Key"},{"text":" conforms to ","type":"text"},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Value"},{"text":" conforms to ","type":"text"},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"type":"topic","url":"\/documentation\/compute\/keyvaluepairs","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"KeyValuePairs"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileSequence":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LazyPrefixWhileSequence","kind":"identifier"}],"navigatorTitle":[{"text":"LazyPrefixWhileSequence","kind":"identifier"}],"url":"\/documentation\/compute\/lazyprefixwhilesequence","kind":"symbol","title":"LazyPrefixWhileSequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence","abstract":[{"type":"text","text":"A sequence whose elements consist of the initial consecutive elements of"},{"text":" ","type":"text"},{"type":"text","text":"some base sequence that satisfy a given predicate."}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"BidirectionalCollection"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring":{"navigatorTitle":[{"kind":"identifier","text":"Substring"}],"url":"\/documentation\/compute\/substring","title":"Substring","abstract":[{"text":"A slice of a string.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Substring","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequenceProtocol":{"type":"topic","url":"\/documentation\/compute\/lazysequenceprotocol","role":"symbol","title":"LazySequenceProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"LazySequenceProtocol","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequenceProtocol","navigatorTitle":[{"text":"LazySequenceProtocol","kind":"identifier"}],"abstract":[{"text":"A sequence on which normally-eager sequence operations are implemented","type":"text"},{"type":"text","text":" "},{"type":"text","text":"lazily."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/EvictingQueue":{"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EvictingQueue"}],"abstract":[{"text":"A prioritiy queue that evicts elements after a certain count.","type":"text"}],"url":"\/documentation\/compute\/evictingqueue","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EvictingQueue","title":"EvictingQueue","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"EvictingQueue","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/flatMap(_:)-383uq":{"role":"symbol","type":"topic","title":"flatMap(_:)","abstract":[],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"flatMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ElementOfResult","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"ElementOfResult","kind":"typeIdentifier"},{"text":"?) ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> [","kind":"text"},{"text":"ElementOfResult","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/flatMap(_:)-383uq","deprecated":true,"kind":"symbol","url":"\/documentation\/compute\/sequence\/flatmap(_:)-383uq"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/sorted()":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"sorted","kind":"identifier"},{"kind":"text","text":"() -> ["},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":"]"}],"kind":"symbol","role":"symbol","url":"\/documentation\/compute\/sequence\/sorted()","abstract":[{"type":"text","text":"Returns the elements of the sequence, sorted."}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/sorted()","title":"sorted()"},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeReplaceableCollection":{"type":"topic","title":"RangeReplaceableCollection","abstract":[{"text":"A collection that supports replacement of an arbitrary subrange of elements","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with the elements of another collection."}],"url":"\/documentation\/compute\/rangereplaceablecollection","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"RangeReplaceableCollection","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableCollection","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"RangeReplaceableCollection","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/DefaultRecursiveIndices":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultRecursiveIndices","type":"topic","url":"\/documentation\/compute\/defaultrecursiveindices","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"DefaultRecursiveIndices","kind":"identifier"}],"navigatorTitle":[{"text":"DefaultRecursiveIndices","kind":"identifier"}],"title":"DefaultRecursiveIndices","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/String/UnicodeScalarView":{"url":"\/documentation\/compute\/string\/unicodescalarview","abstract":[{"text":"A view of a string’s contents as a collection of Unicode scalar values.","type":"text"}],"kind":"symbol","role":"symbol","title":"String.UnicodeScalarView","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnicodeScalarView"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"UnicodeScalarView"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/UnicodeScalarView"},"doc://com.swallow.documentation.Compute/documentation/Compute/PrefixSequence":{"type":"topic","navigatorTitle":[{"text":"PrefixSequence","kind":"identifier"}],"kind":"symbol","title":"PrefixSequence","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrefixSequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PrefixSequence","abstract":[{"text":"A sequence that only consumes up to ","type":"text"},{"code":"n","type":"codeVoice"},{"text":" elements from an underlying","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Base"},{"type":"text","text":" iterator."}],"url":"\/documentation\/compute\/prefixsequence","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Base","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/TreeValuesTraversalSequence":{"url":"\/documentation\/compute\/treevaluestraversalsequence","navigatorTitle":[{"kind":"identifier","text":"TreeValuesTraversalSequence"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"TreeValuesTraversalSequence","kind":"identifier"}],"abstract":[],"type":"topic","title":"TreeValuesTraversalSequence","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeValuesTraversalSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Queue":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Queue","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/compute\/queue","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"Queue"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Queue","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"T"},{"text":" conforms to ","type":"text"},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Escapable","type":"codeVoice"},{"text":".","type":"text"}]},"title":"Queue"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/contains(_:)":{"type":"topic","kind":"symbol","title":"contains(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"contains","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/contains(_:)","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the sequence contains the"},{"text":" ","type":"text"},{"type":"text","text":"given element."}],"url":"\/documentation\/compute\/sequence\/contains(_:)","role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/ContiguousArray":{"title":"ContiguousArray","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ContiguousArray","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ContiguousArray","type":"topic","navigatorTitle":[{"text":"ContiguousArray","kind":"identifier"}],"abstract":[{"type":"text","text":"A contiguously stored array."}],"conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/contiguousarray"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/allSatisfy(_:)":{"type":"topic","title":"allSatisfy(_:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/allSatisfy(_:)","url":"\/documentation\/compute\/sequence\/allsatisfy(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"allSatisfy"},{"kind":"text","text":"(("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether every element of a sequence"},{"type":"text","text":" "},{"type":"text","text":"satisfies a given predicate."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/elementsEqual(_:)":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"elementsEqual"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"OtherSequence"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"OtherSequence"},{"kind":"text","text":") -> "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/compute\/sequence\/elementsequal(_:)","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether this sequence and another"},{"type":"text","text":" "},{"text":"sequence contain the same elements in the same order.","type":"text"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/elementsEqual(_:)","title":"elementsEqual(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/MutableRowMajorRectangularCollection":{"title":"MutableRowMajorRectangularCollection","url":"\/documentation\/compute\/mutablerowmajorrectangularcollection","role":"symbol","abstract":[],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableRowMajorRectangularCollection","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"MutableRowMajorRectangularCollection","kind":"identifier"}],"navigatorTitle":[{"text":"MutableRowMajorRectangularCollection","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Collection"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","url":"\/documentation\/compute\/collection","abstract":[{"type":"text","text":"A sequence whose elements can be traversed multiple times,"},{"text":" ","type":"text"},{"text":"nondestructively, and accessed by an indexed subscript.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Collection"}],"title":"Collection"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/prefix(while:)":{"kind":"symbol","title":"prefix(while:)","type":"topic","role":"symbol","url":"\/documentation\/compute\/sequence\/prefix(while:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/prefix(while:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"prefix","kind":"identifier"},{"text":"(","kind":"text"},{"text":"while","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> [","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":"]","kind":"text"}],"abstract":[{"type":"text","text":"Returns a sequence containing the initial, consecutive elements that"},{"text":" ","type":"text"},{"type":"text","text":"satisfy the given predicate."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/shuffled()":{"title":"shuffled()","url":"\/documentation\/compute\/sequence\/shuffled()","role":"symbol","abstract":[{"type":"text","text":"Returns the elements of the sequence, shuffled."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/shuffled()","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"shuffled","kind":"identifier"},{"kind":"text","text":"() -> ["},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"kind":"text","text":"]"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyCollectionProtocol":{"title":"LazyCollectionProtocol","url":"\/documentation\/compute\/lazycollectionprotocol","role":"symbol","abstract":[],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyCollectionProtocol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazyCollectionProtocol"}],"navigatorTitle":[{"text":"LazyCollectionProtocol","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutablePointer":{"abstract":[{"type":"text","text":"A pointer for accessing and manipulating data of a"},{"text":" ","type":"text"},{"type":"text","text":"specific type."}],"url":"\/documentation\/compute\/unsafemutablepointer","conformance":{"constraints":[{"type":"codeVoice","code":"Pointee"},{"type":"text","text":" is "},{"type":"codeVoice","code":"__sFILE"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"navigatorTitle":[{"kind":"identifier","text":"UnsafeMutablePointer"}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeMutablePointer","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutablePointer","title":"UnsafeMutablePointer","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/CollectionDifference":{"title":"CollectionDifference","url":"\/documentation\/compute\/collectiondifference","role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"ChangeElement"},{"text":" conforms to ","type":"text"},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]},"abstract":[{"type":"text","text":"A collection of insertions and removals that describe the difference"},{"text":" ","type":"text"},{"text":"between two ordered collection states.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionDifference","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CollectionDifference"}],"navigatorTitle":[{"text":"CollectionDifference","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Dictionary/Values-swift.struct":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Values","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Key","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"text":".","type":"text"}]},"role":"symbol","title":"Dictionary.Values","url":"\/documentation\/compute\/dictionary\/values-swift.struct","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary\/Values-swift.struct","abstract":[{"type":"text","text":"A view of a dictionary’s values."}],"type":"topic","navigatorTitle":[{"text":"Values","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Zip2Sequence":{"conformance":{"constraints":[{"type":"codeVoice","code":"Sequence1"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Sequence2"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"kind":"symbol","title":"Zip2Sequence","navigatorTitle":[{"kind":"identifier","text":"Zip2Sequence"}],"abstract":[{"text":"A sequence of pairs built out of two underlying sequences.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/zip2sequence","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Zip2Sequence","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Zip2Sequence"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/withContiguousStorageIfAvailable(_:)-4don7":{"kind":"symbol","title":"withContiguousStorageIfAvailable(_:)","required":true,"url":"\/documentation\/compute\/sequence\/withcontiguousstorageifavailable(_:)-4don7","abstract":[{"text":"Executes a closure on the sequence’s contiguous storage.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withContiguousStorageIfAvailable"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"text":">((","kind":"text"},{"preciseIdentifier":"s:SR","text":"UnsafeBufferPointer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":"?","kind":"text"}],"defaultImplementations":1,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/withContiguousStorageIfAvailable(_:)-4don7"},"doc://com.swallow.documentation.Compute/documentation/Compute/CollectionOfOne":{"title":"CollectionOfOne","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CollectionOfOne"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CollectionOfOne","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CollectionOfOne"}],"abstract":[{"type":"text","text":"A collection containing a single element."}],"conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/collectionofone"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/min(by:)":{"role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/min(by:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"min","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"title":"min(by:)","url":"\/documentation\/compute\/sequence\/min(by:)","abstract":[{"type":"text","text":"Returns the minimum element in the sequence, using the given predicate as"},{"type":"text","text":" "},{"type":"text","text":"the comparison between elements."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyIterator":{"abstract":[{"text":"A type-erased iterator of ","type":"text"},{"type":"codeVoice","code":"Element"},{"type":"text","text":"."}],"url":"\/documentation\/compute\/anyiterator","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"navigatorTitle":[{"text":"AnyIterator","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AnyIterator","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIterator","title":"AnyIterator","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/depthFirstIterator(children:)":{"abstract":[{"type":"text","text":"Returns a depth-first iterator over all the elements in the sequence."}],"title":"depthFirstIterator(children:)","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"depthFirstIterator"},{"kind":"text","text":"<"},{"text":"Children","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"children"},{"text":": (","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") -> (","kind":"text"},{"text":"Children","kind":"typeIdentifier","preciseIdentifier":"s:ST7ComputeE18depthFirstIterator8childrens03AnyD0Vy7ElementQzGqd__AGc_tSTRd__AFQyd__AGRSlF8ChildrenL_qd__mfp"},{"kind":"text","text":")) -> "},{"text":"AnyIterator","kind":"typeIdentifier","preciseIdentifier":"s:s11AnyIteratorV"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/compute\/sequence\/depthfirstiterator(children:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/depthFirstIterator(children:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/DropWhileSequence":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Base","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":"."}]},"kind":"symbol","title":"DropWhileSequence","navigatorTitle":[{"kind":"identifier","text":"DropWhileSequence"}],"abstract":[{"type":"text","text":"A sequence that lazily consumes and drops "},{"type":"codeVoice","code":"n"},{"type":"text","text":" elements from an underlying"},{"type":"text","text":" "},{"type":"codeVoice","code":"Base"},{"text":" iterator before possibly returning the first available element.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/dropwhilesequence","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DropWhileSequence","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DropWhileSequence","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnfoldSequence":{"navigatorTitle":[{"text":"UnfoldSequence","kind":"identifier"}],"kind":"symbol","role":"symbol","title":"UnfoldSequence","type":"topic","url":"\/documentation\/compute\/unfoldsequence","abstract":[{"text":"A sequence whose elements are produced via repeated applications of a","type":"text"},{"type":"text","text":" "},{"text":"closure to some mutable state.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UnfoldSequence","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnfoldSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/Words-swift.struct":{"abstract":[{"type":"text","text":"A type that represents the words of this integer."}],"navigatorTitle":[{"text":"Words","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/Words-swift.struct","title":"Int.Words","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Words"}],"url":"\/documentation\/compute\/int\/words-swift.struct","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/max(by:)":{"abstract":[{"text":"Returns the maximum element in the sequence, using the given predicate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as the comparison between elements."}],"title":"max(by:)","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"max","kind":"identifier"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?"}],"url":"\/documentation\/compute\/sequence\/max(by:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/max(by:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/EmptyCollection":{"url":"\/documentation\/compute\/emptycollection","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EmptyCollection"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Escapable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"abstract":[{"type":"text","text":"A collection whose element type is "},{"code":"Element","type":"codeVoice"},{"text":" but that is always empty.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"EmptyCollection","kind":"identifier"}],"title":"EmptyCollection","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EmptyCollection","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/shuffled(using:)":{"kind":"symbol","type":"topic","url":"\/documentation\/compute\/sequence\/shuffled(using:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"shuffled","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"using","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") -> [","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/shuffled(using:)","abstract":[{"type":"text","text":"Returns the elements of the sequence, shuffled using the given generator"},{"type":"text","text":" "},{"type":"text","text":"as a source for randomness."}],"title":"shuffled(using:)","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Repeated":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Repeated","url":"\/documentation\/compute\/repeated","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Repeated","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Repeated"}],"title":"Repeated","abstract":[{"text":"A collection whose elements are all identical.","type":"text"}],"kind":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" and "},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/JoinedSequence":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Base.Element"},{"type":"text","text":" conforms to "},{"code":"Sequence","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"kind":"symbol","title":"JoinedSequence","navigatorTitle":[{"kind":"identifier","text":"JoinedSequence"}],"abstract":[{"text":"A sequence that presents the elements of a base sequence of sequences","type":"text"},{"text":" ","type":"text"},{"text":"concatenated using a given separator.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/joinedsequence","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/JoinedSequence","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JoinedSequence","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/GraphMatch":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/graphmatch","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/GraphMatch","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"GraphMatch"}],"navigatorTitle":[{"kind":"identifier","text":"GraphMatch"}],"abstract":[{"text":"Represents a matched subgraph in the DAG.","type":"text"}],"title":"GraphMatch"},"doc://com.swallow.documentation.Compute/documentation/Compute/DiscontiguousSlice":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DiscontiguousSlice","kind":"identifier"}],"navigatorTitle":[{"text":"DiscontiguousSlice","kind":"identifier"}],"url":"\/documentation\/compute\/discontiguousslice","kind":"symbol","title":"DiscontiguousSlice","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DiscontiguousSlice","abstract":[{"text":"A collection wrapper that provides access to the elements of a collection,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"indexed by a set of indices."}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Base","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"BidirectionalCollection"},{"type":"text","text":"."}]},"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/RandomAccessCollection":{"title":"RandomAccessCollection","abstract":[{"text":"A collection that supports efficient random-access index traversal.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RandomAccessCollection","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomAccessCollection","url":"\/documentation\/compute\/randomaccesscollection","navigatorTitle":[{"text":"RandomAccessCollection","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazySequence":{"navigatorTitle":[{"kind":"identifier","text":"LazySequence"}],"title":"LazySequence","abstract":[{"type":"text","text":"A sequence containing the same elements as a "},{"type":"codeVoice","code":"Base"},{"text":" sequence, but","type":"text"},{"text":" ","type":"text"},{"text":"on which some operations such as ","type":"text"},{"type":"codeVoice","code":"map"},{"type":"text","text":" and "},{"code":"filter","type":"codeVoice"},{"type":"text","text":" are"},{"type":"text","text":" "},{"type":"text","text":"implemented lazily."}],"role":"symbol","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"LazySequence"}],"type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"code":"Collection","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/compute\/lazysequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazySequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/joined(separator:)-5zjyj":{"role":"symbol","title":"joined(separator:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"joined"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"kind":"text","text":": "},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":") -> ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/joined(separator:)-5zjyj","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"StringProtocol","type":"codeVoice"},{"type":"text","text":"."}]},"url":"\/documentation\/compute\/sequence\/joined(separator:)-5zjyj","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Returns a new string by concatenating the elements of the sequence,"},{"type":"text","text":" "},{"text":"adding the given separator between each element.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveCollection":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveCollection","abstract":[],"title":"RecursiveCollection","url":"\/documentation\/compute\/recursivecollection","navigatorTitle":[{"kind":"identifier","text":"RecursiveCollection"}],"type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecursiveCollection"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Set":{"title":"Set","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Set","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Set"}],"abstract":[{"type":"text","text":"An unordered collection of unique elements."}],"conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/set"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyRandomAccessCollection":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyRandomAccessCollection","url":"\/documentation\/compute\/anyrandomaccesscollection","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyRandomAccessCollection"}],"navigatorTitle":[{"kind":"identifier","text":"AnyRandomAccessCollection"}],"title":"AnyRandomAccessCollection","abstract":[{"type":"text","text":"A type-erased wrapper over any collection with indices that"},{"type":"text","text":" "},{"text":"support random access traversal.","type":"text"}],"kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/prefix(_:)":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/prefix(_:)","role":"symbol","url":"\/documentation\/compute\/sequence\/prefix(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"prefix","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"PrefixSequence","kind":"typeIdentifier","preciseIdentifier":"s:s14PrefixSequenceV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"abstract":[{"text":"Returns a sequence, up to the specified maximum length, containing the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"initial elements of the sequence."}],"kind":"symbol","title":"prefix(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawBufferPointer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawBufferPointer","type":"topic","title":"UnsafeMutableRawBufferPointer","kind":"symbol","url":"\/documentation\/compute\/unsafemutablerawbufferpointer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafeMutableRawBufferPointer"}],"role":"symbol","navigatorTitle":[{"text":"UnsafeMutableRawBufferPointer","kind":"identifier"}],"abstract":[{"text":"A mutable nonowning collection interface to the bytes in a","type":"text"},{"type":"text","text":" "},{"text":"region of memory.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/reversed()":{"abstract":[{"text":"Returns an array containing the elements of this sequence in reverse","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"order."}],"title":"reversed()","kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"reversed"},{"kind":"text","text":"() -> ["},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"url":"\/documentation\/compute\/sequence\/reversed()","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/reversed()"},"doc://com.swallow.documentation.Compute/documentation/Compute/PriorityQueue":{"navigatorTitle":[{"text":"PriorityQueue","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/PriorityQueue","url":"\/documentation\/compute\/priorityqueue","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"PriorityQueue","kind":"identifier"}],"type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"T"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}]},"title":"PriorityQueue","kind":"symbol","abstract":[{"type":"text","text":"A priority queue."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/map(_:)":{"kind":"symbol","title":"map(_:)","abstract":[{"type":"text","text":"Returns an array containing the results of mapping the given closure"},{"text":" ","type":"text"},{"text":"over the sequence’s elements.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/sequence\/map(_:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/map(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"map"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"E","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":") -> [","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"]"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/elementsEqual(_:by:)":{"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether this sequence and another"},{"type":"text","text":" "},{"type":"text","text":"sequence contain equivalent elements in the same order, using the given"},{"type":"text","text":" "},{"type":"text","text":"predicate as the equivalence test."}],"title":"elementsEqual(_:by:)","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"elementsEqual"},{"kind":"text","text":"<"},{"text":"OtherSequence","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"OtherSequence","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"by"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"OtherSequence"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"url":"\/documentation\/compute\/sequence\/elementsequal(_:by:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/elementsEqual(_:by:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"url":"\/documentation\/compute\/sequence","navigatorTitle":[{"kind":"identifier","text":"Sequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","title":"Sequence","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Sequence","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Unicode/Scalar/UTF16View":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unicode\/Scalar\/UTF16View","role":"symbol","type":"topic","url":"\/documentation\/compute\/unicode\/scalar\/utf16view","abstract":[],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UTF16View","kind":"identifier"}],"navigatorTitle":[{"text":"UTF16View","kind":"identifier"}],"title":"Unicode.Scalar.UTF16View"},"doc://com.swallow.documentation.Compute/documentation/Compute/String":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"String"}],"title":"String","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"String","kind":"identifier"}],"abstract":[{"type":"text","text":"A Unicode string value that is a collection of characters."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/string"},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeSet/Ranges-swift.struct":{"kind":"symbol","title":"RangeSet.Ranges","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeSet\/Ranges-swift.struct","abstract":[{"type":"text","text":"A collection of the ranges that make up a range set."}],"url":"\/documentation\/compute\/rangeset\/ranges-swift.struct","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Ranges","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Ranges"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8/Words-swift.struct":{"abstract":[{"type":"text","text":"A type that represents the words of this integer."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8\/Words-swift.struct","type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Words"}],"url":"\/documentation\/compute\/int8\/words-swift.struct","navigatorTitle":[{"kind":"identifier","text":"Words"}],"title":"Int8.Words"},"doc://com.swallow.documentation.Compute/documentation/Compute/MutableCollection":{"role":"symbol","kind":"symbol","type":"topic","title":"MutableCollection","url":"\/documentation\/compute\/mutablecollection","navigatorTitle":[{"text":"MutableCollection","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableCollection","abstract":[{"type":"text","text":"A collection that supports subscript assignment."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MutableCollection"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64/Words-swift.struct":{"title":"Int64.Words","abstract":[{"text":"A type that represents the words of this integer.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64\/Words-swift.struct","navigatorTitle":[{"kind":"identifier","text":"Words"}],"url":"\/documentation\/compute\/int64\/words-swift.struct","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Words"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/first(where:)":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/first(where:)","title":"first(where:)","url":"\/documentation\/compute\/sequence\/first(where:)","abstract":[{"type":"text","text":"Returns the first element of the sequence that satisfies the given"},{"type":"text","text":" "},{"text":"predicate.","type":"text"}],"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"first","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"where"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":"?","kind":"text"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/enumerated()":{"url":"\/documentation\/compute\/sequence\/enumerated()","abstract":[{"text":"Returns a sequence of pairs (","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":", ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":" represents a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"consecutive integer starting at zero and "},{"inlineContent":[{"text":"x","type":"text"}],"type":"emphasis"},{"text":" represents an element of","type":"text"},{"type":"text","text":" "},{"text":"the sequence.","type":"text"}],"kind":"symbol","type":"topic","title":"enumerated()","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"enumerated","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:s18EnumeratedSequenceV","text":"EnumeratedSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/enumerated()"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterSequence":{"navigatorTitle":[{"kind":"identifier","text":"LazyFilterSequence"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyFilterSequence"}],"title":"LazyFilterSequence","abstract":[{"text":"A sequence whose elements consist of the elements of some base","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sequence that also satisfy a given predicate."}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Base","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":"."}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence","kind":"symbol","url":"\/documentation\/compute\/lazyfiltersequence","type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/DropFirstSequence":{"url":"\/documentation\/compute\/dropfirstsequence","abstract":[{"text":"A sequence that lazily consumes and drops ","type":"text"},{"code":"n","type":"codeVoice"},{"type":"text","text":" elements from an underlying"},{"text":" ","type":"text"},{"code":"Base","type":"codeVoice"},{"text":" iterator before possibly returning the first available element.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"DropFirstSequence","kind":"identifier"}],"type":"topic","title":"DropFirstSequence","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"DropFirstSequence","kind":"identifier"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Base","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sequence","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DropFirstSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/String/UTF16View":{"navigatorTitle":[{"text":"UTF16View","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/UTF16View","kind":"symbol","title":"String.UTF16View","url":"\/documentation\/compute\/string\/utf16view","abstract":[{"text":"A view of a string’s contents as a collection of UTF-16 code units.","type":"text"}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UTF16View"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/TreeChains":{"navigatorTitle":[{"text":"TreeChains","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeChains","url":"\/documentation\/compute\/treechains","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TreeChains","kind":"identifier"}],"type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"Tree"},{"type":"text","text":" conforms to "},{"code":"HomogenousTree","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Tree.Children","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"title":"TreeChains","kind":"symbol","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Iterator":{"role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A type that provides the sequence’s iteration interface and"},{"type":"text","text":" "},{"text":"encapsulates its iteration state.","type":"text"}],"fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Iterator"},{"kind":"text","text":" : "},{"text":"IteratorProtocol","kind":"typeIdentifier","preciseIdentifier":"s:St"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Iterator","url":"\/documentation\/compute\/sequence\/iterator","required":true,"title":"Iterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/joined(separator:)-7w47r":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"joined","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Separator"},{"kind":"text","text":">("},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Separator","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"JoinedSequence","preciseIdentifier":"s:s14JoinedSequenceV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"kind":"symbol","url":"\/documentation\/compute\/sequence\/joined(separator:)-7w47r","type":"topic","abstract":[{"text":"Returns the concatenated elements of this sequence of sequences,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"inserting the given separator between each element."}],"role":"symbol","conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/joined(separator:)-7w47r","title":"joined(separator:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/drop(while:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"drop","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"while"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"DropWhileSequence","preciseIdentifier":"s:s17DropWhileSequenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"title":"drop(while:)","abstract":[{"text":"Returns a sequence by skipping the initial, consecutive elements that","type":"text"},{"text":" ","type":"text"},{"text":"satisfy the given predicate.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/drop(while:)","kind":"symbol","url":"\/documentation\/compute\/sequence\/drop(while:)","type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring/UnicodeScalarView":{"title":"Substring.UnicodeScalarView","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring\/UnicodeScalarView","url":"\/documentation\/compute\/substring\/unicodescalarview","kind":"symbol","abstract":[],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnicodeScalarView"}],"role":"symbol","navigatorTitle":[{"text":"UnicodeScalarView","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/reduce(into:_:)":{"title":"reduce(into:_:)","url":"\/documentation\/compute\/sequence\/reduce(into:_:)","abstract":[{"type":"text","text":"Returns the result of combining the elements of the sequence using the"},{"type":"text","text":" "},{"text":"given closure.","type":"text"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/reduce(into:_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"reduce"},{"kind":"text","text":"<"},{"text":"Result","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"into","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Result"},{"text":", (","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Result"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> ()) "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/starts(with:by:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/starts(with:by:)","type":"topic","url":"\/documentation\/compute\/sequence\/starts(with:by:)","role":"symbol","kind":"symbol","title":"starts(with:by:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"starts","kind":"identifier"},{"kind":"text","text":"<"},{"text":"PossiblePrefix","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"with"},{"text":": ","kind":"text"},{"text":"PossiblePrefix","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"by","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":", ","kind":"text"},{"text":"PossiblePrefix","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the initial elements of the"},{"type":"text","text":" "},{"text":"sequence are equivalent to the elements in another sequence, using","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the given predicate as the equivalence test."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveSequence":{"url":"\/documentation\/compute\/recursivesequence","navigatorTitle":[{"text":"RecursiveSequence","kind":"identifier"}],"title":"RecursiveSequence","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecursiveSequence"}],"abstract":[{"text":"A recursively traversable sequence.","type":"text"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Dictionary/Keys-swift.struct":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Keys","kind":"identifier"}],"type":"topic","title":"Dictionary.Keys","url":"\/documentation\/compute\/dictionary\/keys-swift.struct","navigatorTitle":[{"kind":"identifier","text":"Keys"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary\/Keys-swift.struct","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Key"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]},"abstract":[{"text":"A view of a dictionary’s keys.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/EnumeratedSequence/Iterator":{"url":"\/documentation\/compute\/enumeratedsequence\/iterator","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EnumeratedSequence\/Iterator","title":"EnumeratedSequence.Iterator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Iterator","kind":"identifier"}],"conformance":{"constraints":[{"code":"Base","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"type":"topic","abstract":[{"type":"text","text":"The iterator for "},{"code":"EnumeratedSequence","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/EnumeratedSequence":{"url":"\/documentation\/compute\/enumeratedsequence","abstract":[{"type":"text","text":"An enumeration of the elements of a sequence or collection."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"EnumeratedSequence"}],"type":"topic","title":"EnumeratedSequence","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EnumeratedSequence"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Base","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"text":".","type":"text"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EnumeratedSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange":{"title":"ClosedRange","url":"\/documentation\/compute\/closedrange","role":"symbol","type":"topic","abstract":[{"text":"An interval from a lower bound up to, and including, an upper bound.","type":"text"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Strideable"},{"text":" and ","type":"text"},{"code":"Bound.Stride","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"SignedInteger"},{"type":"text","text":"."}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ClosedRange","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ClosedRange"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Dictionary":{"title":"Dictionary","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Dictionary","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary","type":"topic","navigatorTitle":[{"text":"Dictionary","kind":"identifier"}],"abstract":[{"type":"text","text":"A collection whose elements are key-value pairs."}],"conformance":{"constraints":[{"type":"codeVoice","code":"Key"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"text":", ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/dictionary"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyPrefixWhileSequence/Iterator":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"type":"topic","title":"LazyPrefixWhileSequence.Iterator","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyPrefixWhileSequence\/Iterator","abstract":[{"type":"text","text":"An iterator over the initial elements traversed by a base iterator that"},{"type":"text","text":" "},{"text":"satisfy a given predicate.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Iterator"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"url":"\/documentation\/compute\/lazyprefixwhilesequence\/iterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/sorted(by:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"sorted"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"by"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> [","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":"]"}],"title":"sorted(by:)","abstract":[{"text":"Returns the elements of the sequence, sorted using the given predicate as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the comparison between elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/sorted(by:)","kind":"symbol","url":"\/documentation\/compute\/sequence\/sorted(by:)","type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/StringProtocol":{"url":"\/documentation\/compute\/stringprotocol","role":"symbol","abstract":[{"type":"text","text":"A type that can represent a string as a collection of characters."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","title":"StringProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StringProtocol","kind":"identifier"}],"navigatorTitle":[{"text":"StringProtocol","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/forEach(_:)":{"url":"\/documentation\/compute\/sequence\/foreach(_:)","abstract":[{"text":"Calls the given closure on each element in the sequence in the same order","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as a "},{"code":"for","type":"codeVoice"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loop."}],"kind":"symbol","type":"topic","title":"forEach(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"forEach","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/forEach(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyCollection":{"abstract":[{"text":"A type-erased wrapper over any collection with indices that","type":"text"},{"type":"text","text":" "},{"text":"support forward traversal.","type":"text"}],"title":"AnyCollection","kind":"symbol","navigatorTitle":[{"text":"AnyCollection","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyCollection","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}]},"type":"topic","url":"\/documentation\/compute\/anycollection","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyCollection"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ResizableRecursiveSequence":{"url":"\/documentation\/compute\/resizablerecursivesequence","navigatorTitle":[{"text":"ResizableRecursiveSequence","kind":"identifier"}],"title":"ResizableRecursiveSequence","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ResizableRecursiveSequence"}],"abstract":[],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ResizableRecursiveSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/LinkedList":{"url":"\/documentation\/compute\/linkedlist","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"LinkedList","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]},"abstract":[],"kind":"symbol","navigatorTitle":[{"text":"LinkedList","kind":"identifier"}],"title":"LinkedList","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LinkedList","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveArray":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RecursiveArray","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray","title":"RecursiveArray","abstract":[],"conformance":{"constraints":[{"type":"codeVoice","code":"Unit"},{"text":" conforms to ","type":"text"},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"navigatorTitle":[{"kind":"identifier","text":"RecursiveArray"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/recursivearray"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int16/Words-swift.struct":{"title":"Int16.Words","navigatorTitle":[{"kind":"identifier","text":"Words"}],"abstract":[{"text":"A type that represents the words of this integer.","type":"text"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Words"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int16\/Words-swift.struct","role":"symbol","type":"topic","url":"\/documentation\/compute\/int16\/words-swift.struct"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/filter(_:)":{"abstract":[{"text":"Returns an array containing, in order, the elements of the sequence","type":"text"},{"text":" ","type":"text"},{"text":"that satisfy the given predicate.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"filter"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":"]","kind":"text"}],"type":"topic","title":"filter(_:)","url":"\/documentation\/compute\/sequence\/filter(_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/filter(_:)","role":"symbol","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExtensibleRecursiveSequence":{"url":"\/documentation\/compute\/extensiblerecursivesequence","navigatorTitle":[{"kind":"identifier","text":"ExtensibleRecursiveSequence"}],"title":"ExtensibleRecursiveSequence","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExtensibleRecursiveSequence"}],"abstract":[],"type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExtensibleRecursiveSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyBidirectionalCollection":{"title":"AnyBidirectionalCollection","url":"\/documentation\/compute\/anybidirectionalcollection","role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Escapable","type":"codeVoice"},{"text":".","type":"text"}]},"abstract":[{"type":"text","text":"A type-erased wrapper over any collection with indices that"},{"type":"text","text":" "},{"type":"text","text":"support bidirectional traversal."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyBidirectionalCollection","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyBidirectionalCollection","kind":"identifier"}],"navigatorTitle":[{"text":"AnyBidirectionalCollection","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array","title":"Array","url":"\/documentation\/compute\/array","kind":"symbol","abstract":[{"text":"An ordered, random-access collection.","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Array","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Array"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/compactMap(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"compactMap"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ElementOfResult"},{"text":">((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"ElementOfResult"},{"text":"?) ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"ElementOfResult"},{"kind":"text","text":"]"}],"title":"compactMap(_:)","abstract":[{"type":"text","text":"Returns an array containing the non-"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" results of calling the given"},{"text":" ","type":"text"},{"type":"text","text":"transformation with each element of this sequence."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/compactMap(_:)","kind":"symbol","url":"\/documentation\/compute\/sequence\/compactmap(_:)","type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/count(where:)":{"url":"\/documentation\/compute\/sequence\/count(where:)","abstract":[{"type":"text","text":"Returns the number of elements in the sequence that satisfy the given"},{"text":" ","type":"text"},{"type":"text","text":"predicate."}],"kind":"symbol","type":"topic","title":"count(where:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"count"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"E"},{"kind":"text","text":">("},{"text":"where","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"text":") -> ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/count(where:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/BidirectionalCollection":{"navigatorTitle":[{"text":"BidirectionalCollection","kind":"identifier"}],"abstract":[{"text":"A collection that supports backward as well as forward traversal.","type":"text"}],"title":"BidirectionalCollection","kind":"symbol","url":"\/documentation\/compute\/bidirectionalcollection","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BidirectionalCollection"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalCollection","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/lexicographicallyPrecedes(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"lexicographicallyPrecedes","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"OtherSequence"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"OtherSequence"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"title":"lexicographicallyPrecedes(_:)","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the sequence precedes another"},{"type":"text","text":" "},{"type":"text","text":"sequence in a lexicographical (dictionary) ordering, using the"},{"type":"text","text":" "},{"type":"text","text":"less-than operator ("},{"code":"<","type":"codeVoice"},{"text":") to compare elements.","type":"text"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/lexicographicallyPrecedes(_:)","kind":"symbol","url":"\/documentation\/compute\/sequence\/lexicographicallyprecedes(_:)","type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeBufferPointer":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer","url":"\/documentation\/compute\/unsafebufferpointer","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafeBufferPointer"}],"navigatorTitle":[{"text":"UnsafeBufferPointer","kind":"identifier"}],"title":"UnsafeBufferPointer","abstract":[{"type":"text","text":"A nonowning collection interface to a buffer of"},{"text":" ","type":"text"},{"type":"text","text":"elements stored contiguously in memory."}],"kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/EmptyCollection/Iterator":{"url":"\/documentation\/compute\/emptycollection\/iterator","navigatorTitle":[{"text":"Iterator","kind":"identifier"}],"abstract":[{"type":"text","text":"An iterator that never produces an element."}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Iterator"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EmptyCollection\/Iterator","kind":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" and "},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":"."}]},"role":"symbol","title":"EmptyCollection.Iterator"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/split(maxSplits:omittingEmptySubsequences:whereSeparator:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"split","kind":"identifier"},{"kind":"text","text":"("},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"text":"whereSeparator","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> [","kind":"text"},{"text":"ArraySlice","kind":"typeIdentifier","preciseIdentifier":"s:s10ArraySliceV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":">]"}],"abstract":[{"type":"text","text":"Returns the longest possible subsequences of the sequence, in order, that"},{"text":" ","type":"text"},{"text":"don’t contain elements satisfying the given predicate. Elements that are","type":"text"},{"text":" ","type":"text"},{"text":"used to split the sequence are not returned as part of any subsequence.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/sequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyFilterSequence/Iterator":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Iterator"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyFilterSequence\/Iterator","abstract":[{"text":"An iterator over the elements traversed by some base iterator that also","type":"text"},{"type":"text","text":" "},{"text":"satisfy a given predicate.","type":"text"}],"title":"LazyFilterSequence.Iterator","url":"\/documentation\/compute\/lazyfiltersequence\/iterator","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Iterator"}],"conformance":{"constraints":[{"code":"Base","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/Words-swift.struct":{"url":"\/documentation\/compute\/int32\/words-swift.struct","navigatorTitle":[{"kind":"identifier","text":"Words"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/Words-swift.struct","title":"Int32.Words","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Words","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that represents the words of this integer."}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnySequence":{"url":"\/documentation\/compute\/anysequence","abstract":[{"type":"text","text":"A type-erased sequence."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnySequence"}],"type":"topic","title":"AnySequence","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnySequence"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnySequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/DefaultIndices":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultIndices","url":"\/documentation\/compute\/defaultindices","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DefaultIndices"}],"navigatorTitle":[{"text":"DefaultIndices","kind":"identifier"}],"title":"DefaultIndices","abstract":[{"type":"text","text":"A collection of indices for an arbitrary collection"}],"kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Elements","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"RandomAccessCollection"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyDropWhileSequence":{"title":"LazyDropWhileSequence","url":"\/documentation\/compute\/lazydropwhilesequence","abstract":[{"type":"text","text":"A sequence whose elements consist of the elements that follow the initial"},{"text":" ","type":"text"},{"text":"consecutive elements of some base sequence that satisfy a given predicate.","type":"text"}],"conformance":{"constraints":[{"code":"Base","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"kind":"symbol","type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LazyDropWhileSequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyDropWhileSequence","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"LazyDropWhileSequence","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/dropLast(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"dropLast","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":") -> ["},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":"]"}],"title":"dropLast(_:)","abstract":[{"text":"Returns a sequence containing all but the given number of final","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/dropLast(_:)","kind":"symbol","url":"\/documentation\/compute\/sequence\/droplast(_:)","type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyMapSequence":{"url":"\/documentation\/compute\/lazymapsequence","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Sequence"},{"text":" whose elements consist of those in a ","type":"text"},{"code":"Base","type":"codeVoice"},{"type":"text","text":" "},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":" passed through a transform function returning "},{"type":"codeVoice","code":"Element"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These elements are computed lazily, each time they’re read, by"},{"type":"text","text":" "},{"type":"text","text":"calling the transform function on a base element."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"LazyMapSequence"}],"type":"topic","title":"LazyMapSequence","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"LazyMapSequence","kind":"identifier"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Base","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":", "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":"."}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Unicode/Scalar/UTF8View":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unicode\/Scalar\/UTF8View","abstract":[],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"UTF8View","kind":"identifier"}],"navigatorTitle":[{"text":"UTF8View","kind":"identifier"}],"title":"Unicode.Scalar.UTF8View","url":"\/documentation\/compute\/unicode\/scalar\/utf8view","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/RowMajorRectangularCollection":{"url":"\/documentation\/compute\/rowmajorrectangularcollection","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"RowMajorRectangularCollection","kind":"identifier"}],"abstract":[],"kind":"symbol","navigatorTitle":[{"text":"RowMajorRectangularCollection","kind":"identifier"}],"title":"RowMajorRectangularCollection","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RowMajorRectangularCollection","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt64/Words-swift.struct":{"navigatorTitle":[{"kind":"identifier","text":"Words"}],"kind":"symbol","role":"symbol","type":"topic","title":"UInt64.Words","abstract":[{"type":"text","text":"A type that represents the words of this integer."}],"url":"\/documentation\/compute\/uint64\/words-swift.struct","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Words","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64\/Words-swift.struct"},"doc://com.swallow.documentation.Compute/documentation/Compute/FlattenSequence/Iterator":{"kind":"symbol","type":"topic","abstract":[{"text":"A type that provides the sequence’s iteration interface and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"encapsulates its iteration state."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FlattenSequence\/Iterator","title":"FlattenSequence.Iterator","navigatorTitle":[{"text":"Iterator","kind":"identifier"}],"conformance":{"constraints":[{"code":"Base","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sequence"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Base.Element"},{"text":" conforms to ","type":"text"},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Iterator"}],"url":"\/documentation\/compute\/flattensequence\/iterator","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/starts(with:)":{"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/starts(with:)","title":"starts(with:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"starts","kind":"identifier"},{"text":"<","kind":"text"},{"text":"PossiblePrefix","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"PossiblePrefix","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the initial elements of the"},{"type":"text","text":" "},{"type":"text","text":"sequence are the same as the elements in another sequence."}],"conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/compute\/sequence\/starts(with:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/IteratorSequence":{"url":"\/documentation\/compute\/iteratorsequence","navigatorTitle":[{"text":"IteratorSequence","kind":"identifier"}],"abstract":[{"text":"A sequence built around an iterator of type ","type":"text"},{"code":"Base","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IteratorSequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorSequence","kind":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"IteratorProtocol"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"role":"symbol","title":"IteratorSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/contains(where:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"contains","kind":"identifier"},{"kind":"text","text":"("},{"text":"where","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/contains(where:)","url":"\/documentation\/compute\/sequence\/contains(where:)","type":"topic","title":"contains(where:)","kind":"symbol","abstract":[{"text":"Returns a Boolean value indicating whether the sequence contains an","type":"text"},{"type":"text","text":" "},{"text":"element that satisfies the given predicate.","type":"text"}],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/split(separator:maxSplits:omittingEmptySubsequences:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/split(separator:maxSplits:omittingEmptySubsequences:)","url":"\/documentation\/compute\/sequence\/split(separator:maxsplits:omittingemptysubsequences:)","type":"topic","abstract":[{"type":"text","text":"Returns the longest possible subsequences of the sequence, in order,"},{"type":"text","text":" "},{"type":"text","text":"around elements equal to the given element."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"split","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"maxSplits"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> ["},{"preciseIdentifier":"s:s10ArraySliceV","text":"ArraySlice","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":">]"}],"title":"split(separator:maxSplits:omittingEmptySubsequences:)","role":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Slice":{"navigatorTitle":[{"kind":"identifier","text":"Slice"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Slice","kind":"identifier"}],"title":"Slice","abstract":[{"text":"A view into a subsequence of elements of another collection.","type":"text"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Base"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"text":" and ","type":"text"},{"code":"LazySequenceProtocol","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Slice","kind":"symbol","url":"\/documentation\/compute\/slice","type":"topic","role":"symbol"}}}