{"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"stride"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"from","kind":"externalParam"},{"kind":"text","text":" "},{"text":"start","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"through"},{"text":" ","kind":"text"},{"text":"end","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"by"},{"kind":"text","text":" "},{"text":"stride","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"text":".","kind":"text"},{"preciseIdentifier":"s:Sx6StrideQa","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable\/Stride","text":"Stride"},{"text":") -> ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideThrough","kind":"typeIdentifier","preciseIdentifier":"s:s13StrideThroughV","text":"StrideThrough"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sx","text":"Strideable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"start","content":[{"type":"paragraph","inlineContent":[{"text":"The starting value to use for the sequence. If the sequence","type":"text"},{"text":" ","type":"text"},{"text":"contains any values, the first one is ","type":"text"},{"code":"start","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"An end value to limit the sequence. "},{"type":"codeVoice","code":"end"},{"type":"text","text":" is an element of"},{"type":"text","text":" "},{"type":"text","text":"the resulting sequence if and only if it can be produced from "},{"type":"codeVoice","code":"start"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"using steps of "},{"type":"codeVoice","code":"stride"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"end"},{"name":"stride","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The amount to step by with each iteration. A positive "},{"type":"codeVoice","code":"stride"},{"type":"text","text":" "},{"type":"text","text":"iterates upward; a negative "},{"code":"stride","type":"codeVoice"},{"text":" iterates downward.","type":"text"}]}]}]},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"return-value","text":"Return Value"},{"inlineContent":[{"type":"text","text":"A sequence from "},{"type":"codeVoice","code":"start"},{"type":"text","text":" toward, and possibly including, "},{"type":"codeVoice","code":"end"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Each value in the sequence is separated by "},{"code":"stride","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use this function to stride over values of any type that conforms"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"codeVoice","code":"Strideable"},{"text":" protocol, such as integers or floating-point types.","type":"text"},{"type":"text","text":" "},{"text":"Starting with ","type":"text"},{"type":"codeVoice","code":"start"},{"text":", each successive value of the sequence adds ","type":"text"},{"type":"codeVoice","code":"stride"},{"text":" ","type":"text"},{"text":"until the next value would be beyond ","type":"text"},{"code":"end","type":"codeVoice"},{"text":".","type":"text"}]},{"syntax":null,"code":["for radians in stride(from: 0.0, through: .pi * 2, by: .pi \/ 2) {","    let degrees = Int(radians * 180 \/ .pi)","    print(\"Degrees: \\(degrees), radians: \\(radians)\")","}","\/\/ Degrees: 0, radians: 0.0","\/\/ Degrees: 90, radians: 1.5707963267949","\/\/ Degrees: 180, radians: 3.14159265358979","\/\/ Degrees: 270, radians: 4.71238898038469","\/\/ Degrees: 360, radians: 6.28318530717959"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can use "},{"code":"stride(from:through:by:)","type":"codeVoice"},{"text":" to create a sequence that strides","type":"text"},{"type":"text","text":" "},{"text":"upward or downward. Pass a negative value as ","type":"text"},{"code":"stride","type":"codeVoice"},{"type":"text","text":" to create a sequence"},{"type":"text","text":" "},{"type":"text","text":"from a higher start to a lower end:"}],"type":"paragraph"},{"code":["for countdown in stride(from: 3, through: 1, by: -1) {","    print(\"\\(countdown)...\")","}","\/\/ 3...","\/\/ 2...","\/\/ 1..."],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"text":"The value you pass as ","type":"text"},{"code":"end","type":"codeVoice"},{"text":" is not guaranteed to be included in the","type":"text"},{"text":" ","type":"text"},{"text":"sequence. If stepping from ","type":"text"},{"type":"codeVoice","code":"start"},{"type":"text","text":" by "},{"code":"stride","type":"codeVoice"},{"type":"text","text":" does not produce "},{"type":"codeVoice","code":"end"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"the last value in the sequence will be one step before going beyond ","type":"text"},{"type":"codeVoice","code":"end"},{"text":".","type":"text"}]},{"code":["for multipleOfThree in stride(from: 3, through: 10, by: 3) {","    print(multipleOfThree)","}","\/\/ 3","\/\/ 6","\/\/ 9"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you pass a value as "},{"type":"codeVoice","code":"stride"},{"type":"text","text":" that moves away from "},{"code":"end","type":"codeVoice"},{"text":", the sequence","type":"text"},{"text":" ","type":"text"},{"text":"contains no values.","type":"text"}]},{"syntax":null,"code":["for x in stride(from: 0, through: 10, by: -1) {","    print(x)","}","\/\/ Nothing is printed."],"type":"codeListing"}]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/stride(from:through:by:)","interfaceLanguage":"swift"},"sections":[],"variants":[{"paths":["\/documentation\/compute\/stride(from:through:by:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"symbolKind":"func","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"stride"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"through","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sx6StrideQa","kind":"typeIdentifier","text":"Stride"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s13StrideThroughV","kind":"typeIdentifier","text":"StrideThrough"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","roleHeading":"Function","modules":[{"name":"Compute"}],"title":"stride(from:through:by:)","externalID":"s:s6stride4from7through2bys13StrideThroughVyxGx_x0E0QztSxRzlF"},"abstract":[{"type":"text","text":"Returns a sequence from a starting value toward, and possibly including, an end"},{"type":"text","text":" "},{"text":"value, stepping by the specified amount.","type":"text"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Strideable/Stride":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/strideable\/stride","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable\/Stride","required":true,"fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Stride"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SL","text":"Comparable"},{"text":", ","kind":"text"},{"text":"SignedNumeric","kind":"typeIdentifier","preciseIdentifier":"s:s13SignedNumericP"}],"abstract":[{"type":"text","text":"A type that represents the distance between two values."}],"title":"Stride"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/stride(from:through:by:)":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/stride(from:through:by:)","role":"symbol","url":"\/documentation\/compute\/stride(from:through:by:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"stride"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"through"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:Sx6StrideQa","text":"Stride"},{"text":") -> ","kind":"text"},{"text":"StrideThrough","kind":"typeIdentifier","preciseIdentifier":"s:s13StrideThroughV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"abstract":[{"text":"Returns a sequence from a starting value toward, and possibly including, an end","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value, stepping by the specified amount."}],"title":"stride(from:through:by:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Strideable":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/strideable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Strideable"}],"navigatorTitle":[{"text":"Strideable","kind":"identifier"}],"abstract":[{"type":"text","text":"A type representing continuous, one-dimensional values that can be offset"},{"type":"text","text":" "},{"type":"text","text":"and measured."}],"title":"Strideable"},"doc://com.swallow.documentation.Compute/documentation/Compute/StrideThrough":{"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"StrideThrough","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"StrideThrough","kind":"identifier"}],"url":"\/documentation\/compute\/stridethrough","title":"StrideThrough","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideThrough","abstract":[{"text":"A sequence of values formed by striding over a closed interval.","type":"text"}]}}}