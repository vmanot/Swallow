{"sections":[],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer\/sorted(by:)-99gt3","interfaceLanguage":"swift"},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"sorted","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"by"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"areInIncreasingOrder"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> [","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}]},{"parameters":[{"name":"areInIncreasingOrder","content":[{"type":"paragraph","inlineContent":[{"text":"A predicate that returns ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":" if its"},{"text":" ","type":"text"},{"type":"text","text":"first argument should be ordered before its second argument;"},{"text":" ","type":"text"},{"type":"text","text":"otherwise, "},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"text":"Return Value","level":2,"anchor":"return-value","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A sorted array of the sequence’s elements."}]}]},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you want to sort a sequence of elements that don’t conform to the"},{"text":" ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":" protocol, pass a predicate to this method that returns","type":"text"},{"text":" ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" when the first element should be ordered before the second. The","type":"text"},{"text":" ","type":"text"},{"text":"elements of the resulting array are ordered according to the given","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"predicate."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the following example, the predicate provides an ordering for an array"},{"type":"text","text":" "},{"text":"of a custom ","type":"text"},{"code":"HTTPResponse","type":"codeVoice"},{"type":"text","text":" type. The predicate orders errors before"},{"type":"text","text":" "},{"text":"successes and sorts the error responses by their error code.","type":"text"}]},{"code":["enum HTTPResponse {","    case ok","    case error(Int)","}","","let responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]","let sortedResponses = responses.sorted {","    switch ($0, $1) {","    \/\/ Order errors by code","    case let (.error(aCode), .error(bCode)):","        return aCode < bCode","","    \/\/ All successes are equivalent, so none is before any other","    case (.ok, .ok): return false","","    \/\/ Order errors before successes","    case (.error, .ok): return true","    case (.ok, .error): return false","    }","}","print(sortedResponses)","\/\/ Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\""],"type":"codeListing","syntax":null},{"inlineContent":[{"text":"You also use this method to sort elements that conform to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" protocol in descending order. To sort your sequence in"},{"type":"text","text":" "},{"text":"descending order, pass the greater-than operator (","type":"text"},{"code":">","type":"codeVoice"},{"type":"text","text":") as the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"areInIncreasingOrder"},{"text":" parameter.","type":"text"}],"type":"paragraph"},{"code":["let students: Set = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]","let descendingStudents = students.sorted(by: >)","print(descendingStudents)","\/\/ Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\""],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"text":"Calling the related ","type":"text"},{"code":"sorted()","type":"codeVoice"},{"text":" method is equivalent to calling this","type":"text"},{"text":" ","type":"text"},{"text":"method and passing the less-than operator (","type":"text"},{"type":"codeVoice","code":"<"},{"text":") as the predicate.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["print(students.sorted())","\/\/ Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\"","print(students.sorted(by: <))","\/\/ Prints \"[\"Abena\", \"Akosua\", \"Kofi\", \"Kweku\", \"Peter\"]\""]},{"inlineContent":[{"text":"The predicate must be a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"strict weak ordering","type":"text"}]},{"type":"text","text":" over the elements. That"},{"text":" ","type":"text"},{"type":"text","text":"is, for any elements "},{"code":"a","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"b"},{"type":"text","text":", and "},{"code":"c","type":"codeVoice"},{"text":", the following conditions must","type":"text"},{"type":"text","text":" "},{"type":"text","text":"hold:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"code":"areInIncreasingOrder(a, a)","type":"codeVoice"},{"text":" is always ","type":"text"},{"type":"codeVoice","code":"false"},{"text":". (Irreflexivity)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"code":"areInIncreasingOrder(a, b)","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"areInIncreasingOrder(b, c)","type":"codeVoice"},{"type":"text","text":" are"},{"type":"text","text":" "},{"text":"both ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":", then "},{"code":"areInIncreasingOrder(a, c)","type":"codeVoice"},{"type":"text","text":" is also "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"(Transitive comparability)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Two elements are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"incomparable"}]},{"text":" if neither is ordered before the other","type":"text"},{"text":" ","type":"text"},{"text":"according to the predicate. If ","type":"text"},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"code":"b","type":"codeVoice"},{"type":"text","text":" are incomparable, and "},{"type":"codeVoice","code":"b"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"codeVoice","code":"c"},{"type":"text","text":" are incomparable, then "},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"type":"codeVoice","code":"c"},{"type":"text","text":" are also incomparable."},{"type":"text","text":" "},{"type":"text","text":"(Transitive incomparability)"}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"The sorting algorithm is guaranteed to be stable. A stable sort","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"preserves the relative order of elements for which"},{"type":"text","text":" "},{"code":"areInIncreasingOrder","type":"codeVoice"},{"text":" does not establish an order.","type":"text"}],"type":"paragraph"},{"name":"Complexity","type":"aside","content":[{"inlineContent":[{"text":"O(","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" log "},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":"), where "},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":" is the length of the sequence.","type":"text"}],"type":"paragraph"}],"style":"note"}]}],"abstract":[{"text":"Returns the elements of the sequence, sorted using the given predicate as","type":"text"},{"type":"text","text":" "},{"text":"the comparison between elements.","type":"text"}],"variants":[{"paths":["\/documentation\/compute\/unsafebufferpointer\/sorted(by:)-99gt3"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"extendedModule":"Swift","role":"symbol","symbolKind":"method","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"roleHeading":"Instance Method","title":"sorted(by:)","externalID":"s:STsE6sorted2bySay7ElementQzGSbAD_ADtKXE_tKF::SYNTHESIZED::s:SR","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"sorted"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> ["},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":"]","kind":"text"}]},"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer\/Sequence-Implementations"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeBufferPointer/sorted(by:)-99gt3":{"role":"symbol","type":"topic","kind":"symbol","abstract":[{"text":"Returns the elements of the sequence, sorted using the given predicate as","type":"text"},{"text":" ","type":"text"},{"text":"the comparison between elements.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer\/sorted(by:)-99gt3","title":"sorted(by:)","url":"\/documentation\/compute\/unsafebufferpointer\/sorted(by:)-99gt3","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"sorted"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":"]","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeBufferPointer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer","abstract":[{"type":"text","text":"A nonowning collection interface to a buffer of"},{"type":"text","text":" "},{"text":"elements stored contiguously in memory.","type":"text"}],"role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeBufferPointer","kind":"identifier"}],"title":"UnsafeBufferPointer","navigatorTitle":[{"kind":"identifier","text":"UnsafeBufferPointer"}],"url":"\/documentation\/compute\/unsafebufferpointer"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeBufferPointer/Sequence-Implementations":{"type":"topic","title":"Sequence Implementations","url":"\/documentation\/compute\/unsafebufferpointer\/sequence-implementations","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer\/Sequence-Implementations","role":"collectionGroup","abstract":[]}}}