{"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray\/Sequence-Implementations"]]},"sections":[],"metadata":{"externalID":"s:STsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF::SYNTHESIZED::s:7Compute14RecursiveArrayV","roleHeading":"Instance Method","title":"withContiguousStorageIfAvailable(_:)","extendedModule":"Swift","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withContiguousStorageIfAvailable","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"text":">((","kind":"text"},{"text":"UnsafeBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SR"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":"?"}],"modules":[{"name":"Compute","relatedModules":["Swift"]}],"symbolKind":"method"},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray\/withContiguousStorageIfAvailable(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Executes a closure on the sequence’s contiguous storage."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/recursivearray\/withcontiguousstorageifavailable(_:)"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withContiguousStorageIfAvailable"},{"kind":"text","text":"<"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"body","kind":"internalParam"},{"text":": (","kind":"text"},{"text":"UnsafeBufferPointer","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SR"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":"?"}],"languages":["swift"],"platforms":["macOS"]}]},{"parameters":[{"name":"body","content":[{"inlineContent":[{"text":"A closure that receives an ","type":"text"},{"code":"UnsafeBufferPointer","type":"codeVoice"},{"type":"text","text":" to the"},{"type":"text","text":" "},{"text":"sequence’s contiguous storage.","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"text":"Return Value","anchor":"return-value","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The value returned from "},{"code":"body","type":"codeVoice"},{"text":", unless the sequence doesn’t","type":"text"},{"type":"text","text":" "},{"type":"text","text":"support contiguous storage, in which case the method ignores "},{"type":"codeVoice","code":"body"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"},{"content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method calls "},{"code":"body(buffer)","type":"codeVoice"},{"text":", where ","type":"text"},{"type":"codeVoice","code":"buffer"},{"type":"text","text":" is a pointer to the"},{"text":" ","type":"text"},{"type":"text","text":"collection’s contiguous storage. If the contiguous storage doesn’t exist,"},{"text":" ","type":"text"},{"type":"text","text":"the collection creates it. If the collection doesn’t support an internal"},{"text":" ","type":"text"},{"type":"text","text":"representation in a form of contiguous storage, the method doesn’t call"},{"text":" ","type":"text"},{"code":"body","type":"codeVoice"},{"text":" — it immediately returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"The optimizer can often eliminate bounds- and uniqueness-checking","type":"text"},{"text":" ","type":"text"},{"text":"within an algorithm. When that fails, however, invoking the same","type":"text"},{"type":"text","text":" "},{"type":"text","text":"algorithm on the "},{"type":"codeVoice","code":"buffer"},{"type":"text","text":" argument may let you trade safety for speed."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Successive calls to this method may provide a different pointer on each","type":"text"},{"type":"text","text":" "},{"text":"call. Don’t store ","type":"text"},{"type":"codeVoice","code":"buffer"},{"type":"text","text":" outside of this method."}]},{"inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Collection"},{"text":" that provides its own implementation of this method","type":"text"},{"type":"text","text":" "},{"type":"text","text":"must provide contiguous storage to its elements in the same order"},{"text":" ","type":"text"},{"text":"as they appear in the collection. This guarantees that it’s possible to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"generate contiguous mutable storage to any of its subsequences by slicing"},{"type":"text","text":" "},{"code":"buffer","type":"codeVoice"},{"text":" with a range formed from the distances to the subsequence’s","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"startIndex"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"endIndex"},{"type":"text","text":", respectively."}],"type":"paragraph"}],"kind":"content"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveArray":{"type":"topic","role":"symbol","url":"\/documentation\/compute\/recursivearray","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray","title":"RecursiveArray","abstract":[],"navigatorTitle":[{"text":"RecursiveArray","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecursiveArray"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveArray/withContiguousStorageIfAvailable(_:)":{"url":"\/documentation\/compute\/recursivearray\/withcontiguousstorageifavailable(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withContiguousStorageIfAvailable","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeBufferPointer","preciseIdentifier":"s:SR","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":"?"}],"role":"symbol","abstract":[{"text":"Executes a closure on the sequence’s contiguous storage.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray\/withContiguousStorageIfAvailable(_:)","title":"withContiguousStorageIfAvailable(_:)","type":"topic","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeBufferPointer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer","abstract":[{"type":"text","text":"A nonowning collection interface to a buffer of"},{"type":"text","text":" "},{"text":"elements stored contiguously in memory.","type":"text"}],"role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeBufferPointer","kind":"identifier"}],"title":"UnsafeBufferPointer","navigatorTitle":[{"kind":"identifier","text":"UnsafeBufferPointer"}],"url":"\/documentation\/compute\/unsafebufferpointer"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveArray/Sequence-Implementations":{"abstract":[],"url":"\/documentation\/compute\/recursivearray\/sequence-implementations","title":"Sequence Implementations","role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray\/Sequence-Implementations","type":"topic"}}}