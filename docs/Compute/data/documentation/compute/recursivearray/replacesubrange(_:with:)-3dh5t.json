{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray\/replaceSubrange(_:with:)-3dh5t"},"variants":[{"paths":["\/documentation\/compute\/recursivearray\/replacesubrange(_:with:)-3dh5t"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","sections":[],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"mutating"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"replaceSubrange"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"text":", ","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"subrange","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"with"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"newElements"},{"kind":"text","text":": "},{"text":"C","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","kind":"typeIdentifier","preciseIdentifier":"s:Sl","text":"Collection"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression","kind":"typeIdentifier","text":"RangeExpression","preciseIdentifier":"s:SX"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Index","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection\/Index","kind":"typeIdentifier","preciseIdentifier":"s:Sl5IndexQa"},{"text":" == ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression\/Bound","preciseIdentifier":"s:SX5BoundQa","text":"Bound"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"subrange","content":[{"inlineContent":[{"type":"text","text":"The subrange of the collection to replace. The bounds of"},{"text":" ","type":"text"},{"type":"text","text":"the range must be valid indices of the collection."}],"type":"paragraph"}]},{"name":"newElements","content":[{"type":"paragraph","inlineContent":[{"text":"The new elements to add to the collection.","type":"text"}]}]}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This method has the effect of removing the specified range of elements","type":"text"},{"type":"text","text":" "},{"text":"from the collection and inserting the new elements at the same location.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The number of new elements need not match the number of elements being"},{"type":"text","text":" "},{"text":"removed.","type":"text"}]},{"inlineContent":[{"type":"text","text":"In this example, three elements in the middle of an array of integers are"},{"type":"text","text":" "},{"type":"text","text":"replaced by the five elements of a "},{"type":"codeVoice","code":"Repeated<Int>"},{"text":" instance.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":[" var nums = [10, 20, 30, 40, 50]"," nums.replaceSubrange(1...3, with: repeatElement(1, count: 5))"," print(nums)"," \/\/ Prints \"[10, 1, 1, 1, 1, 1, 50]\""]},{"inlineContent":[{"text":"If you pass a zero-length range as the ","type":"text"},{"type":"codeVoice","code":"subrange"},{"text":" parameter, this method","type":"text"},{"type":"text","text":" "},{"type":"text","text":"inserts the elements of "},{"type":"codeVoice","code":"newElements"},{"type":"text","text":" at "},{"code":"subrange.startIndex","type":"codeVoice"},{"text":". Calling","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"code":"insert(contentsOf:at:)","type":"codeVoice"},{"text":" method instead is preferred.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Likewise, if you pass a zero-length collection as the "},{"type":"codeVoice","code":"newElements"},{"type":"text","text":" "},{"text":"parameter, this method removes the elements in the given subrange","type":"text"},{"text":" ","type":"text"},{"text":"without replacement. Calling the ","type":"text"},{"code":"removeSubrange(_:)","type":"codeVoice"},{"text":" method instead is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"preferred."}]},{"type":"paragraph","inlineContent":[{"text":"Calling this method may invalidate any existing indices for use with this","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"collection."}]},{"name":"Complexity","content":[{"inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" + "},{"type":"emphasis","inlineContent":[{"text":"m","type":"text"}]},{"type":"text","text":"), where "},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":" is length of this collection and","type":"text"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"m"}],"type":"emphasis"},{"type":"text","text":" is the length of "},{"type":"codeVoice","code":"newElements"},{"type":"text","text":". If the call to this method simply"},{"type":"text","text":" "},{"type":"text","text":"appends the contents of "},{"type":"codeVoice","code":"newElements"},{"type":"text","text":" to the collection, the complexity"},{"type":"text","text":" "},{"text":"is O(","type":"text"},{"type":"emphasis","inlineContent":[{"text":"m","type":"text"}]},{"text":").","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"}]}],"metadata":{"modules":[{"relatedModules":["Swift"],"name":"Compute"}],"role":"symbol","externalID":"s:SmsE15replaceSubrange_4withyqd_0__qd__ntSlRd__SXRd_0_7ElementQyd__ACRtz5BoundQyd_0_5IndexRtzr0_lF::SYNTHESIZED::s:7Compute14RecursiveArrayV","symbolKind":"method","extendedModule":"Swift","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replaceSubrange"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"C"},{"text":", ","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"with"},{"text":": ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"replaceSubrange(_:with:)"},"abstract":[{"type":"text","text":"Replaces the specified subrange of elements with the given collection."}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray\/RangeReplaceableCollection-Implementations"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveArray":{"type":"topic","role":"symbol","url":"\/documentation\/compute\/recursivearray","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray","title":"RecursiveArray","abstract":[],"navigatorTitle":[{"text":"RecursiveArray","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecursiveArray"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection/Index":{"url":"\/documentation\/compute\/collection\/index","required":true,"role":"symbol","title":"Index","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Index","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"Comparable","preciseIdentifier":"s:SL","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"A type that represents a position in the collection."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection\/Index","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequenceâ€™s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeExpression/Bound":{"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression\/Bound","title":"Bound","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Bound"},{"kind":"text","text":" : "},{"text":"Comparable","kind":"typeIdentifier","preciseIdentifier":"s:SL"}],"url":"\/documentation\/compute\/rangeexpression\/bound","required":true,"abstract":[{"text":"The type for which the expression describes a range.","type":"text"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Collection"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","url":"\/documentation\/compute\/collection","abstract":[{"type":"text","text":"A sequence whose elements can be traversed multiple times,"},{"text":" ","type":"text"},{"text":"nondestructively, and accessed by an indexed subscript.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Collection"}],"title":"Collection"},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveArray/replaceSubrange(_:with:)-3dh5t":{"type":"topic","title":"replaceSubrange(_:with:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"replaceSubrange","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"R"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"text":"C","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/compute\/recursivearray\/replacesubrange(_:with:)-3dh5t","role":"symbol","abstract":[{"text":"Replaces the specified subrange of elements with the given collection.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray\/replaceSubrange(_:with:)-3dh5t"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeExpression":{"abstract":[{"text":"A type that can be used to slice a collection.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"RangeExpression","kind":"identifier"}],"url":"\/documentation\/compute\/rangeexpression","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression","kind":"symbol","title":"RangeExpression","role":"symbol","type":"topic","navigatorTitle":[{"text":"RangeExpression","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveArray/RangeReplaceableCollection-Implementations":{"abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray\/RangeReplaceableCollection-Implementations","title":"RangeReplaceableCollection Implementations","url":"\/documentation\/compute\/recursivearray\/rangereplaceablecollection-implementations","role":"collectionGroup","type":"topic"}}}