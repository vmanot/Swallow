{"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray\/MutableCollection-Implementations"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"mutating"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"sort"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"areInIncreasingOrder"},{"kind":"text","text":": ("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Bool","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A predicate that returns "},{"code":"true","type":"codeVoice"},{"type":"text","text":" if its"},{"type":"text","text":" "},{"text":"first argument should be ordered before its second argument;","type":"text"},{"type":"text","text":" "},{"text":"otherwise, ","type":"text"},{"type":"codeVoice","code":"false"},{"text":". If ","type":"text"},{"code":"areInIncreasingOrder","type":"codeVoice"},{"type":"text","text":" throws an error during"},{"type":"text","text":" "},{"text":"the sort, the elements may be in a different order, but none will be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"lost."}]}],"name":"areInIncreasingOrder"}]},{"content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"When you want to sort a collection of elements that donâ€™t conform to"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":" protocol, pass a closure to this method that returns","type":"text"},{"type":"text","text":" "},{"code":"true","type":"codeVoice"},{"text":" when the first element should be ordered before the second.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the following example, the closure provides an ordering for an array"},{"text":" ","type":"text"},{"type":"text","text":"of a custom enumeration that describes an HTTP response. The predicate"},{"type":"text","text":" "},{"text":"orders errors before successes and sorts the error responses by their","type":"text"},{"text":" ","type":"text"},{"text":"error code.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["enum HTTPResponse {","    case ok","    case error(Int)","}","","var responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]","responses.sort {","    switch ($0, $1) {","    \/\/ Order errors by code","    case let (.error(aCode), .error(bCode)):","        return aCode < bCode","","    \/\/ All successes are equivalent, so none is before any other","    case (.ok, .ok): return false","","    \/\/ Order errors before successes","    case (.error, .ok): return true","    case (.ok, .error): return false","    }","}","print(responses)","\/\/ Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\""]},{"inlineContent":[{"type":"text","text":"Alternatively, use this method to sort a collection of elements that do"},{"text":" ","type":"text"},{"type":"text","text":"conform to "},{"code":"Comparable","type":"codeVoice"},{"text":" when you want the sort to be descending instead","type":"text"},{"type":"text","text":" "},{"text":"of ascending. Pass the greater-than operator (","type":"text"},{"code":">","type":"codeVoice"},{"text":") operator as the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"predicate."}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["var students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]","students.sort(by: >)","print(students)","\/\/ Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\""]},{"inlineContent":[{"type":"codeVoice","code":"areInIncreasingOrder"},{"type":"text","text":" must be a "},{"inlineContent":[{"type":"text","text":"strict weak ordering"}],"type":"emphasis"},{"type":"text","text":" over the"},{"text":" ","type":"text"},{"type":"text","text":"elements. That is, for any elements "},{"code":"a","type":"codeVoice"},{"type":"text","text":", "},{"code":"b","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"c"},{"text":", the following","type":"text"},{"type":"text","text":" "},{"text":"conditions must hold:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"areInIncreasingOrder(a, a)"},{"type":"text","text":" is always "},{"code":"false","type":"codeVoice"},{"type":"text","text":". (Irreflexivity)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"code":"areInIncreasingOrder(a, b)","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"areInIncreasingOrder(b, c)","type":"codeVoice"},{"type":"text","text":" are"},{"type":"text","text":" "},{"text":"both ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":", then "},{"type":"codeVoice","code":"areInIncreasingOrder(a, c)"},{"type":"text","text":" is also "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"(Transitive comparability)","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Two elements are "},{"inlineContent":[{"type":"text","text":"incomparable"}],"type":"emphasis"},{"text":" if neither is ordered before the other","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"according to the predicate. If "},{"code":"a","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"b"},{"type":"text","text":" are incomparable, and "},{"type":"codeVoice","code":"b"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"c","type":"codeVoice"},{"type":"text","text":" are incomparable, then "},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"code":"c","type":"codeVoice"},{"text":" are also incomparable.","type":"text"},{"text":" ","type":"text"},{"text":"(Transitive incomparability)","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sorting algorithm is guaranteed to be stable. A stable sort"},{"type":"text","text":" "},{"text":"preserves the relative order of elements for which","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"areInIncreasingOrder"},{"text":" does not establish an order.","type":"text"}]},{"name":"Complexity","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" log "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":" is the length of the collection.","type":"text"}]}],"style":"note","type":"aside"}],"kind":"content"}],"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray\/sort(by:)","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/compute\/recursivearray\/sort(by:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"metadata":{"symbolKind":"method","externalID":"s:SMsSkRzrlE4sort2byySb7ElementSTQz_ADtKXE_tKF::SYNTHESIZED::s:7Compute14RecursiveArrayV","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"sort"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}],"extendedModule":"Swift","role":"symbol","title":"sort(by:)","roleHeading":"Instance Method","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"RandomAccessCollection"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]}},"abstract":[{"text":"Sorts the collection in place, using the given predicate as the","type":"text"},{"type":"text","text":" "},{"text":"comparison between elements.","type":"text"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveArray":{"type":"topic","role":"symbol","url":"\/documentation\/compute\/recursivearray","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray","title":"RecursiveArray","abstract":[],"navigatorTitle":[{"text":"RecursiveArray","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecursiveArray"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveArray/sort(by:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"sort","kind":"identifier"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"}],"conformance":{"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"RandomAccessCollection"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"kind":"symbol","url":"\/documentation\/compute\/recursivearray\/sort(by:)","role":"symbol","title":"sort(by:)","abstract":[{"type":"text","text":"Sorts the collection in place, using the given predicate as the"},{"type":"text","text":" "},{"text":"comparison between elements.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray\/sort(by:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveArray/MutableCollection-Implementations":{"abstract":[],"role":"collectionGroup","url":"\/documentation\/compute\/recursivearray\/mutablecollection-implementations","type":"topic","kind":"article","title":"MutableCollection Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray\/MutableCollection-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequenceâ€™s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]}}}