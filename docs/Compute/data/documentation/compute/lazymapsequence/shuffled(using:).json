{"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"shuffled"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"using"},{"kind":"text","text":": "},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> ["},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"role":"symbol","extendedModule":"Swift","externalID":"s:STsE8shuffled5usingSay7ElementQzGqd__z_tSGRd__lF::SYNTHESIZED::s:s15LazyMapSequenceV","symbolKind":"method","title":"shuffled(using:)","roleHeading":"Instance Method","modules":[{"name":"Compute","relatedModules":["Swift"]}]},"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"shuffled"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"using","kind":"externalParam"},{"kind":"text","text":" "},{"text":"generator","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"T","kind":"typeIdentifier"},{"text":") -> [","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"kind":"text","text":"] "},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomNumberGenerator","text":"RandomNumberGenerator","kind":"typeIdentifier","preciseIdentifier":"s:SG"}]}]},{"kind":"parameters","parameters":[{"name":"generator","content":[{"type":"paragraph","inlineContent":[{"text":"The random number generator to use when shuffling","type":"text"},{"text":" ","type":"text"},{"text":"the sequence.","type":"text"}]}]}]},{"content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"inlineContent":[{"text":"An array of this sequence’s elements in a shuffled order.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"inlineContent":[{"text":"You use this method to randomize the elements of a sequence when you are","type":"text"},{"text":" ","type":"text"},{"text":"using a custom random number generator. For example, you can shuffle the","type":"text"},{"text":" ","type":"text"},{"text":"numbers between ","type":"text"},{"type":"codeVoice","code":"0"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"9"},{"type":"text","text":" by calling the "},{"type":"codeVoice","code":"shuffled(using:)"},{"text":" method on","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that range:"}],"type":"paragraph"},{"type":"codeListing","code":["let numbers = 0...9","let shuffledNumbers = numbers.shuffled(using: &myGenerator)","\/\/ shuffledNumbers == [8, 9, 4, 3, 2, 6, 7, 0, 5, 1]"],"syntax":null},{"content":[{"inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":"), where ","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":" is the length of the sequence."}],"type":"paragraph"}],"name":"Complexity","type":"aside","style":"note"},{"name":"Note","type":"aside","content":[{"inlineContent":[{"text":"The algorithm used to shuffle a sequence may change in a future","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"version of Swift. If you’re passing a generator that results in the"},{"type":"text","text":" "},{"text":"same shuffled order each time you run your program, that sequence may","type":"text"},{"text":" ","type":"text"},{"text":"change when your program is compiled using a different version of","type":"text"},{"type":"text","text":" "},{"text":"Swift.","type":"text"}],"type":"paragraph"}],"style":"note"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/lazymapsequence\/shuffled(using:)"]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapSequence\/Sequence-Implementations"]]},"kind":"symbol","abstract":[{"text":"Returns the elements of the sequence, shuffled using the given generator","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as a source for randomness."}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapSequence\/shuffled(using:)"},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/LazyMapSequence":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapSequence","url":"\/documentation\/compute\/lazymapsequence","abstract":[{"type":"text","text":"A "},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":" whose elements consist of those in a "},{"type":"codeVoice","code":"Base"},{"type":"text","text":" "},{"code":"Sequence","type":"codeVoice"},{"text":" passed through a transform function returning ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"These elements are computed lazily, each time they’re read, by"},{"type":"text","text":" "},{"type":"text","text":"calling the transform function on a base element."}],"type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LazyMapSequence","kind":"identifier"}],"navigatorTitle":[{"text":"LazyMapSequence","kind":"identifier"}],"kind":"symbol","title":"LazyMapSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyMapSequence/shuffled(using:)":{"type":"topic","abstract":[{"type":"text","text":"Returns the elements of the sequence, shuffled using the given generator"},{"type":"text","text":" "},{"type":"text","text":"as a source for randomness."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapSequence\/shuffled(using:)","title":"shuffled(using:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"shuffled","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"using"},{"kind":"text","text":": "},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> [","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"url":"\/documentation\/compute\/lazymapsequence\/shuffled(using:)","role":"symbol","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LazyMapSequence/Sequence-Implementations":{"kind":"article","type":"topic","role":"collectionGroup","url":"\/documentation\/compute\/lazymapsequence\/sequence-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LazyMapSequence\/Sequence-Implementations","title":"Sequence Implementations","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/RandomNumberGenerator":{"abstract":[{"text":"A type that provides uniformly distributed random data.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RandomNumberGenerator"}],"url":"\/documentation\/compute\/randomnumbergenerator","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomNumberGenerator","title":"RandomNumberGenerator","role":"symbol","type":"topic","navigatorTitle":[{"text":"RandomNumberGenerator","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}