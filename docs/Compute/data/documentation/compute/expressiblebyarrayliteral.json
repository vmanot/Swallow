{"relationshipsSections":[{"title":"Inherited By","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/OptionSet","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD-swift.protocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SetAlgebra"],"type":"inheritedBy","kind":"relationships"},{"type":"conformingTypes","title":"Conforming Types","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ContiguousArray","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/GraphMatch","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LinkedList","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD2","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD3","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD4","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD64","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDMask","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set"],"kind":"relationships"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"sections":[],"abstract":[{"type":"text","text":"A type that can be initialized using an array literal."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/expressiblebyarrayliteral"]}],"topicSections":[{"anchor":"Associated-Types","title":"Associated Types","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByArrayLiteral\/ArrayLiteralElement"],"generated":true},{"anchor":"Initializers","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByArrayLiteral\/init(arrayLiteral:)-7cx9q"],"generated":true,"title":"Initializers"}],"kind":"symbol","metadata":{"modules":[{"name":"Compute"}],"symbolKind":"protocol","title":"ExpressibleByArrayLiteral","role":"symbol","navigatorTitle":[{"text":"ExpressibleByArrayLiteral","kind":"identifier"}],"externalID":"s:s25ExpressibleByArrayLiteralP","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ExpressibleByArrayLiteral"}],"roleHeading":"Protocol"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByArrayLiteral"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ExpressibleByArrayLiteral"}]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An array literal is a simple way of expressing a list of values. Simply"},{"type":"text","text":" "},{"type":"text","text":"surround a comma-separated list of values, instances, or literals with"},{"type":"text","text":" "},{"text":"square brackets to create an array literal. You can use an array literal","type":"text"},{"type":"text","text":" "},{"type":"text","text":"anywhere an instance of an "},{"code":"ExpressibleByArrayLiteral","type":"codeVoice"},{"text":" type is expected: as","type":"text"},{"type":"text","text":" "},{"text":"a value assigned to a variable or constant, as a parameter to a method or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"initializer, or even as the subject of a nonmutating operation like"},{"text":" ","type":"text"},{"type":"codeVoice","code":"map(_:)"},{"text":" or ","type":"text"},{"code":"filter(_:)","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"Arrays, sets, and option sets all conform to ","type":"text"},{"type":"codeVoice","code":"ExpressibleByArrayLiteral"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and your own custom types can as well. Here’s an example of creating a set"},{"text":" ","type":"text"},{"text":"and an array using array literals:","type":"text"}]},{"code":["let employeesSet: Set<String> = [\"Amir\", \"Jihye\", \"Dave\", \"Alessia\", \"Dave\"]","print(employeesSet)","\/\/ Prints \"[\"Amir\", \"Dave\", \"Jihye\", \"Alessia\"]\"","","let employeesArray: [String] = [\"Amir\", \"Jihye\", \"Dave\", \"Alessia\", \"Dave\"]","print(employeesArray)","\/\/ Prints \"[\"Amir\", \"Jihye\", \"Dave\", \"Alessia\", \"Dave\"]\""],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"code":"Set","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Array","type":"codeVoice"},{"text":" types each handle array literals in their own way to","type":"text"},{"type":"text","text":" "},{"text":"create new instances. In this case, the newly created set drops the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"duplicate value (“Dave”) and doesn’t maintain the order of the array"},{"type":"text","text":" "},{"text":"literal’s elements. The new array, on the other hand, matches the order","type":"text"},{"type":"text","text":" "},{"text":"and number of elements provided.","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An array literal is not the same as an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance. You can’t"},{"text":" ","type":"text"},{"text":"initialize a type that conforms to ","type":"text"},{"code":"ExpressibleByArrayLiteral","type":"codeVoice"},{"text":" simply by","type":"text"},{"type":"text","text":" "},{"text":"assigning an existing array.","type":"text"}]}],"name":"Note","type":"aside","style":"note"},{"level":1,"text":"Type Inference of Array Literals","anchor":"Type-Inference-of-Array-Literals","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Whenever possible, Swift’s compiler infers the full intended type of your","type":"text"},{"type":"text","text":" "},{"text":"array literal. Because ","type":"text"},{"type":"codeVoice","code":"Array"},{"type":"text","text":" is the default type for an array literal,"},{"type":"text","text":" "},{"type":"text","text":"without writing any other code, you can declare an array with a particular"},{"type":"text","text":" "},{"type":"text","text":"element type by providing one or more values."}]},{"inlineContent":[{"type":"text","text":"In this example, the compiler infers the full type of each array literal."}],"type":"paragraph"},{"syntax":null,"code":["let integers = [1, 2, 3]","\/\/ 'integers' has type '[Int]'","","let strings = [\"a\", \"b\", \"c\"]","\/\/ 'strings' has type '[String]'"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An empty array literal alone doesn’t provide enough information for the"},{"type":"text","text":" "},{"type":"text","text":"compiler to infer the intended type of the "},{"code":"Array","type":"codeVoice"},{"text":" instance. When using an","type":"text"},{"type":"text","text":" "},{"text":"empty array literal, specify the type of the variable or constant.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["var emptyArray: [Bool] = []","\/\/ 'emptyArray' has type '[Bool]'"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because many functions and initializers fully specify the types of their"},{"type":"text","text":" "},{"type":"text","text":"parameters, you can often use an array literal with or without elements as"},{"type":"text","text":" "},{"type":"text","text":"a parameter. For example, the "},{"code":"sum(_:)","type":"codeVoice"},{"type":"text","text":" function shown here takes an "},{"type":"codeVoice","code":"Int"},{"text":" ","type":"text"},{"text":"array as a parameter:","type":"text"}]},{"syntax":null,"type":"codeListing","code":["func sum(values: [Int]) -> Int {","    return values.reduce(0, +)","}","","let sumOfFour = sum([5, 10, 15, 20])","\/\/ 'sumOfFour' == 50","","let sumOfNone = sum([])","\/\/ 'sumOfNone' == 0"]},{"type":"paragraph","inlineContent":[{"text":"When you call a function that does not fully specify its parameters’ types,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use the type-cast operator ("},{"type":"codeVoice","code":"as"},{"type":"text","text":") to specify the type of an array literal."},{"type":"text","text":" "},{"type":"text","text":"For example, the "},{"code":"log(name:value:)","type":"codeVoice"},{"text":" function shown here has an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"unconstrained generic "},{"type":"codeVoice","code":"value"},{"type":"text","text":" parameter."}]},{"syntax":null,"type":"codeListing","code":["func log<T>(name name: String, value: T) {","    print(\"\\(name): \\(value)\")","}","","log(name: \"Four integers\", value: [5, 10, 15, 20])","\/\/ Prints \"Four integers: [5, 10, 15, 20]\"","","log(name: \"Zero integers\", value: [] as [Int])","\/\/ Prints \"Zero integers: []\""]},{"level":1,"text":"Conforming to ExpressibleByArrayLiteral","type":"heading","anchor":"Conforming-to-ExpressibleByArrayLiteral"},{"type":"paragraph","inlineContent":[{"text":"Add the capability to be initialized with an array literal to your own","type":"text"},{"text":" ","type":"text"},{"text":"custom types by declaring an ","type":"text"},{"code":"init(arrayLiteral:)","type":"codeVoice"},{"type":"text","text":" initializer. The"},{"type":"text","text":" "},{"type":"text","text":"following example shows the array literal initializer for a hypothetical"},{"type":"text","text":" "},{"type":"codeVoice","code":"OrderedSet"},{"type":"text","text":" type, which has setlike semantics but maintains the order of"},{"text":" ","type":"text"},{"type":"text","text":"its elements."}]},{"type":"codeListing","syntax":null,"code":["struct OrderedSet<Element: Hashable>: Collection, SetAlgebra {","    \/\/ implementation details","}","","extension OrderedSet: ExpressibleByArrayLiteral {","    init(arrayLiteral: Element...) {","        self.init()","        for element in arrayLiteral {","            self.append(element)","        }","    }","}"]}]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/SIMDMask":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SIMDMask"}],"role":"symbol","title":"SIMDMask","abstract":[],"url":"\/documentation\/compute\/simdmask","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDMask","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SIMDMask"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByArrayLiteral/init(arrayLiteral:)-7cx9q":{"abstract":[{"text":"Creates an instance initialized with the given elements.","type":"text"}],"type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"arrayLiteral"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"ArrayLiteralElement","kind":"typeIdentifier","preciseIdentifier":"s:s25ExpressibleByArrayLiteralP0cD7ElementQa"},{"text":"...)","kind":"text"}],"kind":"symbol","url":"\/documentation\/compute\/expressiblebyarrayliteral\/init(arrayliteral:)-7cx9q","required":true,"title":"init(arrayLiteral:)","defaultImplementations":2,"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByArrayLiteral\/init(arrayLiteral:)-7cx9q"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD32":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SIMD32","kind":"identifier"}],"title":"SIMD32","navigatorTitle":[{"kind":"identifier","text":"SIMD32"}],"type":"topic","abstract":[{"type":"text","text":"A vector of 32 scalar values."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD32","url":"\/documentation\/compute\/simd32","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD2":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SIMD2"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD2","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SIMD2"}],"abstract":[{"text":"A vector of two scalar values.","type":"text"}],"title":"SIMD2","url":"\/documentation\/compute\/simd2","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD3":{"role":"symbol","navigatorTitle":[{"text":"SIMD3","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD3","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SIMD3","kind":"identifier"}],"abstract":[{"text":"A vector of three scalar values.","type":"text"}],"title":"SIMD3","url":"\/documentation\/compute\/simd3","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByArrayLiteral":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ExpressibleByArrayLiteral","kind":"identifier"}],"title":"ExpressibleByArrayLiteral","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByArrayLiteral","abstract":[{"type":"text","text":"A type that can be initialized using an array literal."}],"url":"\/documentation\/compute\/expressiblebyarrayliteral","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ExpressibleByArrayLiteral"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree":{"type":"topic","conformance":{"constraints":[{"code":"T","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ExpressibleByArrayLiteral"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"title":"ArrayTree","url":"\/documentation\/compute\/arraytree","abstract":[],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree","navigatorTitle":[{"text":"ArrayTree","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArrayTree"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/SetAlgebra":{"role":"symbol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SetAlgebra","kind":"identifier"}],"title":"SetAlgebra","url":"\/documentation\/compute\/setalgebra","abstract":[{"text":"A type that provides mathematical set operations.","type":"text"}],"type":"topic","navigatorTitle":[{"text":"SetAlgebra","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SetAlgebra"},"doc://com.swallow.documentation.Compute/documentation/Compute/GraphMatch":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/graphmatch","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/GraphMatch","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"GraphMatch"}],"navigatorTitle":[{"kind":"identifier","text":"GraphMatch"}],"abstract":[{"text":"Represents a matched subgraph in the DAG.","type":"text"}],"title":"GraphMatch"},"doc://com.swallow.documentation.Compute/documentation/Compute/OptionSet":{"role":"symbol","url":"\/documentation\/compute\/optionset","type":"topic","abstract":[{"type":"text","text":"A type that presents a mathematical set interface to a bit set."}],"kind":"symbol","title":"OptionSet","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"OptionSet","kind":"identifier"}],"navigatorTitle":[{"text":"OptionSet","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/OptionSet"},"doc://com.swallow.documentation.Compute/documentation/Compute/Array":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array","title":"Array","url":"\/documentation\/compute\/array","kind":"symbol","abstract":[{"text":"An ordered, random-access collection.","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Array","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Array"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","title":"ArraySlice","url":"\/documentation\/compute\/arrayslice","kind":"symbol","abstract":[{"type":"text","text":"A slice of an "},{"type":"codeVoice","code":"Array"},{"text":", ","type":"text"},{"type":"codeVoice","code":"ContiguousArray"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"ArraySlice"},{"type":"text","text":" instance."}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArraySlice"}],"navigatorTitle":[{"kind":"identifier","text":"ArraySlice"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Set":{"title":"Set","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Set","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Set"}],"abstract":[{"type":"text","text":"An unordered collection of unique elements."}],"conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/set"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD4":{"role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SIMD4","kind":"identifier"}],"navigatorTitle":[{"text":"SIMD4","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD4","abstract":[{"type":"text","text":"A vector of four scalar values."}],"title":"SIMD4","url":"\/documentation\/compute\/simd4"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByArrayLiteral/ArrayLiteralElement":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByArrayLiteral\/ArrayLiteralElement","abstract":[{"text":"The type of the elements of an array literal.","type":"text"}],"kind":"symbol","fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ArrayLiteralElement"}],"role":"symbol","title":"ArrayLiteralElement","type":"topic","required":true,"url":"\/documentation\/compute\/expressiblebyarrayliteral\/arrayliteralelement"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTreeChildren":{"url":"\/documentation\/compute\/arraytreechildren","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ArrayTreeChildren","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"TreeValue","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]},"abstract":[],"kind":"symbol","navigatorTitle":[{"text":"ArrayTreeChildren","kind":"identifier"}],"title":"ArrayTreeChildren","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTreeChildren","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/ContiguousArray":{"title":"ContiguousArray","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ContiguousArray","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ContiguousArray","type":"topic","navigatorTitle":[{"text":"ContiguousArray","kind":"identifier"}],"abstract":[{"type":"text","text":"A contiguously stored array."}],"conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/contiguousarray"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD16":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SIMD16","kind":"identifier"}],"type":"topic","title":"SIMD16","url":"\/documentation\/compute\/simd16","navigatorTitle":[{"kind":"identifier","text":"SIMD16"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD16","kind":"symbol","role":"symbol","abstract":[{"text":"A vector of 16 scalar values.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/LinkedList":{"url":"\/documentation\/compute\/linkedlist","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"LinkedList","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]},"abstract":[],"kind":"symbol","navigatorTitle":[{"text":"LinkedList","kind":"identifier"}],"title":"LinkedList","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LinkedList","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD64":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SIMD64"}],"abstract":[{"type":"text","text":"A vector of 64 scalar values."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD64","navigatorTitle":[{"text":"SIMD64","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/simd64","title":"SIMD64"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD8":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD8","title":"SIMD8","abstract":[{"text":"A vector of eight scalar values.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"SIMD8","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/simd8","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SIMD8","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD-swift.protocol":{"role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SIMD"}],"navigatorTitle":[{"kind":"identifier","text":"SIMD"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD-swift.protocol","abstract":[{"text":"A SIMD vector of a fixed number of elements.","type":"text"}],"title":"SIMD","url":"\/documentation\/compute\/simd-swift.protocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveArray":{"type":"topic","role":"symbol","url":"\/documentation\/compute\/recursivearray","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray","title":"RecursiveArray","abstract":[],"navigatorTitle":[{"text":"RecursiveArray","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecursiveArray"}],"kind":"symbol"}}}