{"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"sections":[],"topicSections":[{"anchor":"Structures","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/Words-swift.struct"],"generated":true,"title":"Structures"},{"title":"Operators","generated":true,"anchor":"Operators","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/!=(_:_:)-9bwn1","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/&=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/&__=(_:_:)-1qp80","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/&__=(_:_:)-92fyx","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/*=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/+=(_:_:)-wdwa","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/-=(_:_:)-8bhjj","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/==(_:_:)-9raz7","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/_(_:_:)-3r38p","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/_=(_:_:)-4hx1l","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/_=(_:_:)-6w0fj","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/_=(_:_:)-8galu","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/_=(_:_:)-8vgdn"]},{"title":"Initializers","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/init(_:)-1on5r","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/init(_:)-2w61y","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/init(_:)-6tczc","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/init(_:)-9i7ab","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/init(bitPattern:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/init(exactly:)-7jkyf","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/init(exactly:)-8qhoe","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/init(exactly:)-9c2y8"],"anchor":"Initializers","generated":true},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/byteSwapped","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/leadingZeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/nonzeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/trailingZeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/words-swift.property"],"title":"Instance Properties","anchor":"Instance-Properties","generated":true},{"anchor":"Instance-Methods","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/addingReportingOverflow(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/dividedReportingOverflow(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/dividingFullWidth(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/multipliedFullWidth(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/multipliedReportingOverflow(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/remainderReportingOverflow(dividingBy:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/signum()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/subtractingReportingOverflow(_:)"],"generated":true,"title":"Instance Methods"},{"title":"Type Aliases","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/IntegerLiteralType","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/Magnitude-swift.typealias","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/Stride"],"anchor":"Type-Aliases"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/bitWidth-swift.type.property"],"title":"Type Properties","anchor":"Type-Properties","generated":true},{"anchor":"Default-Implementations","generated":true,"title":"Default Implementations","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/AdditiveArithmetic-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/BinaryInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/Comparable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/CustomReflectable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/Decodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/Encodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/ExpressibleByIntegerLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/FixedWidthInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/SIMDScalar-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/Strideable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/UnsignedInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/_CustomPlaygroundQuickLookable-Implementations"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/uint32"]}],"relationshipsSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/10Accelerate10BNNSScalarP","doc:\/\/com.swallow.documentation.Compute\/10Accelerate23vDSP_IntegerConvertableP","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AdditiveArithmetic","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDScalar","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","doc:\/\/com.swallow.documentation.Compute\/7Swallow18AdditionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow21AnyCodableConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22ApproximatelyEquatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20ArithmeticOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16BooleanInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7BoundedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18BoundedRandomnableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18ByteOrderSwappableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow14CoderPrimitiveP","doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataDecodableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataEncodableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiscreteP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20DiscreteOrContinuousP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18DivisionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22FloatingPointInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow9InitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16IntegerInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow24MultiplicationOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableAdditionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow27MutableArithmeticOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableDivisionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow31MutableMultiplicationOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow28MutableSubtractionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow6NumberP","doc:\/\/com.swallow.documentation.Compute\/7Swallow17NumberConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow15NumberInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow11RandomnableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow26ShouldNotBeDecodedFromBoolP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22SignedIntegerInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16SignedOrUnsignedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow21SubtractionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP","doc:\/\/com.swallow.documentation.Compute\/7Swallow8UnsignedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow24UnsignedIntegerInitiableP","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsignedInteger"],"kind":"relationships","type":"conformsTo","title":"Conforms To"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32"},"metadata":{"title":"UInt32","externalID":"s:s6UInt32V","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UInt32","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UInt32"}],"role":"symbol","roleHeading":"Structure","symbolKind":"struct","modules":[{"name":"Compute"}]},"abstract":[{"text":"A 32-bit unsigned integer value","type":"text"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"@frozen","kind":"attribute"},{"kind":"text","text":" "},{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UInt32"}]}],"kind":"declarations"}],"kind":"symbol","references":{"doc://com.swallow.documentation.Compute/7Swallow21AnyCodableConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21AnyCodableConvertibleP","title":"Swallow.AnyCodableConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/CVarArg":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CVarArg"}],"abstract":[{"text":"A type whose instances can be encoded, and appropriately passed, as","type":"text"},{"text":" ","type":"text"},{"text":"elements of a C ","type":"text"},{"type":"codeVoice","code":"va_list"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"CVarArg","kind":"identifier"}],"title":"CVarArg","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","url":"\/documentation\/compute\/cvararg"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/byteSwapped":{"url":"\/documentation\/compute\/uint32\/byteswapped","title":"byteSwapped","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/byteSwapped","abstract":[{"type":"text","text":"A representation of this integer with the byte order swapped."}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"byteSwapped","kind":"identifier"},{"kind":"text","text":": "},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"}],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/!=(_:_:)-9bwn1":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/!=(_:_:)-9bwn1","abstract":[],"role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"!="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"UInt32","preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier","text":"UInt32"},{"kind":"text","text":") -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"type":"topic","title":"!=(_:_:)","kind":"symbol","url":"\/documentation\/compute\/uint32\/!=(_:_:)-9bwn1"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/_=(_:_:)-6w0fj":{"abstract":[{"type":"text","text":"Divides the first value by the second and stores the remainder in the"},{"type":"text","text":" "},{"text":"left-hand-side variable.","type":"text"}],"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"%=","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"},{"kind":"text","text":", "},{"text":"UInt32","preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","title":"%=(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/_=(_:_:)-6w0fj","url":"\/documentation\/compute\/uint32\/_=(_:_:)-6w0fj","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/Stride":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/Stride","abstract":[{"text":"A type that represents the distance between two values.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"Stride","kind":"identifier"}],"title":"UInt32.Stride","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Stride"}],"url":"\/documentation\/compute\/uint32\/stride","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/IntegerLiteralType":{"title":"UInt32.IntegerLiteralType","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IntegerLiteralType"}],"abstract":[{"text":"A type that represents an integer literal.","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/IntegerLiteralType","type":"topic","navigatorTitle":[{"text":"IntegerLiteralType","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/uint32\/integerliteraltype"},"doc://com.swallow.documentation.Compute/documentation/Compute/BitwiseCopyable":{"title":"BitwiseCopyable","abstract":[],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BitwiseCopyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","url":"\/documentation\/compute\/bitwisecopyable","navigatorTitle":[{"kind":"identifier","text":"BitwiseCopyable"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow9InitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow9InitiableP","title":"Swallow.Initiable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/init(_:)-1on5r":{"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"Float","kind":"typeIdentifier","preciseIdentifier":"s:Sf"},{"text":")","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/init(_:)-1on5r","title":"init(_:)","abstract":[],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/uint32\/init(_:)-1on5r"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/==(_:_:)-9raz7":{"type":"topic","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether two values are equal."}],"url":"\/documentation\/compute\/uint32\/==(_:_:)-9raz7","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"=="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"UInt32","preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"UInt32","preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/==(_:_:)-9raz7","title":"==(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger":{"title":"FixedWidthInteger","kind":"symbol","navigatorTitle":[{"text":"FixedWidthInteger","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"FixedWidthInteger","kind":"identifier"}],"abstract":[{"text":"An integer type that uses a fixed size for every instance.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/fixedwidthinteger"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/-=(_:_:)-8bhjj":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"-=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:s6UInt32V","text":"UInt32","kind":"typeIdentifier"},{"kind":"text","text":", "},{"preciseIdentifier":"s:s6UInt32V","text":"UInt32","kind":"typeIdentifier"},{"kind":"text","text":")"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/-=(_:_:)-8bhjj","url":"\/documentation\/compute\/uint32\/-=(_:_:)-8bhjj","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Subtracts the second value from the first and stores the difference in the"},{"type":"text","text":" "},{"type":"text","text":"left-hand-side variable."}],"title":"-=(_:_:)","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/&__=(_:_:)-1qp80":{"abstract":[{"text":"Returns the result of shifting a value’s binary representation the","type":"text"},{"type":"text","text":" "},{"text":"specified number of digits to the left, masking the shift amount to the","type":"text"},{"type":"text","text":" "},{"text":"type’s bit width, and stores the result in the left-hand-side variable.","type":"text"}],"title":"&<<=(_:_:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/&__=(_:_:)-1qp80","type":"topic","role":"symbol","url":"\/documentation\/compute\/uint32\/&__=(_:_:)-1qp80","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"&<<="},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier","text":"UInt32"},{"text":")","kind":"text"}]},"doc://com.swallow.documentation.Compute/7Swallow28MutableSubtractionOperatableP":{"type":"unresolvable","title":"Swallow.MutableSubtractionOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow28MutableSubtractionOperatableP"},"doc://com.swallow.documentation.Compute/7Swallow20ByteTupleConvertibleP":{"type":"unresolvable","title":"Swallow.ByteTupleConvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP"},"doc://com.swallow.documentation.Compute/7Swallow22SignedIntegerInitiableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22SignedIntegerInitiableP","type":"unresolvable","title":"Swallow.SignedIntegerInitiable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/Decodable-Implementations":{"title":"Decodable Implementations","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/Decodable-Implementations","abstract":[],"type":"topic","url":"\/documentation\/compute\/uint32\/decodable-implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/bitWidth-swift.type.property":{"abstract":[{"type":"text","text":"The number of bits used for the underlying binary representation of"},{"type":"text","text":" "},{"type":"text","text":"values of this type."}],"title":"bitWidth","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/bitWidth-swift.type.property","type":"topic","role":"symbol","url":"\/documentation\/compute\/uint32\/bitwidth-swift.type.property","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"bitWidth"},{"kind":"text","text":": "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"}]},"doc://com.swallow.documentation.Compute/7Swallow18ByteOrderSwappableP":{"title":"Swallow.ByteOrderSwappable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18ByteOrderSwappableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow17NumberConvertibleP":{"title":"Swallow.NumberConvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow17NumberConvertibleP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMDScalar":{"kind":"symbol","navigatorTitle":[{"text":"SIMDScalar","kind":"identifier"}],"type":"topic","title":"SIMDScalar","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDScalar","abstract":[{"type":"text","text":"A type that can be used as an element in a SIMD vector."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SIMDScalar","kind":"identifier"}],"url":"\/documentation\/compute\/simdscalar"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/init(_:)-2w61y":{"abstract":[{"type":"text","text":"Creates an integer from the given floating-point value, rounding toward"},{"type":"text","text":" "},{"type":"text","text":"zero."}],"fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"Float16","preciseIdentifier":"s:s7Float16V","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"init(_:)","url":"\/documentation\/compute\/uint32\/init(_:)-2w61y","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/init(_:)-2w61y"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/+=(_:_:)-wdwa":{"url":"\/documentation\/compute\/uint32\/+=(_:_:)-wdwa","kind":"symbol","type":"topic","title":"+=(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/+=(_:_:)-wdwa","abstract":[{"text":"Adds two values and stores the result in the left-hand-side variable.","type":"text"}],"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"+="},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V","text":"UInt32"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V","text":"UInt32"},{"kind":"text","text":")"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/signum()":{"abstract":[{"type":"text","text":"Returns "},{"type":"codeVoice","code":"-1"},{"type":"text","text":" if this value is negative and "},{"code":"1","type":"codeVoice"},{"type":"text","text":" if it’s positive;"},{"text":" ","type":"text"},{"text":"otherwise, ","type":"text"},{"type":"codeVoice","code":"0"},{"text":".","type":"text"}],"kind":"symbol","role":"symbol","title":"signum()","url":"\/documentation\/compute\/uint32\/signum()","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"signum","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/signum()"},"doc://com.swallow.documentation.Compute/documentation/Compute/Decodable":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Decodable","kind":"identifier"}],"title":"Decodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","abstract":[{"type":"text","text":"A type that can decode itself from an external representation."}],"url":"\/documentation\/compute\/decodable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Decodable"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/dividingFullWidth(_:)":{"title":"dividingFullWidth(_:)","url":"\/documentation\/compute\/uint32\/dividingfullwidth(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dividingFullWidth","kind":"identifier"},{"text":"((high","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt32","preciseIdentifier":"s:s6UInt32V"},{"text":", low","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt32","preciseIdentifier":"s:s6UInt32V"},{"text":".","kind":"text"},{"text":"Magnitude","preciseIdentifier":"s:s6UInt32V9Magnitudea","kind":"typeIdentifier"},{"text":")) -> (quotient","kind":"text"},{"kind":"text","text":": "},{"text":"UInt32","preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier"},{"text":", remainder","kind":"text"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s6UInt32V","text":"UInt32","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic","abstract":[{"text":"Returns a tuple containing the quotient and remainder of dividing the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"given value by this value."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/dividingFullWidth(_:)","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow22ApproximatelyEquatableP":{"title":"Swallow.ApproximatelyEquatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22ApproximatelyEquatableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/multipliedReportingOverflow(by:)":{"url":"\/documentation\/compute\/uint32\/multipliedreportingoverflow(by:)","title":"multipliedReportingOverflow(by:)","type":"topic","abstract":[{"text":"Returns the product of this value and the given value, along with a","type":"text"},{"type":"text","text":" "},{"text":"Boolean value indicating whether overflow occurred in the operation.","type":"text"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/multipliedReportingOverflow(by:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"multipliedReportingOverflow","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"by"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s6UInt32V","text":"UInt32","kind":"typeIdentifier"},{"kind":"text","text":") -> (partialValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt32","preciseIdentifier":"s:s6UInt32V"},{"text":", overflow","kind":"text"},{"kind":"text","text":": "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://com.swallow.documentation.Compute/7Swallow16BooleanInitiableP":{"title":"Swallow.BooleanInitiable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16BooleanInitiableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomReflectable":{"url":"\/documentation\/compute\/customreflectable","role":"symbol","abstract":[{"text":"A type that explicitly supplies its own mirror.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","title":"CustomReflectable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomReflectable"}],"navigatorTitle":[{"kind":"identifier","text":"CustomReflectable"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow25MutableAdditionOperatableP":{"title":"Swallow.MutableAdditionOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableAdditionOperatableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/_=(_:_:)-8galu":{"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/_=(_:_:)-8galu","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"\/=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:s6UInt32V","text":"UInt32","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"},{"text":")","kind":"text"}],"url":"\/documentation\/compute\/uint32\/_=(_:_:)-8galu","abstract":[{"type":"text","text":"Divides the first value by the second and stores the quotient in the"},{"text":" ","type":"text"},{"type":"text","text":"left-hand-side variable."}],"kind":"symbol","title":"\/=(_:_:)","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/CustomReflectable-Implementations":{"type":"topic","abstract":[],"role":"collectionGroup","kind":"article","url":"\/documentation\/compute\/uint32\/customreflectable-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/CustomReflectable-Implementations","title":"CustomReflectable Implementations"},"doc://com.swallow.documentation.Compute/7Swallow16SignedOrUnsignedP":{"title":"Swallow.SignedOrUnsigned","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16SignedOrUnsignedP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/Magnitude-swift.typealias":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"Magnitude","kind":"identifier"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Magnitude"}],"title":"UInt32.Magnitude","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/Magnitude-swift.typealias","url":"\/documentation\/compute\/uint32\/magnitude-swift.typealias","abstract":[{"type":"text","text":"A type that can represent the absolute value of any possible value of"},{"type":"text","text":" "},{"text":"this type.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Strideable":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/strideable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Strideable"}],"navigatorTitle":[{"text":"Strideable","kind":"identifier"}],"abstract":[{"type":"text","text":"A type representing continuous, one-dimensional values that can be offset"},{"type":"text","text":" "},{"type":"text","text":"and measured."}],"title":"Strideable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/init(_:)-6tczc":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/init(_:)-6tczc","type":"topic","title":"init(_:)","role":"symbol","url":"\/documentation\/compute\/uint32\/init(_:)-6tczc","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"Unicode","kind":"typeIdentifier","preciseIdentifier":"s:s7UnicodeO"},{"kind":"text","text":"."},{"text":"Scalar","kind":"typeIdentifier","preciseIdentifier":"s:s7UnicodeO6ScalarV"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Construct with value "},{"type":"codeVoice","code":"v.value"},{"type":"text","text":"."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByIntegerLiteral":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","url":"\/documentation\/compute\/expressiblebyintegerliteral","title":"ExpressibleByIntegerLiteral","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"navigatorTitle":[{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"abstract":[{"text":"A type that can be initialized with an integer literal.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/_CustomPlaygroundQuickLookable-Implementations":{"type":"topic","abstract":[],"url":"\/documentation\/compute\/uint32\/_customplaygroundquicklookable-implementations","role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/_CustomPlaygroundQuickLookable-Implementations","title":"_CustomPlaygroundQuickLookable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/_=(_:_:)-4hx1l":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/_=(_:_:)-4hx1l","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"|=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"},{"kind":"text","text":", "},{"text":"UInt32","preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier"},{"kind":"text","text":")"}],"kind":"symbol","type":"topic","title":"|=(_:_:)","url":"\/documentation\/compute\/uint32\/_=(_:_:)-4hx1l","abstract":[{"text":"Stores the result of performing a bitwise OR operation on the two given","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"values in the left-hand-side variable."}]},"doc://com.swallow.documentation.Compute/7Swallow22FloatingPointInitiableP":{"title":"Swallow.FloatingPointInitiable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22FloatingPointInitiableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/SIMDScalar-Implementations":{"title":"SIMDScalar Implementations","url":"\/documentation\/compute\/uint32\/simdscalar-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/SIMDScalar-Implementations","type":"topic","kind":"article","abstract":[],"role":"collectionGroup"},"doc://com.swallow.documentation.Compute/7Swallow15NumberInitiableP":{"title":"Swallow.NumberInitiable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow15NumberInitiableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow18AdditionOperatableP":{"title":"Swallow.AdditionOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18AdditionOperatableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow27MutableArithmeticOperatableP":{"title":"Swallow.MutableArithmeticOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow27MutableArithmeticOperatableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Encodable":{"url":"\/documentation\/compute\/encodable","navigatorTitle":[{"text":"Encodable","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Encodable","kind":"identifier"}],"abstract":[{"text":"A type that can encode itself to an external representation.","type":"text"}],"type":"topic","title":"Encodable","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/Comparable-Implementations":{"role":"collectionGroup","title":"Comparable Implementations","abstract":[],"url":"\/documentation\/compute\/uint32\/comparable-implementations","type":"topic","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/Comparable-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/&__=(_:_:)-92fyx":{"type":"topic","abstract":[{"text":"Calculates the result of shifting a value’s binary representation the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specified number of digits to the right, masking the shift amount to the"},{"type":"text","text":" "},{"text":"type’s bit width, and stores the result in the left-hand-side variable.","type":"text"}],"title":"&>>=(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/&__=(_:_:)-92fyx","url":"\/documentation\/compute\/uint32\/&__=(_:_:)-92fyx","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"&>>="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V","text":"UInt32"},{"text":", ","kind":"text"},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"},{"kind":"text","text":")"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/Words-swift.struct":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Words","kind":"identifier"}],"url":"\/documentation\/compute\/uint32\/words-swift.struct","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/Words-swift.struct","abstract":[{"type":"text","text":"A type that represents the words of this integer."}],"title":"UInt32.Words","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Words"}],"type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow18BoundedRandomnableP":{"title":"Swallow.BoundedRandomnable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18BoundedRandomnableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/init(exactly:)-8qhoe":{"url":"\/documentation\/compute\/uint32\/init(exactly:)-8qhoe","role":"symbol","title":"init(exactly:)","kind":"symbol","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"?("},{"kind":"externalParam","text":"exactly"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s7Float16V","text":"Float16"},{"kind":"text","text":")"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/init(exactly:)-8qhoe","abstract":[{"type":"text","text":"Creates an integer from the given floating-point value, if it can be"},{"type":"text","text":" "},{"type":"text","text":"represented exactly."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/&=(_:_:)":{"url":"\/documentation\/compute\/uint32\/&=(_:_:)","title":"&=(_:_:)","abstract":[{"type":"text","text":"Stores the result of performing a bitwise AND operation on the two given"},{"text":" ","type":"text"},{"type":"text","text":"values in the left-hand-side variable."}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/&=(_:_:)","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"&="},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"preciseIdentifier":"s:s6UInt32V","text":"UInt32","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier","text":"UInt32"},{"kind":"text","text":")"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/nonzeroBitCount":{"title":"nonzeroBitCount","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"nonzeroBitCount"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"abstract":[{"text":"The number of bits equal to 1 in this value’s binary representation.","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/nonzeroBitCount","url":"\/documentation\/compute\/uint32\/nonzerobitcount","type":"topic","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"type":"topic","title":"Equatable","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","role":"symbol","url":"\/documentation\/compute\/equatable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/trailingZeroBitCount":{"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"trailingZeroBitCount"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/trailingZeroBitCount","url":"\/documentation\/compute\/uint32\/trailingzerobitcount","title":"trailingZeroBitCount","type":"topic","kind":"symbol","abstract":[{"text":"The number of trailing zeros in this value’s binary representation.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/Equatable-Implementations":{"type":"topic","role":"collectionGroup","url":"\/documentation\/compute\/uint32\/equatable-implementations","kind":"article","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/Equatable-Implementations","title":"Equatable Implementations"},"doc://com.swallow.documentation.Compute/7Swallow7BoundedP":{"title":"Swallow.Bounded","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7BoundedP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/7Swallow13DataDecodableP":{"title":"Swallow.DataDecodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataDecodableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow18DivisionOperatableP":{"title":"Swallow.DivisionOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18DivisionOperatableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/ExpressibleByIntegerLiteral-Implementations":{"abstract":[],"role":"collectionGroup","kind":"article","url":"\/documentation\/compute\/uint32\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/ExpressibleByIntegerLiteral-Implementations","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Sendable","kind":"identifier"}],"title":"Sendable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","abstract":[],"url":"\/documentation\/compute\/sendable","role":"symbol","navigatorTitle":[{"text":"Sendable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/7Swallow24UnsignedIntegerInitiableP":{"title":"Swallow.UnsignedIntegerInitiable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow24UnsignedIntegerInitiableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow26ShouldNotBeDecodedFromBoolP":{"title":"Swallow.ShouldNotBeDecodedFromBool","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow26ShouldNotBeDecodedFromBoolP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable":{"url":"\/documentation\/compute\/comparable","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared using the relational operators ","type":"text"},{"code":"<","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Comparable"}],"title":"Comparable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Comparable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/AdditiveArithmetic":{"type":"topic","title":"AdditiveArithmetic","abstract":[{"text":"A type with values that support addition and subtraction.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AdditiveArithmetic"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AdditiveArithmetic","url":"\/documentation\/compute\/additivearithmetic","role":"symbol","navigatorTitle":[{"text":"AdditiveArithmetic","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/7Swallow8DiscreteP":{"title":"Swallow.Discrete","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiscreteP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/*=(_:_:)":{"role":"symbol","abstract":[{"type":"text","text":"Multiplies two values and stores the result in the left-hand-side"},{"type":"text","text":" "},{"text":"variable.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/*=(_:_:)","type":"topic","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"*=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier","text":"UInt32"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"UInt32","preciseIdentifier":"s:s6UInt32V"},{"text":")","kind":"text"}],"title":"*=(_:_:)","url":"\/documentation\/compute\/uint32\/*=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BinaryInteger"}],"navigatorTitle":[{"kind":"identifier","text":"BinaryInteger"}],"url":"\/documentation\/compute\/binaryinteger","type":"topic","abstract":[{"type":"text","text":"An integer type with a binary representation."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","title":"BinaryInteger","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow24MultiplicationOperatableP":{"title":"Swallow.MultiplicationOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow24MultiplicationOperatableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"title":"Copyable","abstract":[{"type":"text","text":"A type whose values can be implicitly or explicitly copied."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Copyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","url":"\/documentation\/compute\/copyable","navigatorTitle":[{"text":"Copyable","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/Strideable-Implementations":{"kind":"article","url":"\/documentation\/compute\/uint32\/strideable-implementations","title":"Strideable Implementations","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/Strideable-Implementations","role":"collectionGroup","type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow31MutableMultiplicationOperatableP":{"title":"Swallow.MutableMultiplicationOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow31MutableMultiplicationOperatableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/LosslessStringConvertible":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LosslessStringConvertible","kind":"identifier"}],"kind":"symbol","title":"LosslessStringConvertible","abstract":[{"type":"text","text":"A type that can be represented as a string in a lossless, unambiguous way."}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"LosslessStringConvertible","kind":"identifier"}],"url":"\/documentation\/compute\/losslessstringconvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible"},"doc://com.swallow.documentation.Compute/7Swallow25MutableDivisionOperatableP":{"title":"Swallow.MutableDivisionOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableDivisionOperatableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/Hashable-Implementations":{"title":"Hashable Implementations","url":"\/documentation\/compute\/uint32\/hashable-implementations","kind":"article","role":"collectionGroup","type":"topic","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/Hashable-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/FixedWidthInteger-Implementations":{"role":"collectionGroup","title":"FixedWidthInteger Implementations","url":"\/documentation\/compute\/uint32\/fixedwidthinteger-implementations","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/FixedWidthInteger-Implementations","abstract":[],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/_(_:_:)-3r38p":{"type":"topic","abstract":[{"text":"Returns a Boolean value indicating whether the value of the first","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"argument is less than that of the second argument."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"<"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"},{"kind":"text","text":", "},{"text":"UInt32","preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"title":"<(_:_:)","role":"symbol","url":"\/documentation\/compute\/uint32\/_(_:_:)-3r38p","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/_(_:_:)-3r38p"},"doc://com.swallow.documentation.Compute/7Swallow6NumberP":{"title":"Swallow.Number","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow6NumberP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/init(exactly:)-9c2y8":{"kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"?(","kind":"text"},{"text":"exactly","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Float","kind":"typeIdentifier","preciseIdentifier":"s:Sf"},{"kind":"text","text":")"}],"type":"topic","url":"\/documentation\/compute\/uint32\/init(exactly:)-9c2y8","role":"symbol","abstract":[{"type":"text","text":"Creates an integer from the given floating-point value, if it can be"},{"type":"text","text":" "},{"type":"text","text":"represented exactly."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/init(exactly:)-9c2y8","title":"init(exactly:)"},"doc://com.swallow.documentation.Compute/7Swallow21SubtractionOperatableP":{"title":"Swallow.SubtractionOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21SubtractionOperatableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow11RandomnableP":{"title":"Swallow.Randomnable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow11RandomnableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/AdditiveArithmetic-Implementations":{"title":"AdditiveArithmetic Implementations","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/AdditiveArithmetic-Implementations","abstract":[],"type":"topic","url":"\/documentation\/compute\/uint32\/additivearithmetic-implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/init(_:)-9i7ab":{"url":"\/documentation\/compute\/uint32\/init(_:)-9i7ab","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/init(_:)-9i7ab","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"preciseIdentifier":"s:Sd","text":"Double","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","title":"init(_:)","abstract":[],"kind":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow16IntegerInitiableP":{"title":"Swallow.IntegerInitiable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16IntegerInitiableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow20DiscreteOrContinuousP":{"title":"Swallow.DiscreteOrContinuous","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20DiscreteOrContinuousP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/init(exactly:)-7jkyf":{"title":"init(exactly:)","kind":"symbol","url":"\/documentation\/compute\/uint32\/init(exactly:)-7jkyf","abstract":[{"text":"Creates an integer from the given floating-point value, if it can be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"represented exactly."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/init(exactly:)-7jkyf","type":"topic","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?("},{"text":"exactly","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sd","text":"Double","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/init(bitPattern:)":{"title":"init(bitPattern:)","type":"topic","abstract":[{"text":"Creates a new instance with the same memory representation as the given","type":"text"},{"text":" ","type":"text"},{"text":"value.","type":"text"}],"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"bitPattern","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int32","preciseIdentifier":"s:s5Int32V"},{"text":")","kind":"text"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/init(bitPattern:)","url":"\/documentation\/compute\/uint32\/init(bitpattern:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/addingReportingOverflow(_:)":{"url":"\/documentation\/compute\/uint32\/addingreportingoverflow(_:)","role":"symbol","title":"addingReportingOverflow(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"addingReportingOverflow","kind":"identifier"},{"kind":"text","text":"("},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"},{"kind":"text","text":") -> (partialValue"},{"text":": ","kind":"text"},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"},{"text":", overflow","kind":"text"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Returns the sum of this value and the given value, along with a Boolean"},{"text":" ","type":"text"},{"type":"text","text":"value indicating whether overflow occurred in the operation."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/addingReportingOverflow(_:)","type":"topic","kind":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow13DataEncodableP":{"title":"Swallow.DataEncodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataEncodableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/Encodable-Implementations":{"role":"collectionGroup","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/Encodable-Implementations","title":"Encodable Implementations","kind":"article","url":"\/documentation\/compute\/uint32\/encodable-implementations","abstract":[]},"doc://com.swallow.documentation.Compute/7Swallow14CoderPrimitiveP":{"title":"Swallow.CoderPrimitive","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow14CoderPrimitiveP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/10Accelerate10BNNSScalarP":{"title":"Accelerate.BNNSScalar","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Accelerate10BNNSScalarP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/_=(_:_:)-8vgdn":{"abstract":[{"text":"Stores the result of performing a bitwise XOR operation on the two given","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values in the left-hand-side variable."}],"title":"^=(_:_:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/_=(_:_:)-8vgdn","type":"topic","role":"symbol","url":"\/documentation\/compute\/uint32\/_=(_:_:)-8vgdn","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"^=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"UInt32","preciseIdentifier":"s:s6UInt32V"},{"text":")","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible":{"url":"\/documentation\/compute\/customstringconvertible","navigatorTitle":[{"kind":"identifier","text":"CustomStringConvertible"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomStringConvertible","kind":"identifier"}],"abstract":[{"text":"A type with a customized textual representation.","type":"text"}],"type":"topic","title":"CustomStringConvertible","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible"},"doc://com.swallow.documentation.Compute/7Swallow7TrivialP":{"title":"Swallow.Trivial","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/BinaryInteger-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/BinaryInteger-Implementations","kind":"article","abstract":[],"title":"BinaryInteger Implementations","role":"collectionGroup","url":"\/documentation\/compute\/uint32\/binaryinteger-implementations","type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow8UnsignedP":{"title":"Swallow.Unsigned","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow8UnsignedP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/subtractingReportingOverflow(_:)":{"type":"topic","abstract":[{"text":"Returns the difference obtained by subtracting the given value from this","type":"text"},{"type":"text","text":" "},{"text":"value, along with a Boolean value indicating whether overflow occurred in","type":"text"},{"text":" ","type":"text"},{"text":"the operation.","type":"text"}],"url":"\/documentation\/compute\/uint32\/subtractingreportingoverflow(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"subtractingReportingOverflow","kind":"identifier"},{"text":"(","kind":"text"},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"},{"text":") -> (partialValue","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V","text":"UInt32"},{"kind":"text","text":", overflow"},{"kind":"text","text":": "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":")"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/subtractingReportingOverflow(_:)","title":"subtractingReportingOverflow(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsignedInteger":{"url":"\/documentation\/compute\/unsignedinteger","abstract":[{"type":"text","text":"An integer type that can represent only nonnegative values."}],"kind":"symbol","navigatorTitle":[{"text":"UnsignedInteger","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsignedInteger","title":"UnsignedInteger","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsignedInteger"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/multipliedFullWidth(by:)":{"abstract":[{"type":"text","text":"Returns a tuple containing the high and low parts of the result of"},{"text":" ","type":"text"},{"type":"text","text":"multiplying this value by the given value."}],"title":"multipliedFullWidth(by:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/multipliedFullWidth(by:)","type":"topic","role":"symbol","url":"\/documentation\/compute\/uint32\/multipliedfullwidth(by:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"multipliedFullWidth","kind":"identifier"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"},{"kind":"text","text":") -> (high"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s6UInt32V","text":"UInt32","kind":"typeIdentifier"},{"text":", low","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt32","preciseIdentifier":"s:s6UInt32V"},{"text":".","kind":"text"},{"text":"Magnitude","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V9Magnitudea"},{"text":")","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/UnsignedInteger-Implementations":{"role":"collectionGroup","type":"topic","title":"UnsignedInteger Implementations","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/UnsignedInteger-Implementations","kind":"article","url":"\/documentation\/compute\/uint32\/unsignedinteger-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/words-swift.property":{"type":"topic","abstract":[{"text":"A collection containing the words of this value’s binary","type":"text"},{"text":" ","type":"text"},{"text":"representation, in order from the least significant to most significant.","type":"text"}],"url":"\/documentation\/compute\/uint32\/words-swift.property","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"words","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V","text":"UInt32"},{"kind":"text","text":"."},{"text":"Words","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V5WordsV"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/words-swift.property","title":"words"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/remainderReportingOverflow(dividingBy:)":{"abstract":[{"type":"text","text":"Returns the remainder after dividing this value by the given value, along"},{"type":"text","text":" "},{"type":"text","text":"with a Boolean value indicating whether overflow occurred during division."}],"title":"remainderReportingOverflow(dividingBy:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/remainderReportingOverflow(dividingBy:)","type":"topic","role":"symbol","url":"\/documentation\/compute\/uint32\/remainderreportingoverflow(dividingby:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"remainderReportingOverflow","kind":"identifier"},{"kind":"text","text":"("},{"text":"dividingBy","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt32","preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier"},{"text":") -> (partialValue","kind":"text"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s6UInt32V","text":"UInt32","kind":"typeIdentifier"},{"text":", overflow","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}]},"doc://com.swallow.documentation.Compute/7Swallow20ArithmeticOperatableP":{"type":"unresolvable","title":"Swallow.ArithmeticOperatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20ArithmeticOperatableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Hashable"}],"title":"Hashable","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that can be hashed into a "},{"type":"codeVoice","code":"Hasher"},{"type":"text","text":" to produce an integer hash value."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","url":"\/documentation\/compute\/hashable","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/dividedReportingOverflow(by:)":{"abstract":[{"type":"text","text":"Returns the quotient obtained by dividing this value by the given value,"},{"text":" ","type":"text"},{"type":"text","text":"along with a Boolean value indicating whether overflow occurred in the"},{"text":" ","type":"text"},{"text":"operation.","type":"text"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/dividedReportingOverflow(by:)","title":"dividedReportingOverflow(by:)","type":"topic","url":"\/documentation\/compute\/uint32\/dividedreportingoverflow(by:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dividedReportingOverflow","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"by"},{"text":": ","kind":"text"},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"},{"text":") -> (partialValue","kind":"text"},{"kind":"text","text":": "},{"text":"UInt32","kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V"},{"text":", overflow","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":")"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32/leadingZeroBitCount":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"leadingZeroBitCount","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"url":"\/documentation\/compute\/uint32\/leadingzerobitcount","title":"leadingZeroBitCount","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32\/leadingZeroBitCount","type":"topic","abstract":[{"type":"text","text":"The number of leading zeros in this value’s binary representation."}],"role":"symbol"},"doc://com.swallow.documentation.Compute/10Accelerate23vDSP_IntegerConvertableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Accelerate23vDSP_IntegerConvertableP","title":"Accelerate.vDSP_IntegerConvertable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Numeric":{"abstract":[{"type":"text","text":"A type with values that support multiplication."}],"kind":"symbol","url":"\/documentation\/compute\/numeric","navigatorTitle":[{"text":"Numeric","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Numeric"}],"title":"Numeric"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","title":"UInt32","abstract":[{"type":"text","text":"A 32-bit unsigned integer value"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"UInt32","kind":"identifier"}],"url":"\/documentation\/compute\/uint32","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt32","kind":"identifier"}]}}}