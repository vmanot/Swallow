{"metadata":{"title":"ArraySlice","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ArraySlice","kind":"identifier"}],"navigatorTitle":[{"text":"ArraySlice","kind":"identifier"}],"role":"symbol","symbolKind":"struct","roleHeading":"Structure","externalID":"s:s10ArraySliceV","modules":[{"name":"Compute"}]},"kind":"symbol","topicSections":[{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/AccelerateBuffer-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/AccelerateMutableBuffer-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/BidirectionalCollection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/Collection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/ContiguousBytes-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/CustomDebugStringConvertible-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/CustomReflectable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/CustomStringConvertible-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/ExpressibleByArrayLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/MutableCollection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/MutableContiguousStorage-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/RandomAccessCollection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/RangeReplaceableCollection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/Sequence-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/_ArrayProtocol-Implementations"],"anchor":"Default-Implementations"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"relationshipsSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/10Accelerate0A6BufferP","doc:\/\/com.swallow.documentation.Compute\/10Accelerate0A13MutableBufferP","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByArrayLiteral","doc:\/\/com.swallow.documentation.Compute\/10Foundation15ContiguousBytesP","doc:\/\/com.swallow.documentation.Compute\/10Foundation12DataProtocolP","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomAccessCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableCollection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","doc:\/\/com.swallow.documentation.Compute\/7Swallow17ContiguousStorageP","doc:\/\/com.swallow.documentation.Compute\/7Swallow9CountableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow28DestructivelyMutableSequenceP","doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiffableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow9InitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow24MutableContiguousStorageP","doc:\/\/com.swallow.documentation.Compute\/7Swallow15MutableSequenceP","doc:\/\/com.swallow.documentation.Compute\/7Swallow017SequenceInitiableB0P"],"type":"conformsTo","title":"Conforms To","kind":"relationships"}],"abstract":[{"type":"text","text":"A slice of an "},{"code":"Array","type":"codeVoice"},{"type":"text","text":", "},{"code":"ContiguousArray","type":"codeVoice"},{"type":"text","text":", or "},{"code":"ArraySlice","type":"codeVoice"},{"type":"text","text":" instance."}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"@frozen","kind":"attribute"},{"text":" ","kind":"text"},{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ArraySlice","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Element","kind":"genericParameter"},{"kind":"text","text":">"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"ArraySlice"},{"text":" type makes it fast and efficient for you to perform","type":"text"},{"text":" ","type":"text"},{"text":"operations on sections of a larger array. Instead of copying over the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements of a slice to new storage, an "},{"type":"codeVoice","code":"ArraySlice"},{"text":" instance presents a","type":"text"},{"type":"text","text":" "},{"text":"view onto the storage of a larger array. And because ","type":"text"},{"code":"ArraySlice","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"presents the same interface as "},{"code":"Array","type":"codeVoice"},{"text":", you can generally perform the","type":"text"},{"type":"text","text":" "},{"text":"same operations on a slice as you could on the original array.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For more information about using arrays, see ","type":"text"},{"code":"Array","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"ContiguousArray"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"with which "},{"type":"codeVoice","code":"ArraySlice"},{"text":" shares most properties and methods.","type":"text"}]},{"anchor":"Slices-Are-Views-onto-Arrays","text":"Slices Are Views onto Arrays","level":1,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"For example, suppose you have an array holding the number of absences","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"from each class during a session."}]},{"type":"codeListing","syntax":null,"code":["let absences = [0, 2, 0, 4, 0, 3, 1, 0]"]},{"type":"paragraph","inlineContent":[{"text":"You want to compare the absences in the first half of the session with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"those in the second half. To do so, start by creating two slices of the"},{"text":" ","type":"text"},{"code":"absences","type":"codeVoice"},{"text":" array.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let midpoint = absences.count \/ 2","","let firstHalf = absences[..<midpoint]","let secondHalf = absences[midpoint...]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Neither the "},{"code":"firstHalf","type":"codeVoice"},{"text":" nor ","type":"text"},{"type":"codeVoice","code":"secondHalf"},{"text":" slices allocate any new storage","type":"text"},{"type":"text","text":" "},{"text":"of their own. Instead, each presents a view onto the storage of the","type":"text"},{"text":" ","type":"text"},{"code":"absences","type":"codeVoice"},{"type":"text","text":" array."}]},{"inlineContent":[{"text":"You can call any method on the slices that you might have called on the","type":"text"},{"type":"text","text":" "},{"code":"absences","type":"codeVoice"},{"text":" array. To learn which half had more absences, use the","type":"text"},{"text":" ","type":"text"},{"code":"reduce(_:_:)","type":"codeVoice"},{"type":"text","text":" method to calculate each sum."}],"type":"paragraph"},{"type":"codeListing","code":["let firstHalfSum = firstHalf.reduce(0, +)","let secondHalfSum = secondHalf.reduce(0, +)","","if firstHalfSum > secondHalfSum {","    print(\"More absences in the first half.\")","} else {","    print(\"More absences in the second half.\")","}","\/\/ Prints \"More absences in the first half.\""],"syntax":null},{"name":"Important","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Long-term storage of ","type":"text"},{"code":"ArraySlice","type":"codeVoice"},{"type":"text","text":" instances is discouraged. A"},{"type":"text","text":" "},{"text":"slice holds a reference to the entire storage of a larger array, not","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"just to the portion it presents, even after the original arrayâ€™s lifetime"},{"type":"text","text":" "},{"type":"text","text":"ends. Long-term storage of a slice may therefore prolong the lifetime of"},{"text":" ","type":"text"},{"text":"elements that are no longer otherwise accessible, which can appear to be","type":"text"},{"type":"text","text":" "},{"text":"memory and object leakage.","type":"text"}]}],"style":"important"},{"text":"Slices Maintain Indices","anchor":"Slices-Maintain-Indices","level":1,"type":"heading"},{"inlineContent":[{"text":"Unlike ","type":"text"},{"code":"Array","type":"codeVoice"},{"type":"text","text":" and "},{"code":"ContiguousArray","type":"codeVoice"},{"text":", the starting index for an","type":"text"},{"text":" ","type":"text"},{"code":"ArraySlice","type":"codeVoice"},{"type":"text","text":" instance isnâ€™t always zero. Slices maintain the same"},{"type":"text","text":" "},{"text":"indices of the larger array for the same elements, so the starting","type":"text"},{"type":"text","text":" "},{"text":"index of a slice depends on how it was created, letting you perform","type":"text"},{"type":"text","text":" "},{"type":"text","text":"index-based operations on either a full array or a slice."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Sharing indices between collections and their subsequences is an important"},{"text":" ","type":"text"},{"text":"part of the design of Swiftâ€™s collection algorithms. Suppose you are","type":"text"},{"type":"text","text":" "},{"text":"tasked with finding the first two days with absences in the session. To","type":"text"},{"text":" ","type":"text"},{"text":"find the indices of the two days in question, follow these steps:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Call "},{"type":"codeVoice","code":"firstIndex(where:)"},{"text":" to find the index of the first element in the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"absences"},{"text":" array that is greater than zero.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a slice of the "},{"code":"absences","type":"codeVoice"},{"type":"text","text":" array starting after the index found in"},{"text":" ","type":"text"},{"text":"step 1.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Call ","type":"text"},{"type":"codeVoice","code":"firstIndex(where:)"},{"type":"text","text":" again, this time on the slice created in step"},{"type":"text","text":" "},{"type":"text","text":"2. Where in some languages you might pass a starting index into an"},{"type":"text","text":" "},{"code":"indexOf","type":"codeVoice"},{"type":"text","text":" method to find the second day, in Swift you perform the same"},{"text":" ","type":"text"},{"type":"text","text":"operation on a slice of the original array."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Print the results using the indices found in steps 1 and 3 on the"},{"type":"text","text":" "},{"type":"text","text":"original "},{"code":"absences","type":"codeVoice"},{"text":" array.","type":"text"}],"type":"paragraph"}]}],"type":"orderedList"},{"inlineContent":[{"text":"Hereâ€™s an implementation of those steps:","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["if let i = absences.firstIndex(where: { $0 > 0 }) {                 \/\/ 1","    let absencesAfterFirst = absences[(i + 1)...]                   \/\/ 2","    if let j = absencesAfterFirst.firstIndex(where: { $0 > 0 }) {   \/\/ 3","        print(\"The first day with absences had \\(absences[i]).\")    \/\/ 4","        print(\"The second day with absences had \\(absences[j]).\")","    }","}","\/\/ Prints \"The first day with absences had 2.\"","\/\/ Prints \"The second day with absences had 4.\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In particular, note that "},{"code":"j","type":"codeVoice"},{"text":", the index of the second day with absences,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"was found in a slice of the original array and then used to access a value"},{"text":" ","type":"text"},{"type":"text","text":"in the original "},{"type":"codeVoice","code":"absences"},{"text":" array itself.","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To safely reference the starting and ending indices of a slice,"},{"text":" ","type":"text"},{"text":"always use the ","type":"text"},{"type":"codeVoice","code":"startIndex"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"endIndex"},{"text":" properties instead of","type":"text"},{"text":" ","type":"text"},{"text":"specific values.","type":"text"}]}],"name":"Note","style":"note","type":"aside"}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/documentation\/compute\/arrayslice"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/Collection-Implementations":{"url":"\/documentation\/compute\/arrayslice\/collection-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/Collection-Implementations","kind":"article","role":"collectionGroup","title":"Collection Implementations","abstract":[],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/7Swallow17ContiguousStorageP":{"type":"unresolvable","title":"Swallow.ContiguousStorage","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow17ContiguousStorageP"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/Hashable-Implementations":{"type":"topic","role":"collectionGroup","title":"Hashable Implementations","abstract":[],"url":"\/documentation\/compute\/arrayslice\/hashable-implementations","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/Hashable-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Copyable"}],"role":"symbol","kind":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]},"navigatorTitle":[{"text":"Copyable","kind":"identifier"}],"type":"topic","abstract":[{"text":"A type whose values can be implicitly or explicitly copied.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","url":"\/documentation\/compute\/copyable","title":"Copyable"},"doc://com.swallow.documentation.Compute/10Accelerate0A6BufferP":{"title":"Accelerate.AccelerateBuffer","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Accelerate0A6BufferP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Hashable","kind":"identifier"}],"role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[{"text":"A type that can be hashed into a ","type":"text"},{"type":"codeVoice","code":"Hasher"},{"text":" to produce an integer hash value.","type":"text"}],"type":"topic","title":"Hashable","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"url":"\/documentation\/compute\/hashable","kind":"symbol"},"doc://com.swallow.documentation.Compute/10Accelerate0A13MutableBufferP":{"title":"Accelerate.AccelerateMutableBuffer","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Accelerate0A13MutableBufferP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/MutableCollection-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/MutableCollection-Implementations","url":"\/documentation\/compute\/arrayslice\/mutablecollection-implementations","title":"MutableCollection Implementations","type":"topic","kind":"article","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/AccelerateBuffer-Implementations":{"type":"topic","kind":"article","title":"AccelerateBuffer Implementations","abstract":[],"url":"\/documentation\/compute\/arrayslice\/acceleratebuffer-implementations","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/AccelerateBuffer-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/ExpressibleByArrayLiteral-Implementations":{"title":"ExpressibleByArrayLiteral Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/ExpressibleByArrayLiteral-Implementations","type":"topic","role":"collectionGroup","kind":"article","abstract":[],"url":"\/documentation\/compute\/arrayslice\/expressiblebyarrayliteral-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/CustomReflectable-Implementations":{"kind":"article","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/CustomReflectable-Implementations","role":"collectionGroup","abstract":[],"url":"\/documentation\/compute\/arrayslice\/customreflectable-implementations","title":"CustomReflectable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomDebugStringConvertible":{"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}]},"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","navigatorTitle":[{"kind":"identifier","text":"CustomDebugStringConvertible"}],"kind":"symbol","abstract":[{"text":"A type with a customized textual representation suitable for debugging","type":"text"},{"text":" ","type":"text"},{"text":"purposes.","type":"text"}],"title":"CustomDebugStringConvertible","url":"\/documentation\/compute\/customdebugstringconvertible","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomDebugStringConvertible"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/_ArrayProtocol-Implementations":{"type":"topic","role":"collectionGroup","url":"\/documentation\/compute\/arrayslice\/_arrayprotocol-implementations","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/_ArrayProtocol-Implementations","title":"_ArrayProtocol Implementations","abstract":[]},"doc://com.swallow.documentation.Compute/10Foundation12DataProtocolP":{"title":"Foundation.DataProtocol","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Foundation12DataProtocolP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","role":"symbol","abstract":[{"type":"text","text":"A slice of an "},{"code":"Array","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"ContiguousArray"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"ArraySlice"},{"text":" instance.","type":"text"}],"title":"ArraySlice","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArraySlice"}],"navigatorTitle":[{"kind":"identifier","text":"ArraySlice"}],"url":"\/documentation\/compute\/arrayslice","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Sequence","kind":"identifier"}],"role":"symbol","kind":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Escapable","type":"codeVoice"},{"text":".","type":"text"}]},"navigatorTitle":[{"text":"Sequence","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","url":"\/documentation\/compute\/sequence","title":"Sequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Sendable"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/sendable","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"Sendable"}],"title":"Sendable","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Sendable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/RandomAccessCollection":{"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RandomAccessCollection","navigatorTitle":[{"kind":"identifier","text":"RandomAccessCollection"}],"kind":"symbol","abstract":[{"text":"A collection that supports efficient random-access index traversal.","type":"text"}],"title":"RandomAccessCollection","url":"\/documentation\/compute\/randomaccesscollection","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RandomAccessCollection"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/Sequence-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/Sequence-Implementations","title":"Sequence Implementations","abstract":[],"kind":"article","url":"\/documentation\/compute\/arrayslice\/sequence-implementations","type":"topic","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"kind":"symbol","abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"title":"Equatable","url":"\/documentation\/compute\/equatable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/7Swallow017SequenceInitiableB0P":{"title":"Swallow.SequenceInitiableSequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow017SequenceInitiableB0P","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/BidirectionalCollection-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/BidirectionalCollection-Implementations","kind":"article","type":"topic","role":"collectionGroup","abstract":[],"title":"BidirectionalCollection Implementations","url":"\/documentation\/compute\/arrayslice\/bidirectionalcollection-implementations"},"doc://com.swallow.documentation.Compute/7Swallow9CountableP":{"title":"Swallow.Countable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow9CountableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow15MutableSequenceP":{"title":"Swallow.MutableSequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow15MutableSequenceP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow8DiffableP":{"title":"Swallow.Diffable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiffableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/RangeReplaceableCollection-Implementations":{"role":"collectionGroup","type":"topic","url":"\/documentation\/compute\/arrayslice\/rangereplaceablecollection-implementations","title":"RangeReplaceableCollection Implementations","abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/RangeReplaceableCollection-Implementations"},"doc://com.swallow.documentation.Compute/10Foundation15ContiguousBytesP":{"title":"Foundation.ContiguousBytes","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Foundation15ContiguousBytesP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomReflectable":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]},"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","navigatorTitle":[{"text":"CustomReflectable","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"A type that explicitly supplies its own mirror.","type":"text"}],"title":"CustomReflectable","url":"\/documentation\/compute\/customreflectable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"CustomReflectable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/CustomDebugStringConvertible-Implementations":{"role":"collectionGroup","title":"CustomDebugStringConvertible Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/CustomDebugStringConvertible-Implementations","url":"\/documentation\/compute\/arrayslice\/customdebugstringconvertible-implementations","type":"topic","kind":"article","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/MutableContiguousStorage-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/MutableContiguousStorage-Implementations","kind":"article","title":"MutableContiguousStorage Implementations","abstract":[],"type":"topic","role":"collectionGroup","url":"\/documentation\/compute\/arrayslice\/mutablecontiguousstorage-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Collection"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/collection","abstract":[{"type":"text","text":"A sequence whose elements can be traversed multiple times,"},{"type":"text","text":" "},{"text":"nondestructively, and accessed by an indexed subscript.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Collection"}],"title":"Collection","conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/BidirectionalCollection":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalCollection","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BidirectionalCollection","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/bidirectionalcollection","abstract":[{"type":"text","text":"A collection that supports backward as well as forward traversal."}],"navigatorTitle":[{"kind":"identifier","text":"BidirectionalCollection"}],"title":"BidirectionalCollection","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeReplaceableCollection":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeReplaceableCollection","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"RangeReplaceableCollection","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/rangereplaceablecollection","abstract":[{"type":"text","text":"A collection that supports replacement of an arbitrary subrange of elements"},{"text":" ","type":"text"},{"type":"text","text":"with the elements of another collection."}],"navigatorTitle":[{"kind":"identifier","text":"RangeReplaceableCollection"}],"title":"RangeReplaceableCollection","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/MutableCollection":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MutableCollection","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"MutableCollection","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/mutablecollection","abstract":[{"type":"text","text":"A collection that supports subscript assignment."}],"navigatorTitle":[{"kind":"identifier","text":"MutableCollection"}],"title":"MutableCollection","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/CustomStringConvertible-Implementations":{"abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/CustomStringConvertible-Implementations","title":"CustomStringConvertible Implementations","url":"\/documentation\/compute\/arrayslice\/customstringconvertible-implementations","role":"collectionGroup","type":"topic","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/ContiguousBytes-Implementations":{"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/ContiguousBytes-Implementations","abstract":[],"type":"topic","role":"collectionGroup","title":"ContiguousBytes Implementations","url":"\/documentation\/compute\/arrayslice\/contiguousbytes-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible":{"abstract":[{"type":"text","text":"A type with a customized textual representation."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CustomStringConvertible"}],"type":"topic","title":"CustomStringConvertible","role":"symbol","url":"\/documentation\/compute\/customstringconvertible","kind":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","navigatorTitle":[{"text":"CustomStringConvertible","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/AccelerateMutableBuffer-Implementations":{"title":"AccelerateMutableBuffer Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/AccelerateMutableBuffer-Implementations","type":"topic","role":"collectionGroup","kind":"article","abstract":[],"url":"\/documentation\/compute\/arrayslice\/acceleratemutablebuffer-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/Equatable-Implementations":{"title":"Equatable Implementations","role":"collectionGroup","type":"topic","abstract":[],"url":"\/documentation\/compute\/arrayslice\/equatable-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/Equatable-Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/7Swallow28DestructivelyMutableSequenceP":{"title":"Swallow.DestructivelyMutableSequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow28DestructivelyMutableSequenceP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice/RandomAccessCollection-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice\/RandomAccessCollection-Implementations","url":"\/documentation\/compute\/arrayslice\/randomaccesscollection-implementations","abstract":[],"title":"RandomAccessCollection Implementations","type":"topic","kind":"article","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/7Swallow9InitiableP":{"title":"Swallow.Initiable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow9InitiableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByArrayLiteral":{"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]},"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByArrayLiteral","navigatorTitle":[{"kind":"identifier","text":"ExpressibleByArrayLiteral"}],"kind":"symbol","abstract":[{"type":"text","text":"A type that can be initialized using an array literal."}],"title":"ExpressibleByArrayLiteral","url":"\/documentation\/compute\/expressiblebyarrayliteral","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExpressibleByArrayLiteral","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/7Swallow24MutableContiguousStorageP":{"title":"Swallow.MutableContiguousStorage","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow24MutableContiguousStorageP","type":"unresolvable"}}}