{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BranchingArray\/withContiguousStorageIfAvailable(_:)"},"abstract":[{"type":"text","text":"Executes a closure on the sequence’s contiguous storage."}],"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withContiguousStorageIfAvailable"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"body"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer","text":"UnsafeBufferPointer","preciseIdentifier":"s:SR"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","preciseIdentifier":"s:ST7ElementQa"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"body","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that receives an "},{"code":"UnsafeBufferPointer","type":"codeVoice"},{"type":"text","text":" to the"},{"text":" ","type":"text"},{"type":"text","text":"sequence’s contiguous storage."}]}]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The value returned from "},{"code":"body","type":"codeVoice"},{"type":"text","text":", unless the sequence doesn’t"},{"type":"text","text":" "},{"text":"support contiguous storage, in which case the method ignores ","type":"text"},{"code":"body","type":"codeVoice"},{"type":"text","text":" and"},{"type":"text","text":" "},{"text":"returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"This method calls ","type":"text"},{"code":"body(buffer)","type":"codeVoice"},{"type":"text","text":", where "},{"type":"codeVoice","code":"buffer"},{"text":" is a pointer to the","type":"text"},{"type":"text","text":" "},{"text":"collection’s contiguous storage. If the contiguous storage doesn’t exist,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the collection creates it. If the collection doesn’t support an internal"},{"text":" ","type":"text"},{"text":"representation in a form of contiguous storage, the method doesn’t call","type":"text"},{"type":"text","text":" "},{"code":"body","type":"codeVoice"},{"type":"text","text":" — it immediately returns "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"The optimizer can often eliminate bounds- and uniqueness-checking"},{"text":" ","type":"text"},{"type":"text","text":"within an algorithm. When that fails, however, invoking the same"},{"type":"text","text":" "},{"text":"algorithm on the ","type":"text"},{"code":"buffer","type":"codeVoice"},{"text":" argument may let you trade safety for speed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Successive calls to this method may provide a different pointer on each"},{"type":"text","text":" "},{"type":"text","text":"call. Don’t store "},{"type":"codeVoice","code":"buffer"},{"type":"text","text":" outside of this method."}],"type":"paragraph"},{"inlineContent":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" that provides its own implementation of this method"},{"type":"text","text":" "},{"type":"text","text":"must provide contiguous storage to its elements in the same order"},{"type":"text","text":" "},{"text":"as they appear in the collection. This guarantees that it’s possible to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"generate contiguous mutable storage to any of its subsequences by slicing"},{"type":"text","text":" "},{"code":"buffer","type":"codeVoice"},{"text":" with a range formed from the distances to the subsequence’s","type":"text"},{"type":"text","text":" "},{"code":"startIndex","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"endIndex"},{"text":", respectively.","type":"text"}],"type":"paragraph"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/branchingarray\/withcontiguousstorageifavailable(_:)"]}],"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BranchingArray","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BranchingArray\/Sequence-Implementations"]]},"metadata":{"symbolKind":"method","modules":[{"name":"Compute","relatedModules":["Swift"]}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withContiguousStorageIfAvailable"},{"kind":"text","text":"<"},{"text":"R","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"UnsafeBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:SR"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"withContiguousStorageIfAvailable(_:)","role":"symbol","roleHeading":"Instance Method","extendedModule":"Swift","externalID":"s:STsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlF::SYNTHESIZED::s:7Compute14BranchingArrayV"},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/BranchingArray/withContiguousStorageIfAvailable(_:)":{"title":"withContiguousStorageIfAvailable(_:)","kind":"symbol","abstract":[{"type":"text","text":"Executes a closure on the sequence’s contiguous storage."}],"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withContiguousStorageIfAvailable"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"UnsafeBufferPointer","preciseIdentifier":"s:SR"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BranchingArray\/withContiguousStorageIfAvailable(_:)","role":"symbol","url":"\/documentation\/compute\/branchingarray\/withcontiguousstorageifavailable(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeBufferPointer":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeBufferPointer","abstract":[{"type":"text","text":"A nonowning collection interface to a buffer of"},{"type":"text","text":" "},{"text":"elements stored contiguously in memory.","type":"text"}],"role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeBufferPointer","kind":"identifier"}],"title":"UnsafeBufferPointer","navigatorTitle":[{"kind":"identifier","text":"UnsafeBufferPointer"}],"url":"\/documentation\/compute\/unsafebufferpointer"},"doc://com.swallow.documentation.Compute/documentation/Compute/BranchingArray/Sequence-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BranchingArray\/Sequence-Implementations","kind":"article","abstract":[],"role":"collectionGroup","title":"Sequence Implementations","url":"\/documentation\/compute\/branchingarray\/sequence-implementations","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/BranchingArray":{"abstract":[],"navigatorTitle":[{"kind":"identifier","text":"BranchingArray"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BranchingArray"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BranchingArray","url":"\/documentation\/compute\/branchingarray","role":"symbol","title":"BranchingArray"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]}}}