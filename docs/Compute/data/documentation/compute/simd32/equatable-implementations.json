{"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD32\/Equatable-Implementations","interfaceLanguage":"swift"},"sections":[],"topicSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD32\/!=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD32\/==(_:)"],"generated":true,"title":"Operators","anchor":"Operators"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD32\/eraseToAnyEquatable()"],"anchor":"Instance-Methods","title":"Instance Methods","generated":true}],"kind":"article","schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/documentation\/compute\/simd32\/equatable-implementations"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD32"]]},"metadata":{"title":"Equatable Implementations","roleHeading":"API Collection","role":"collectionGroup","modules":[{"name":"Compute"}]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD32/eraseToAnyEquatable()":{"title":"eraseToAnyEquatable()","url":"\/documentation\/compute\/simd32\/erasetoanyequatable()","role":"symbol","type":"topic","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD32\/eraseToAnyEquatable()","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"eraseToAnyEquatable","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:7Swallow12AnyEquatableV","text":"AnyEquatable","kind":"typeIdentifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD32":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SIMD32","kind":"identifier"}],"title":"SIMD32","navigatorTitle":[{"kind":"identifier","text":"SIMD32"}],"type":"topic","abstract":[{"type":"text","text":"A vector of 32 scalar values."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD32","url":"\/documentation\/compute\/simd32","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD32/==(_:)":{"type":"topic","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"=="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> (("},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD32\/==(_:)","abstract":[],"title":"==(_:)","role":"symbol","url":"\/documentation\/compute\/simd32\/==(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD32/!=(_:_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD32\/!=(_:_:)","title":"!=(_:_:)","kind":"symbol","type":"topic","url":"\/documentation\/compute\/simd32\/!=(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"!=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"role":"symbol","abstract":[{"text":"Returns a Boolean value indicating whether two values are not equal.","type":"text"}]}}}