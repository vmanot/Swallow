{"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"StringInterpolationProtocol"}]}],"kind":"declarations"},{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"Each ","type":"text"},{"type":"codeVoice","code":"ExpressibleByStringInterpolation"},{"text":" type has an associated","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"StringInterpolation"},{"type":"text","text":" type which conforms to "},{"code":"StringInterpolationProtocol","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Swift converts an expression like "},{"type":"codeVoice","code":"\"The time is \\(time).\" as MyString"},{"text":" into","type":"text"},{"type":"text","text":" "},{"text":"a series of statements similar to:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["var interpolation = MyString.StringInterpolation(literalCapacity: 13, ","                                                 interpolationCount: 1)","","interpolation.appendLiteral(\"The time is \")","interpolation.appendInterpolation(time)","interpolation.appendLiteral(\".\")","","MyString(stringInterpolation: interpolation)"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"StringInterpolation","type":"codeVoice"},{"text":" type is responsible for collecting the segments","type":"text"},{"type":"text","text":" "},{"text":"passed to its ","type":"text"},{"code":"appendLiteral(_:)","type":"codeVoice"},{"type":"text","text":" and "},{"code":"appendInterpolation","type":"codeVoice"},{"text":" methods and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"assembling them into a whole, converting as necessary. Once all of the"},{"text":" ","type":"text"},{"text":"segments are appended, the interpolation is passed to an","type":"text"},{"type":"text","text":" "},{"code":"init(stringInterpolation:)","type":"codeVoice"},{"text":" initializer on the type being created, which","type":"text"},{"type":"text","text":" "},{"type":"text","text":"must extract the accumulated data from the "},{"type":"codeVoice","code":"StringInterpolation"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"In simple cases, you can use ","type":"text"},{"type":"codeVoice","code":"DefaultStringInterpolation"},{"text":" as the","type":"text"},{"type":"text","text":" "},{"text":"interpolation type for types that conform to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ExpressibleByStringLiteral"},{"type":"text","text":" protocol. To use the default interpolation,"},{"text":" ","type":"text"},{"text":"conform a type to ","type":"text"},{"code":"ExpressibleByStringInterpolation","type":"codeVoice"},{"text":" and implement","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"init(stringLiteral: String)"},{"type":"text","text":". Values in interpolations are converted to"},{"type":"text","text":" "},{"type":"text","text":"strings, and then passed to that initializer just like any other string"},{"text":" ","type":"text"},{"type":"text","text":"literal."}],"type":"paragraph"},{"text":"Handling String Interpolations","type":"heading","level":1,"anchor":"Handling-String-Interpolations"},{"inlineContent":[{"text":"With a custom interpolation type, each interpolated segment is translated","type":"text"},{"type":"text","text":" "},{"text":"into a call to a special ","type":"text"},{"type":"codeVoice","code":"appendInterpolation"},{"type":"text","text":" method. The contents of"},{"type":"text","text":" "},{"type":"text","text":"the interpolation’s parentheses are treated as the call’s argument list."},{"type":"text","text":" "},{"text":"That argument list can include multiple arguments and argument labels.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following examples show how string interpolations are translated into"},{"type":"text","text":" "},{"type":"text","text":"calls to "},{"code":"appendInterpolation","type":"codeVoice"},{"type":"text","text":":"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"\\(x)"},{"text":" translates to ","type":"text"},{"type":"codeVoice","code":"appendInterpolation(x)"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"\\(x, y)"},{"type":"text","text":" translates to "},{"type":"codeVoice","code":"appendInterpolation(x, y)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"\\(foo: x)"},{"text":" translates to ","type":"text"},{"code":"appendInterpolation(foo: x)","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"\\(x, foo: y)"},{"text":" translates to ","type":"text"},{"type":"codeVoice","code":"appendInterpolation(x, foo: y)"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"appendInterpolation"},{"type":"text","text":" methods in your custom type must be mutating"},{"type":"text","text":" "},{"text":"instance methods that return ","type":"text"},{"type":"codeVoice","code":"Void"},{"text":". This code shows a custom interpolation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type’s declaration of an "},{"code":"appendInterpolation","type":"codeVoice"},{"text":" method that provides special","type":"text"},{"type":"text","text":" "},{"type":"text","text":"validation for user input:"}],"type":"paragraph"},{"code":["extension MyString.StringInterpolation {","    mutating func appendInterpolation(validating input: String) {","        \/\/ Perform validation of `input` and store for later use","    }","}"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"To use this interpolation method, create a string literal with an"},{"text":" ","type":"text"},{"text":"interpolation using the ","type":"text"},{"type":"codeVoice","code":"validating"},{"text":" parameter label.","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["let userInput = readLine() ?? \"\"","let myString = \"The user typed '\\(validating: userInput)'.\" as MyString"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"appendInterpolation"},{"type":"text","text":" methods support virtually all features of methods:"},{"type":"text","text":" "},{"text":"they can have any number of parameters, can specify labels for any or all","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of their parameters, can provide default values, can have variadic"},{"type":"text","text":" "},{"type":"text","text":"parameters, and can have parameters with generic types. Most importantly,"},{"type":"text","text":" "},{"text":"they can be overloaded, so a type that conforms to","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"StringInterpolationProtocol"},{"type":"text","text":" can provide several different"},{"text":" ","type":"text"},{"code":"appendInterpolation","type":"codeVoice"},{"text":" methods with different behaviors. An","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"appendInterpolation"},{"text":" method can also throw; when a user writes a literal","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with one of these interpolations, they must mark the string literal with"},{"type":"text","text":" "},{"type":"codeVoice","code":"try"},{"text":" or one of its variants.","type":"text"}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"abstract":[{"type":"text","text":"Represents the contents of a string literal with interpolations while it’s"},{"type":"text","text":" "},{"text":"being built up.","type":"text"}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/stringinterpolationprotocol"]}],"relationshipsSections":[{"type":"conformingTypes","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultStringInterpolation"],"kind":"relationships","title":"Conforming Types"}],"metadata":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StringInterpolationProtocol"}],"roleHeading":"Protocol","navigatorTitle":[{"kind":"identifier","text":"StringInterpolationProtocol"}],"title":"StringInterpolationProtocol","role":"symbol","externalID":"s:s27StringInterpolationProtocolP","modules":[{"name":"Compute"}],"symbolKind":"protocol"},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringInterpolationProtocol","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","topicSections":[{"title":"Associated Types","anchor":"Associated-Types","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringInterpolationProtocol\/StringLiteralType"]},{"title":"Initializers","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringInterpolationProtocol\/init(literalCapacity:interpolationCount:)"],"anchor":"Initializers","generated":true},{"anchor":"Instance-Methods","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringInterpolationProtocol\/appendLiteral(_:)"],"generated":true,"title":"Instance Methods"}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/DefaultStringInterpolation":{"role":"symbol","type":"topic","title":"DefaultStringInterpolation","abstract":[{"type":"text","text":"Represents a string literal with interpolations while it is being built up."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DefaultStringInterpolation"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultStringInterpolation","navigatorTitle":[{"text":"DefaultStringInterpolation","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/defaultstringinterpolation"},"doc://com.swallow.documentation.Compute/documentation/Compute/StringInterpolationProtocol/init(literalCapacity:interpolationCount:)":{"type":"topic","title":"init(literalCapacity:interpolationCount:)","url":"\/documentation\/compute\/stringinterpolationprotocol\/init(literalcapacity:interpolationcount:)","abstract":[{"type":"text","text":"Creates an empty instance ready to be filled with string literal content."}],"required":true,"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"literalCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"interpolationCount","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":")","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringInterpolationProtocol\/init(literalCapacity:interpolationCount:)","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/StringInterpolationProtocol":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StringInterpolationProtocol"}],"kind":"symbol","title":"StringInterpolationProtocol","abstract":[{"type":"text","text":"Represents the contents of a string literal with interpolations while it’s"},{"text":" ","type":"text"},{"type":"text","text":"being built up."}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"StringInterpolationProtocol","kind":"identifier"}],"url":"\/documentation\/compute\/stringinterpolationprotocol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringInterpolationProtocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/StringInterpolationProtocol/appendLiteral(_:)":{"role":"symbol","title":"appendLiteral(_:)","required":true,"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"appendLiteral"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"StringLiteralType","kind":"typeIdentifier","preciseIdentifier":"s:s27StringInterpolationProtocolP0A11LiteralTypeQa"},{"kind":"text","text":")"}],"abstract":[{"text":"Appends a literal segment to the interpolation.","type":"text"}],"url":"\/documentation\/compute\/stringinterpolationprotocol\/appendliteral(_:)","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringInterpolationProtocol\/appendLiteral(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/StringInterpolationProtocol/StringLiteralType":{"role":"symbol","title":"StringLiteralType","required":true,"fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StringLiteralType"},{"kind":"text","text":" : "},{"text":"_ExpressibleByBuiltinStringLiteral","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"The type that should be used for literal segments."}],"url":"\/documentation\/compute\/stringinterpolationprotocol\/stringliteraltype","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringInterpolationProtocol\/StringLiteralType"}}}