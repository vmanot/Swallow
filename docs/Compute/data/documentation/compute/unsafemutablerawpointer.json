{"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","metadata":{"symbolKind":"struct","role":"symbol","roleHeading":"Structure","title":"UnsafeMutableRawPointer","externalID":"s:Sv","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnsafeMutableRawPointer"}],"modules":[{"name":"Compute"}],"navigatorTitle":[{"text":"UnsafeMutableRawPointer","kind":"identifier"}]},"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","doc:\/\/com.swallow.documentation.Compute\/7Swallow21BitPatternConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow14MutablePointerP","doc:\/\/com.swallow.documentation.Compute\/7Swallow17MutableRawPointerP","doc:\/\/com.swallow.documentation.Compute\/7Swallow32MutableRepresentationConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow15NativeWordSizedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22OpaquePointerInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7PointerP","doc:\/\/com.swallow.documentation.Compute\/7Swallow10RawPointerP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP"],"title":"Conforms To","type":"conformsTo"}],"topicSections":[{"anchor":"Initializers","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/init(_:)-4sdp3","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/init(_:)-7xubw","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/init(mutating:)-3ws4f","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/init(mutating:)-7kfot"],"generated":true,"title":"Initializers"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/hashValue"],"anchor":"Instance-Properties","title":"Instance Properties","generated":true},{"title":"Instance Methods","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/alignedDown(for:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/alignedDown(toMultipleOf:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/alignedUp(for:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/alignedUp(toMultipleOf:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/bindMemory(to:capacity:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/copyBytes(from:count:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/copyMemory(from:byteCount:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/deallocate(bytes:alignedTo:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/initializeMemory(as:at:count:to:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/initializeMemory(as:from:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/initializeMemory(as:from:count:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/initializeMemory(as:repeating:count:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/initializeMemory(as:to:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/load(fromByteOffset:as:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/loadUnaligned(fromByteOffset:as:)-3rcfy","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/loadUnaligned(fromByteOffset:as:)-4br03","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/moveInitializeMemory(as:from:count:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/storeBytes(of:toByteOffset:as:)-3chnc","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/storeBytes(of:toByteOffset:as:)-9mpot","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/withMemoryRebound(to:capacity:_:)"],"anchor":"Instance-Methods"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/Pointee"],"generated":true,"anchor":"Type-Aliases","title":"Type Aliases"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/allocate(byteCount:alignment:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/allocate(bytes:alignedTo:)"],"title":"Type Methods","generated":true,"anchor":"Type-Methods"},{"anchor":"Default-Implementations","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/Comparable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/CustomReflectable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/MutablePointer-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/Pointer-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/Strideable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/_CustomPlaygroundQuickLookable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/_Pointer-Implementations"],"title":"Default Implementations","generated":true}],"sections":[],"variants":[{"paths":["\/documentation\/compute\/unsafemutablerawpointer"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"A raw pointer for accessing and manipulating untyped data.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"@frozen"},{"text":" ","kind":"text"},{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UnsafeMutableRawPointer","kind":"identifier"}],"languages":["swift"]}]},{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"UnsafeMutableRawPointer"},{"text":" type provides no automated memory management,","type":"text"},{"text":" ","type":"text"},{"text":"no type safety, and no alignment guarantees. You are responsible for","type":"text"},{"type":"text","text":" "},{"text":"handling the life cycle of any memory you work with through unsafe pointers,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to avoid leaks or undefined behavior."}]},{"type":"paragraph","inlineContent":[{"text":"Memory that you manually manage can be either ","type":"text"},{"inlineContent":[{"text":"untyped","type":"text"}],"type":"emphasis"},{"text":" or ","type":"text"},{"inlineContent":[{"text":"bound","type":"text"}],"type":"emphasis"},{"text":" to a","type":"text"},{"text":" ","type":"text"},{"text":"specific type. You use the ","type":"text"},{"type":"codeVoice","code":"UnsafeMutableRawPointer"},{"text":" type to access and","type":"text"},{"type":"text","text":" "},{"text":"manage raw bytes in memory, whether or not that memory has been bound to a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specific type."}]},{"level":1,"type":"heading","text":"Understanding a Pointer’s Memory State","anchor":"Understanding-a-Pointers-Memory-State"},{"type":"paragraph","inlineContent":[{"text":"The memory referenced by an ","type":"text"},{"code":"UnsafeMutableRawPointer","type":"codeVoice"},{"type":"text","text":" instance can be in one"},{"type":"text","text":" "},{"text":"of several states. Many pointer operations must only be applied to pointers","type":"text"},{"text":" ","type":"text"},{"text":"with memory in a specific state—you must keep track of the state of the","type":"text"},{"text":" ","type":"text"},{"text":"memory you are working with and understand the changes to that state that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"different operations perform. Memory can be untyped and uninitialized, bound"},{"type":"text","text":" "},{"text":"to a type and uninitialized, or bound to a type and initialized to a value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Finally, memory that was allocated previously may have been deallocated,"},{"text":" ","type":"text"},{"type":"text","text":"leaving existing pointers referencing unallocated memory."}]},{"text":"Raw, Uninitialized Memory","anchor":"Raw-Uninitialized-Memory","type":"heading","level":2},{"inlineContent":[{"text":"Raw memory that has just been allocated is in an ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"uninitialized, untyped","type":"text"}]},{"text":" ","type":"text"},{"type":"text","text":"state. Uninitialized memory must be initialized with values of a type"},{"text":" ","type":"text"},{"text":"before it can be used with any typed operations.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can use methods like "},{"type":"codeVoice","code":"initializeMemory(as:from:)"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"code":"moveInitializeMemory(as:from:count:)","type":"codeVoice"},{"type":"text","text":" to bind raw memory to a type and"},{"text":" ","type":"text"},{"type":"text","text":"initialize it with a value or series of values. To bind uninitialized"},{"text":" ","type":"text"},{"text":"memory to a type without initializing it, use the ","type":"text"},{"code":"bindMemory(to:count:)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"method. These methods all return typed pointers for further typed access"},{"type":"text","text":" "},{"type":"text","text":"to the memory."}],"type":"paragraph"},{"anchor":"Typed-Memory","text":"Typed Memory","level":2,"type":"heading"},{"inlineContent":[{"text":"Memory that has been bound to a type, whether it is initialized or","type":"text"},{"type":"text","text":" "},{"text":"uninitialized, is typically accessed using typed pointers—instances of","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"UnsafePointer"},{"text":" and ","type":"text"},{"code":"UnsafeMutablePointer","type":"codeVoice"},{"type":"text","text":". Initialization, assignment,"},{"type":"text","text":" "},{"type":"text","text":"and deinitialization can be performed using "},{"code":"UnsafeMutablePointer","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"methods."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Memory that has been bound to a type can be rebound to a different type","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"only after it has been deinitialized or if the bound type is a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"trivial"},{"text":" ","type":"text"},{"type":"text","text":"type"}]},{"type":"text","text":". Deinitializing typed memory does not unbind that memory’s type. The"},{"type":"text","text":" "},{"type":"text","text":"deinitialized memory can be reinitialized with values of the same type,"},{"type":"text","text":" "},{"type":"text","text":"bound to a new type, or deallocated."}]},{"content":[{"inlineContent":[{"text":"A trivial type can be copied bit for bit with no indirection or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"reference-counting operations. Generally, native Swift types that do not"},{"type":"text","text":" "},{"type":"text","text":"contain strong or weak references or other forms of indirection are"},{"type":"text","text":" "},{"text":"trivial, as are imported C structs and enumerations.","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside","name":"Note"},{"inlineContent":[{"text":"When reading from or writing to  memory as raw","type":"text"},{"type":"text","text":" "},{"type":"text","text":"bytes when that memory is bound to a type, you must ensure that you"},{"type":"text","text":" "},{"type":"text","text":"satisfy any alignment requirements."},{"type":"text","text":" "},{"text":"Writing to typed memory as raw bytes must only be performed when the bound","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type is a trivial type."}],"type":"paragraph"},{"type":"heading","level":1,"text":"Raw Pointer Arithmetic","anchor":"Raw-Pointer-Arithmetic"},{"type":"paragraph","inlineContent":[{"text":"Pointer arithmetic with raw pointers is performed at the byte level. When","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you add to or subtract from a raw pointer, the result is a new raw pointer"},{"type":"text","text":" "},{"type":"text","text":"offset by that number of bytes. The following example allocates four bytes"},{"type":"text","text":" "},{"text":"of memory and stores ","type":"text"},{"type":"codeVoice","code":"0xFF"},{"text":" in all four bytes:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let bytesPointer = UnsafeMutableRawPointer.allocate(byteCount: 4, alignment: 1)","bytesPointer.storeBytes(of: 0xFFFF_FFFF, as: UInt32.self)","","\/\/ Load a value from the memory referenced by 'bytesPointer'","let x = bytesPointer.load(as: UInt8.self)       \/\/ 255","","\/\/ Load a value from the last two allocated bytes","let offsetPointer = bytesPointer + 2","let y = offsetPointer.load(as: UInt16.self)     \/\/ 65535"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The code above stores the value "},{"type":"codeVoice","code":"0xFFFF_FFFF"},{"text":" into the four newly allocated","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"bytes, and then loads the first byte as a "},{"type":"codeVoice","code":"UInt8"},{"type":"text","text":" instance and the third"},{"type":"text","text":" "},{"type":"text","text":"and fourth bytes as a "},{"code":"UInt16","type":"codeVoice"},{"type":"text","text":" instance."}]},{"inlineContent":[{"text":"Always remember to deallocate any memory that you allocate yourself.","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["bytesPointer.deallocate()"],"type":"codeListing"},{"type":"heading","text":"Implicit Casting and Bridging","anchor":"Implicit-Casting-and-Bridging","level":1},{"type":"paragraph","inlineContent":[{"text":"When calling a function or method with an ","type":"text"},{"code":"UnsafeMutableRawPointer","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"parameter, you can pass an instance of that specific pointer type, pass an"},{"text":" ","type":"text"},{"text":"instance of a compatible pointer type, or use Swift’s implicit bridging to","type":"text"},{"type":"text","text":" "},{"text":"pass a compatible pointer.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For example, the ","type":"text"},{"type":"codeVoice","code":"print(address:as:)"},{"text":" function in the following code sample","type":"text"},{"text":" ","type":"text"},{"text":"takes an ","type":"text"},{"code":"UnsafeMutableRawPointer","type":"codeVoice"},{"type":"text","text":" instance as its first parameter:"}]},{"type":"codeListing","syntax":null,"code":["func print<T>(address p: UnsafeMutableRawPointer, as type: T.Type) {","    let value = p.load(as: type)","    print(value)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As is typical in Swift, you can call the "},{"type":"codeVoice","code":"print(address:as:)"},{"text":" function with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"UnsafeMutableRawPointer"},{"text":" instance. This example passes ","type":"text"},{"type":"codeVoice","code":"rawPointer"},{"type":"text","text":" as"},{"text":" ","type":"text"},{"text":"the initial parameter.","type":"text"}]},{"code":["\/\/ 'rawPointer' points to memory initialized with `Int` values.","let rawPointer: UnsafeMutableRawPointer = ...","print(address: rawPointer, as: Int.self)","\/\/ Prints \"42\""],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"Because typed pointers can be implicitly cast to raw pointers when passed"},{"type":"text","text":" "},{"type":"text","text":"as a parameter, you can also call "},{"code":"print(address:as:)","type":"codeVoice"},{"type":"text","text":" with any mutable"},{"text":" ","type":"text"},{"type":"text","text":"typed pointer instance."}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let intPointer: UnsafeMutablePointer<Int> = ...","print(address: intPointer, as: Int.self)","\/\/ Prints \"42\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, you can use Swift’s "},{"type":"emphasis","inlineContent":[{"text":"implicit bridging","type":"text"}]},{"type":"text","text":" to pass a pointer to"},{"text":" ","type":"text"},{"type":"text","text":"an instance or to the elements of an array. Use inout syntax to implicitly"},{"text":" ","type":"text"},{"type":"text","text":"create a pointer to an instance of any type. The following example uses"},{"text":" ","type":"text"},{"text":"implicit bridging to pass a pointer to ","type":"text"},{"code":"value","type":"codeVoice"},{"text":" when calling","type":"text"},{"text":" ","type":"text"},{"code":"print(address:as:)","type":"codeVoice"},{"text":":","type":"text"}]},{"syntax":null,"type":"codeListing","code":["var value: Int = 23","print(address: &value, as: Int.self)","\/\/ Prints \"23\""]},{"type":"paragraph","inlineContent":[{"text":"A mutable pointer to the elements of an array is implicitly created when","type":"text"},{"type":"text","text":" "},{"text":"you pass the array using inout syntax. This example uses implicit bridging","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to pass a pointer to the elements of "},{"type":"codeVoice","code":"numbers"},{"type":"text","text":" when calling"},{"type":"text","text":" "},{"type":"codeVoice","code":"print(address:as:)"},{"text":".","type":"text"}]},{"code":["var numbers = [5, 10, 15, 20]","print(address: &numbers, as: Int.self)","\/\/ Prints \"5\""],"type":"codeListing","syntax":null},{"name":"Important","content":[{"type":"paragraph","inlineContent":[{"text":"The pointer created through implicit bridging of an instance","type":"text"},{"text":" ","type":"text"},{"text":"or of an array’s elements is only valid during the execution of the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"called function. Escaping the pointer to use after the execution of the"},{"type":"text","text":" "},{"type":"text","text":"function is undefined behavior. In particular, do not use implicit"},{"type":"text","text":" "},{"text":"bridging when calling an ","type":"text"},{"type":"codeVoice","code":"UnsafeMutableRawPointer"},{"text":" initializer.","type":"text"}]}],"style":"important","type":"aside"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/CustomDebugStringConvertible":{"url":"\/documentation\/compute\/customdebugstringconvertible","role":"symbol","abstract":[{"text":"A type with a customized textual representation suitable for debugging","type":"text"},{"type":"text","text":" "},{"text":"purposes.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","title":"CustomDebugStringConvertible","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomDebugStringConvertible","kind":"identifier"}],"navigatorTitle":[{"text":"CustomDebugStringConvertible","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow7PointerP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7PointerP","type":"unresolvable","title":"Swallow.Pointer"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/MutablePointer-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/MutablePointer-Implementations","url":"\/documentation\/compute\/unsafemutablerawpointer\/mutablepointer-implementations","abstract":[],"type":"topic","role":"collectionGroup","title":"MutablePointer Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/Pointer-Implementations":{"abstract":[],"type":"topic","url":"\/documentation\/compute\/unsafemutablerawpointer\/pointer-implementations","role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/Pointer-Implementations","title":"Pointer Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/initializeMemory(as:repeating:count:)":{"type":"topic","title":"initializeMemory(as:repeating:count:)","url":"\/documentation\/compute\/unsafemutablerawpointer\/initializememory(as:repeating:count:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/initializeMemory(as:repeating:count:)","role":"symbol","abstract":[{"text":"Initializes the memory referenced by this pointer with the given value,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"binds the memory to the value’s type, and returns a typed pointer to the"},{"text":" ","type":"text"},{"type":"text","text":"initialized memory."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"initializeMemory"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"text":".Type, ","kind":"text"},{"text":"repeating","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"count"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sp","text":"UnsafeMutablePointer"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/copyBytes(from:count:)":{"abstract":[],"type":"topic","url":"\/documentation\/compute\/unsafemutablerawpointer\/copybytes(from:count:)","role":"symbol","kind":"symbol","deprecated":true,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/copyBytes(from:count:)","title":"copyBytes(from:count:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"copyBytes","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SV","text":"UnsafeRawPointer","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/allocate(byteCount:alignment:)":{"type":"topic","url":"\/documentation\/compute\/unsafemutablerawpointer\/allocate(bytecount:alignment:)","title":"allocate(byteCount:alignment:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/allocate(byteCount:alignment:)","role":"symbol","abstract":[{"text":"Allocates uninitialized memory with the specified size and alignment.","type":"text"}],"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"allocate","kind":"identifier"},{"kind":"text","text":"("},{"text":"byteCount","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"alignment"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":") -> ","kind":"text"},{"text":"UnsafeMutableRawPointer","kind":"typeIdentifier","preciseIdentifier":"s:Sv"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/copyMemory(from:byteCount:)":{"type":"topic","abstract":[{"text":"Copies the specified number of bytes from the given raw pointer’s memory","type":"text"},{"text":" ","type":"text"},{"text":"into this pointer’s memory.","type":"text"}],"url":"\/documentation\/compute\/unsafemutablerawpointer\/copymemory(from:bytecount:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/copyMemory(from:byteCount:)","title":"copyMemory(from:byteCount:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"copyMemory"},{"kind":"text","text":"("},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UnsafeRawPointer","kind":"typeIdentifier","preciseIdentifier":"s:SV"},{"kind":"text","text":", "},{"text":"byteCount","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":")","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/alignedUp(toMultipleOf:)":{"url":"\/documentation\/compute\/unsafemutablerawpointer\/alignedup(tomultipleof:)","kind":"symbol","abstract":[{"text":"Obtain the next pointer whose bit pattern is a multiple of ","type":"text"},{"type":"codeVoice","code":"alignment"},{"text":".","type":"text"}],"title":"alignedUp(toMultipleOf:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/alignedUp(toMultipleOf:)","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"alignedUp","kind":"identifier"},{"text":"(","kind":"text"},{"text":"toMultipleOf","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sv","text":"UnsafeMutableRawPointer","kind":"typeIdentifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/Hashable-Implementations":{"type":"topic","url":"\/documentation\/compute\/unsafemutablerawpointer\/hashable-implementations","title":"Hashable Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/Hashable-Implementations","role":"collectionGroup","abstract":[],"kind":"article"},"doc://com.swallow.documentation.Compute/7Swallow15NativeWordSizedP":{"title":"Swallow.NativeWordSized","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow15NativeWordSizedP"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/7Swallow22OpaquePointerInitiableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22OpaquePointerInitiableP","type":"unresolvable","title":"Swallow.OpaquePointerInitiable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/alignedDown(for:)":{"abstract":[{"type":"text","text":"Obtain the preceding pointer properly aligned to store a value of type"},{"text":" ","type":"text"},{"code":"T","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic","url":"\/documentation\/compute\/unsafemutablerawpointer\/aligneddown(for:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/alignedDown(for:)","title":"alignedDown(for:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"alignedDown","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"for","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"UnsafeMutableRawPointer","kind":"typeIdentifier","preciseIdentifier":"s:Sv"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/CustomReflectable-Implementations":{"type":"topic","url":"\/documentation\/compute\/unsafemutablerawpointer\/customreflectable-implementations","title":"CustomReflectable Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/CustomReflectable-Implementations","role":"collectionGroup","abstract":[],"kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable":{"url":"\/documentation\/compute\/comparable","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared using the relational operators ","type":"text"},{"code":"<","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Comparable"}],"title":"Comparable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Comparable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/init(mutating:)-7kfot":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/init(mutating:)-7kfot","kind":"symbol","type":"topic","role":"symbol","abstract":[{"text":"Creates a new mutable raw pointer from the given immutable raw pointer.","type":"text"}],"title":"init(mutating:)","url":"\/documentation\/compute\/unsafemutablerawpointer\/init(mutating:)-7kfot","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"mutating","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SV","text":"UnsafeRawPointer","kind":"typeIdentifier"},{"kind":"text","text":")"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/initializeMemory(as:at:count:to:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/initializeMemory(as:at:count:to:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"initializeMemory"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"as","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type, "},{"text":"at","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">"}],"url":"\/documentation\/compute\/unsafemutablerawpointer\/initializememory(as:at:count:to:)","type":"topic","abstract":[],"kind":"symbol","role":"symbol","deprecated":true,"title":"initializeMemory(as:at:count:to:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/Comparable-Implementations":{"abstract":[],"type":"topic","kind":"article","url":"\/documentation\/compute\/unsafemutablerawpointer\/comparable-implementations","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/Comparable-Implementations","title":"Comparable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/loadUnaligned(fromByteOffset:as:)-3rcfy":{"type":"topic","abstract":[{"text":"Returns a new instance of the given type, constructed from the raw memory","type":"text"},{"text":" ","type":"text"},{"text":"at the specified offset.","type":"text"}],"url":"\/documentation\/compute\/unsafemutablerawpointer\/loadunaligned(frombyteoffset:as:)-3rcfy","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/loadUnaligned(fromByteOffset:as:)-3rcfy","title":"loadUnaligned(fromByteOffset:as:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"loadUnaligned"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"fromByteOffset","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"as","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"T"}]},"doc://com.swallow.documentation.Compute/7Swallow14MutablePointerP":{"type":"unresolvable","title":"Swallow.MutablePointer","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow14MutablePointerP"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/alignedUp(for:)":{"abstract":[{"type":"text","text":"Obtain the next pointer properly aligned to store a value of type "},{"code":"T","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic","url":"\/documentation\/compute\/unsafemutablerawpointer\/alignedup(for:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/alignedUp(for:)","title":"alignedUp(for:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"alignedUp","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"for","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) -> "},{"text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv","kind":"typeIdentifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/storeBytes(of:toByteOffset:as:)-9mpot":{"type":"topic","title":"storeBytes(of:toByteOffset:as:)","url":"\/documentation\/compute\/unsafemutablerawpointer\/storebytes(of:tobyteoffset:as:)-9mpot","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/storeBytes(of:toByteOffset:as:)-9mpot","role":"symbol","abstract":[{"type":"text","text":"Stores the given value’s bytes into raw memory at the specified offset."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"storeBytes","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"of","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"toByteOffset"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":", ","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type)","kind":"text"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"title":"Copyable","abstract":[{"type":"text","text":"A type whose values can be implicitly or explicitly copied."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Copyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","url":"\/documentation\/compute\/copyable","navigatorTitle":[{"text":"Copyable","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/storeBytes(of:toByteOffset:as:)-3chnc":{"abstract":[{"type":"text","text":"Stores the given value’s bytes into raw memory at the specified offset."}],"type":"topic","url":"\/documentation\/compute\/unsafemutablerawpointer\/storebytes(of:tobyteoffset:as:)-3chnc","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/storeBytes(of:toByteOffset:as:)-3chnc","title":"storeBytes(of:toByteOffset:as:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"storeBytes","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"of"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"toByteOffset","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"as","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"text":".Type)","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/_CustomPlaygroundQuickLookable-Implementations":{"type":"topic","title":"_CustomPlaygroundQuickLookable Implementations","url":"\/documentation\/compute\/unsafemutablerawpointer\/_customplaygroundquicklookable-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/_CustomPlaygroundQuickLookable-Implementations","role":"collectionGroup","abstract":[],"kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/withMemoryRebound(to:capacity:_:)":{"abstract":[{"type":"text","text":"Executes the given closure while temporarily binding memory to"},{"type":"text","text":" "},{"type":"text","text":"the specified number of instances of type "},{"type":"codeVoice","code":"T"},{"type":"text","text":"."}],"type":"topic","url":"\/documentation\/compute\/unsafemutablerawpointer\/withmemoryrebound(to:capacity:_:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/withMemoryRebound(to:capacity:_:)","title":"withMemoryRebound(to:capacity:_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withMemoryRebound","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"E"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Result"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"capacity","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":", (","kind":"text"},{"text":"UnsafeMutablePointer","kind":"typeIdentifier","preciseIdentifier":"s:Sp"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"E"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"}]},"doc://com.swallow.documentation.Compute/7Swallow21BitPatternConvertibleP":{"title":"Swallow.BitPatternConvertible","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21BitPatternConvertibleP"},"doc://com.swallow.documentation.Compute/documentation/Compute/BitwiseCopyable":{"title":"BitwiseCopyable","abstract":[],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BitwiseCopyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","url":"\/documentation\/compute\/bitwisecopyable","navigatorTitle":[{"kind":"identifier","text":"BitwiseCopyable"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/Equatable-Implementations":{"type":"topic","abstract":[],"url":"\/documentation\/compute\/unsafemutablerawpointer\/equatable-implementations","role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/Equatable-Implementations","title":"Equatable Implementations"},"doc://com.swallow.documentation.Compute/7Swallow32MutableRepresentationConvertibleP":{"title":"Swallow.MutableRepresentationConvertible","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow32MutableRepresentationConvertibleP"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/init(_:)-7xubw":{"type":"topic","abstract":[{"text":"Creates a new raw pointer from an ","type":"text"},{"type":"codeVoice","code":"AutoreleasingUnsafeMutablePointer"},{"type":"text","text":" "},{"type":"text","text":"instance."}],"url":"\/documentation\/compute\/unsafemutablerawpointer\/init(_:)-7xubw","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/init(_:)-7xubw","title":"init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"?<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"AutoreleasingUnsafeMutablePointer","preciseIdentifier":"s:SA","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">?)","kind":"text"}]},"doc://com.swallow.documentation.Compute/7Swallow20ByteTupleConvertibleP":{"title":"Swallow.ByteTupleConvertible","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/bindMemory(to:capacity:)":{"type":"topic","abstract":[{"text":"Binds the memory to the specified type and returns a typed pointer to the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"bound memory."}],"url":"\/documentation\/compute\/unsafemutablerawpointer\/bindmemory(to:capacity:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/bindMemory(to:capacity:)","title":"bindMemory(to:capacity:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"bindMemory","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"capacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://com.swallow.documentation.Compute/7Swallow7TrivialP":{"title":"Swallow.Trivial","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomReflectable":{"url":"\/documentation\/compute\/customreflectable","role":"symbol","abstract":[{"text":"A type that explicitly supplies its own mirror.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","title":"CustomReflectable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomReflectable"}],"navigatorTitle":[{"kind":"identifier","text":"CustomReflectable"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/initializeMemory(as:from:)":{"type":"topic","abstract":[],"url":"\/documentation\/compute\/unsafemutablerawpointer\/initializememory(as:from:)","role":"symbol","kind":"symbol","deprecated":true,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/initializeMemory(as:from:)","title":"initializeMemory(as:from:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"initializeMemory","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"C"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"from"},{"text":": ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"UnsafeMutablePointer","kind":"typeIdentifier","preciseIdentifier":"s:Sp"},{"text":"<","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":">","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/init(mutating:)-3ws4f":{"type":"topic","title":"init(mutating:)","url":"\/documentation\/compute\/unsafemutablerawpointer\/init(mutating:)-3ws4f","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/init(mutating:)-3ws4f","role":"symbol","abstract":[{"text":"Creates a new mutable raw pointer from the given immutable raw pointer.","type":"text"}],"fragments":[{"text":"init","kind":"identifier"},{"text":"?(","kind":"text"},{"text":"mutating","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UnsafeRawPointer","kind":"typeIdentifier","preciseIdentifier":"s:SV"},{"text":"?)","kind":"text"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/Strideable-Implementations":{"abstract":[],"role":"collectionGroup","title":"Strideable Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/Strideable-Implementations","type":"topic","url":"\/documentation\/compute\/unsafemutablerawpointer\/strideable-implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/hashValue":{"type":"topic","title":"hashValue","url":"\/documentation\/compute\/unsafemutablerawpointer\/hashvalue","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/hashValue","role":"symbol","abstract":[{"type":"text","text":"The hash value."}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hashValue","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Hashable"}],"title":"Hashable","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that can be hashed into a "},{"type":"codeVoice","code":"Hasher"},{"type":"text","text":" to produce an integer hash value."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","url":"\/documentation\/compute\/hashable","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"type":"topic","title":"Equatable","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","role":"symbol","url":"\/documentation\/compute\/equatable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/moveInitializeMemory(as:from:count:)":{"abstract":[{"text":"Initializes the memory referenced by this pointer with the values","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"starting at the given pointer, binds the memory to the values’ type,"},{"type":"text","text":" "},{"text":"deinitializes the source memory, and returns a typed pointer to the","type":"text"},{"type":"text","text":" "},{"text":"newly initialized memory.","type":"text"}],"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/moveInitializeMemory(as:from:count:)","title":"moveInitializeMemory(as:from:count:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"moveInitializeMemory"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"from"},{"text":": ","kind":"text"},{"text":"UnsafeMutablePointer","kind":"typeIdentifier","preciseIdentifier":"s:Sp"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"count","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/compute\/unsafemutablerawpointer\/moveinitializememory(as:from:count:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/loadUnaligned(fromByteOffset:as:)-4br03":{"type":"topic","url":"\/documentation\/compute\/unsafemutablerawpointer\/loadunaligned(frombyteoffset:as:)-4br03","title":"loadUnaligned(fromByteOffset:as:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/loadUnaligned(fromByteOffset:as:)-4br03","role":"symbol","abstract":[{"text":"Returns a new instance of the given type, constructed from the raw memory","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"at the specified offset."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"loadUnaligned"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"fromByteOffset","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"as"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow17MutableRawPointerP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow17MutableRawPointerP","title":"Swallow.MutableRawPointer","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Strideable":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/strideable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Strideable"}],"navigatorTitle":[{"text":"Strideable","kind":"identifier"}],"abstract":[{"type":"text","text":"A type representing continuous, one-dimensional values that can be offset"},{"type":"text","text":" "},{"type":"text","text":"and measured."}],"title":"Strideable"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/Pointee":{"type":"topic","url":"\/documentation\/compute\/unsafemutablerawpointer\/pointee","title":"UnsafeMutableRawPointer.Pointee","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/Pointee","navigatorTitle":[{"text":"Pointee","kind":"identifier"}],"role":"symbol","abstract":[],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Pointee","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/allocate(bytes:alignedTo:)":{"abstract":[],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/allocate(bytes:alignedTo:)","type":"topic","title":"allocate(bytes:alignedTo:)","deprecated":true,"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"allocate"},{"text":"(","kind":"text"},{"text":"bytes","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"text":"alignedTo","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv"}],"url":"\/documentation\/compute\/unsafemutablerawpointer\/allocate(bytes:alignedto:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer":{"kind":"symbol","type":"topic","abstract":[{"text":"A raw pointer for accessing and manipulating untyped data.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer","url":"\/documentation\/compute\/unsafemutablerawpointer","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnsafeMutableRawPointer"}],"title":"UnsafeMutableRawPointer","navigatorTitle":[{"kind":"identifier","text":"UnsafeMutableRawPointer"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/deallocate(bytes:alignedTo:)":{"type":"topic","url":"\/documentation\/compute\/unsafemutablerawpointer\/deallocate(bytes:alignedto:)","title":"deallocate(bytes:alignedTo:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/deallocate(bytes:alignedTo:)","deprecated":true,"role":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"deallocate"},{"text":"(","kind":"text"},{"text":"bytes","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"alignedTo","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":")","kind":"text"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/alignedDown(toMultipleOf:)":{"abstract":[{"type":"text","text":"Obtain the preceding pointer whose bit pattern is a multiple of"},{"text":" ","type":"text"},{"code":"alignment","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/alignedDown(toMultipleOf:)","title":"alignedDown(toMultipleOf:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"alignedDown"},{"text":"(","kind":"text"},{"text":"toMultipleOf","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"text":"UnsafeMutableRawPointer","preciseIdentifier":"s:Sv","kind":"typeIdentifier"}],"url":"\/documentation\/compute\/unsafemutablerawpointer\/aligneddown(tomultipleof:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/initializeMemory(as:to:)":{"type":"topic","url":"\/documentation\/compute\/unsafemutablerawpointer\/initializememory(as:to:)","title":"initializeMemory(as:to:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/initializeMemory(as:to:)","role":"symbol","abstract":[{"text":"Initializes the memory referenced by this pointer with the given value,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"binds the memory to the value’s type, and returns a typed pointer to the"},{"type":"text","text":" "},{"text":"initialized memory.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"initializeMemory","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"as"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"text":"consuming","kind":"keyword"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/load(fromByteOffset:as:)":{"abstract":[{"text":"Returns a new instance of the given type, constructed from the raw memory","type":"text"},{"type":"text","text":" "},{"type":"text","text":"at the specified offset."}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/load(fromByteOffset:as:)","title":"load(fromByteOffset:as:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"load","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"fromByteOffset"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"as"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"url":"\/documentation\/compute\/unsafemutablerawpointer\/load(frombyteoffset:as:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/_Pointer-Implementations":{"kind":"article","title":"_Pointer Implementations","abstract":[],"role":"collectionGroup","type":"topic","url":"\/documentation\/compute\/unsafemutablerawpointer\/_pointer-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/_Pointer-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/initializeMemory(as:from:count:)":{"type":"topic","url":"\/documentation\/compute\/unsafemutablerawpointer\/initializememory(as:from:count:)","title":"initializeMemory(as:from:count:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/initializeMemory(as:from:count:)","role":"symbol","abstract":[{"text":"Initializes the memory referenced by this pointer with the values","type":"text"},{"type":"text","text":" "},{"text":"starting at the given pointer, binds the memory to the values’ type, and","type":"text"},{"text":" ","type":"text"},{"text":"returns a typed pointer to the initialized memory.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"initializeMemory","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type, "},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UnsafePointer","kind":"typeIdentifier","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"count"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":") -> ","kind":"text"},{"text":"UnsafeMutablePointer","kind":"typeIdentifier","preciseIdentifier":"s:Sp"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow10RawPointerP":{"type":"unresolvable","title":"Swallow.RawPointer","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow10RawPointerP"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeMutableRawPointer/init(_:)-4sdp3":{"type":"topic","title":"init(_:)","url":"\/documentation\/compute\/unsafemutablerawpointer\/init(_:)-4sdp3","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeMutableRawPointer\/init(_:)-4sdp3","role":"symbol","abstract":[{"type":"text","text":"Creates a new raw pointer from an "},{"type":"codeVoice","code":"AutoreleasingUnsafeMutablePointer"},{"text":" ","type":"text"},{"type":"text","text":"instance."}],"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"AutoreleasingUnsafeMutablePointer","kind":"typeIdentifier","preciseIdentifier":"s:SA"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">)","kind":"text"}],"kind":"symbol"}}}