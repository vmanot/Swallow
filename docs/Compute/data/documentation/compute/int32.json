{"kind":"symbol","abstract":[{"type":"text","text":"A 32-bit signed integer value"},{"text":" ","type":"text"},{"text":"type.","type":"text"}],"topicSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/Words-swift.struct"],"title":"Structures","generated":true,"anchor":"Structures"},{"generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/!=(_:_:)-28uzv","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/&=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/&__=(_:_:)-5xpt1","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/&__=(_:_:)-9l16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/*=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/+=(_:_:)-6pr1g","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/-=(_:_:)-2cqx9","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/==(_:_:)-8cqv7","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/_(_:_:)-3k2xk","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/_=(_:_:)-46xu7","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/_=(_:_:)-6hsuo","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/_=(_:_:)-8flrz","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/_=(_:_:)-997bi"],"title":"Operators","anchor":"Operators"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/init(_:)-2px8y","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/init(_:)-34fue","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/init(_:)-k0sh","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/init(bitPattern:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/init(exactly:)-3dltv","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/init(exactly:)-79vj5","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/init(exactly:)-9tpyy"],"generated":true,"title":"Initializers","anchor":"Initializers"},{"title":"Instance Properties","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/byteSwapped","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/leadingZeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/magnitude-swift.property","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/nonzeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/trailingZeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/words-swift.property"],"generated":true,"anchor":"Instance-Properties"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/addingReportingOverflow(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/dividedReportingOverflow(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/dividingFullWidth(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/multipliedFullWidth(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/multipliedReportingOverflow(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/remainderReportingOverflow(dividingBy:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/signum()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/subtractingReportingOverflow(_:)"],"title":"Instance Methods","anchor":"Instance-Methods","generated":true},{"title":"Type Aliases","anchor":"Type-Aliases","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/IntegerLiteralType","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/Magnitude-swift.typealias","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/Stride"],"generated":true},{"title":"Type Properties","anchor":"Type-Properties","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/bitWidth-swift.type.property"]},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/AdditiveArithmetic-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/BinaryInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/Comparable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/CustomReflectable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/Decodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/Encodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/ExpressibleByIntegerLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/FixedWidthInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/SIMDScalar-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/SignedInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/SignedNumeric-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/Strideable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/_CustomPlaygroundQuickLookable-Implementations"],"anchor":"Default-Implementations","title":"Default Implementations","generated":true}],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/com.swallow.documentation.Compute\/10Accelerate10BNNSScalarP","doc:\/\/com.swallow.documentation.Compute\/10Accelerate23vDSP_IntegerConvertableP","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AdditiveArithmetic","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDScalar","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedNumeric","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","doc:\/\/com.swallow.documentation.Compute\/7Swallow18AdditionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow21AnyCodableConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22ApproximatelyEquatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20ArithmeticOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16BooleanInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7BoundedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18BoundedRandomnableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18ByteOrderSwappableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow14CoderPrimitiveP","doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataDecodableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataEncodableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiscreteP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20DiscreteOrContinuousP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18DivisionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22FloatingPointInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow9InitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16IntegerInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow24MultiplicationOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableAdditionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow27MutableArithmeticOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableDivisionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow31MutableMultiplicationOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow28MutableSubtractionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow6NumberP","doc:\/\/com.swallow.documentation.Compute\/7Swallow17NumberConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow15NumberInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow11RandomnableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow26ShouldNotBeDecodedFromBoolP","doc:\/\/com.swallow.documentation.Compute\/7Swallow6SignedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22SignedIntegerInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16SignedOrUnsignedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow21SubtractionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP","doc:\/\/com.swallow.documentation.Compute\/7Swallow24UnsignedIntegerInitiableP"]}],"sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"@frozen","kind":"attribute"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int32","kind":"identifier"}],"platforms":["macOS"]}],"kind":"declarations"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/int32"]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"title":"Int32","role":"symbol","roleHeading":"Structure","externalID":"s:s5Int32V","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int32"}],"navigatorTitle":[{"text":"Int32","kind":"identifier"}],"modules":[{"name":"Compute"}],"symbolKind":"struct"},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/_=(_:_:)-8flrz":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"%=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"Int32","kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Int32","preciseIdentifier":"s:s5Int32V"},{"kind":"text","text":")"}],"url":"\/documentation\/compute\/int32\/_=(_:_:)-8flrz","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/_=(_:_:)-8flrz","title":"%=(_:_:)","abstract":[{"type":"text","text":"Divides the first value by the second and stores the remainder in the"},{"type":"text","text":" "},{"type":"text","text":"left-hand-side variable."}],"type":"topic","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow13DataEncodableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataEncodableP","title":"Swallow.DataEncodable"},"doc://com.swallow.documentation.Compute/documentation/Compute/SignedNumeric":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedNumeric","url":"\/documentation\/compute\/signednumeric","title":"SignedNumeric","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SignedNumeric"}],"navigatorTitle":[{"text":"SignedNumeric","kind":"identifier"}],"abstract":[{"type":"text","text":"A numeric type with a negation operation."}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow18ByteOrderSwappableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18ByteOrderSwappableP","title":"Swallow.ByteOrderSwappable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/init(exactly:)-9tpyy":{"type":"topic","abstract":[{"type":"text","text":"Creates an integer from the given floating-point value, if it can be"},{"text":" ","type":"text"},{"type":"text","text":"represented exactly."}],"kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"?("},{"text":"exactly","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sf","text":"Float"},{"kind":"text","text":")"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/init(exactly:)-9tpyy","title":"init(exactly:)","role":"symbol","url":"\/documentation\/compute\/int32\/init(exactly:)-9tpyy"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/Hashable-Implementations":{"role":"collectionGroup","kind":"article","title":"Hashable Implementations","url":"\/documentation\/compute\/int32\/hashable-implementations","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/Hashable-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomReflectable":{"url":"\/documentation\/compute\/customreflectable","role":"symbol","abstract":[{"text":"A type that explicitly supplies its own mirror.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","title":"CustomReflectable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomReflectable"}],"navigatorTitle":[{"kind":"identifier","text":"CustomReflectable"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/Encodable-Implementations":{"title":"Encodable Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/Encodable-Implementations","abstract":[],"url":"\/documentation\/compute\/int32\/encodable-implementations","role":"collectionGroup","kind":"article","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/words-swift.property":{"type":"topic","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"words","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int32","preciseIdentifier":"s:s5Int32V"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V5WordsV","text":"Words"}],"url":"\/documentation\/compute\/int32\/words-swift.property","title":"words","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/words-swift.property","abstract":[{"type":"text","text":"A collection containing the words of this value’s binary"},{"type":"text","text":" "},{"type":"text","text":"representation, in order from the least significant to most significant."}],"role":"symbol","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/dividingFullWidth(_:)":{"type":"topic","role":"symbol","abstract":[{"text":"Returns a tuple containing the quotient and remainder of dividing the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"given value by this value."}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"dividingFullWidth","kind":"identifier"},{"kind":"text","text":"((high"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int32","preciseIdentifier":"s:s5Int32V"},{"text":", low","kind":"text"},{"text":": ","kind":"text"},{"text":"Int32","preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Magnitude","kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V9Magnitudea"},{"kind":"text","text":")) -> (quotient"},{"text":": ","kind":"text"},{"text":"Int32","preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier"},{"kind":"text","text":", remainder"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int32","preciseIdentifier":"s:s5Int32V"},{"text":")","kind":"text"}],"url":"\/documentation\/compute\/int32\/dividingfullwidth(_:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/dividingFullWidth(_:)","title":"dividingFullWidth(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/_=(_:_:)-6hsuo":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/_=(_:_:)-6hsuo","url":"\/documentation\/compute\/int32\/_=(_:_:)-6hsuo","abstract":[{"text":"Stores the result of performing a bitwise OR operation on the two given","type":"text"},{"type":"text","text":" "},{"type":"text","text":"values in the left-hand-side variable."}],"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"|=","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Int32","preciseIdentifier":"s:s5Int32V"},{"text":", ","kind":"text"},{"text":"Int32","kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V"},{"text":")","kind":"text"}],"role":"symbol","title":"|=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"type":"topic","title":"Equatable","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","role":"symbol","url":"\/documentation\/compute\/equatable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/multipliedReportingOverflow(by:)":{"type":"topic","title":"multipliedReportingOverflow(by:)","role":"symbol","url":"\/documentation\/compute\/int32\/multipliedreportingoverflow(by:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"multipliedReportingOverflow","kind":"identifier"},{"kind":"text","text":"("},{"text":"by","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int32","kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V"},{"text":") -> (partialValue","kind":"text"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier","text":"Int32"},{"text":", overflow","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":")"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/multipliedReportingOverflow(by:)","abstract":[{"type":"text","text":"Returns the product of this value and the given value, along with a"},{"type":"text","text":" "},{"type":"text","text":"Boolean value indicating whether overflow occurred in the operation."}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow26ShouldNotBeDecodedFromBoolP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow26ShouldNotBeDecodedFromBoolP","title":"Swallow.ShouldNotBeDecodedFromBool"},"doc://com.swallow.documentation.Compute/documentation/Compute/LosslessStringConvertible":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LosslessStringConvertible","kind":"identifier"}],"kind":"symbol","title":"LosslessStringConvertible","abstract":[{"type":"text","text":"A type that can be represented as a string in a lossless, unambiguous way."}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"LosslessStringConvertible","kind":"identifier"}],"url":"\/documentation\/compute\/losslessstringconvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/nonzeroBitCount":{"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"nonzeroBitCount","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"url":"\/documentation\/compute\/int32\/nonzerobitcount","abstract":[{"type":"text","text":"The number of bits equal to 1 in this value’s binary representation."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/nonzeroBitCount","type":"topic","title":"nonzeroBitCount","kind":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow27MutableArithmeticOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow27MutableArithmeticOperatableP","title":"Swallow.MutableArithmeticOperatable"},"doc://com.swallow.documentation.Compute/10Accelerate10BNNSScalarP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Accelerate10BNNSScalarP","title":"Accelerate.BNNSScalar"},"doc://com.swallow.documentation.Compute/documentation/Compute/CVarArg":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CVarArg"}],"abstract":[{"text":"A type whose instances can be encoded, and appropriately passed, as","type":"text"},{"text":" ","type":"text"},{"text":"elements of a C ","type":"text"},{"type":"codeVoice","code":"va_list"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"CVarArg","kind":"identifier"}],"title":"CVarArg","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","url":"\/documentation\/compute\/cvararg"},"doc://com.swallow.documentation.Compute/7Swallow9InitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow9InitiableP","title":"Swallow.Initiable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/Decodable-Implementations":{"role":"collectionGroup","kind":"article","title":"Decodable Implementations","url":"\/documentation\/compute\/int32\/decodable-implementations","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/Decodable-Implementations"},"doc://com.swallow.documentation.Compute/7Swallow8DiscreteP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiscreteP","title":"Swallow.Discrete"},"doc://com.swallow.documentation.Compute/7Swallow24UnsignedIntegerInitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow24UnsignedIntegerInitiableP","title":"Swallow.UnsignedIntegerInitiable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/multipliedFullWidth(by:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"multipliedFullWidth"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int32","preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier"},{"kind":"text","text":") -> (high"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int32","preciseIdentifier":"s:s5Int32V"},{"text":", low","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V","text":"Int32"},{"text":".","kind":"text"},{"text":"Magnitude","preciseIdentifier":"s:s5Int32V9Magnitudea","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","title":"multipliedFullWidth(by:)","url":"\/documentation\/compute\/int32\/multipliedfullwidth(by:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/multipliedFullWidth(by:)","abstract":[{"text":"Returns a tuple containing the high and low parts of the result of","type":"text"},{"type":"text","text":" "},{"text":"multiplying this value by the given value.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/&__=(_:_:)-9l16":{"title":"&>>=(_:_:)","role":"symbol","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"&>>=","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"Int32","kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s5Int32V","text":"Int32","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Calculates the result of shifting a value’s binary representation the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specified number of digits to the right, masking the shift amount to the"},{"type":"text","text":" "},{"type":"text","text":"type’s bit width, and stores the result in the left-hand-side variable."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/&__=(_:_:)-9l16","url":"\/documentation\/compute\/int32\/&__=(_:_:)-9l16"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/+=(_:_:)-6pr1g":{"type":"topic","abstract":[{"text":"Adds two values and stores the result in the left-hand-side variable.","type":"text"}],"kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"+="},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Int32","kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V"},{"kind":"text","text":", "},{"preciseIdentifier":"s:s5Int32V","text":"Int32","kind":"typeIdentifier"},{"kind":"text","text":")"}],"title":"+=(_:_:)","role":"symbol","url":"\/documentation\/compute\/int32\/+=(_:_:)-6pr1g","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/+=(_:_:)-6pr1g"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/subtractingReportingOverflow(_:)":{"url":"\/documentation\/compute\/int32\/subtractingreportingoverflow(_:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/subtractingReportingOverflow(_:)","role":"symbol","title":"subtractingReportingOverflow(_:)","type":"topic","abstract":[{"text":"Returns the difference obtained by subtracting the given value from this","type":"text"},{"type":"text","text":" "},{"text":"value, along with a Boolean value indicating whether overflow occurred in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the operation."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"subtractingReportingOverflow","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Int32","kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V"},{"text":") -> (partialValue","kind":"text"},{"text":": ","kind":"text"},{"text":"Int32","preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier"},{"text":", overflow","kind":"text"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":")"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/Comparable-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/Comparable-Implementations","kind":"article","abstract":[],"title":"Comparable Implementations","role":"collectionGroup","url":"\/documentation\/compute\/int32\/comparable-implementations","type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow22SignedIntegerInitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22SignedIntegerInitiableP","title":"Swallow.SignedIntegerInitiable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int32","kind":"identifier"}],"abstract":[{"text":"A 32-bit signed integer value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type."}],"kind":"symbol","navigatorTitle":[{"text":"Int32","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/int32","title":"Int32","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32"},"doc://com.swallow.documentation.Compute/7Swallow6NumberP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow6NumberP","title":"Swallow.Number"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/init(bitPattern:)":{"abstract":[{"type":"text","text":"Creates a new instance with the same memory representation as the given"},{"type":"text","text":" "},{"text":"value.","type":"text"}],"title":"init(bitPattern:)","role":"symbol","url":"\/documentation\/compute\/int32\/init(bitpattern:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"bitPattern"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V","text":"UInt32"},{"kind":"text","text":")"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/init(bitPattern:)","type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow18BoundedRandomnableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18BoundedRandomnableP","title":"Swallow.BoundedRandomnable"},"doc://com.swallow.documentation.Compute/7Swallow25MutableDivisionOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableDivisionOperatableP","title":"Swallow.MutableDivisionOperatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable":{"url":"\/documentation\/compute\/comparable","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared using the relational operators ","type":"text"},{"code":"<","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Comparable"}],"title":"Comparable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Comparable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/7Swallow31MutableMultiplicationOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow31MutableMultiplicationOperatableP","title":"Swallow.MutableMultiplicationOperatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/SIMDScalar-Implementations":{"url":"\/documentation\/compute\/int32\/simdscalar-implementations","title":"SIMDScalar Implementations","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/SIMDScalar-Implementations","abstract":[],"kind":"article","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/init(exactly:)-3dltv":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?("},{"text":"exactly","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Float16","preciseIdentifier":"s:s7Float16V"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Creates an integer from the given floating-point value, if it can be"},{"type":"text","text":" "},{"type":"text","text":"represented exactly."}],"url":"\/documentation\/compute\/int32\/init(exactly:)-3dltv","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/init(exactly:)-3dltv","title":"init(exactly:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Hashable"}],"title":"Hashable","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that can be hashed into a "},{"type":"codeVoice","code":"Hasher"},{"type":"text","text":" to produce an integer hash value."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","url":"\/documentation\/compute\/hashable","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow13DataDecodableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataDecodableP","title":"Swallow.DataDecodable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/-=(_:_:)-2cqx9":{"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/-=(_:_:)-2cqx9","abstract":[{"text":"Subtracts the second value from the first and stores the difference in the","type":"text"},{"type":"text","text":" "},{"text":"left-hand-side variable.","type":"text"}],"kind":"symbol","type":"topic","title":"-=(_:_:)","url":"\/documentation\/compute\/int32\/-=(_:_:)-2cqx9","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"-=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:s5Int32V","text":"Int32","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Int32","preciseIdentifier":"s:s5Int32V"},{"kind":"text","text":")"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/SignedInteger-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/SignedInteger-Implementations","kind":"article","abstract":[],"title":"SignedInteger Implementations","type":"topic","url":"\/documentation\/compute\/int32\/signedinteger-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/_=(_:_:)-46xu7":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/_=(_:_:)-46xu7","type":"topic","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"^=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V","text":"Int32"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier","text":"Int32"},{"text":")","kind":"text"}],"role":"symbol","url":"\/documentation\/compute\/int32\/_=(_:_:)-46xu7","abstract":[{"type":"text","text":"Stores the result of performing a bitwise XOR operation on the two given"},{"text":" ","type":"text"},{"type":"text","text":"values in the left-hand-side variable."}],"title":"^=(_:_:)"},"doc://com.swallow.documentation.Compute/7Swallow17NumberConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow17NumberConvertibleP","title":"Swallow.NumberConvertible"},"doc://com.swallow.documentation.Compute/7Swallow20ArithmeticOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20ArithmeticOperatableP","title":"Swallow.ArithmeticOperatable"},"doc://com.swallow.documentation.Compute/7Swallow7TrivialP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP","title":"Swallow.Trivial"},"doc://com.swallow.documentation.Compute/7Swallow22ApproximatelyEquatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22ApproximatelyEquatableP","title":"Swallow.ApproximatelyEquatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger":{"title":"FixedWidthInteger","kind":"symbol","navigatorTitle":[{"text":"FixedWidthInteger","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"FixedWidthInteger","kind":"identifier"}],"abstract":[{"text":"An integer type that uses a fixed size for every instance.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/fixedwidthinteger"},"doc://com.swallow.documentation.Compute/7Swallow25MutableAdditionOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableAdditionOperatableP","title":"Swallow.MutableAdditionOperatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/FixedWidthInteger-Implementations":{"role":"collectionGroup","type":"topic","title":"FixedWidthInteger Implementations","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/FixedWidthInteger-Implementations","kind":"article","url":"\/documentation\/compute\/int32\/fixedwidthinteger-implementations"},"doc://com.swallow.documentation.Compute/7Swallow21AnyCodableConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21AnyCodableConvertibleP","title":"Swallow.AnyCodableConvertible"},"doc://com.swallow.documentation.Compute/7Swallow20DiscreteOrContinuousP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20DiscreteOrContinuousP","title":"Swallow.DiscreteOrContinuous"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/bitWidth-swift.type.property":{"type":"topic","title":"bitWidth","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"bitWidth","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/bitWidth-swift.type.property","url":"\/documentation\/compute\/int32\/bitwidth-swift.type.property","kind":"symbol","role":"symbol","abstract":[{"text":"The number of bits used for the underlying binary representation of","type":"text"},{"type":"text","text":" "},{"text":"values of this type.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/init(exactly:)-79vj5":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/init(exactly:)-79vj5","title":"init(exactly:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"?("},{"text":"exactly","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Double","kind":"typeIdentifier","preciseIdentifier":"s:Sd"},{"kind":"text","text":")"}],"kind":"symbol","abstract":[{"type":"text","text":"Creates an integer from the given floating-point value, if it can be"},{"type":"text","text":" "},{"type":"text","text":"represented exactly."}],"url":"\/documentation\/compute\/int32\/init(exactly:)-79vj5","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/!=(_:_:)-28uzv":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/!=(_:_:)-28uzv","type":"topic","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"!="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"Int32","kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V","text":"Int32"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"role":"symbol","url":"\/documentation\/compute\/int32\/!=(_:_:)-28uzv","abstract":[],"title":"!=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/*=(_:_:)":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/*=(_:_:)","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"*=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"Int32","preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Int32","kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V"},{"text":")","kind":"text"}],"title":"*=(_:_:)","role":"symbol","url":"\/documentation\/compute\/int32\/*=(_:_:)","abstract":[{"type":"text","text":"Multiplies two values and stores the result in the left-hand-side"},{"text":" ","type":"text"},{"text":"variable.","type":"text"}]},"doc://com.swallow.documentation.Compute/7Swallow20ByteTupleConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP","title":"Swallow.ByteTupleConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/Magnitude-swift.typealias":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Magnitude"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/Magnitude-swift.typealias","abstract":[{"text":"A type that can represent the absolute value of any possible value of","type":"text"},{"type":"text","text":" "},{"text":"this type.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/int32\/magnitude-swift.typealias","title":"Int32.Magnitude","navigatorTitle":[{"kind":"identifier","text":"Magnitude"}],"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/_(_:_:)-3k2xk":{"role":"symbol","title":"<(_:_:)","kind":"symbol","url":"\/documentation\/compute\/int32\/_(_:_:)-3k2xk","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"<"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Int32","preciseIdentifier":"s:s5Int32V"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V","text":"Int32"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/_(_:_:)-3k2xk","type":"topic","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether the value of the first"},{"text":" ","type":"text"},{"type":"text","text":"argument is less than that of the second argument."}]},"doc://com.swallow.documentation.Compute/7Swallow6SignedP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow6SignedP","title":"Swallow.Signed"},"doc://com.swallow.documentation.Compute/7Swallow16BooleanInitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16BooleanInitiableP","title":"Swallow.BooleanInitiable"},"doc://com.swallow.documentation.Compute/7Swallow11RandomnableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow11RandomnableP","title":"Swallow.Randomnable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/leadingZeroBitCount":{"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"leadingZeroBitCount","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"url":"\/documentation\/compute\/int32\/leadingzerobitcount","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/leadingZeroBitCount","title":"leadingZeroBitCount","abstract":[{"type":"text","text":"The number of leading zeros in this value’s binary representation."}],"type":"topic","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/trailingZeroBitCount":{"role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"trailingZeroBitCount"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/trailingZeroBitCount","abstract":[{"type":"text","text":"The number of trailing zeros in this value’s binary representation."}],"title":"trailingZeroBitCount","url":"\/documentation\/compute\/int32\/trailingzerobitcount","type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow18AdditionOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18AdditionOperatableP","title":"Swallow.AdditionOperatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/==(_:_:)-8cqv7":{"role":"symbol","url":"\/documentation\/compute\/int32\/==(_:_:)-8cqv7","abstract":[{"type":"text","text":"Returns a Boolean value indicating whether two values are equal."}],"kind":"symbol","title":"==(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/==(_:_:)-8cqv7","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"==","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V","text":"Int32"},{"kind":"text","text":", "},{"preciseIdentifier":"s:s5Int32V","text":"Int32","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByIntegerLiteral":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","url":"\/documentation\/compute\/expressiblebyintegerliteral","title":"ExpressibleByIntegerLiteral","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"navigatorTitle":[{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"abstract":[{"text":"A type that can be initialized with an integer literal.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow18DivisionOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18DivisionOperatableP","title":"Swallow.DivisionOperatable"},"doc://com.swallow.documentation.Compute/7Swallow21SubtractionOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21SubtractionOperatableP","title":"Swallow.SubtractionOperatable"},"doc://com.swallow.documentation.Compute/10Accelerate23vDSP_IntegerConvertableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/10Accelerate23vDSP_IntegerConvertableP","title":"Accelerate.vDSP_IntegerConvertable"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMDScalar":{"kind":"symbol","navigatorTitle":[{"text":"SIMDScalar","kind":"identifier"}],"type":"topic","title":"SIMDScalar","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDScalar","abstract":[{"type":"text","text":"A type that can be used as an element in a SIMD vector."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SIMDScalar","kind":"identifier"}],"url":"\/documentation\/compute\/simdscalar"},"doc://com.swallow.documentation.Compute/7Swallow28MutableSubtractionOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow28MutableSubtractionOperatableP","title":"Swallow.MutableSubtractionOperatable"},"doc://com.swallow.documentation.Compute/7Swallow24MultiplicationOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow24MultiplicationOperatableP","title":"Swallow.MultiplicationOperatable"},"doc://com.swallow.documentation.Compute/7Swallow15NumberInitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow15NumberInitiableP","title":"Swallow.NumberInitiable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Strideable":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/strideable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Strideable"}],"navigatorTitle":[{"text":"Strideable","kind":"identifier"}],"abstract":[{"type":"text","text":"A type representing continuous, one-dimensional values that can be offset"},{"type":"text","text":" "},{"type":"text","text":"and measured."}],"title":"Strideable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/dividedReportingOverflow(by:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dividedReportingOverflow"},{"kind":"text","text":"("},{"text":"by","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int32","preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier"},{"kind":"text","text":") -> (partialValue"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int32","preciseIdentifier":"s:s5Int32V"},{"text":", overflow","kind":"text"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"url":"\/documentation\/compute\/int32\/dividedreportingoverflow(by:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/dividedReportingOverflow(by:)","title":"dividedReportingOverflow(by:)","abstract":[{"type":"text","text":"Returns the quotient obtained by dividing this value by the given value,"},{"type":"text","text":" "},{"text":"along with a Boolean value indicating whether overflow occurred in the","type":"text"},{"text":" ","type":"text"},{"text":"operation.","type":"text"}],"type":"topic","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Sendable","kind":"identifier"}],"title":"Sendable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","abstract":[],"url":"\/documentation\/compute\/sendable","role":"symbol","navigatorTitle":[{"text":"Sendable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/AdditiveArithmetic-Implementations":{"title":"AdditiveArithmetic Implementations","role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/AdditiveArithmetic-Implementations","abstract":[],"url":"\/documentation\/compute\/int32\/additivearithmetic-implementations","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/SignedNumeric-Implementations":{"type":"topic","title":"SignedNumeric Implementations","role":"collectionGroup","url":"\/documentation\/compute\/int32\/signednumeric-implementations","abstract":[],"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/SignedNumeric-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/CustomReflectable-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/CustomReflectable-Implementations","abstract":[],"role":"collectionGroup","type":"topic","title":"CustomReflectable Implementations","kind":"article","url":"\/documentation\/compute\/int32\/customreflectable-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/ExpressibleByIntegerLiteral-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/ExpressibleByIntegerLiteral-Implementations","role":"collectionGroup","title":"ExpressibleByIntegerLiteral Implementations","url":"\/documentation\/compute\/int32\/expressiblebyintegerliteral-implementations","abstract":[],"type":"topic","kind":"article"},"doc://com.swallow.documentation.Compute/7Swallow22FloatingPointInitiableP":{"title":"Swallow.FloatingPointInitiable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22FloatingPointInitiableP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/_=(_:_:)-997bi":{"kind":"symbol","type":"topic","title":"\/=(_:_:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/_=(_:_:)-997bi","abstract":[{"type":"text","text":"Divides the first value by the second and stores the quotient in the"},{"type":"text","text":" "},{"text":"left-hand-side variable.","type":"text"}],"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"\/="},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Int32","preciseIdentifier":"s:s5Int32V"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V","text":"Int32"},{"text":")","kind":"text"}],"url":"\/documentation\/compute\/int32\/_=(_:_:)-997bi"},"doc://com.swallow.documentation.Compute/documentation/Compute/Encodable":{"url":"\/documentation\/compute\/encodable","navigatorTitle":[{"text":"Encodable","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Encodable","kind":"identifier"}],"abstract":[{"text":"A type that can encode itself to an external representation.","type":"text"}],"type":"topic","title":"Encodable","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/init(_:)-k0sh":{"abstract":[],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/init(_:)-k0sh","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:Sd","text":"Double"},{"kind":"text","text":")"}],"kind":"symbol","type":"topic","title":"init(_:)","url":"\/documentation\/compute\/int32\/init(_:)-k0sh"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/&__=(_:_:)-5xpt1":{"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/&__=(_:_:)-5xpt1","title":"&<<=(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"&<<=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier","text":"Int32"},{"text":", ","kind":"text"},{"text":"Int32","kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V"},{"text":")","kind":"text"}],"kind":"symbol","abstract":[{"text":"Returns the result of shifting a value’s binary representation the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specified number of digits to the left, masking the shift amount to the"},{"type":"text","text":" "},{"text":"type’s bit width, and stores the result in the left-hand-side variable.","type":"text"}],"url":"\/documentation\/compute\/int32\/&__=(_:_:)-5xpt1"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/Strideable-Implementations":{"abstract":[],"type":"topic","title":"Strideable Implementations","role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/Strideable-Implementations","url":"\/documentation\/compute\/int32\/strideable-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/magnitude-swift.property":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"magnitude","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt32","preciseIdentifier":"s:s6UInt32V"}],"url":"\/documentation\/compute\/int32\/magnitude-swift.property","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/magnitude-swift.property","title":"magnitude","abstract":[{"text":"The magnitude of this value.","type":"text"}],"type":"topic","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/Stride":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/Stride","url":"\/documentation\/compute\/int32\/stride","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Stride"}],"navigatorTitle":[{"text":"Stride","kind":"identifier"}],"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A type that represents the distance between two values."}],"type":"topic","title":"Int32.Stride"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/remainderReportingOverflow(dividingBy:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/remainderReportingOverflow(dividingBy:)","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"remainderReportingOverflow","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"dividingBy"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int32","preciseIdentifier":"s:s5Int32V"},{"text":") -> (partialValue","kind":"text"},{"kind":"text","text":": "},{"text":"Int32","preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier"},{"kind":"text","text":", overflow"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":")"}],"role":"symbol","url":"\/documentation\/compute\/int32\/remainderreportingoverflow(dividingby:)","abstract":[{"text":"Returns the remainder after dividing this value by the given value, along","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with a Boolean value indicating whether overflow occurred during division."}],"title":"remainderReportingOverflow(dividingBy:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"title":"Copyable","abstract":[{"type":"text","text":"A type whose values can be implicitly or explicitly copied."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Copyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","url":"\/documentation\/compute\/copyable","navigatorTitle":[{"text":"Copyable","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/_CustomPlaygroundQuickLookable-Implementations":{"role":"collectionGroup","url":"\/documentation\/compute\/int32\/_customplaygroundquicklookable-implementations","abstract":[],"title":"_CustomPlaygroundQuickLookable Implementations","kind":"article","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/_CustomPlaygroundQuickLookable-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/IntegerLiteralType":{"url":"\/documentation\/compute\/int32\/integerliteraltype","navigatorTitle":[{"text":"IntegerLiteralType","kind":"identifier"}],"role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IntegerLiteralType"}],"abstract":[{"type":"text","text":"A type that represents an integer literal."}],"type":"topic","title":"Int32.IntegerLiteralType","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/IntegerLiteralType"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BinaryInteger"}],"navigatorTitle":[{"kind":"identifier","text":"BinaryInteger"}],"url":"\/documentation\/compute\/binaryinteger","type":"topic","abstract":[{"type":"text","text":"An integer type with a binary representation."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","title":"BinaryInteger","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow7BoundedP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7BoundedP","title":"Swallow.Bounded"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/BinaryInteger-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/BinaryInteger-Implementations","url":"\/documentation\/compute\/int32\/binaryinteger-implementations","abstract":[],"type":"topic","title":"BinaryInteger Implementations","role":"collectionGroup","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/Decodable":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Decodable","kind":"identifier"}],"title":"Decodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","abstract":[{"type":"text","text":"A type that can decode itself from an external representation."}],"url":"\/documentation\/compute\/decodable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Decodable"}]},"doc://com.swallow.documentation.Compute/7Swallow16IntegerInitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16IntegerInitiableP","title":"Swallow.IntegerInitiable"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible":{"url":"\/documentation\/compute\/customstringconvertible","navigatorTitle":[{"kind":"identifier","text":"CustomStringConvertible"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomStringConvertible","kind":"identifier"}],"abstract":[{"text":"A type with a customized textual representation.","type":"text"}],"type":"topic","title":"CustomStringConvertible","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/SignedInteger":{"abstract":[{"type":"text","text":"An integer type that can represent both positive and negative values."}],"kind":"symbol","url":"\/documentation\/compute\/signedinteger","navigatorTitle":[{"kind":"identifier","text":"SignedInteger"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedInteger","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SignedInteger","kind":"identifier"}],"title":"SignedInteger"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/&=(_:_:)":{"kind":"symbol","abstract":[{"text":"Stores the result of performing a bitwise AND operation on the two given","type":"text"},{"type":"text","text":" "},{"text":"values in the left-hand-side variable.","type":"text"}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"&="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:s5Int32V","text":"Int32","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Int32","preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"&=(_:_:)","type":"topic","url":"\/documentation\/compute\/int32\/&=(_:_:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/&=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/signum()":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/signum()","abstract":[{"type":"text","text":"Returns "},{"code":"-1","type":"codeVoice"},{"type":"text","text":" if this value is negative and "},{"type":"codeVoice","code":"1"},{"type":"text","text":" if it’s positive;"},{"type":"text","text":" "},{"text":"otherwise, ","type":"text"},{"type":"codeVoice","code":"0"},{"text":".","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"signum","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:s5Int32V","text":"Int32","kind":"typeIdentifier"}],"title":"signum()","url":"\/documentation\/compute\/int32\/signum()"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/Words-swift.struct":{"url":"\/documentation\/compute\/int32\/words-swift.struct","navigatorTitle":[{"kind":"identifier","text":"Words"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/Words-swift.struct","title":"Int32.Words","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Words","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that represents the words of this integer."}]},"doc://com.swallow.documentation.Compute/7Swallow16SignedOrUnsignedP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16SignedOrUnsignedP","title":"Swallow.SignedOrUnsigned"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/addingReportingOverflow(_:)":{"abstract":[{"type":"text","text":"Returns the sum of this value and the given value, along with a Boolean"},{"type":"text","text":" "},{"text":"value indicating whether overflow occurred in the operation.","type":"text"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/addingReportingOverflow(_:)","type":"topic","url":"\/documentation\/compute\/int32\/addingreportingoverflow(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"addingReportingOverflow","kind":"identifier"},{"kind":"text","text":"("},{"preciseIdentifier":"s:s5Int32V","kind":"typeIdentifier","text":"Int32"},{"kind":"text","text":") -> (partialValue"},{"text":": ","kind":"text"},{"text":"Int32","kind":"typeIdentifier","preciseIdentifier":"s:s5Int32V"},{"text":", overflow","kind":"text"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"addingReportingOverflow(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Numeric":{"abstract":[{"type":"text","text":"A type with values that support multiplication."}],"kind":"symbol","url":"\/documentation\/compute\/numeric","navigatorTitle":[{"text":"Numeric","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Numeric"}],"title":"Numeric"},"doc://com.swallow.documentation.Compute/documentation/Compute/BitwiseCopyable":{"title":"BitwiseCopyable","abstract":[],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BitwiseCopyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","url":"\/documentation\/compute\/bitwisecopyable","navigatorTitle":[{"kind":"identifier","text":"BitwiseCopyable"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow14CoderPrimitiveP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow14CoderPrimitiveP","title":"Swallow.CoderPrimitive"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/Equatable-Implementations":{"title":"Equatable Implementations","type":"topic","role":"collectionGroup","url":"\/documentation\/compute\/int32\/equatable-implementations","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/Equatable-Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/AdditiveArithmetic":{"type":"topic","title":"AdditiveArithmetic","abstract":[{"text":"A type with values that support addition and subtraction.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AdditiveArithmetic"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AdditiveArithmetic","url":"\/documentation\/compute\/additivearithmetic","role":"symbol","navigatorTitle":[{"text":"AdditiveArithmetic","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/init(_:)-2px8y":{"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:Sf","text":"Float"},{"kind":"text","text":")"}],"url":"\/documentation\/compute\/int32\/init(_:)-2px8y","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/init(_:)-2px8y","title":"init(_:)","abstract":[],"type":"topic","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/init(_:)-34fue":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/init(_:)-34fue","type":"topic","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"Float16","kind":"typeIdentifier","preciseIdentifier":"s:s7Float16V"},{"kind":"text","text":")"}],"role":"symbol","url":"\/documentation\/compute\/int32\/init(_:)-34fue","abstract":[{"text":"Creates an integer from the given floating-point value, rounding toward","type":"text"},{"text":" ","type":"text"},{"text":"zero.","type":"text"}],"title":"init(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32/byteSwapped":{"kind":"symbol","role":"symbol","title":"byteSwapped","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"byteSwapped","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int32","preciseIdentifier":"s:s5Int32V"}],"url":"\/documentation\/compute\/int32\/byteswapped","abstract":[{"type":"text","text":"A representation of this integer with the byte order swapped."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32\/byteSwapped","type":"topic"}}}