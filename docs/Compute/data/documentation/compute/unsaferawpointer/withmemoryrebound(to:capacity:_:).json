{"sections":[],"kind":"symbol","abstract":[{"type":"text","text":"Executes the given closure while temporarily binding memory to"},{"type":"text","text":" "},{"text":"the specified number of instances of type ","type":"text"},{"code":"T","type":"codeVoice"},{"type":"text","text":"."}],"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"withMemoryRebound","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"E","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Result"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":".Type, "},{"text":"capacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"kind":"text","text":", ("},{"text":"UnsafePointer","kind":"typeIdentifier","preciseIdentifier":"s:SP"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":"("},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"E"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Result"}],"modules":[{"relatedModules":["Swift"],"name":"Compute"}],"roleHeading":"Instance Method","symbolKind":"method","externalID":"s:SV17withMemoryRebound2to8capacity_q0_xm_Siq0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF","title":"withMemoryRebound(to:capacity:_:)","role":"symbol","extendedModule":"Swift"},"variants":[{"paths":["\/documentation\/compute\/unsaferawpointer\/withmemoryrebound(to:capacity:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/withMemoryRebound(to:capacity:_:)","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withMemoryRebound"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"E","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Result","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"to"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"type"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":".Type, "},{"text":"capacity","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"count","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"body","kind":"internalParam"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:SP","text":"UnsafePointer","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafePointer"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"E"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"E","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"Error","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"text":" : ~Copyable, ","kind":"text"},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":" : ~Copyable"}]}]},{"parameters":[{"content":[{"inlineContent":[{"text":"The type to temporarily bind the memory referenced by this","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"pointer. This pointer must be a multiple of this type’s alignment."}],"type":"paragraph"}],"name":"type"},{"content":[{"inlineContent":[{"type":"text","text":"The number of instances of "},{"code":"T","type":"codeVoice"},{"type":"text","text":" in the re-bound region."}],"type":"paragraph"}],"name":"count"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes a typed pointer to the"},{"type":"text","text":" "},{"text":"same memory as this pointer, only bound to type ","type":"text"},{"code":"T","type":"codeVoice"},{"text":". The closure’s","type":"text"},{"text":" ","type":"text"},{"text":"pointer argument is valid only for the duration of the closure’s","type":"text"},{"type":"text","text":" "},{"type":"text","text":"execution. If "},{"type":"codeVoice","code":"body"},{"type":"text","text":" has a return value, that value is also used as"},{"text":" ","type":"text"},{"text":"the return value for the ","type":"text"},{"type":"codeVoice","code":"withMemoryRebound(to:capacity:_:)"},{"text":" method.","type":"text"}]}],"name":"body"}],"kind":"parameters"},{"content":[{"type":"heading","level":2,"anchor":"return-value","text":"Return Value"},{"inlineContent":[{"text":"The return value, if any, of the ","type":"text"},{"type":"codeVoice","code":"body"},{"text":" closure parameter.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"Use this method when you have a pointer to raw memory and you need","type":"text"},{"text":" ","type":"text"},{"text":"to access that memory as instances of a given type ","type":"text"},{"code":"T","type":"codeVoice"},{"text":". Accessing","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"memory as a type "},{"type":"codeVoice","code":"T"},{"text":" requires that the memory be bound to that type. A","type":"text"},{"type":"text","text":" "},{"type":"text","text":"memory location may only be bound to one type at a time, so accessing"},{"text":" ","type":"text"},{"type":"text","text":"the same memory as an unrelated type without first rebinding the memory"},{"type":"text","text":" "},{"text":"is undefined.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any instance of "},{"type":"codeVoice","code":"T"},{"type":"text","text":" within the re-bound region may be initialized or"},{"type":"text","text":" "},{"text":"uninitialized. The memory underlying any individual instance of ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":" "},{"text":"must have the same initialization state (i.e.  initialized or","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"uninitialized.) Accessing a "},{"type":"codeVoice","code":"T"},{"type":"text","text":" whose underlying memory"},{"type":"text","text":" "},{"type":"text","text":"is in a mixed initialization state shall be undefined behaviour."}]},{"inlineContent":[{"text":"The following example temporarily rebinds a raw memory pointer","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to "},{"code":"Int64","type":"codeVoice"},{"text":", then accesses a property on the signed integer.","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["let pointer: UnsafeRawPointer = fetchValue()","let isNegative = pointer.withMemoryRebound(","    to: Int64.self, capacity: 1",") {","    return $0.pointee < 0","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"After executing "},{"code":"body","type":"codeVoice"},{"type":"text","text":", this method rebinds memory back to its original"},{"text":" ","type":"text"},{"text":"binding state. This can be unbound memory, or bound to a different type.","type":"text"}]},{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The region of memory starting at this pointer must match the"},{"type":"text","text":" "},{"type":"text","text":"alignment of "},{"type":"codeVoice","code":"T"},{"type":"text","text":" (as reported by "},{"type":"codeVoice","code":"MemoryLayout<T>.alignment"},{"type":"text","text":")."},{"text":" ","type":"text"},{"text":"That is, ","type":"text"},{"type":"codeVoice","code":"Int(bitPattern: self) % MemoryLayout<T>.alignment"},{"text":" ","type":"text"},{"type":"text","text":"must equal zero."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The region of memory starting at this pointer may have been"},{"text":" ","type":"text"},{"text":"bound to a type. If that is the case, then ","type":"text"},{"code":"T","type":"codeVoice"},{"type":"text","text":" must be"},{"type":"text","text":" "},{"type":"text","text":"layout compatible with the type to which the memory has been bound."},{"text":" ","type":"text"},{"type":"text","text":"This requirement does not apply if the region of memory"},{"text":" ","type":"text"},{"type":"text","text":"has not been bound to any type."}],"type":"paragraph"}],"type":"aside","style":"note","name":"Note"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/withMemoryRebound(to:capacity:_:)":{"url":"\/documentation\/compute\/unsaferawpointer\/withmemoryrebound(to:capacity:_:)","abstract":[{"text":"Executes the given closure while temporarily binding memory to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the specified number of instances of type "},{"code":"T","type":"codeVoice"},{"type":"text","text":"."}],"title":"withMemoryRebound(to:capacity:_:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/withMemoryRebound(to:capacity:_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withMemoryRebound"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":", ","kind":"text"},{"text":"E","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Result","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"capacity"},{"kind":"text","text":": "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"throws","kind":"keyword"},{"text":"(","kind":"text"},{"text":"E","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Result","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"E"},{"kind":"text","text":") -> "},{"text":"Result","kind":"typeIdentifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafePointer":{"abstract":[{"type":"text","text":"A pointer for accessing data of a specific type."}],"type":"topic","title":"UnsafePointer","url":"\/documentation\/compute\/unsafepointer","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafePointer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafePointer"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnsafePointer"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer":{"role":"symbol","abstract":[{"text":"A raw pointer for accessing untyped data.","type":"text"}],"title":"UnsafeRawPointer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafeRawPointer"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer","kind":"symbol","navigatorTitle":[{"text":"UnsafeRawPointer","kind":"identifier"}],"url":"\/documentation\/compute\/unsaferawpointer","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Error":{"url":"\/documentation\/compute\/error","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Error"}],"navigatorTitle":[{"text":"Error","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Error","type":"topic","role":"symbol","abstract":[{"type":"text","text":"A type representing an error value that can be thrown."}],"kind":"symbol","title":"Error"}}}