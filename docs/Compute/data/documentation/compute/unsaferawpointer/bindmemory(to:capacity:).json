{"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer"]]},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/bindMemory(to:capacity:)","interfaceLanguage":"swift"},"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Binds the memory to the specified type and returns a typed pointer to the"},{"type":"text","text":" "},{"text":"bound memory.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"@discardableResult","kind":"attribute"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"bindMemory","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"type"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"capacity"},{"text":" ","kind":"text"},{"text":"count","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafePointer","text":"UnsafePointer","preciseIdentifier":"s:SP"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":" : ~Copyable","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"parameters":[{"name":"type","content":[{"inlineContent":[{"text":"The type ","type":"text"},{"type":"codeVoice","code":"T"},{"text":" to bind the memory to.","type":"text"}],"type":"paragraph"}]},{"name":"count","content":[{"inlineContent":[{"type":"text","text":"The amount of memory to bind to type "},{"code":"T","type":"codeVoice"},{"text":", counted as instances","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of "},{"code":"T","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"type":"heading","anchor":"return-value","level":2,"text":"Return Value"},{"inlineContent":[{"text":"A typed pointer to the newly bound memory. The memory in this","type":"text"},{"type":"text","text":" "},{"text":"region is bound to ","type":"text"},{"code":"T","type":"codeVoice"},{"text":", but has not been modified in any other way.","type":"text"},{"text":" ","type":"text"},{"text":"The number of bytes in this region is","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"count * MemoryLayout<T>.stride"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"bindMemory(to:capacity:)"},{"type":"text","text":" method to bind the memory referenced"},{"type":"text","text":" "},{"type":"text","text":"by this pointer to the type "},{"type":"codeVoice","code":"T"},{"text":". The memory must be uninitialized or","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"initialized to a type that is layout compatible with "},{"type":"codeVoice","code":"T"},{"type":"text","text":". If the memory"},{"type":"text","text":" "},{"text":"is uninitialized, it is still uninitialized after being bound to ","type":"text"},{"code":"T","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In this example, 100 bytes of raw memory are allocated for the pointer"},{"type":"text","text":" "},{"type":"codeVoice","code":"bytesPointer"},{"type":"text","text":", and then the first four bytes are bound to the "},{"type":"codeVoice","code":"Int8"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let count = 4","let bytesPointer = UnsafeMutableRawPointer.allocate(","        byteCount: 100,","        alignment: MemoryLayout<Int8>.alignment)","let int8Pointer = bytesPointer.bindMemory(to: Int8.self, capacity: count)"]},{"type":"paragraph","inlineContent":[{"text":"After calling ","type":"text"},{"type":"codeVoice","code":"bindMemory(to:capacity:)"},{"text":", the first four bytes of the","type":"text"},{"text":" ","type":"text"},{"text":"memory referenced by ","type":"text"},{"type":"codeVoice","code":"bytesPointer"},{"text":" are bound to the ","type":"text"},{"type":"codeVoice","code":"Int8"},{"type":"text","text":" type, though"},{"text":" ","type":"text"},{"text":"they remain uninitialized. The remainder of the allocated region is","type":"text"},{"text":" ","type":"text"},{"text":"unbound raw memory. All 100 bytes of memory must eventually be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"deallocated."}]},{"style":"warning","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A memory location may only be bound to one type at a time. The"},{"text":" ","type":"text"},{"text":"behavior of accessing memory as a type unrelated to its bound type is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"undefined."}]}],"name":"Warning"}],"kind":"content"}],"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"bindMemory","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"capacity"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":") -> ","kind":"text"},{"text":"UnsafePointer","preciseIdentifier":"s:SP","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"extendedModule":"Swift","role":"symbol","roleHeading":"Instance Method","title":"bindMemory(to:capacity:)","modules":[{"name":"Compute","relatedModules":["Swift"]}],"externalID":"s:SV10bindMemory2to8capacitySPyxGxm_SitRi_zlF","symbolKind":"method"},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/unsaferawpointer\/bindmemory(to:capacity:)"]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafePointer":{"abstract":[{"type":"text","text":"A pointer for accessing data of a specific type."}],"type":"topic","title":"UnsafePointer","url":"\/documentation\/compute\/unsafepointer","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafePointer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafePointer"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnsafePointer"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer/bindMemory(to:capacity:)":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"bindMemory","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"text":"capacity","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:SP","text":"UnsafePointer"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer\/bindMemory(to:capacity:)","title":"bindMemory(to:capacity:)","abstract":[{"type":"text","text":"Binds the memory to the specified type and returns a typed pointer to the"},{"type":"text","text":" "},{"type":"text","text":"bound memory."}],"url":"\/documentation\/compute\/unsaferawpointer\/bindmemory(to:capacity:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsafeRawPointer":{"role":"symbol","abstract":[{"text":"A raw pointer for accessing untyped data.","type":"text"}],"title":"UnsafeRawPointer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafeRawPointer"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsafeRawPointer","kind":"symbol","navigatorTitle":[{"text":"UnsafeRawPointer","kind":"identifier"}],"url":"\/documentation\/compute\/unsaferawpointer","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}