{"topicSections":[{"title":"Operators","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/&*(_:_:)-6ml69","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/&*=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/&+(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/&+=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/&-(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/&-=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/&__(_:_:)-1sn91","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/&__(_:_:)-4j1s7","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/&__=(_:_:)-2ffyd","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/&__=(_:_:)-q186"],"anchor":"Operators"},{"anchor":"Initializers","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/init(_:radix:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/init(bigEndian:)-ynpy","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/init(littleEndian:)-3u3op"],"title":"Initializers","generated":true},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/bigEndian-6642a","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/byteSwapped","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/leadingZeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/littleEndian-4l6g0","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/nonzeroBitCount"],"anchor":"Instance-Properties","generated":true,"title":"Instance Properties"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/addingReportingOverflow(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/dividedReportingOverflow(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/dividingFullWidth(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/multipliedFullWidth(by:)-1uech","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/multipliedReportingOverflow(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/remainderReportingOverflow(dividingBy:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/subtractingReportingOverflow(_:)"],"title":"Instance Methods","generated":true,"anchor":"Instance-Methods"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/bitWidth-swift.type.property","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/max","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/min"],"anchor":"Type-Properties","generated":true,"title":"Type Properties"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/random(in:)-3uaq4","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/random(in:)-467fr","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/random(in:using:)-33n1n","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/random(in:using:)-4byak"],"title":"Type Methods","generated":true,"anchor":"Type-Methods"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"kind":"symbol","variants":[{"paths":["\/documentation\/compute\/fixedwidthinteger"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"An integer type that uses a fixed size for every instance."}],"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"relationshipsSections":[{"kind":"relationships","title":"Inherits From","type":"inheritsFrom","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AdditiveArithmetic","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable"]},{"title":"Conforming Types","kind":"relationships","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt128","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8"],"type":"conformingTypes"}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FixedWidthInteger"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"BinaryInteger","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","preciseIdentifier":"s:Sz"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"LosslessStringConvertible","preciseIdentifier":"s:s25LosslessStringConvertibleP","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sj9MagnitudeQa","text":"Magnitude","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric\/Magnitude-swift.associatedtype"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:s17FixedWidthIntegerP","text":"FixedWidthInteger","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric\/Magnitude-swift.associatedtype","preciseIdentifier":"s:Sj9MagnitudeQa","text":"Magnitude","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:SU","kind":"typeIdentifier","text":"UnsignedInteger","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsignedInteger"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Stride","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable\/Stride","preciseIdentifier":"s:Sx6StrideQa"},{"kind":"text","text":" : "},{"text":"FixedWidthInteger","kind":"typeIdentifier","preciseIdentifier":"s:s17FixedWidthIntegerP","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable\/Stride","preciseIdentifier":"s:Sx6StrideQa","kind":"typeIdentifier","text":"Stride"},{"text":" : ","kind":"text"},{"text":"SignedInteger","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedInteger","preciseIdentifier":"s:SZ","kind":"typeIdentifier"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"FixedWidthInteger","type":"codeVoice"},{"type":"text","text":" protocol adds binary bitwise operations, bit"},{"text":" ","type":"text"},{"text":"shifts, and overflow handling to the operations supported by the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"BinaryInteger"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"FixedWidthInteger"},{"type":"text","text":" protocol as a constraint or extension point"},{"type":"text","text":" "},{"type":"text","text":"when writing operations that depend on bit shifting, performing bitwise"},{"text":" ","type":"text"},{"type":"text","text":"operations, catching overflows, or having access to the maximum or minimum"},{"text":" ","type":"text"},{"text":"representable value of a type. For example, the following code provides a","type":"text"},{"text":" ","type":"text"},{"code":"binaryString","type":"codeVoice"},{"text":" property on every fixed-width integer that represents the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"number’s binary representation, split into 8-bit chunks."}]},{"type":"codeListing","code":["extension FixedWidthInteger {","    var binaryString: String {","        var result: [String] = []","        for i in 0..<(Self.bitWidth \/ 8) {","            let byte = UInt8(truncatingIfNeeded: self >> (i * 8))","            let byteString = String(byte, radix: 2)","            let padding = String(repeating: \"0\",","                                 count: 8 - byteString.count)","            result.append(padding + byteString)","        }","        return \"0b\" + result.reversed().joined(separator: \"_\")","    }","}","","print(Int16.max.binaryString)","\/\/ Prints \"0b01111111_11111111\"","print((101 as UInt8).binaryString)","\/\/ Prints \"0b01100101\""],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"binaryString"},{"type":"text","text":" implementation uses the static "},{"type":"codeVoice","code":"bitWidth"},{"text":" property and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the right shift operator ("},{"code":">>","type":"codeVoice"},{"type":"text","text":"), both of which are available to any type"},{"text":" ","type":"text"},{"type":"text","text":"that conforms to the "},{"type":"codeVoice","code":"FixedWidthInteger"},{"text":" protocol.","type":"text"}]},{"inlineContent":[{"text":"The next example declares a generic ","type":"text"},{"code":"squared","type":"codeVoice"},{"text":" function, which accepts an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"instance "},{"type":"codeVoice","code":"x"},{"text":" of any fixed-width integer type. The function uses the","type":"text"},{"type":"text","text":" "},{"code":"multipliedReportingOverflow(by:)","type":"codeVoice"},{"text":" method to multiply ","type":"text"},{"code":"x","type":"codeVoice"},{"text":" by itself and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"check whether the result is too large to represent in the same type."}],"type":"paragraph"},{"syntax":null,"code":["func squared<T: FixedWidthInteger>(_ x: T) -> T? {","    let (result, overflow) = x.multipliedReportingOverflow(by: x)","    if overflow {","        return nil","    }","    return result","}","","let (x, y): (Int8, Int8) = (9, 123)","print(squared(x))","\/\/ Prints \"Optional(81)\"","print(squared(y))","\/\/ Prints \"nil\""],"type":"codeListing"},{"level":1,"text":"Conforming to the FixedWidthInteger Protocol","anchor":"Conforming-to-the-FixedWidthInteger-Protocol","type":"heading"},{"inlineContent":[{"text":"To make your own custom type conform to the ","type":"text"},{"type":"codeVoice","code":"FixedWidthInteger"},{"text":" protocol,","type":"text"},{"text":" ","type":"text"},{"text":"declare the required initializers, properties, and methods. The required","type":"text"},{"text":" ","type":"text"},{"text":"methods that are suffixed with ","type":"text"},{"type":"codeVoice","code":"ReportingOverflow"},{"text":" serve as the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"customization points for arithmetic operations. When you provide just those"},{"type":"text","text":" "},{"text":"methods, the standard library provides default implementations for all","type":"text"},{"type":"text","text":" "},{"text":"other arithmetic methods and operators.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","interfaceLanguage":"swift"},"metadata":{"role":"symbol","roleHeading":"Protocol","title":"FixedWidthInteger","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"FixedWidthInteger","kind":"identifier"}],"symbolKind":"protocol","navigatorTitle":[{"text":"FixedWidthInteger","kind":"identifier"}],"modules":[{"name":"Compute"}],"externalID":"s:s17FixedWidthIntegerP"},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable":{"url":"\/documentation\/compute\/comparable","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared using the relational operators ","type":"text"},{"code":"<","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Comparable"}],"title":"Comparable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Comparable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","title":"UInt32","abstract":[{"type":"text","text":"A 32-bit unsigned integer value"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"UInt32","kind":"identifier"}],"url":"\/documentation\/compute\/uint32","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt32","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible":{"url":"\/documentation\/compute\/customstringconvertible","navigatorTitle":[{"kind":"identifier","text":"CustomStringConvertible"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomStringConvertible","kind":"identifier"}],"abstract":[{"text":"A type with a customized textual representation.","type":"text"}],"type":"topic","title":"CustomStringConvertible","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/random(in:using:)-33n1n":{"type":"topic","title":"random(in:using:)","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"random"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"in"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sn","text":"Range"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">, "},{"text":"using","kind":"externalParam"},{"kind":"text","text":": "},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"url":"\/documentation\/compute\/fixedwidthinteger\/random(in:using:)-33n1n","abstract":[{"text":"Returns a random value within the specified range, using the given","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"generator as a source for randomness."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/random(in:using:)-33n1n"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int128":{"url":"\/documentation\/compute\/int128","abstract":[{"type":"text","text":"A 128-bit signed integer type."}],"title":"Int128","role":"symbol","navigatorTitle":[{"text":"Int128","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int128"}],"kind":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/multipliedReportingOverflow(by:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"multipliedReportingOverflow"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"by"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") -> (partialValue","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":", overflow","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Returns the product of this value and the given value, along with a"},{"text":" ","type":"text"},{"text":"Boolean value indicating whether overflow occurred in the operation.","type":"text"}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/multipliedReportingOverflow(by:)","title":"multipliedReportingOverflow(by:)","url":"\/documentation\/compute\/fixedwidthinteger\/multipliedreportingoverflow(by:)","kind":"symbol","required":true},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByIntegerLiteral":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","url":"\/documentation\/compute\/expressiblebyintegerliteral","title":"ExpressibleByIntegerLiteral","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"navigatorTitle":[{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"abstract":[{"text":"A type that can be initialized with an integer literal.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Hashable"}],"title":"Hashable","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that can be hashed into a "},{"type":"codeVoice","code":"Hasher"},{"type":"text","text":" to produce an integer hash value."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","url":"\/documentation\/compute\/hashable","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/random(in:)-467fr":{"kind":"symbol","url":"\/documentation\/compute\/fixedwidthinteger\/random(in:)-467fr","title":"random(in:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"random","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"in"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SN","kind":"typeIdentifier","text":"ClosedRange"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Self"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/random(in:)-467fr","role":"symbol","abstract":[{"type":"text","text":"Returns a random value within the specified range."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Numeric":{"abstract":[{"type":"text","text":"A type with values that support multiplication."}],"kind":"symbol","url":"\/documentation\/compute\/numeric","navigatorTitle":[{"text":"Numeric","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Numeric"}],"title":"Numeric"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/addingReportingOverflow(_:)":{"kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"addingReportingOverflow","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"text":") -> (partialValue","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":", overflow","kind":"text"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":")"}],"role":"symbol","required":true,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/addingReportingOverflow(_:)","title":"addingReportingOverflow(_:)","abstract":[{"text":"Returns the sum of this value and the given value, along with a Boolean","type":"text"},{"text":" ","type":"text"},{"text":"value indicating whether overflow occurred in the operation.","type":"text"}],"url":"\/documentation\/compute\/fixedwidthinteger\/addingreportingoverflow(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/random(in:using:)-4byak":{"title":"random(in:using:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/random(in:using:)-4byak","type":"topic","abstract":[{"type":"text","text":"Returns a random value within the specified range, using the given"},{"type":"text","text":" "},{"text":"generator as a source for randomness.","type":"text"}],"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/fixedwidthinteger\/random(in:using:)-4byak","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"random","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"in","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ClosedRange","preciseIdentifier":"s:SN"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"using"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Strideable":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/strideable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Strideable"}],"navigatorTitle":[{"text":"Strideable","kind":"identifier"}],"abstract":[{"type":"text","text":"A type representing continuous, one-dimensional values that can be offset"},{"type":"text","text":" "},{"type":"text","text":"and measured."}],"title":"Strideable"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/&+=(_:_:)":{"title":"&+=(_:_:)","url":"\/documentation\/compute\/fixedwidthinteger\/&+=(_:_:)","role":"symbol","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/&+=(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"&+=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Adds two values and stores the result in the left-hand-side variable,"},{"text":" ","type":"text"},{"text":"wrapping any overflow.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/SignedInteger":{"abstract":[{"type":"text","text":"An integer type that can represent both positive and negative values."}],"kind":"symbol","url":"\/documentation\/compute\/signedinteger","navigatorTitle":[{"kind":"identifier","text":"SignedInteger"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedInteger","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SignedInteger","kind":"identifier"}],"title":"SignedInteger"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/remainderReportingOverflow(dividingBy:)":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"remainderReportingOverflow"},{"text":"(","kind":"text"},{"text":"dividingBy","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> (partialValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":", overflow","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"abstract":[{"text":"Returns the remainder after dividing this value by the given value, along","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with a Boolean value indicating whether overflow occurred during division."}],"required":true,"url":"\/documentation\/compute\/fixedwidthinteger\/remainderreportingoverflow(dividingby:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/remainderReportingOverflow(dividingBy:)","title":"remainderReportingOverflow(dividingBy:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int16":{"title":"Int16","abstract":[{"text":"A 16-bit signed integer value","type":"text"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int16","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int16"}],"type":"topic","url":"\/documentation\/compute\/int16","navigatorTitle":[{"kind":"identifier","text":"Int16"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/&__(_:_:)-4j1s7":{"defaultImplementations":2,"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/&__(_:_:)-4j1s7","abstract":[{"type":"text","text":"Returns the result of shifting a value’s binary representation the"},{"text":" ","type":"text"},{"type":"text","text":"specified number of digits to the left, masking the shift amount to the"},{"type":"text","text":" "},{"type":"text","text":"type’s bit width."}],"role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"&<<","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"title":"&<<(_:_:)","kind":"symbol","url":"\/documentation\/compute\/fixedwidthinteger\/&__(_:_:)-4j1s7","required":true},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/init(_:radix:)":{"fragments":[{"kind":"identifier","text":"init"},{"text":"?<","kind":"text"},{"kind":"genericParameter","text":"S"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"kind":"externalParam","text":"radix"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":")","kind":"text"}],"role":"symbol","kind":"symbol","abstract":[{"text":"Creates a new integer value from the given string and radix.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/init(_:radix:)","title":"init(_:radix:)","type":"topic","url":"\/documentation\/compute\/fixedwidthinteger\/init(_:radix:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/min":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/min","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"min","kind":"identifier"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"The minimum representable integer in this type."}],"role":"symbol","required":true,"title":"min","kind":"symbol","url":"\/documentation\/compute\/fixedwidthinteger\/min"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/littleEndian-4l6g0":{"required":true,"kind":"symbol","abstract":[{"text":"The little-endian representation of this integer.","type":"text"}],"url":"\/documentation\/compute\/fixedwidthinteger\/littleendian-4l6g0","role":"symbol","defaultImplementations":1,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/littleEndian-4l6g0","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"littleEndian","kind":"identifier"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"}],"type":"topic","title":"littleEndian"},"doc://com.swallow.documentation.Compute/documentation/Compute/LosslessStringConvertible":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LosslessStringConvertible","kind":"identifier"}],"kind":"symbol","title":"LosslessStringConvertible","abstract":[{"type":"text","text":"A type that can be represented as a string in a lossless, unambiguous way."}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"LosslessStringConvertible","kind":"identifier"}],"url":"\/documentation\/compute\/losslessstringconvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt128":{"url":"\/documentation\/compute\/uint128","type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt128","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UInt128"}],"title":"UInt128","abstract":[{"text":"A 128-bit unsigned integer type.","type":"text"}],"navigatorTitle":[{"text":"UInt128","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/init(littleEndian:)-3u3op":{"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/init(littleEndian:)-3u3op","type":"topic","url":"\/documentation\/compute\/fixedwidthinteger\/init(littleendian:)-3u3op","title":"init(littleEndian:)","required":true,"abstract":[{"text":"Creates an integer from its little-endian representation, changing the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"byte order if necessary."}],"defaultImplementations":1,"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"littleEndian"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":")","kind":"text"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/bitWidth-swift.type.property":{"type":"topic","kind":"symbol","required":true,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/bitWidth-swift.type.property","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"bitWidth"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"defaultImplementations":1,"title":"bitWidth","abstract":[{"type":"text","text":"The number of bits used for the underlying binary representation of"},{"type":"text","text":" "},{"text":"values of this type.","type":"text"}],"url":"\/documentation\/compute\/fixedwidthinteger\/bitwidth-swift.type.property","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger":{"title":"FixedWidthInteger","kind":"symbol","navigatorTitle":[{"text":"FixedWidthInteger","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"FixedWidthInteger","kind":"identifier"}],"abstract":[{"text":"An integer type that uses a fixed size for every instance.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/fixedwidthinteger"},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"type":"topic","title":"Equatable","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","role":"symbol","url":"\/documentation\/compute\/equatable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/&-=(_:_:)":{"abstract":[{"type":"text","text":"Subtracts the second value from the first and stores the difference in the"},{"text":" ","type":"text"},{"text":"left-hand-side variable, wrapping any overflow.","type":"text"}],"url":"\/documentation\/compute\/fixedwidthinteger\/&-=(_:_:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"&-="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":")"}],"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/&-=(_:_:)","title":"&-=(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/subtractingReportingOverflow(_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/subtractingReportingOverflow(_:)","role":"symbol","kind":"symbol","url":"\/documentation\/compute\/fixedwidthinteger\/subtractingreportingoverflow(_:)","type":"topic","abstract":[{"text":"Returns the difference obtained by subtracting the given value from this","type":"text"},{"text":" ","type":"text"},{"text":"value, along with a Boolean value indicating whether overflow occurred in","type":"text"},{"text":" ","type":"text"},{"text":"the operation.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"subtractingReportingOverflow","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> (partialValue","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":", overflow","kind":"text"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":")"}],"title":"subtractingReportingOverflow(_:)","required":true},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt16":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UInt16","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UInt16"}],"title":"UInt16","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt16","url":"\/documentation\/compute\/uint16","kind":"symbol","role":"symbol","abstract":[{"text":"A 16-bit unsigned integer value","type":"text"},{"text":" ","type":"text"},{"text":"type.","type":"text"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt":{"kind":"symbol","navigatorTitle":[{"text":"UInt","kind":"identifier"}],"type":"topic","title":"UInt","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt","abstract":[{"text":"An unsigned integer value type.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt","kind":"identifier"}],"url":"\/documentation\/compute\/uint"},"doc://com.swallow.documentation.Compute/documentation/Compute/Strideable/Stride":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/strideable\/stride","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable\/Stride","required":true,"fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Stride"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SL","text":"Comparable"},{"text":", ","kind":"text"},{"text":"SignedNumeric","kind":"typeIdentifier","preciseIdentifier":"s:s13SignedNumericP"}],"abstract":[{"type":"text","text":"A type that represents the distance between two values."}],"title":"Stride"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int32","kind":"identifier"}],"abstract":[{"text":"A 32-bit signed integer value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type."}],"kind":"symbol","navigatorTitle":[{"text":"Int32","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/int32","title":"Int32","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BinaryInteger"}],"navigatorTitle":[{"kind":"identifier","text":"BinaryInteger"}],"url":"\/documentation\/compute\/binaryinteger","type":"topic","abstract":[{"type":"text","text":"An integer type with a binary representation."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","title":"BinaryInteger","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/&*(_:_:)-6ml69":{"type":"topic","abstract":[{"text":"Returns the product of the two given values, wrapping the result in case","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of any overflow."}],"role":"symbol","required":true,"kind":"symbol","defaultImplementations":1,"url":"\/documentation\/compute\/fixedwidthinteger\/&*(_:_:)-6ml69","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/&*(_:_:)-6ml69","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"&*"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"title":"&*(_:_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/max":{"title":"max","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/max","type":"topic","abstract":[{"type":"text","text":"The maximum representable integer in this type."}],"required":true,"kind":"symbol","role":"symbol","url":"\/documentation\/compute\/fixedwidthinteger\/max","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"max"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/byteSwapped":{"title":"byteSwapped","type":"topic","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"byteSwapped","kind":"identifier"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/byteSwapped","url":"\/documentation\/compute\/fixedwidthinteger\/byteswapped","abstract":[{"type":"text","text":"A representation of this integer with the byte order swapped."}],"kind":"symbol","required":true,"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Numeric/Magnitude-swift.associatedtype":{"url":"\/documentation\/compute\/numeric\/magnitude-swift.associatedtype","kind":"symbol","abstract":[{"type":"text","text":"A type that can represent the absolute value of any possible value of the"},{"text":" ","type":"text"},{"type":"text","text":"conforming type."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric\/Magnitude-swift.associatedtype","type":"topic","title":"Magnitude","required":true,"role":"symbol","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Magnitude"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:SL","text":"Comparable","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Numeric","preciseIdentifier":"s:Sj","kind":"typeIdentifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/&-(_:_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/&-(_:_:)","type":"topic","url":"\/documentation\/compute\/fixedwidthinteger\/&-(_:_:)","role":"symbol","kind":"symbol","title":"&-(_:_:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"&-","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"type":"text","text":"Returns the difference of the two given values, wrapping the result in"},{"text":" ","type":"text"},{"text":"case of any overflow.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/bigEndian-6642a":{"abstract":[{"text":"The big-endian representation of this integer.","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"bigEndian"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"kind":"symbol","title":"bigEndian","url":"\/documentation\/compute\/fixedwidthinteger\/bigendian-6642a","defaultImplementations":1,"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/bigEndian-6642a","required":true,"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/init(bigEndian:)-ynpy":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/init(bigEndian:)-ynpy","abstract":[{"text":"Creates an integer from its big-endian representation, changing the byte","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"order if necessary."}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"bigEndian"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":")","kind":"text"}],"defaultImplementations":1,"kind":"symbol","required":true,"type":"topic","url":"\/documentation\/compute\/fixedwidthinteger\/init(bigendian:)-ynpy","role":"symbol","title":"init(bigEndian:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/random(in:)-3uaq4":{"url":"\/documentation\/compute\/fixedwidthinteger\/random(in:)-3uaq4","type":"topic","abstract":[{"text":"Returns a random value within the specified range.","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/random(in:)-3uaq4","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"random"},{"text":"(","kind":"text"},{"text":"in","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sn","text":"Range"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"text":"Self","kind":"typeIdentifier"}],"title":"random(in:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/&__=(_:_:)-q186":{"role":"symbol","required":true,"url":"\/documentation\/compute\/fixedwidthinteger\/&__=(_:_:)-q186","abstract":[{"type":"text","text":"Returns the result of shifting a value’s binary representation the"},{"type":"text","text":" "},{"text":"specified number of digits to the left, masking the shift amount to the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type’s bit width, and stores the result in the left-hand-side variable."}],"title":"&<<=(_:_:)","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"&<<="},{"kind":"text","text":" "},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":")"}],"defaultImplementations":1,"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/&__=(_:_:)-q186"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/&+(_:_:)":{"abstract":[{"text":"Returns the sum of the two given values, wrapping the result in case of","type":"text"},{"text":" ","type":"text"},{"text":"any overflow.","type":"text"}],"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"&+","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"url":"\/documentation\/compute\/fixedwidthinteger\/&+(_:_:)","title":"&+(_:_:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/&+(_:_:)","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/nonzeroBitCount":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/nonzeroBitCount","type":"topic","title":"nonzeroBitCount","role":"symbol","url":"\/documentation\/compute\/fixedwidthinteger\/nonzerobitcount","abstract":[{"type":"text","text":"The number of bits equal to 1 in this value’s binary representation."}],"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"nonzeroBitCount"},{"kind":"text","text":": "},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"}],"required":true,"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/leadingZeroBitCount":{"title":"leadingZeroBitCount","abstract":[{"type":"text","text":"The number of leading zeros in this value’s binary representation."}],"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"leadingZeroBitCount","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/leadingZeroBitCount","type":"topic","url":"\/documentation\/compute\/fixedwidthinteger\/leadingzerobitcount","required":true},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Int8"}],"url":"\/documentation\/compute\/int8","title":"Int8","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Int8"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8","abstract":[{"text":"An 8-bit signed integer value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt64":{"navigatorTitle":[{"text":"UInt64","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","title":"UInt64","abstract":[{"text":"A 64-bit unsigned integer value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type."}],"url":"\/documentation\/compute\/uint64","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt64","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/&__(_:_:)-1sn91":{"title":"&>>(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/&__(_:_:)-1sn91","url":"\/documentation\/compute\/fixedwidthinteger\/&__(_:_:)-1sn91","abstract":[{"type":"text","text":"Returns the result of shifting a value’s binary representation the"},{"text":" ","type":"text"},{"text":"specified number of digits to the right, masking the shift amount to the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type’s bit width."}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"&>>","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"required":true,"type":"topic","role":"symbol","defaultImplementations":2,"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/&__=(_:_:)-2ffyd":{"defaultImplementations":1,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/&__=(_:_:)-2ffyd","type":"topic","url":"\/documentation\/compute\/fixedwidthinteger\/&__=(_:_:)-2ffyd","kind":"symbol","abstract":[{"text":"Calculates the result of shifting a value’s binary representation the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specified number of digits to the right, masking the shift amount to the"},{"text":" ","type":"text"},{"text":"type’s bit width, and stores the result in the left-hand-side variable.","type":"text"}],"required":true,"title":"&>>=(_:_:)","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"&>>="},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":")"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UInt8","kind":"identifier"}],"navigatorTitle":[{"text":"UInt8","kind":"identifier"}],"title":"UInt8","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8","url":"\/documentation\/compute\/uint8","kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"An 8-bit unsigned integer value"},{"text":" ","type":"text"},{"text":"type.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/&*=(_:_:)":{"kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"&*=","kind":"identifier"},{"kind":"text","text":" "},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Multiplies two values and stores the result in the left-hand-side","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"variable, wrapping any overflow."}],"url":"\/documentation\/compute\/fixedwidthinteger\/&*=(_:_:)","title":"&*=(_:_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/&*=(_:_:)","type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64":{"url":"\/documentation\/compute\/int64","title":"Int64","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int64"}],"abstract":[{"type":"text","text":"A 64-bit signed integer value"},{"text":" ","type":"text"},{"text":"type.","type":"text"}],"navigatorTitle":[{"text":"Int64","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsignedInteger":{"url":"\/documentation\/compute\/unsignedinteger","abstract":[{"type":"text","text":"An integer type that can represent only nonnegative values."}],"kind":"symbol","navigatorTitle":[{"text":"UnsignedInteger","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsignedInteger","title":"UnsignedInteger","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsignedInteger"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/dividedReportingOverflow(by:)":{"abstract":[{"type":"text","text":"Returns the quotient obtained by dividing this value by the given value,"},{"text":" ","type":"text"},{"text":"along with a Boolean value indicating whether overflow occurred in the","type":"text"},{"text":" ","type":"text"},{"text":"operation.","type":"text"}],"url":"\/documentation\/compute\/fixedwidthinteger\/dividedreportingoverflow(by:)","required":true,"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"dividedReportingOverflow","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":") -> (partialValue"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", overflow","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":")","kind":"text"}],"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/dividedReportingOverflow(by:)","title":"dividedReportingOverflow(by:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/dividingFullWidth(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dividingFullWidth"},{"kind":"text","text":"((high"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", low","kind":"text"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Sj9MagnitudeQa","kind":"typeIdentifier","text":"Magnitude"},{"kind":"text","text":")) -> (quotient"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":", remainder","kind":"text"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/compute\/fixedwidthinteger\/dividingfullwidth(_:)","title":"dividingFullWidth(_:)","abstract":[{"text":"Returns a tuple containing the quotient and remainder obtained by dividing","type":"text"},{"text":" ","type":"text"},{"text":"the given value by this value.","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/dividingFullWidth(_:)","kind":"symbol","type":"topic","required":true},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger/multipliedFullWidth(by:)-1uech":{"abstract":[{"type":"text","text":"Returns a tuple containing the high and low parts of the result of"},{"type":"text","text":" "},{"text":"multiplying this value by the given value.","type":"text"}],"url":"\/documentation\/compute\/fixedwidthinteger\/multipliedfullwidth(by:)-1uech","title":"multipliedFullWidth(by:)","required":true,"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger\/multipliedFullWidth(by:)-1uech","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"multipliedFullWidth","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"by"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") -> (high","kind":"text"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":", low","kind":"text"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Magnitude","kind":"typeIdentifier","preciseIdentifier":"s:Sj9MagnitudeQa"},{"kind":"text","text":")"}],"defaultImplementations":1,"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/AdditiveArithmetic":{"type":"topic","title":"AdditiveArithmetic","abstract":[{"text":"A type with values that support addition and subtraction.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AdditiveArithmetic"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AdditiveArithmetic","url":"\/documentation\/compute\/additivearithmetic","role":"symbol","navigatorTitle":[{"text":"AdditiveArithmetic","kind":"identifier"}]}}}