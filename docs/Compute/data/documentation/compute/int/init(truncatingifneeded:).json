{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/int\/init(truncatingifneeded:)"]}],"metadata":{"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"truncatingIfNeeded"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"roleHeading":"Initializer","externalID":"s:s17FixedWidthIntegerPsE18truncatingIfNeededxqd___tcSzRd__lufc::SYNTHESIZED::s:Si","symbolKind":"init","modules":[{"name":"Compute","relatedModules":["Swift"]}],"title":"init(truncatingIfNeeded:)","extendedModule":"Swift"},"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(truncatingIfNeeded:)","interfaceLanguage":"swift"},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"init","kind":"keyword"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"truncatingIfNeeded","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"source"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"BinaryInteger","kind":"typeIdentifier","preciseIdentifier":"s:Sz","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger"}],"languages":["swift"],"platforms":["macOS"]}]},{"parameters":[{"content":[{"inlineContent":[{"text":"An integer to convert to this type.","type":"text"}],"type":"paragraph"}],"name":"source"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"inlineContent":[{"text":"When the bit width of ","type":"text"},{"type":"codeVoice","code":"T"},{"type":"text","text":" (the type of "},{"code":"source","type":"codeVoice"},{"text":") is equal to or greater","type":"text"},{"type":"text","text":" "},{"type":"text","text":"than this type’s bit width, the result is the truncated"},{"text":" ","type":"text"},{"type":"text","text":"least-significant bits of "},{"code":"source","type":"codeVoice"},{"type":"text","text":". For example, when converting a"},{"type":"text","text":" "},{"type":"text","text":"16-bit value to an 8-bit type, only the lower 8 bits of "},{"code":"source","type":"codeVoice"},{"type":"text","text":" are"},{"type":"text","text":" "},{"text":"used.","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["let p: Int16 = -500","\/\/ 'p' has a binary representation of 11111110_00001100","let q = Int8(truncatingIfNeeded: p)","\/\/ q == 12","\/\/ 'q' has a binary representation of 00001100"],"type":"codeListing"},{"inlineContent":[{"text":"When the bit width of ","type":"text"},{"code":"T","type":"codeVoice"},{"type":"text","text":" is less than this type’s bit width, the result"},{"text":" ","type":"text"},{"text":"is ","type":"text"},{"inlineContent":[{"type":"text","text":"sign-extended"}],"type":"emphasis"},{"text":" to fill the remaining bits. That is, if ","type":"text"},{"type":"codeVoice","code":"source"},{"text":" is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"negative, the result is padded with ones; otherwise, the result is"},{"type":"text","text":" "},{"type":"text","text":"padded with zeros."}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let u: Int8 = 21","\/\/ 'u' has a binary representation of 00010101","let v = Int16(truncatingIfNeeded: u)","\/\/ v == 21","\/\/ 'v' has a binary representation of 00000000_00010101","","let w: Int8 = -21","\/\/ 'w' has a binary representation of 11101011","let x = Int16(truncatingIfNeeded: w)","\/\/ x == -21","\/\/ 'x' has a binary representation of 11111111_11101011","let y = UInt16(truncatingIfNeeded: w)","\/\/ y == 65515","\/\/ 'y' has a binary representation of 11111111_11101011"]}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/FixedWidthInteger-Implementations"]]},"abstract":[{"type":"text","text":"Creates a new instance from the bit pattern of the given instance by"},{"type":"text","text":" "},{"text":"truncating or sign-extending if needed to fit this type.","type":"text"}],"sections":[],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/init(truncatingIfNeeded:)":{"kind":"symbol","abstract":[{"text":"Creates a new instance from the bit pattern of the given instance by","type":"text"},{"type":"text","text":" "},{"text":"truncating or sign-extending if needed to fit this type.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(truncatingIfNeeded:)","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"truncatingIfNeeded","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":")"}],"title":"init(truncatingIfNeeded:)","type":"topic","url":"\/documentation\/compute\/int\/init(truncatingifneeded:)"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/FixedWidthInteger-Implementations":{"url":"\/documentation\/compute\/int\/fixedwidthinteger-implementations","type":"topic","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/FixedWidthInteger-Implementations","title":"FixedWidthInteger Implementations","kind":"article","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BinaryInteger"}],"navigatorTitle":[{"kind":"identifier","text":"BinaryInteger"}],"url":"\/documentation\/compute\/binaryinteger","type":"topic","abstract":[{"type":"text","text":"An integer type with a binary representation."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","title":"BinaryInteger","kind":"symbol","role":"symbol"}}}