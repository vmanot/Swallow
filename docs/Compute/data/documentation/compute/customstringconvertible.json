{"abstract":[{"text":"A type with a customized textual representation.","type":"text"}],"metadata":{"modules":[{"name":"Compute"}],"symbolKind":"protocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"CustomStringConvertible"}],"roleHeading":"Protocol","navigatorTitle":[{"kind":"identifier","text":"CustomStringConvertible"}],"title":"CustomStringConvertible","role":"symbol","externalID":"s:s23CustomStringConvertibleP"},"relationshipsSections":[{"type":"inheritedBy","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CodingKey","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD-swift.protocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsignedInteger"],"kind":"relationships","title":"Inherited By"},{"title":"Conforming Types","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyHashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalMap","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BranchingArray","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BranchingDictionary","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Character","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ContiguousArray","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultStringInterpolation","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary\/Keys-swift.struct","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary\/Values-swift.struct","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DiscontiguousSlice","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DiscontiguousSlice\/Index","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Duration","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyValuePairs","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LinkedList","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MergeSplitSequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Mirror","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeSet","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeSet\/Ranges-swift.struct","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveAdjacencyMapElement","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD2","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD3","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD4","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD64","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDMask","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SequenceParser\/AttributedNode","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StaticString","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/UTF16View","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/UTF8View","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/UnicodeScalarView","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeChains","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt128","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unicode\/Scalar"],"type":"conformingTypes","kind":"relationships"}],"variants":[{"paths":["\/documentation\/compute\/customstringconvertible"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","topicSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible\/description-3eos3"],"generated":true,"title":"Instance Properties","anchor":"Instance-Properties"}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomStringConvertible"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Types that conform to the "},{"type":"codeVoice","code":"CustomStringConvertible"},{"text":" protocol can provide","type":"text"},{"type":"text","text":" "},{"text":"their own representation to be used when converting an instance to a","type":"text"},{"type":"text","text":" "},{"text":"string. The ","type":"text"},{"type":"codeVoice","code":"String(describing:)"},{"type":"text","text":" initializer is the preferred way to"},{"text":" ","type":"text"},{"text":"convert an instance of ","type":"text"},{"inlineContent":[{"text":"any","type":"text"}],"type":"emphasis"},{"text":" type to a string. If the passed instance","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"conforms to "},{"code":"CustomStringConvertible","type":"codeVoice"},{"type":"text","text":", the "},{"type":"codeVoice","code":"String(describing:)"},{"text":" ","type":"text"},{"text":"initializer and the ","type":"text"},{"code":"print(_:)","type":"codeVoice"},{"text":" function use the instance’s custom","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"description"},{"type":"text","text":" property."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Accessing a type’s "},{"code":"description","type":"codeVoice"},{"type":"text","text":" property directly or using"},{"text":" ","type":"text"},{"code":"CustomStringConvertible","type":"codeVoice"},{"type":"text","text":" as a generic constraint is discouraged."}]},{"level":1,"type":"heading","text":"Conforming to the CustomStringConvertible Protocol","anchor":"Conforming-to-the-CustomStringConvertible-Protocol"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Add "},{"code":"CustomStringConvertible","type":"codeVoice"},{"text":" conformance to your custom types by defining","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a "},{"code":"description","type":"codeVoice"},{"text":" property.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, this custom "},{"type":"codeVoice","code":"Point"},{"text":" struct uses the default representation","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"supplied by the standard library:"}]},{"syntax":null,"code":["struct Point {","    let x: Int, y: Int","}","","let p = Point(x: 21, y: 30)","print(p)","\/\/ Prints \"Point(x: 21, y: 30)\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"After implementing the "},{"code":"description","type":"codeVoice"},{"text":" property and declaring","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CustomStringConvertible"},{"text":" conformance, the ","type":"text"},{"type":"codeVoice","code":"Point"},{"text":" type provides its own","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"custom representation."}]},{"syntax":null,"type":"codeListing","code":["extension Point: CustomStringConvertible {","    var description: String {","        return \"(\\(x), \\(y))\"","    }","}","","print(p)","\/\/ Prints \"(21, 30)\""]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible"},"sections":[],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/UInt":{"kind":"symbol","navigatorTitle":[{"text":"UInt","kind":"identifier"}],"type":"topic","title":"UInt","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt","abstract":[{"text":"An unsigned integer value type.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt","kind":"identifier"}],"url":"\/documentation\/compute\/uint"},"doc://com.swallow.documentation.Compute/documentation/Compute/ClosedRange":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ClosedRange","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ClosedRange","navigatorTitle":[{"text":"ClosedRange","kind":"identifier"}],"title":"ClosedRange","url":"\/documentation\/compute\/closedrange","abstract":[{"text":"An interval from a lower bound up to, and including, an upper bound.","type":"text"}],"role":"symbol","type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD32":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SIMD32","kind":"identifier"}],"title":"SIMD32","navigatorTitle":[{"kind":"identifier","text":"SIMD32"}],"type":"topic","abstract":[{"type":"text","text":"A vector of 32 scalar values."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD32","url":"\/documentation\/compute\/simd32","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","title":"ArraySlice","url":"\/documentation\/compute\/arrayslice","kind":"symbol","abstract":[{"type":"text","text":"A slice of an "},{"type":"codeVoice","code":"Array"},{"text":", ","type":"text"},{"type":"codeVoice","code":"ContiguousArray"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"ArraySlice"},{"type":"text","text":" instance."}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArraySlice"}],"navigatorTitle":[{"kind":"identifier","text":"ArraySlice"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/String":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"String"}],"title":"String","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"String","kind":"identifier"}],"abstract":[{"type":"text","text":"A Unicode string value that is a collection of characters."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/string"},"doc://com.swallow.documentation.Compute/documentation/Compute/Range":{"navigatorTitle":[{"kind":"identifier","text":"Range"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","url":"\/documentation\/compute\/range","title":"Range","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Range","kind":"identifier"}],"abstract":[{"type":"text","text":"A half-open interval from a lower bound up to, but not including, an upper"},{"text":" ","type":"text"},{"text":"bound.","type":"text"}],"type":"topic","role":"symbol","conformance":{"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Array":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Array","title":"Array","url":"\/documentation\/compute\/array","kind":"symbol","abstract":[{"text":"An ordered, random-access collection.","type":"text"}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Array","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Array"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/DefaultStringInterpolation":{"role":"symbol","type":"topic","title":"DefaultStringInterpolation","abstract":[{"type":"text","text":"Represents a string literal with interpolations while it is being built up."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DefaultStringInterpolation"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DefaultStringInterpolation","navigatorTitle":[{"text":"DefaultStringInterpolation","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/defaultstringinterpolation"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt16":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UInt16","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UInt16"}],"title":"UInt16","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt16","url":"\/documentation\/compute\/uint16","kind":"symbol","role":"symbol","abstract":[{"text":"A 16-bit unsigned integer value","type":"text"},{"text":" ","type":"text"},{"text":"type.","type":"text"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt128":{"url":"\/documentation\/compute\/uint128","type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt128","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UInt128"}],"title":"UInt128","abstract":[{"text":"A 128-bit unsigned integer type.","type":"text"}],"navigatorTitle":[{"text":"UInt128","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BinaryInteger"}],"navigatorTitle":[{"kind":"identifier","text":"BinaryInteger"}],"url":"\/documentation\/compute\/binaryinteger","type":"topic","abstract":[{"type":"text","text":"An integer type with a binary representation."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","title":"BinaryInteger","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/LinkedList":{"url":"\/documentation\/compute\/linkedlist","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"LinkedList","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]},"abstract":[],"kind":"symbol","navigatorTitle":[{"text":"LinkedList","kind":"identifier"}],"title":"LinkedList","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LinkedList","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/SequenceParser/AttributedNode":{"title":"SequenceParser.AttributedNode","abstract":[],"type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"S"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"NonDestroyingCollection"},{"type":"text","text":", "},{"type":"codeVoice","code":"S.Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":", "},{"code":"S.SubSequence","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"SequenceInitiableSequence","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"S.SubSequence"},{"text":" conforms to ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SequenceParser\/AttributedNode","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"AttributedNode","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"AttributedNode","kind":"identifier"}],"url":"\/documentation\/compute\/sequenceparser\/attributednode"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int64":{"url":"\/documentation\/compute\/int64","title":"Int64","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int64","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int64"}],"abstract":[{"type":"text","text":"A 64-bit signed integer value"},{"text":" ","type":"text"},{"text":"type.","type":"text"}],"navigatorTitle":[{"text":"Int64","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/String/UnicodeScalarView":{"url":"\/documentation\/compute\/string\/unicodescalarview","abstract":[{"text":"A view of a string’s contents as a collection of Unicode scalar values.","type":"text"}],"kind":"symbol","role":"symbol","title":"String.UnicodeScalarView","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnicodeScalarView"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"UnicodeScalarView"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/UnicodeScalarView"},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeSet":{"kind":"symbol","abstract":[{"text":"A set of values of any comparable type, represented by ranges.","type":"text"}],"role":"symbol","type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeSet","url":"\/documentation\/compute\/rangeset","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RangeSet"}],"title":"RangeSet","navigatorTitle":[{"text":"RangeSet","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD8":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD8","title":"SIMD8","abstract":[{"text":"A vector of eight scalar values.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"SIMD8","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/simd8","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SIMD8","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveArray":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RecursiveArray","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveArray","title":"RecursiveArray","abstract":[],"conformance":{"constraints":[{"type":"codeVoice","code":"Unit"},{"text":" conforms to ","type":"text"},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"navigatorTitle":[{"kind":"identifier","text":"RecursiveArray"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/recursivearray"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyHashable":{"role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyHashable","kind":"identifier"}],"abstract":[{"text":"A type-erased hashable value.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyHashable","navigatorTitle":[{"text":"AnyHashable","kind":"identifier"}],"url":"\/documentation\/compute\/anyhashable","title":"AnyHashable","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMDMask":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SIMDMask"}],"role":"symbol","title":"SIMDMask","abstract":[],"url":"\/documentation\/compute\/simdmask","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDMask","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SIMDMask"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int16":{"title":"Int16","abstract":[{"text":"A 16-bit signed integer value","type":"text"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int16","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int16"}],"type":"topic","url":"\/documentation\/compute\/int16","navigatorTitle":[{"kind":"identifier","text":"Int16"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger":{"title":"FixedWidthInteger","kind":"symbol","navigatorTitle":[{"text":"FixedWidthInteger","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"FixedWidthInteger","kind":"identifier"}],"abstract":[{"text":"An integer type that uses a fixed size for every instance.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/fixedwidthinteger"},"doc://com.swallow.documentation.Compute/documentation/Compute/Unicode/Scalar":{"title":"Unicode.Scalar","type":"topic","kind":"symbol","navigatorTitle":[{"text":"Scalar","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Scalar","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Unicode\/Scalar","abstract":[{"type":"text","text":"A Unicode scalar value."}],"role":"symbol","url":"\/documentation\/compute\/unicode\/scalar"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int32":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int32","kind":"identifier"}],"abstract":[{"text":"A 32-bit signed integer value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type."}],"kind":"symbol","navigatorTitle":[{"text":"Int32","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/int32","title":"Int32","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int32"},"doc://com.swallow.documentation.Compute/documentation/Compute/StaticString":{"url":"\/documentation\/compute\/staticstring","navigatorTitle":[{"kind":"identifier","text":"StaticString"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StaticString"}],"abstract":[{"type":"text","text":"A string type designed to represent text that is known at compile time."}],"type":"topic","title":"StaticString","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StaticString"},"doc://com.swallow.documentation.Compute/documentation/Compute/UnsignedInteger":{"url":"\/documentation\/compute\/unsignedinteger","abstract":[{"type":"text","text":"An integer type that can represent only nonnegative values."}],"kind":"symbol","navigatorTitle":[{"text":"UnsignedInteger","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UnsignedInteger","title":"UnsignedInteger","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsignedInteger"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible/description-3eos3":{"title":"description","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible\/description-3eos3","role":"symbol","required":true,"type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"description","kind":"identifier"},{"kind":"text","text":": "},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A textual representation of this instance."}],"url":"\/documentation\/compute\/customstringconvertible\/description-3eos3","defaultImplementations":3},"doc://com.swallow.documentation.Compute/documentation/Compute/ReferenceTree":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ReferenceTree","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]},"title":"ReferenceTree","type":"topic","url":"\/documentation\/compute\/referencetree","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ReferenceTree","kind":"identifier"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"text":"ReferenceTree","kind":"identifier"}],"abstract":[{"text":"A simple reference-based tree data structure for Swift.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ContiguousArray":{"title":"ContiguousArray","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"ContiguousArray","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ContiguousArray","type":"topic","navigatorTitle":[{"text":"ContiguousArray","kind":"identifier"}],"abstract":[{"type":"text","text":"A contiguously stored array."}],"conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Escapable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/contiguousarray"},"doc://com.swallow.documentation.Compute/documentation/Compute/Substring":{"navigatorTitle":[{"kind":"identifier","text":"Substring"}],"url":"\/documentation\/compute\/substring","title":"Substring","abstract":[{"text":"A slice of a string.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Substring","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Substring","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int8":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Int8"}],"url":"\/documentation\/compute\/int8","title":"Int8","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Int8"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int8","abstract":[{"text":"An 8-bit signed integer value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int128":{"url":"\/documentation\/compute\/int128","abstract":[{"type":"text","text":"A 128-bit signed integer type."}],"title":"Int128","role":"symbol","navigatorTitle":[{"text":"Int128","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int128","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Int128"}],"kind":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD4":{"role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SIMD4","kind":"identifier"}],"navigatorTitle":[{"text":"SIMD4","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD4","abstract":[{"type":"text","text":"A vector of four scalar values."}],"title":"SIMD4","url":"\/documentation\/compute\/simd4"},"doc://com.swallow.documentation.Compute/documentation/Compute/Duration":{"abstract":[{"type":"text","text":"A representation of high precision time."}],"type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Duration","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Duration"}],"url":"\/documentation\/compute\/duration","navigatorTitle":[{"kind":"identifier","text":"Duration"}],"title":"Duration","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt64":{"navigatorTitle":[{"text":"UInt64","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","title":"UInt64","abstract":[{"text":"A 64-bit unsigned integer value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"type."}],"url":"\/documentation\/compute\/uint64","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt64","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt64"},"doc://com.swallow.documentation.Compute/documentation/Compute/KeyValuePairs":{"abstract":[{"text":"A lightweight collection of key-value pairs.","type":"text"}],"title":"KeyValuePairs","kind":"symbol","navigatorTitle":[{"text":"KeyValuePairs","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/KeyValuePairs","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Key","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Key"},{"text":" conforms to ","type":"text"},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Value"},{"text":" conforms to ","type":"text"},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"type":"topic","url":"\/documentation\/compute\/keyvaluepairs","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"KeyValuePairs"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Dictionary/Values-swift.struct":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary\/Values-swift.struct","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Key","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"text":", ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Value"},{"text":" conforms to ","type":"text"},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":"."}]},"title":"Dictionary.Values","role":"symbol","abstract":[{"text":"A view of a dictionary’s values.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Values"}],"url":"\/documentation\/compute\/dictionary\/values-swift.struct","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Values","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/LosslessStringConvertible":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LosslessStringConvertible","kind":"identifier"}],"kind":"symbol","title":"LosslessStringConvertible","abstract":[{"type":"text","text":"A type that can be represented as a string in a lossless, unambiguous way."}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"LosslessStringConvertible","kind":"identifier"}],"url":"\/documentation\/compute\/losslessstringconvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/BidirectionalMap":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BidirectionalMap","url":"\/documentation\/compute\/bidirectionalmap","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BidirectionalMap"}],"navigatorTitle":[{"text":"BidirectionalMap","kind":"identifier"}],"title":"BidirectionalMap","abstract":[{"type":"text","text":"A bidirectional map between two "},{"type":"codeVoice","code":"Hashable"},{"text":" types.","type":"text"}],"kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Left"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Right"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/SignedInteger":{"abstract":[{"type":"text","text":"An integer type that can represent both positive and negative values."}],"kind":"symbol","url":"\/documentation\/compute\/signedinteger","navigatorTitle":[{"kind":"identifier","text":"SignedInteger"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedInteger","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SignedInteger","kind":"identifier"}],"title":"SignedInteger"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible":{"url":"\/documentation\/compute\/customstringconvertible","navigatorTitle":[{"kind":"identifier","text":"CustomStringConvertible"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomStringConvertible","kind":"identifier"}],"abstract":[{"text":"A type with a customized textual representation.","type":"text"}],"type":"topic","title":"CustomStringConvertible","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt32":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt32","title":"UInt32","abstract":[{"type":"text","text":"A 32-bit unsigned integer value"},{"type":"text","text":" "},{"text":"type.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"UInt32","kind":"identifier"}],"url":"\/documentation\/compute\/uint32","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"UInt32","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/DiscontiguousSlice":{"title":"DiscontiguousSlice","url":"\/documentation\/compute\/discontiguousslice","role":"symbol","type":"topic","abstract":[{"type":"text","text":"A collection wrapper that provides access to the elements of a collection,"},{"text":" ","type":"text"},{"type":"text","text":"indexed by a set of indices."}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Base","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DiscontiguousSlice","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"DiscontiguousSlice"}],"kind":"symbol","navigatorTitle":[{"text":"DiscontiguousSlice","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CodingKey":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CodingKey","url":"\/documentation\/compute\/codingkey","navigatorTitle":[{"text":"CodingKey","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"CodingKey","kind":"identifier"}],"abstract":[{"text":"A type that can be used as a key for encoding and decoding.","type":"text"}],"type":"topic","role":"symbol","title":"CodingKey","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/StringProtocol":{"url":"\/documentation\/compute\/stringprotocol","role":"symbol","abstract":[{"type":"text","text":"A type that can represent a string as a collection of characters."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","title":"StringProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StringProtocol","kind":"identifier"}],"navigatorTitle":[{"text":"StringProtocol","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Float16":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float16","navigatorTitle":[{"kind":"identifier","text":"Float16"}],"role":"symbol","title":"Float16","url":"\/documentation\/compute\/float16","type":"topic","abstract":[{"type":"text","text":"A half-precision (16b), floating-point value type."}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Float16"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Mirror":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Mirror","kind":"symbol","abstract":[{"type":"text","text":"A representation of the substructure and display style of an instance of"},{"type":"text","text":" "},{"type":"text","text":"any type."}],"role":"symbol","title":"Mirror","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Mirror","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Mirror"}],"url":"\/documentation\/compute\/mirror","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Double":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Double","abstract":[{"text":"A double-precision, floating-point value type.","type":"text"}],"title":"Double","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Double","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"Double","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/compute\/double"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set":{"title":"Set","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Set","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Set"}],"abstract":[{"type":"text","text":"An unordered collection of unique elements."}],"conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/set"},"doc://com.swallow.documentation.Compute/documentation/Compute/Dictionary/Keys-swift.struct":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary\/Keys-swift.struct","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Key","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Value"},{"text":" conforms to ","type":"text"},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Value"},{"text":" conforms to ","type":"text"},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":"."}]},"title":"Dictionary.Keys","type":"topic","url":"\/documentation\/compute\/dictionary\/keys-swift.struct","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Keys"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"text":"Keys","kind":"identifier"}],"abstract":[{"type":"text","text":"A view of a dictionary’s keys."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/MergeSplitSequence":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MergeSplitSequence","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"type":"text","text":" and "},{"code":"Escapable","type":"codeVoice"},{"text":".","type":"text"}]},"title":"MergeSplitSequence","role":"symbol","abstract":[],"navigatorTitle":[{"text":"MergeSplitSequence","kind":"identifier"}],"url":"\/documentation\/compute\/mergesplitsequence","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"MergeSplitSequence"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/DiscontiguousSlice/Index":{"title":"DiscontiguousSlice.Index","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Index"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DiscontiguousSlice\/Index","navigatorTitle":[{"text":"Index","kind":"identifier"}],"url":"\/documentation\/compute\/discontiguousslice\/index","abstract":[{"type":"text","text":"A position in a "},{"type":"codeVoice","code":"DiscontiguousSlice"},{"type":"text","text":"."}],"type":"topic","kind":"symbol","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Base","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Collection"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/TreeChains":{"navigatorTitle":[{"text":"TreeChains","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeChains","url":"\/documentation\/compute\/treechains","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TreeChains","kind":"identifier"}],"type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"Tree"},{"type":"text","text":" conforms to "},{"code":"HomogenousTree","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Tree.Children","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"title":"TreeChains","kind":"symbol","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Character":{"title":"Character","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Character","abstract":[{"type":"text","text":"A single extended grapheme cluster that approximates a user-perceived"},{"type":"text","text":" "},{"text":"character.","type":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/compute\/character","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Character"}],"navigatorTitle":[{"kind":"identifier","text":"Character"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/BranchingArray":{"navigatorTitle":[{"text":"BranchingArray","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BranchingArray","url":"\/documentation\/compute\/branchingarray","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"BranchingArray","kind":"identifier"}],"type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Branch"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"title":"BranchingArray","kind":"symbol","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Dictionary":{"title":"Dictionary","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Dictionary","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Dictionary","type":"topic","navigatorTitle":[{"text":"Dictionary","kind":"identifier"}],"abstract":[{"type":"text","text":"A collection whose elements are key-value pairs."}],"conformance":{"constraints":[{"type":"codeVoice","code":"Key"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"text":", ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/dictionary"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD64":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SIMD64"}],"abstract":[{"type":"text","text":"A vector of 64 scalar values."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD64","navigatorTitle":[{"text":"SIMD64","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/compute\/simd64","title":"SIMD64"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveAdjacencyMapElement":{"navigatorTitle":[{"text":"RecursiveAdjacencyMapElement","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RecursiveAdjacencyMapElement"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveAdjacencyMapElement","type":"topic","kind":"symbol","url":"\/documentation\/compute\/recursiveadjacencymapelement","title":"RecursiveAdjacencyMapElement","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"code":"Copyable","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}]},"title":"ArrayTree","type":"topic","url":"\/documentation\/compute\/arraytree","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ArrayTree","kind":"identifier"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"text":"ArrayTree","kind":"identifier"}],"abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD16":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SIMD16","kind":"identifier"}],"type":"topic","title":"SIMD16","url":"\/documentation\/compute\/simd16","navigatorTitle":[{"kind":"identifier","text":"SIMD16"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD16","kind":"symbol","role":"symbol","abstract":[{"text":"A vector of 16 scalar values.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD-swift.protocol":{"role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SIMD"}],"navigatorTitle":[{"kind":"identifier","text":"SIMD"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD-swift.protocol","abstract":[{"text":"A SIMD vector of a fixed number of elements.","type":"text"}],"title":"SIMD","url":"\/documentation\/compute\/simd-swift.protocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD3":{"role":"symbol","navigatorTitle":[{"text":"SIMD3","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD3","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SIMD3","kind":"identifier"}],"abstract":[{"text":"A vector of three scalar values.","type":"text"}],"title":"SIMD3","url":"\/documentation\/compute\/simd3","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Float":{"type":"topic","abstract":[{"text":"A single-precision, floating-point value type.","type":"text"}],"url":"\/documentation\/compute\/float","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Float","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Float"}],"navigatorTitle":[{"text":"Float","kind":"identifier"}],"title":"Float"},"doc://com.swallow.documentation.Compute/documentation/Compute/BranchingDictionary":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BranchingDictionary","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Branch","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":", "},{"type":"codeVoice","code":"Key"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"title":"BranchingDictionary","role":"symbol","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"BranchingDictionary"}],"url":"\/documentation\/compute\/branchingdictionary","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BranchingDictionary","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt8":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UInt8","kind":"identifier"}],"navigatorTitle":[{"text":"UInt8","kind":"identifier"}],"title":"UInt8","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt8","url":"\/documentation\/compute\/uint8","kind":"symbol","role":"symbol","type":"topic","abstract":[{"type":"text","text":"An 8-bit unsigned integer value"},{"text":" ","type":"text"},{"text":"type.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMD2":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SIMD2"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMD2","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SIMD2"}],"abstract":[{"text":"A vector of two scalar values.","type":"text"}],"title":"SIMD2","url":"\/documentation\/compute\/simd2","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/String/UTF8View":{"url":"\/documentation\/compute\/string\/utf8view","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"UTF8View"}],"role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"UTF8View"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/UTF8View","abstract":[{"text":"A view of a string’s contents as a collection of UTF-8 code units.","type":"text"}],"type":"topic","title":"String.UTF8View"},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeSet/Ranges-swift.struct":{"kind":"symbol","title":"RangeSet.Ranges","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeSet\/Ranges-swift.struct","abstract":[{"type":"text","text":"A collection of the ranges that make up a range set."}],"url":"\/documentation\/compute\/rangeset\/ranges-swift.struct","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Ranges","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Ranges"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/String/UTF16View":{"navigatorTitle":[{"text":"UTF16View","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/String\/UTF16View","kind":"symbol","title":"String.UTF16View","url":"\/documentation\/compute\/string\/utf16view","abstract":[{"text":"A view of a string’s contents as a collection of UTF-16 code units.","type":"text"}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UTF16View"}]}}}