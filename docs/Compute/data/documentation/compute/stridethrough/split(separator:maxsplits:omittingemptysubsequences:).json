{"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/stridethrough\/split(separator:maxsplits:omittingemptysubsequences:)"]}],"abstract":[{"type":"text","text":"Returns the longest possible subsequences of the sequence, in order,"},{"type":"text","text":" "},{"text":"around elements equal to the given element.","type":"text"}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideThrough\/split(separator:maxSplits:omittingEmptySubsequences:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideThrough","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideThrough\/Sequence-Implementations"]]},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"split"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"separator"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","kind":"typeIdentifier"},{"kind":"text","text":" = Int.max, "},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":" = true) -> ["},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","preciseIdentifier":"s:s10ArraySliceV","text":"ArraySlice"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","text":"Element"},{"kind":"text","text":">]"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"name":"separator","content":[{"inlineContent":[{"text":"The element that should be split upon.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The maximum number of times to split the sequence, or one"},{"type":"text","text":" "},{"text":"less than the number of subsequences to return. If ","type":"text"},{"code":"maxSplits + 1","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"subsequences are returned, the last one is a suffix of the original"},{"type":"text","text":" "},{"type":"text","text":"sequence containing the remaining elements. "},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" must be"},{"type":"text","text":" "},{"type":"text","text":"greater than or equal to zero. The default value is "},{"code":"Int.max","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"maxSplits"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"false"},{"type":"text","text":", an empty subsequence is"},{"type":"text","text":" "},{"text":"returned in the result for each consecutive pair of ","type":"text"},{"code":"separator","type":"codeVoice"},{"type":"text","text":" "},{"text":"elements in the sequence and for each instance of ","type":"text"},{"type":"codeVoice","code":"separator"},{"text":" at the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"start or end of the sequence. If "},{"type":"codeVoice","code":"true"},{"type":"text","text":", only nonempty subsequences"},{"type":"text","text":" "},{"type":"text","text":"are returned. The default value is "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}]}],"name":"omittingEmptySubsequences"}]},{"kind":"content","content":[{"anchor":"return-value","type":"heading","text":"Return Value","level":2},{"type":"paragraph","inlineContent":[{"text":"An array of subsequences, split from this sequence’s elements.","type":"text"}]}]},{"content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The resulting array consists of at most ","type":"text"},{"type":"codeVoice","code":"maxSplits + 1"},{"type":"text","text":" subsequences."},{"text":" ","type":"text"},{"text":"Elements that are used to split the sequence are not returned as part of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"any subsequence."}]},{"inlineContent":[{"type":"text","text":"The following examples show the effects of the "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" and"},{"type":"text","text":" "},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" parameters when splitting a string at each","type":"text"},{"type":"text","text":" "},{"text":"space character (” “). The first use of ","type":"text"},{"code":"split","type":"codeVoice"},{"type":"text","text":" returns each word that"},{"type":"text","text":" "},{"text":"was originally separated by one or more spaces.","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","print(line.split(separator: \" \")","          .map(String.init))","\/\/ Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The second example passes ","type":"text"},{"type":"codeVoice","code":"1"},{"text":" for the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" parameter, so the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"original string is split just once, into two new strings."}]},{"type":"codeListing","syntax":null,"code":["print(line.split(separator: \" \", maxSplits: 1)","          .map(String.init))","\/\/ Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\""]},{"inlineContent":[{"text":"The final example passes ","type":"text"},{"type":"codeVoice","code":"false"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"type":"text","text":" "},{"type":"text","text":"parameter, so the returned array contains empty strings where spaces"},{"type":"text","text":" "},{"text":"were repeated.","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["print(line.split(separator: \" \", omittingEmptySubsequences: false)","          .map(String.init))","\/\/ Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""],"type":"codeListing"},{"style":"note","name":"Complexity","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" is the length of the sequence."}]}],"type":"aside"}],"kind":"content"}],"metadata":{"roleHeading":"Instance Method","externalID":"s:STsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesSays10ArraySliceVyABGGAB_SiSbtF::SYNTHESIZED::s:s13StrideThroughV","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"split"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> ["},{"kind":"typeIdentifier","text":"ArraySlice","preciseIdentifier":"s:s10ArraySliceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":">]"}],"role":"symbol","extendedModule":"Swift","title":"split(separator:maxSplits:omittingEmptySubsequences:)","symbolKind":"method","modules":[{"name":"Compute","relatedModules":["Swift"]}]},"sections":[],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/StrideThrough/Sequence-Implementations":{"title":"Sequence Implementations","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideThrough\/Sequence-Implementations","type":"topic","url":"\/documentation\/compute\/stridethrough\/sequence-implementations","kind":"article","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequence’s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/StrideThrough/split(separator:maxSplits:omittingEmptySubsequences:)":{"url":"\/documentation\/compute\/stridethrough\/split(separator:maxsplits:omittingemptysubsequences:)","type":"topic","abstract":[{"type":"text","text":"Returns the longest possible subsequences of the sequence, in order,"},{"type":"text","text":" "},{"type":"text","text":"around elements equal to the given element."}],"title":"split(separator:maxSplits:omittingEmptySubsequences:)","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideThrough\/split(separator:maxSplits:omittingEmptySubsequences:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxSplits"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") -> [","kind":"text"},{"preciseIdentifier":"s:s10ArraySliceV","kind":"typeIdentifier","text":"ArraySlice"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":">]"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArraySlice":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArraySlice","role":"symbol","abstract":[{"type":"text","text":"A slice of an "},{"code":"Array","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"ContiguousArray"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"ArraySlice"},{"text":" instance.","type":"text"}],"title":"ArraySlice","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArraySlice"}],"navigatorTitle":[{"kind":"identifier","text":"ArraySlice"}],"url":"\/documentation\/compute\/arrayslice","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/StrideThrough":{"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"StrideThrough","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"StrideThrough","kind":"identifier"}],"url":"\/documentation\/compute\/stridethrough","title":"StrideThrough","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StrideThrough","abstract":[{"text":"A sequence of values formed by striding over a closed interval.","type":"text"}]}}}