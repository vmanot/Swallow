{"abstract":[{"text":"Returns a sequence by skipping the initial, consecutive elements that","type":"text"},{"type":"text","text":" "},{"text":"satisfy the given predicate.","type":"text"}],"kind":"symbol","metadata":{"roleHeading":"Instance Method","extendedModule":"Swift","title":"drop(while:)","externalID":"s:STsE4drop5whiles17DropWhileSequenceVyxGSb7ElementQzKXE_tKF","modules":[{"relatedModules":["Swift"],"name":"Compute"}],"symbolKind":"method","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"drop","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s17DropWhileSequenceV","text":"DropWhileSequence","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}]},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"drop"},{"text":"(","kind":"text"},{"text":"while","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"predicate","kind":"internalParam"},{"kind":"text","text":": ("},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Bool","preciseIdentifier":"s:Sb","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"DropWhileSequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DropWhileSequence","preciseIdentifier":"s:s17DropWhileSequenceV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A closure that takes an element of the sequence as","type":"text"},{"text":" ","type":"text"},{"text":"its argument and returns a Boolean value indicating whether the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"element should be included in the result."}]}],"name":"predicate"}]},{"content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A sequence starting after the initial, consecutive elements"},{"text":" ","type":"text"},{"type":"text","text":"that satisfy "},{"type":"codeVoice","code":"predicate"},{"type":"text","text":"."}]}],"kind":"content"},{"content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"The following example uses the ","type":"text"},{"code":"drop(while:)","type":"codeVoice"},{"type":"text","text":" method to skip over the"},{"text":" ","type":"text"},{"type":"text","text":"positive numbers at the beginning of the "},{"code":"numbers","type":"codeVoice"},{"text":" array. The result","type":"text"},{"type":"text","text":" "},{"text":"begins with the first element of ","type":"text"},{"code":"numbers","type":"codeVoice"},{"text":" that does not satisfy","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"predicate"},{"text":".","type":"text"}]},{"code":["let numbers = [3, 7, 4, -2, 9, -6, 10, 1]","let startingWithNegative = numbers.drop(while: { $0 > 0 })","\/\/ startingWithNegative == [-2, 9, -6, 10, 1]"],"type":"codeListing","syntax":null},{"inlineContent":[{"text":"If ","type":"text"},{"code":"predicate","type":"codeVoice"},{"text":" matches every element in the sequence, the result is an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"empty sequence."}],"type":"paragraph"},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"k"}]},{"type":"text","text":"), where "},{"inlineContent":[{"type":"text","text":"k"}],"type":"emphasis"},{"text":" is the number of elements to drop from","type":"text"},{"type":"text","text":" "},{"text":"the beginning of the sequence.","type":"text"}],"type":"paragraph"}],"style":"note","name":"Complexity"}],"kind":"content"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/sequence\/drop(while:)"]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/drop(while:)"},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/DropWhileSequence":{"abstract":[{"type":"text","text":"A sequence that lazily consumes and drops "},{"type":"codeVoice","code":"n"},{"type":"text","text":" elements from an underlying"},{"type":"text","text":" "},{"type":"codeVoice","code":"Base"},{"text":" iterator before possibly returning the first available element.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"DropWhileSequence","kind":"identifier"}],"url":"\/documentation\/compute\/dropwhilesequence","title":"DropWhileSequence","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DropWhileSequence","type":"topic","navigatorTitle":[{"text":"DropWhileSequence","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/drop(while:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"drop","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"while"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"DropWhileSequence","preciseIdentifier":"s:s17DropWhileSequenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"title":"drop(while:)","abstract":[{"text":"Returns a sequence by skipping the initial, consecutive elements that","type":"text"},{"text":" ","type":"text"},{"text":"satisfy the given predicate.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/drop(while:)","kind":"symbol","url":"\/documentation\/compute\/sequence\/drop(while:)","type":"topic","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequenceâ€™s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"url":"\/documentation\/compute\/sequence","navigatorTitle":[{"kind":"identifier","text":"Sequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","title":"Sequence","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Sequence","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}]}}}