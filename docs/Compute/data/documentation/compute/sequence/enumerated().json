{"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"enumerated","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"EnumeratedSequence","kind":"typeIdentifier","preciseIdentifier":"s:s18EnumeratedSequenceV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"roleHeading":"Instance Method","externalID":"s:STsE10enumerateds18EnumeratedSequenceVyxGyF","modules":[{"name":"Compute","relatedModules":["Swift"]}],"symbolKind":"method","title":"enumerated()","extendedModule":"Swift","role":"symbol"},"kind":"symbol","abstract":[{"text":"Returns a sequence of pairs (","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":", ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"text":"), where ","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"type":"text","text":" represents a"},{"type":"text","text":" "},{"type":"text","text":"consecutive integer starting at zero and "},{"type":"emphasis","inlineContent":[{"text":"x","type":"text"}]},{"text":" represents an element of","type":"text"},{"type":"text","text":" "},{"text":"the sequence.","type":"text"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"enumerated","kind":"identifier"},{"kind":"text","text":"() -> "},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EnumeratedSequence","kind":"typeIdentifier","text":"EnumeratedSequence","preciseIdentifier":"s:s18EnumeratedSequenceV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}]},{"content":[{"type":"heading","level":2,"text":"Return Value","anchor":"return-value"},{"inlineContent":[{"text":"A sequence of pairs enumerating the sequence.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This example enumerates the characters of the string “Swift” and prints","type":"text"},{"type":"text","text":" "},{"text":"each character along with its place in the string.","type":"text"}]},{"code":["for (n, c) in \"Swift\".enumerated() {","    print(\"\\(n): '\\(c)'\")","}","\/\/ Prints \"0: 'S'\"","\/\/ Prints \"1: 'w'\"","\/\/ Prints \"2: 'i'\"","\/\/ Prints \"3: 'f'\"","\/\/ Prints \"4: 't'\""],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you enumerate a collection, the integer part of each pair is a counter"},{"text":" ","type":"text"},{"text":"for the enumeration, but is not necessarily the index of the paired value.","type":"text"},{"type":"text","text":" "},{"text":"These counters can be used as indices only in instances of zero-based,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"integer-indexed collections, such as "},{"code":"Array","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"ContiguousArray","type":"codeVoice"},{"type":"text","text":". For"},{"text":" ","type":"text"},{"text":"other collections the counters may be out of range or of the wrong type","type":"text"},{"type":"text","text":" "},{"text":"to use as an index. To iterate over the elements of a collection with its","type":"text"},{"type":"text","text":" "},{"text":"indices, use the ","type":"text"},{"code":"zip(_:_:)","type":"codeVoice"},{"text":" function.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This example iterates over the indices and elements of a set, building a"},{"type":"text","text":" "},{"type":"text","text":"list consisting of indices of names with five or fewer letters."}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let names: Set = [\"Sofia\", \"Camilla\", \"Martina\", \"Mateo\", \"Nicolás\"]","var shorterIndices: [Set<String>.Index] = []","for (i, name) in zip(names.indices, names) {","    if name.count <= 5 {","        shorterIndices.append(i)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that the "},{"code":"shorterIndices","type":"codeVoice"},{"type":"text","text":" array holds the indices of the shorter"},{"text":" ","type":"text"},{"type":"text","text":"names in the "},{"type":"codeVoice","code":"names"},{"type":"text","text":" set, you can use those indices to access elements in"},{"type":"text","text":" "},{"type":"text","text":"the set."}]},{"code":["for i in shorterIndices {","    print(names[i])","}","\/\/ Prints \"Sofia\"","\/\/ Prints \"Mateo\""],"syntax":null,"type":"codeListing"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"O(1)","type":"text"}]}],"style":"note","name":"Complexity"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/sequence\/enumerated()"]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/enumerated()","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/enumerated()":{"url":"\/documentation\/compute\/sequence\/enumerated()","abstract":[{"text":"Returns a sequence of pairs (","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":", ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"x"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":" represents a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"consecutive integer starting at zero and "},{"inlineContent":[{"text":"x","type":"text"}],"type":"emphasis"},{"text":" represents an element of","type":"text"},{"type":"text","text":" "},{"text":"the sequence.","type":"text"}],"kind":"symbol","type":"topic","title":"enumerated()","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"enumerated","kind":"identifier"},{"text":"() -> ","kind":"text"},{"preciseIdentifier":"s:s18EnumeratedSequenceV","text":"EnumeratedSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/enumerated()"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"url":"\/documentation\/compute\/sequence","navigatorTitle":[{"kind":"identifier","text":"Sequence"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","title":"Sequence","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Sequence","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/EnumeratedSequence":{"url":"\/documentation\/compute\/enumeratedsequence","navigatorTitle":[{"text":"EnumeratedSequence","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EnumeratedSequence"}],"abstract":[{"text":"An enumeration of the elements of a sequence or collection.","type":"text"}],"type":"topic","title":"EnumeratedSequence","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/EnumeratedSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}