{"kind":"symbol","sections":[],"abstract":[{"text":"Creates a new integer value from the given string and radix.","type":"text"}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt16\/init(_:radix:)","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"init","kind":"keyword"},{"text":"?<","kind":"text"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"text","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"text":"radix","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","text":"Int"},{"text":" = 10) ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"text":"S","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","kind":"typeIdentifier","preciseIdentifier":"s:Sy","text":"StringProtocol"}],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"name":"text","content":[{"inlineContent":[{"text":"The ASCII representation of a number in the radix passed as","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"radix"},{"type":"text","text":"."}],"type":"paragraph"}]},{"name":"radix","content":[{"type":"paragraph","inlineContent":[{"text":"The radix, or base, to use for converting ","type":"text"},{"type":"codeVoice","code":"text"},{"type":"text","text":" to an integer"},{"type":"text","text":" "},{"type":"text","text":"value. "},{"code":"radix","type":"codeVoice"},{"text":" must be in the range ","type":"text"},{"code":"2...36","type":"codeVoice"},{"type":"text","text":". The default is 10."}]}]}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"inlineContent":[{"text":"The string passed as ","type":"text"},{"code":"text","type":"codeVoice"},{"type":"text","text":" may begin with a plus or minus sign character"},{"type":"text","text":" "},{"type":"text","text":"("},{"code":"+","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"-","type":"codeVoice"},{"text":"), followed by one or more numeric digits (","type":"text"},{"type":"codeVoice","code":"0-9"},{"type":"text","text":") or letters"},{"type":"text","text":" "},{"type":"text","text":"("},{"code":"a-z","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"A-Z"},{"type":"text","text":"). Parsing of the string is case insensitive."}],"type":"paragraph"},{"code":["let x = Int(\"123\")","\/\/ x == 123","","let y = Int(\"-123\", radix: 8)","\/\/ y == -83","let y = Int(\"+123\", radix: 8)","\/\/ y == +83","","let z = Int(\"07b\", radix: 16)","\/\/ z == 123"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"text"},{"type":"text","text":" is in an invalid format or contains characters that are out of"},{"text":" ","type":"text"},{"text":"bounds for the given ","type":"text"},{"code":"radix","type":"codeVoice"},{"type":"text","text":", or if the value it denotes in the given"},{"type":"text","text":" "},{"code":"radix","type":"codeVoice"},{"text":" is not representable, the result is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":". For example, the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"following conversions result in "},{"code":"nil","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":null,"code":["Int(\" 100\")                       \/\/ Includes whitespace","Int(\"21-50\")                      \/\/ Invalid format","Int(\"ff6600\")                     \/\/ Characters out of bounds","Int(\"zzzzzzzzzzzzz\", radix: 36)   \/\/ Out of range"],"type":"codeListing"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/uint16\/init(_:radix:)"]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt16","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt16\/FixedWidthInteger-Implementations"]]},"metadata":{"extendedModule":"Swift","fragments":[{"text":"init","kind":"identifier"},{"text":"?<","kind":"text"},{"kind":"genericParameter","text":"S"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"radix","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":")"}],"modules":[{"name":"Compute","relatedModules":["Swift"]}],"externalID":"s:s17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufc::SYNTHESIZED::s:s6UInt16V","roleHeading":"Initializer","symbolKind":"init","title":"init(_:radix:)","role":"symbol"},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt16/FixedWidthInteger-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt16\/FixedWidthInteger-Implementations","title":"FixedWidthInteger Implementations","role":"collectionGroup","url":"\/documentation\/compute\/uint16\/fixedwidthinteger-implementations","type":"topic","kind":"article","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt16/init(_:radix:)":{"kind":"symbol","url":"\/documentation\/compute\/uint16\/init(_:radix:)","title":"init(_:radix:)","fragments":[{"kind":"identifier","text":"init"},{"text":"?<","kind":"text"},{"kind":"genericParameter","text":"S"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", "},{"text":"radix","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt16\/init(_:radix:)","role":"symbol","abstract":[{"type":"text","text":"Creates a new integer value from the given string and radix."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/UInt16":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UInt16","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"UInt16"}],"title":"UInt16","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/UInt16","url":"\/documentation\/compute\/uint16","kind":"symbol","role":"symbol","abstract":[{"text":"A 16-bit unsigned integer value","type":"text"},{"text":" ","type":"text"},{"text":"type.","type":"text"}],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/StringProtocol":{"url":"\/documentation\/compute\/stringprotocol","role":"symbol","abstract":[{"type":"text","text":"A type that can represent a string as a collection of characters."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/StringProtocol","title":"StringProtocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StringProtocol","kind":"identifier"}],"navigatorTitle":[{"text":"StringProtocol","kind":"identifier"}],"kind":"symbol"}}}