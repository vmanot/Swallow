{"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"init","kind":"keyword"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"body"},{"text":": ","kind":"text"},{"kind":"keyword","text":"@escaping"},{"text":" () -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":"?)","kind":"text"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A closure that returns an optional element. ","type":"text"},{"code":"body","type":"codeVoice"},{"text":" is","type":"text"},{"text":" ","type":"text"},{"text":"executed each time the ","type":"text"},{"code":"next()","type":"codeVoice"},{"text":" method is called on the resulting","type":"text"},{"type":"text","text":" "},{"text":"iterator.","type":"text"}]}],"name":"body"}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"inlineContent":[{"type":"text","text":"The following example creates an iterator that counts up from the initial"},{"text":" ","type":"text"},{"type":"text","text":"value of an integer "},{"code":"x","type":"codeVoice"},{"type":"text","text":" to 15:"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["var x = 7","let iterator: AnyIterator<Int> = AnyIterator {","    defer { x += 1 }","    return x < 15 ? x : nil","}","let a = Array(iterator)","\/\/ a == [7, 8, 9, 10, 11, 12, 13, 14]"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/anyiterator\/init(_:)-5l6js"]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIterator"]]},"abstract":[{"text":"Creates an iterator that wraps the given closure in its ","type":"text"},{"code":"next()","type":"codeVoice"},{"type":"text","text":" method."}],"metadata":{"role":"symbol","roleHeading":"Initializer","externalID":"s:s11AnyIteratorVyAByxGxSgyccfc","title":"init(_:)","symbolKind":"init","fragments":[{"kind":"identifier","text":"init"},{"text":"(() -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":"?)","kind":"text"}],"modules":[{"name":"Compute"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIterator\/init(_:)-5l6js"},"sections":[],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/AnyIterator":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIterator","title":"AnyIterator","url":"\/documentation\/compute\/anyiterator","navigatorTitle":[{"text":"AnyIterator","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[{"text":"A type-erased iterator of ","type":"text"},{"type":"codeVoice","code":"Element"},{"text":".","type":"text"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AnyIterator","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyIterator/init(_:)-5l6js":{"url":"\/documentation\/compute\/anyiterator\/init(_:)-5l6js","title":"init(_:)","kind":"symbol","role":"symbol","type":"topic","abstract":[{"text":"Creates an iterator that wraps the given closure in its ","type":"text"},{"code":"next()","type":"codeVoice"},{"text":" method.","type":"text"}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(() -> "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":"?)"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIterator\/init(_:)-5l6js"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"}}}