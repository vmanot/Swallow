{"abstract":[{"text":"Creates an iterator that wraps a base iterator but whose type depends","type":"text"},{"type":"text","text":" "},{"text":"only on the base iterator’s element type.","type":"text"}],"metadata":{"title":"init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"I"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"I"},{"kind":"text","text":")"}],"role":"symbol","symbolKind":"init","roleHeading":"Initializer","modules":[{"name":"Compute"}],"externalID":"s:s11AnyIteratorVyAByxGqd__c7ElementQyd__RszStRd__lufc"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/anyiterator\/init(_:)-3m1u6"]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIterator\/init(_:)-3m1u6","interfaceLanguage":"swift"},"sections":[],"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIterator"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"<"},{"text":"I","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"base","kind":"internalParam"},{"kind":"text","text":": "},{"text":"I","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":" == "},{"text":"I","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol\/Element","kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:St7ElementQa"},{"kind":"text","text":", "},{"text":"I","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"IteratorProtocol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol","kind":"typeIdentifier","preciseIdentifier":"s:St"}],"languages":["swift"],"platforms":["macOS"]}]},{"parameters":[{"name":"base","content":[{"inlineContent":[{"type":"text","text":"An iterator to type-erase."}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"You can use ","type":"text"},{"type":"codeVoice","code":"AnyIterator"},{"type":"text","text":" to hide the type signature of a more complex"},{"text":" ","type":"text"},{"text":"iterator. For example, the ","type":"text"},{"code":"digits()","type":"codeVoice"},{"text":" function in the following example","type":"text"},{"type":"text","text":" "},{"type":"text","text":"creates an iterator over a collection that lazily maps the elements of a"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Range<Int>"},{"type":"text","text":" instance to strings. Instead of returning an"},{"type":"text","text":" "},{"type":"text","text":"iterator with a type that encapsulates the implementation of the"},{"type":"text","text":" "},{"text":"collection, the ","type":"text"},{"code":"digits()","type":"codeVoice"},{"text":" function first wraps the iterator in an","type":"text"},{"text":" ","type":"text"},{"code":"AnyIterator","type":"codeVoice"},{"type":"text","text":" instance."}]},{"type":"codeListing","code":["func digits() -> AnyIterator<String> {","    let lazyStrings = (0..<10).lazy.map { String($0) }","    let iterator:","        LazyMapSequence<Range<Int>, String>.Iterator","        = lazyStrings.makeIterator()","","    return AnyIterator(iterator)","}"],"syntax":null}]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/IteratorProtocol/Element":{"fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"text":"Element","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/iteratorprotocol\/element","abstract":[{"text":"The type of element traversed by the iterator.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol\/Element","title":"Element","kind":"symbol","required":true,"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/IteratorProtocol":{"url":"\/documentation\/compute\/iteratorprotocol","navigatorTitle":[{"kind":"identifier","text":"IteratorProtocol"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IteratorProtocol"}],"abstract":[{"type":"text","text":"A type that supplies the values of a sequence one at a time."}],"type":"topic","title":"IteratorProtocol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyIterator/init(_:)-3m1u6":{"url":"\/documentation\/compute\/anyiterator\/init(_:)-3m1u6","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIterator\/init(_:)-3m1u6","kind":"symbol","abstract":[{"text":"Creates an iterator that wraps a base iterator but whose type depends","type":"text"},{"type":"text","text":" "},{"type":"text","text":"only on the base iterator’s element type."}],"title":"init(_:)","role":"symbol","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"I"},{"text":">(","kind":"text"},{"text":"I","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyIterator":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIterator","title":"AnyIterator","url":"\/documentation\/compute\/anyiterator","navigatorTitle":[{"text":"AnyIterator","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[{"text":"A type-erased iterator of ","type":"text"},{"type":"codeVoice","code":"Element"},{"text":".","type":"text"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AnyIterator","kind":"identifier"}]}}}