{"abstract":[{"type":"text","text":"Returns a sequence by skipping the initial, consecutive elements that"},{"text":" ","type":"text"},{"text":"satisfy the given predicate.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"drop","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"while"},{"text":" ","kind":"text"},{"text":"predicate","kind":"internalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","text":"Element","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"DropWhileSequence","preciseIdentifier":"s:s17DropWhileSequenceV","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DropWhileSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"text":"A closure that takes an element of the sequence as","type":"text"},{"text":" ","type":"text"},{"text":"its argument and returns a Boolean value indicating whether the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"element should be included in the result."}],"type":"paragraph"}],"name":"predicate"}]},{"content":[{"type":"heading","level":2,"text":"Return Value","anchor":"return-value"},{"inlineContent":[{"text":"A sequence starting after the initial, consecutive elements","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that satisfy "},{"code":"predicate","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"},{"content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The following example uses the ","type":"text"},{"type":"codeVoice","code":"drop(while:)"},{"type":"text","text":" method to skip over the"},{"type":"text","text":" "},{"text":"positive numbers at the beginning of the ","type":"text"},{"code":"numbers","type":"codeVoice"},{"type":"text","text":" array. The result"},{"text":" ","type":"text"},{"text":"begins with the first element of ","type":"text"},{"type":"codeVoice","code":"numbers"},{"type":"text","text":" that does not satisfy"},{"text":" ","type":"text"},{"code":"predicate","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":null,"code":["let numbers = [3, 7, 4, -2, 9, -6, 10, 1]","let startingWithNegative = numbers.drop(while: { $0 > 0 })","\/\/ startingWithNegative == [-2, 9, -6, 10, 1]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"predicate"},{"type":"text","text":" matches every element in the sequence, the result is an"},{"type":"text","text":" "},{"text":"empty sequence.","type":"text"}]},{"type":"aside","name":"Complexity","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O("},{"inlineContent":[{"type":"text","text":"k"}],"type":"emphasis"},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"k"}]},{"type":"text","text":" is the number of elements to drop from"},{"type":"text","text":" "},{"text":"the beginning of the sequence.","type":"text"}]}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/compute\/anyiterator\/drop(while:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"symbol","identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIterator\/drop(while:)","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"drop","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s17DropWhileSequenceV","text":"DropWhileSequence"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"title":"drop(while:)","modules":[{"name":"Compute","relatedModules":["Swift"]}],"externalID":"s:STsE4drop5whiles17DropWhileSequenceVyxGSb7ElementQzKXE_tKF::SYNTHESIZED::s:s11AnyIteratorV","extendedModule":"Swift","symbolKind":"method","roleHeading":"Instance Method","role":"symbol"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIterator","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIterator\/Sequence-Implementations"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/AnyIterator":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIterator","title":"AnyIterator","url":"\/documentation\/compute\/anyiterator","navigatorTitle":[{"text":"AnyIterator","kind":"identifier"}],"type":"topic","role":"symbol","abstract":[{"text":"A type-erased iterator of ","type":"text"},{"type":"codeVoice","code":"Element"},{"text":".","type":"text"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"AnyIterator","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyIterator/Sequence-Implementations":{"type":"topic","abstract":[],"role":"collectionGroup","title":"Sequence Implementations","kind":"article","url":"\/documentation\/compute\/anyiterator\/sequence-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIterator\/Sequence-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/DropWhileSequence":{"abstract":[{"type":"text","text":"A sequence that lazily consumes and drops "},{"type":"codeVoice","code":"n"},{"type":"text","text":" elements from an underlying"},{"type":"text","text":" "},{"type":"codeVoice","code":"Base"},{"text":" iterator before possibly returning the first available element.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"DropWhileSequence","kind":"identifier"}],"url":"\/documentation\/compute\/dropwhilesequence","title":"DropWhileSequence","role":"symbol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/DropWhileSequence","type":"topic","navigatorTitle":[{"text":"DropWhileSequence","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/AnyIterator/drop(while:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AnyIterator\/drop(while:)","abstract":[{"type":"text","text":"Returns a sequence by skipping the initial, consecutive elements that"},{"type":"text","text":" "},{"type":"text","text":"satisfy the given predicate."}],"role":"symbol","type":"topic","url":"\/documentation\/compute\/anyiterator\/drop(while:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"drop","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"while"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"DropWhileSequence","preciseIdentifier":"s:s17DropWhileSequenceV"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"title":"drop(while:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence/Element":{"type":"topic","required":true,"abstract":[{"type":"text","text":"A type representing the sequenceâ€™s elements."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence\/Element","kind":"symbol","url":"\/documentation\/compute\/sequence\/element","role":"symbol","title":"Element","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Element","kind":"identifier"}]}}}