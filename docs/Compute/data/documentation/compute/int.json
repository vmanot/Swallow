{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int"},"metadata":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Int"}],"modules":[{"name":"Compute"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Int","kind":"identifier"}],"externalID":"s:Si","title":"Int","symbolKind":"struct","roleHeading":"Structure"},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"abstract":[{"type":"text","text":"A signed integer value type."}],"topicSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/Words-swift.struct"],"generated":true,"title":"Structures","anchor":"Structures"},{"generated":true,"anchor":"Operators","title":"Operators","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/!=(_:_:)-8k6se","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/&=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/&__=(_:_:)-2i06i","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/&__=(_:_:)-58orm","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/*=(_:_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/+=(_:_:)-57xij","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/-=(_:_:)-3pws5","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/==(_:_:)-29tqz","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/_(_:_:)-3wpum","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/_=(_:_:)-1ypi9","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/_=(_:_:)-30t77","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/_=(_:_:)-4b29i","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/_=(_:_:)-9lzpe"]},{"title":"Initializers","generated":true,"anchor":"Initializers","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(_:)-2oscb","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(_:)-3huv0","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(_:)-8vbwo","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(bitPattern:)-2i0qy","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(bitPattern:)-2o9co","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(bitPattern:)-5qm7a","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(bitPattern:)-72037","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(exactly:)-5xh2s","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(exactly:)-77kq8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(exactly:)-7qdwf"]},{"generated":true,"title":"Instance Properties","anchor":"Instance-Properties","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/byteSwapped","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/leadingZeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/magnitude-swift.property","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/nonzeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/trailingZeroBitCount","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/words-swift.property"]},{"title":"Instance Methods","generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/addingReportingOverflow(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/dividedReportingOverflow(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/dividingFullWidth(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/multipliedFullWidth(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/multipliedReportingOverflow(by:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/remainderReportingOverflow(dividingBy:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/signum()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/subtractingReportingOverflow(_:)"],"anchor":"Instance-Methods"},{"generated":true,"title":"Type Aliases","anchor":"Type-Aliases","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/IntegerLiteralType","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/Magnitude-swift.typealias","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/Stride"]},{"anchor":"Type-Properties","title":"Type Properties","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/bitWidth-swift.type.property"],"generated":true},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/AdditiveArithmetic-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/BinaryInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/CodingKeyRepresentable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/Comparable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/CustomReflectable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/Decodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/Encodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/ExpressibleByIntegerLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/FixedWidthInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/SIMDScalar-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/SignedInteger-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/SignedNumeric-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/Strideable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/_CustomPlaygroundQuickLookable-Implementations"],"generated":true,"anchor":"Default-Implementations","title":"Default Implementations"}],"kind":"symbol","relationshipsSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AdditiveArithmetic","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CodingKeyRepresentable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MirrorPath","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDScalar","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedInteger","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedNumeric","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","doc:\/\/com.swallow.documentation.Compute\/7Swallow18AdditionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow21AnyCodableConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22ApproximatelyEquatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20ArithmeticOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16BooleanInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7BoundedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18BoundedRandomnableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18ByteOrderSwappableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow14CoderPrimitiveP","doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataDecodableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataEncodableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiscreteP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20DiscreteOrContinuousP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18DivisionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22FloatingPointInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow9InitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16IntegerInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow24MultiplicationOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableAdditionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow27MutableArithmeticOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableDivisionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow31MutableMultiplicationOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow28MutableSubtractionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow15NativeWordSizedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow6NumberP","doc:\/\/com.swallow.documentation.Compute\/7Swallow17NumberConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow15NumberInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow11RandomnableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow26ShouldNotBeDecodedFromBoolP","doc:\/\/com.swallow.documentation.Compute\/7Swallow6SignedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow22SignedIntegerInitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16SignedOrUnsignedP","doc:\/\/com.swallow.documentation.Compute\/7Swallow21SubtractionOperatableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP","doc:\/\/com.swallow.documentation.Compute\/7Swallow24UnsignedIntegerInitiableP"],"type":"conformsTo","title":"Conforms To","kind":"relationships"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"@frozen","kind":"attribute"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"platforms":["macOS"],"languages":["swift"]}]},{"content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"On 32-bit platforms, "},{"type":"codeVoice","code":"Int"},{"text":" is the same size as ","type":"text"},{"type":"codeVoice","code":"Int32"},{"text":", and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"on 64-bit platforms, "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" is the same size as "},{"code":"Int64","type":"codeVoice"},{"type":"text","text":"."}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/compute\/int"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.swallow.documentation.Compute/7Swallow24MultiplicationOperatableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow24MultiplicationOperatableP","title":"Swallow.MultiplicationOperatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/MirrorPath":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/MirrorPath","url":"\/documentation\/compute\/mirrorpath","title":"MirrorPath","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"MirrorPath","kind":"identifier"}],"navigatorTitle":[{"text":"MirrorPath","kind":"identifier"}],"abstract":[{"text":"A protocol for legitimate arguments to ","type":"text"},{"type":"codeVoice","code":"Mirror"},{"text":"’s ","type":"text"},{"code":"descendant","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"method."}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow15NativeWordSizedP":{"type":"unresolvable","title":"Swallow.NativeWordSized","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow15NativeWordSizedP"},"doc://com.swallow.documentation.Compute/7Swallow11RandomnableP":{"title":"Swallow.Randomnable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow11RandomnableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/FixedWidthInteger":{"title":"FixedWidthInteger","kind":"symbol","navigatorTitle":[{"text":"FixedWidthInteger","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/FixedWidthInteger","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"FixedWidthInteger","kind":"identifier"}],"abstract":[{"text":"An integer type that uses a fixed size for every instance.","type":"text"}],"type":"topic","url":"\/documentation\/compute\/fixedwidthinteger"},"doc://com.swallow.documentation.Compute/documentation/Compute/CodingKeyRepresentable":{"type":"topic","title":"CodingKeyRepresentable","abstract":[{"type":"text","text":"A type that can be converted to and from a coding key."}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"CodingKeyRepresentable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CodingKeyRepresentable","url":"\/documentation\/compute\/codingkeyrepresentable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CodingKeyRepresentable"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"title":"Copyable","abstract":[{"type":"text","text":"A type whose values can be implicitly or explicitly copied."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Copyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","url":"\/documentation\/compute\/copyable","navigatorTitle":[{"text":"Copyable","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow24UnsignedIntegerInitiableP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow24UnsignedIntegerInitiableP","title":"Swallow.UnsignedIntegerInitiable"},"doc://com.swallow.documentation.Compute/7Swallow20ByteTupleConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20ByteTupleConvertibleP","title":"Swallow.ByteTupleConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/Decodable":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Decodable","kind":"identifier"}],"title":"Decodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","abstract":[{"type":"text","text":"A type that can decode itself from an external representation."}],"url":"\/documentation\/compute\/decodable","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Decodable"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/words-swift.property":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/words-swift.property","url":"\/documentation\/compute\/int\/words-swift.property","title":"words","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"words","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Si5WordsV","text":"Words","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"A collection containing the words of this value’s binary"},{"text":" ","type":"text"},{"type":"text","text":"representation, in order from the least significant to most significant."}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/_=(_:_:)-9lzpe":{"type":"topic","title":"\/=(_:_:)","abstract":[{"type":"text","text":"Divides the first value by the second and stores the quotient in the"},{"text":" ","type":"text"},{"type":"text","text":"left-hand-side variable."}],"kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"\/=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":")","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/_=(_:_:)-9lzpe","url":"\/documentation\/compute\/int\/_=(_:_:)-9lzpe","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/addingReportingOverflow(_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/addingReportingOverflow(_:)","url":"\/documentation\/compute\/int\/addingreportingoverflow(_:)","title":"addingReportingOverflow(_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"addingReportingOverflow","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") -> (partialValue","kind":"text"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", overflow"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":")","kind":"text"}],"abstract":[{"text":"Returns the sum of this value and the given value, along with a Boolean","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value indicating whether overflow occurred in the operation."}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow18ByteOrderSwappableP":{"title":"Swallow.ByteOrderSwappable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18ByteOrderSwappableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/&=(_:_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/&=(_:_:)","url":"\/documentation\/compute\/int\/&=(_:_:)","title":"&=(_:_:)","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"&=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Stores the result of performing a bitwise AND operation on the two given"},{"type":"text","text":" "},{"text":"values in the left-hand-side variable.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/signum()":{"type":"topic","title":"signum()","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/int\/signum()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"signum"},{"text":"() -> ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"Returns "},{"code":"-1","type":"codeVoice"},{"text":" if this value is negative and ","type":"text"},{"type":"codeVoice","code":"1"},{"type":"text","text":" if it’s positive;"},{"type":"text","text":" "},{"text":"otherwise, ","type":"text"},{"code":"0","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/signum()"},"doc://com.swallow.documentation.Compute/documentation/Compute/BinaryInteger":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"BinaryInteger"}],"navigatorTitle":[{"kind":"identifier","text":"BinaryInteger"}],"url":"\/documentation\/compute\/binaryinteger","type":"topic","abstract":[{"type":"text","text":"An integer type with a binary representation."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BinaryInteger","title":"BinaryInteger","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow25MutableAdditionOperatableP":{"title":"Swallow.MutableAdditionOperatable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableAdditionOperatableP"},"doc://com.swallow.documentation.Compute/7Swallow26ShouldNotBeDecodedFromBoolP":{"title":"Swallow.ShouldNotBeDecodedFromBool","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow26ShouldNotBeDecodedFromBoolP"},"doc://com.swallow.documentation.Compute/7Swallow16BooleanInitiableP":{"title":"Swallow.BooleanInitiable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16BooleanInitiableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/byteSwapped":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/byteSwapped","url":"\/documentation\/compute\/int\/byteswapped","title":"byteSwapped","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"byteSwapped"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"A representation of this integer with the byte order swapped."}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/_=(_:_:)-4b29i":{"type":"topic","title":"|=(_:_:)","abstract":[{"type":"text","text":"Stores the result of performing a bitwise OR operation on the two given"},{"text":" ","type":"text"},{"text":"values in the left-hand-side variable.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"|=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":")","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/_=(_:_:)-4b29i","url":"\/documentation\/compute\/int\/_=(_:_:)-4b29i","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow31MutableMultiplicationOperatableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow31MutableMultiplicationOperatableP","type":"unresolvable","title":"Swallow.MutableMultiplicationOperatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/AdditiveArithmetic":{"type":"topic","title":"AdditiveArithmetic","abstract":[{"text":"A type with values that support addition and subtraction.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AdditiveArithmetic"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/AdditiveArithmetic","url":"\/documentation\/compute\/additivearithmetic","role":"symbol","navigatorTitle":[{"text":"AdditiveArithmetic","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/_=(_:_:)-30t77":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/_=(_:_:)-30t77","url":"\/documentation\/compute\/int\/_=(_:_:)-30t77","title":"%=(_:_:)","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"%=","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":", ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Divides the first value by the second and stores the remainder in the"},{"type":"text","text":" "},{"text":"left-hand-side variable.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/AdditiveArithmetic-Implementations":{"role":"collectionGroup","abstract":[],"title":"AdditiveArithmetic Implementations","type":"topic","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/AdditiveArithmetic-Implementations","url":"\/documentation\/compute\/int\/additivearithmetic-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/BitwiseCopyable":{"title":"BitwiseCopyable","abstract":[],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BitwiseCopyable","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/BitwiseCopyable","url":"\/documentation\/compute\/bitwisecopyable","navigatorTitle":[{"kind":"identifier","text":"BitwiseCopyable"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/!=(_:_:)-8k6se":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/!=(_:_:)-8k6se","url":"\/documentation\/compute\/int\/!=(_:_:)-8k6se","title":"!=(_:_:)","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"!=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"abstract":[],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/SIMDScalar":{"kind":"symbol","navigatorTitle":[{"text":"SIMDScalar","kind":"identifier"}],"type":"topic","title":"SIMDScalar","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SIMDScalar","abstract":[{"type":"text","text":"A type that can be used as an element in a SIMD vector."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SIMDScalar","kind":"identifier"}],"url":"\/documentation\/compute\/simdscalar"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/init(_:)-8vbwo":{"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:Sd","text":"Double","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[],"title":"init(_:)","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(_:)-8vbwo","url":"\/documentation\/compute\/int\/init(_:)-8vbwo"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/trailingZeroBitCount":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/trailingZeroBitCount","url":"\/documentation\/compute\/int\/trailingzerobitcount","title":"trailingZeroBitCount","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"trailingZeroBitCount","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"abstract":[{"text":"The number of trailing zeros in this value’s binary representation.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/CodingKeyRepresentable-Implementations":{"role":"collectionGroup","abstract":[],"title":"CodingKeyRepresentable Implementations","type":"topic","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/CodingKeyRepresentable-Implementations","url":"\/documentation\/compute\/int\/codingkeyrepresentable-implementations"},"doc://com.swallow.documentation.Compute/7Swallow9InitiableP":{"title":"Swallow.Initiable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow9InitiableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/init(exactly:)-7qdwf":{"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"?(","kind":"text"},{"text":"exactly","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Float","kind":"typeIdentifier","preciseIdentifier":"s:Sf"},{"kind":"text","text":")"}],"abstract":[{"text":"Creates an integer from the given floating-point value, if it can be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"represented exactly."}],"title":"init(exactly:)","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(exactly:)-7qdwf","url":"\/documentation\/compute\/int\/init(exactly:)-7qdwf"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/leadingZeroBitCount":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/leadingZeroBitCount","url":"\/documentation\/compute\/int\/leadingzerobitcount","title":"leadingZeroBitCount","type":"topic","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"leadingZeroBitCount"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"The number of leading zeros in this value’s binary representation."}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/remainderReportingOverflow(dividingBy:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"remainderReportingOverflow"},{"text":"(","kind":"text"},{"text":"dividingBy","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> (partialValue"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", overflow","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Returns the remainder after dividing this value by the given value, along"},{"text":" ","type":"text"},{"text":"with a Boolean value indicating whether overflow occurred during division.","type":"text"}],"title":"remainderReportingOverflow(dividingBy:)","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/remainderReportingOverflow(dividingBy:)","url":"\/documentation\/compute\/int\/remainderreportingoverflow(dividingby:)"},"doc://com.swallow.documentation.Compute/7Swallow27MutableArithmeticOperatableP":{"title":"Swallow.MutableArithmeticOperatable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow27MutableArithmeticOperatableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible":{"url":"\/documentation\/compute\/customstringconvertible","navigatorTitle":[{"kind":"identifier","text":"CustomStringConvertible"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomStringConvertible","kind":"identifier"}],"abstract":[{"text":"A type with a customized textual representation.","type":"text"}],"type":"topic","title":"CustomStringConvertible","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/Magnitude-swift.typealias":{"role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"Magnitude","kind":"identifier"}],"abstract":[{"text":"A type that can represent the absolute value of any possible value of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"this type."}],"navigatorTitle":[{"text":"Magnitude","kind":"identifier"}],"title":"Int.Magnitude","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/Magnitude-swift.typealias","url":"\/documentation\/compute\/int\/magnitude-swift.typealias"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/IntegerLiteralType":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/IntegerLiteralType","url":"\/documentation\/compute\/int\/integerliteraltype","title":"Int.IntegerLiteralType","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"IntegerLiteralType","kind":"identifier"}],"navigatorTitle":[{"text":"IntegerLiteralType","kind":"identifier"}],"abstract":[{"text":"A type that represents an integer literal.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow6NumberP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow6NumberP","title":"Swallow.Number","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow13DataEncodableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataEncodableP","title":"Swallow.DataEncodable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow16SignedOrUnsignedP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16SignedOrUnsignedP","type":"unresolvable","title":"Swallow.SignedOrUnsigned"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/multipliedFullWidth(by:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/multipliedFullWidth(by:)","url":"\/documentation\/compute\/int\/multipliedfullwidth(by:)","title":"multipliedFullWidth(by:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"multipliedFullWidth"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":") -> (high","kind":"text"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", low","kind":"text"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":"."},{"preciseIdentifier":"s:Si9Magnitudea","text":"Magnitude","kind":"typeIdentifier"},{"kind":"text","text":")"}],"abstract":[{"text":"Returns a tuple containing the high and low parts of the result of","type":"text"},{"text":" ","type":"text"},{"text":"multiplying this value by the given value.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/BinaryInteger-Implementations":{"url":"\/documentation\/compute\/int\/binaryinteger-implementations","title":"BinaryInteger Implementations","role":"collectionGroup","kind":"article","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/BinaryInteger-Implementations","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/FixedWidthInteger-Implementations":{"url":"\/documentation\/compute\/int\/fixedwidthinteger-implementations","type":"topic","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/FixedWidthInteger-Implementations","title":"FixedWidthInteger Implementations","kind":"article","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/7Swallow28MutableSubtractionOperatableP":{"title":"Swallow.MutableSubtractionOperatable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow28MutableSubtractionOperatableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/dividedReportingOverflow(by:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/dividedReportingOverflow(by:)","url":"\/documentation\/compute\/int\/dividedreportingoverflow(by:)","title":"dividedReportingOverflow(by:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dividedReportingOverflow"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> (partialValue"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", overflow","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":")","kind":"text"}],"abstract":[{"text":"Returns the quotient obtained by dividing this value by the given value,","type":"text"},{"text":" ","type":"text"},{"text":"along with a Boolean value indicating whether overflow occurred in the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"operation."}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/bitWidth-swift.type.property":{"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"bitWidth"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}],"abstract":[{"type":"text","text":"The number of bits used for the underlying binary representation of"},{"text":" ","type":"text"},{"text":"values of this type.","type":"text"}],"title":"bitWidth","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/bitWidth-swift.type.property","url":"\/documentation\/compute\/int\/bitwidth-swift.type.property"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int","abstract":[{"type":"text","text":"A signed integer value type."}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Int","kind":"identifier"}],"navigatorTitle":[{"text":"Int","kind":"identifier"}],"title":"Int","url":"\/documentation\/compute\/int","kind":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow18AdditionOperatableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18AdditionOperatableP","type":"unresolvable","title":"Swallow.AdditionOperatable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/init(bitPattern:)-2i0qy":{"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"text":"P","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"bitPattern"},{"kind":"text","text":": "},{"text":"P","kind":"typeIdentifier"},{"text":"?)","kind":"text"}],"abstract":[{"text":"Creates a new value with the bit pattern of the given pointer.","type":"text"}],"title":"init(bitPattern:)","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(bitPattern:)-2i0qy","url":"\/documentation\/compute\/int\/init(bitpattern:)-2i0qy"},"doc://com.swallow.documentation.Compute/7Swallow7BoundedP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7BoundedP","type":"unresolvable","title":"Swallow.Bounded"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/SignedNumeric-Implementations":{"role":"collectionGroup","abstract":[],"title":"SignedNumeric Implementations","type":"topic","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/SignedNumeric-Implementations","url":"\/documentation\/compute\/int\/signednumeric-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/Decodable-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/Decodable-Implementations","url":"\/documentation\/compute\/int\/decodable-implementations","title":"Decodable Implementations","type":"topic","abstract":[],"kind":"article","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/SignedInteger":{"abstract":[{"type":"text","text":"An integer type that can represent both positive and negative values."}],"kind":"symbol","url":"\/documentation\/compute\/signedinteger","navigatorTitle":[{"kind":"identifier","text":"SignedInteger"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedInteger","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SignedInteger","kind":"identifier"}],"title":"SignedInteger"},"doc://com.swallow.documentation.Compute/documentation/Compute/LosslessStringConvertible":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LosslessStringConvertible","kind":"identifier"}],"kind":"symbol","title":"LosslessStringConvertible","abstract":[{"type":"text","text":"A type that can be represented as a string in a lossless, unambiguous way."}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"LosslessStringConvertible","kind":"identifier"}],"url":"\/documentation\/compute\/losslessstringconvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/LosslessStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/-=(_:_:)-3pws5":{"role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"-=","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Subtracts the second value from the first and stores the difference in the","type":"text"},{"text":" ","type":"text"},{"text":"left-hand-side variable.","type":"text"}],"title":"-=(_:_:)","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/-=(_:_:)-3pws5","url":"\/documentation\/compute\/int\/-=(_:_:)-3pws5"},"doc://com.swallow.documentation.Compute/documentation/Compute/Numeric":{"abstract":[{"type":"text","text":"A type with values that support multiplication."}],"kind":"symbol","url":"\/documentation\/compute\/numeric","navigatorTitle":[{"text":"Numeric","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Numeric","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Numeric"}],"title":"Numeric"},"doc://com.swallow.documentation.Compute/7Swallow21SubtractionOperatableP":{"title":"Swallow.SubtractionOperatable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21SubtractionOperatableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/CVarArg":{"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CVarArg"}],"abstract":[{"text":"A type whose instances can be encoded, and appropriately passed, as","type":"text"},{"text":" ","type":"text"},{"text":"elements of a C ","type":"text"},{"type":"codeVoice","code":"va_list"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"CVarArg","kind":"identifier"}],"title":"CVarArg","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","url":"\/documentation\/compute\/cvararg"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByIntegerLiteral":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","url":"\/documentation\/compute\/expressiblebyintegerliteral","title":"ExpressibleByIntegerLiteral","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"navigatorTitle":[{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"abstract":[{"text":"A type that can be initialized with an integer literal.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/_(_:_:)-3wpum":{"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"<","kind":"identifier"},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":", ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"abstract":[{"text":"Returns a Boolean value indicating whether the value of the first","type":"text"},{"text":" ","type":"text"},{"text":"argument is less than that of the second argument.","type":"text"}],"title":"<(_:_:)","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/_(_:_:)-3wpum","url":"\/documentation\/compute\/int\/_(_:_:)-3wpum"},"doc://com.swallow.documentation.Compute/7Swallow6SignedP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow6SignedP","type":"unresolvable","title":"Swallow.Signed"},"doc://com.swallow.documentation.Compute/7Swallow17NumberConvertibleP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow17NumberConvertibleP","type":"unresolvable","title":"Swallow.NumberConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/init(bitPattern:)-2o9co":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(bitPattern:)-2o9co","url":"\/documentation\/compute\/int\/init(bitpattern:)-2o9co","title":"init(bitPattern:)","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"bitPattern","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SO","text":"ObjectIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Creates an integer that captures the full value of the given object","type":"text"},{"text":" ","type":"text"},{"text":"identifier.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/Words-swift.struct":{"abstract":[{"type":"text","text":"A type that represents the words of this integer."}],"navigatorTitle":[{"text":"Words","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/Words-swift.struct","title":"Int.Words","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Words"}],"url":"\/documentation\/compute\/int\/words-swift.struct","type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow15NumberInitiableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow15NumberInitiableP","title":"Swallow.NumberInitiable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/SIMDScalar-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/SIMDScalar-Implementations","role":"collectionGroup","kind":"article","abstract":[],"url":"\/documentation\/compute\/int\/simdscalar-implementations","title":"SIMDScalar Implementations","type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow25MutableDivisionOperatableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow25MutableDivisionOperatableP","title":"Swallow.MutableDivisionOperatable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/nonzeroBitCount":{"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"nonzeroBitCount","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"}],"abstract":[{"text":"The number of bits equal to 1 in this value’s binary representation.","type":"text"}],"title":"nonzeroBitCount","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/nonzeroBitCount","url":"\/documentation\/compute\/int\/nonzerobitcount"},"doc://com.swallow.documentation.Compute/7Swallow20DiscreteOrContinuousP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20DiscreteOrContinuousP","title":"Swallow.DiscreteOrContinuous","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow18DivisionOperatableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18DivisionOperatableP","title":"Swallow.DivisionOperatable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/Stride":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/Stride","url":"\/documentation\/compute\/int\/stride","title":"Int.Stride","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"Stride","kind":"identifier"}],"navigatorTitle":[{"text":"Stride","kind":"identifier"}],"abstract":[{"text":"A type that represents the distance between two values.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow18BoundedRandomnableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18BoundedRandomnableP","title":"Swallow.BoundedRandomnable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/&__=(_:_:)-2i06i":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/&__=(_:_:)-2i06i","url":"\/documentation\/compute\/int\/&__=(_:_:)-2i06i","title":"&>>=(_:_:)","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"&>>=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":", "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"text":")","kind":"text"}],"abstract":[{"text":"Calculates the result of shifting a value’s binary representation the","type":"text"},{"text":" ","type":"text"},{"text":"specified number of digits to the right, masking the shift amount to the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type’s bit width, and stores the result in the left-hand-side variable."}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/*=(_:_:)":{"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"*="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Multiplies two values and stores the result in the left-hand-side"},{"text":" ","type":"text"},{"text":"variable.","type":"text"}],"title":"*=(_:_:)","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/*=(_:_:)","url":"\/documentation\/compute\/int\/*=(_:_:)"},"doc://com.swallow.documentation.Compute/7Swallow22SignedIntegerInitiableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22SignedIntegerInitiableP","title":"Swallow.SignedIntegerInitiable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/&__=(_:_:)-58orm":{"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"&<<=","kind":"identifier"},{"text":" ","kind":"text"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"abstract":[{"text":"Returns the result of shifting a value’s binary representation the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specified number of digits to the left, masking the shift amount to the"},{"text":" ","type":"text"},{"type":"text","text":"type’s bit width, and stores the result in the left-hand-side variable."}],"title":"&<<=(_:_:)","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/&__=(_:_:)-58orm","url":"\/documentation\/compute\/int\/&__=(_:_:)-58orm"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/init(exactly:)-5xh2s":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(exactly:)-5xh2s","url":"\/documentation\/compute\/int\/init(exactly:)-5xh2s","title":"init(exactly:)","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"text":"?(","kind":"text"},{"text":"exactly","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Float16","kind":"typeIdentifier","preciseIdentifier":"s:s7Float16V"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Creates an integer from the given floating-point value, if it can be"},{"text":" ","type":"text"},{"type":"text","text":"represented exactly."}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/init(bitPattern:)-5qm7a":{"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"bitPattern","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"OpaquePointer","kind":"typeIdentifier","preciseIdentifier":"s:s13OpaquePointerV"},{"text":"?)","kind":"text"}],"abstract":[{"type":"text","text":"Creates a new value with the bit pattern of the given pointer."}],"title":"init(bitPattern:)","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(bitPattern:)-5qm7a","url":"\/documentation\/compute\/int\/init(bitpattern:)-5qm7a"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/==(_:_:)-29tqz":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/==(_:_:)-29tqz","url":"\/documentation\/compute\/int\/==(_:_:)-29tqz","title":"==(_:_:)","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"=="},{"text":" ","kind":"text"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Returns a Boolean value indicating whether two values are equal."}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Comparable":{"url":"\/documentation\/compute\/comparable","type":"topic","kind":"symbol","role":"symbol","abstract":[{"text":"A type that can be compared using the relational operators ","type":"text"},{"code":"<","type":"codeVoice"},{"text":", ","type":"text"},{"code":"<=","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":">="},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":">"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Comparable"}],"title":"Comparable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Comparable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Comparable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/Strideable-Implementations":{"role":"collectionGroup","abstract":[],"title":"Strideable Implementations","type":"topic","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/Strideable-Implementations","url":"\/documentation\/compute\/int\/strideable-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/SignedNumeric":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SignedNumeric","url":"\/documentation\/compute\/signednumeric","title":"SignedNumeric","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SignedNumeric"}],"navigatorTitle":[{"text":"SignedNumeric","kind":"identifier"}],"abstract":[{"type":"text","text":"A numeric type with a negation operation."}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/_=(_:_:)-1ypi9":{"role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"^=","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Stores the result of performing a bitwise XOR operation on the two given"},{"text":" ","type":"text"},{"type":"text","text":"values in the left-hand-side variable."}],"title":"^=(_:_:)","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/_=(_:_:)-1ypi9","url":"\/documentation\/compute\/int\/_=(_:_:)-1ypi9"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/magnitude-swift.property":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/magnitude-swift.property","url":"\/documentation\/compute\/int\/magnitude-swift.property","title":"magnitude","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"magnitude"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"The magnitude of this value."}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/ExpressibleByIntegerLiteral-Implementations":{"role":"collectionGroup","abstract":[],"title":"ExpressibleByIntegerLiteral Implementations","type":"topic","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/ExpressibleByIntegerLiteral-Implementations","url":"\/documentation\/compute\/int\/expressiblebyintegerliteral-implementations"},"doc://com.swallow.documentation.Compute/7Swallow21AnyCodableConvertibleP":{"title":"Swallow.AnyCodableConvertible","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21AnyCodableConvertibleP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"kind":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Sendable","kind":"identifier"}],"title":"Sendable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","abstract":[],"url":"\/documentation\/compute\/sendable","role":"symbol","navigatorTitle":[{"text":"Sendable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomReflectable":{"url":"\/documentation\/compute\/customreflectable","role":"symbol","abstract":[{"text":"A type that explicitly supplies its own mirror.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","title":"CustomReflectable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomReflectable"}],"navigatorTitle":[{"kind":"identifier","text":"CustomReflectable"}],"kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/CustomReflectable-Implementations":{"role":"collectionGroup","abstract":[],"title":"CustomReflectable Implementations","type":"topic","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/CustomReflectable-Implementations","url":"\/documentation\/compute\/int\/customreflectable-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Strideable":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/compute\/strideable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Strideable","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Strideable"}],"navigatorTitle":[{"text":"Strideable","kind":"identifier"}],"abstract":[{"type":"text","text":"A type representing continuous, one-dimensional values that can be offset"},{"type":"text","text":" "},{"type":"text","text":"and measured."}],"title":"Strideable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"type":"topic","title":"Equatable","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","role":"symbol","url":"\/documentation\/compute\/equatable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Equatable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/Hashable-Implementations":{"url":"\/documentation\/compute\/int\/hashable-implementations","abstract":[],"title":"Hashable Implementations","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/Hashable-Implementations","kind":"article","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/init(bitPattern:)-72037":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(bitPattern:)-72037","url":"\/documentation\/compute\/int\/init(bitpattern:)-72037","title":"init(bitPattern:)","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"bitPattern","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Creates a new instance with the same memory representation as the given"},{"text":" ","type":"text"},{"text":"value.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow20ArithmeticOperatableP":{"title":"Swallow.ArithmeticOperatable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20ArithmeticOperatableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/dividingFullWidth(_:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/dividingFullWidth(_:)","url":"\/documentation\/compute\/int\/dividingfullwidth(_:)","title":"dividingFullWidth(_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dividingFullWidth","kind":"identifier"},{"text":"((high","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":", low","kind":"text"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Si9Magnitudea","text":"Magnitude"},{"text":")) -> (quotient","kind":"text"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", remainder","kind":"text"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"text":")","kind":"text"}],"abstract":[{"text":"Returns a tuple containing the quotient and remainder of dividing the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"given value by this value."}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/subtractingReportingOverflow(_:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"subtractingReportingOverflow","kind":"identifier"},{"kind":"text","text":"("},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":") -> (partialValue"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", overflow"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Returns the difference obtained by subtracting the given value from this"},{"text":" ","type":"text"},{"text":"value, along with a Boolean value indicating whether overflow occurred in","type":"text"},{"type":"text","text":" "},{"text":"the operation.","type":"text"}],"title":"subtractingReportingOverflow(_:)","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/subtractingReportingOverflow(_:)","url":"\/documentation\/compute\/int\/subtractingreportingoverflow(_:)"},"doc://com.swallow.documentation.Compute/7Swallow14CoderPrimitiveP":{"title":"Swallow.CoderPrimitive","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow14CoderPrimitiveP","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/Equatable-Implementations":{"kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/Equatable-Implementations","url":"\/documentation\/compute\/int\/equatable-implementations","type":"topic","abstract":[],"title":"Equatable Implementations","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/multipliedReportingOverflow(by:)":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"multipliedReportingOverflow","kind":"identifier"},{"kind":"text","text":"("},{"text":"by","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":") -> (partialValue","kind":"text"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":", overflow"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":")"}],"abstract":[{"text":"Returns the product of this value and the given value, along with a","type":"text"},{"type":"text","text":" "},{"text":"Boolean value indicating whether overflow occurred in the operation.","type":"text"}],"title":"multipliedReportingOverflow(by:)","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/multipliedReportingOverflow(by:)","url":"\/documentation\/compute\/int\/multipliedreportingoverflow(by:)"},"doc://com.swallow.documentation.Compute/7Swallow13DataDecodableP":{"title":"Swallow.DataDecodable","type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow13DataDecodableP"},"doc://com.swallow.documentation.Compute/documentation/Compute/Encodable":{"url":"\/documentation\/compute\/encodable","navigatorTitle":[{"text":"Encodable","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Encodable","kind":"identifier"}],"abstract":[{"text":"A type that can encode itself to an external representation.","type":"text"}],"type":"topic","title":"Encodable","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/Encodable-Implementations":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/Encodable-Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/compute\/int\/encodable-implementations","title":"Encodable Implementations","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/+=(_:_:)-57xij":{"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"+=","kind":"identifier"},{"kind":"text","text":" "},{"text":"(","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Adds two values and stores the result in the left-hand-side variable."}],"title":"+=(_:_:)","type":"topic","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/+=(_:_:)-57xij","url":"\/documentation\/compute\/int\/+=(_:_:)-57xij"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/init(_:)-2oscb":{"role":"symbol","type":"topic","title":"init(_:)","abstract":[],"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Float","preciseIdentifier":"s:Sf","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(_:)-2oscb","kind":"symbol","url":"\/documentation\/compute\/int\/init(_:)-2oscb"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/init(_:)-3huv0":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(_:)-3huv0","url":"\/documentation\/compute\/int\/init(_:)-3huv0","title":"init(_:)","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s7Float16V","text":"Float16","kind":"typeIdentifier"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Creates an integer from the given floating-point value, rounding toward"},{"type":"text","text":" "},{"text":"zero.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Hashable"}],"title":"Hashable","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"A type that can be hashed into a "},{"type":"codeVoice","code":"Hasher"},{"type":"text","text":" to produce an integer hash value."}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","url":"\/documentation\/compute\/hashable","role":"symbol"},"doc://com.swallow.documentation.Compute/7Swallow8DiscreteP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiscreteP","title":"Swallow.Discrete","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow22ApproximatelyEquatableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22ApproximatelyEquatableP","title":"Swallow.ApproximatelyEquatable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow16IntegerInitiableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16IntegerInitiableP","title":"Swallow.IntegerInitiable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/_CustomPlaygroundQuickLookable-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/_CustomPlaygroundQuickLookable-Implementations","url":"\/documentation\/compute\/int\/_customplaygroundquicklookable-implementations","title":"_CustomPlaygroundQuickLookable Implementations","type":"topic","abstract":[],"kind":"article","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/SignedInteger-Implementations":{"role":"collectionGroup","abstract":[],"title":"SignedInteger Implementations","type":"topic","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/SignedInteger-Implementations","url":"\/documentation\/compute\/int\/signedinteger-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/Comparable-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/Comparable-Implementations","url":"\/documentation\/compute\/int\/comparable-implementations","type":"topic","abstract":[],"role":"collectionGroup","title":"Comparable Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/7Swallow22FloatingPointInitiableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow22FloatingPointInitiableP","title":"Swallow.FloatingPointInitiable","type":"unresolvable"},"doc://com.swallow.documentation.Compute/7Swallow7TrivialP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow7TrivialP","title":"Swallow.Trivial","type":"unresolvable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Int/init(exactly:)-77kq8":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Int\/init(exactly:)-77kq8","url":"\/documentation\/compute\/int\/init(exactly:)-77kq8","title":"init(exactly:)","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"text":"?(","kind":"text"},{"text":"exactly","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sd","text":"Double","kind":"typeIdentifier"},{"kind":"text","text":")"}],"abstract":[{"text":"Creates an integer from the given floating-point value, if it can be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"represented exactly."}],"kind":"symbol","role":"symbol"}}}