{"schemaVersion":{"patch":0,"major":0,"minor":3},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/init(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/init(_:child:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/init(_:children:)-50ly8","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/init(_:children:)-6ahia","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/init(_:children:)-7748z","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/init(value:children:)-6ief9"],"anchor":"Initializers","generated":true},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/children-swift.property","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/value-swift.property"],"anchor":"Instance-Properties","title":"Instance Properties","generated":true},{"title":"Instance Methods","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/mergeLevelwise(with:)"],"generated":true,"anchor":"Instance-Methods"},{"anchor":"Type-Aliases","title":"Type Aliases","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/Children-swift.typealias","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/Value-swift.typealias"],"generated":true},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/ConstructibleTree-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/CustomStringConvertible-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/ExpressibleByArrayLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/ExpressibleByBooleanLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/ExpressibleByFloatLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/ExpressibleByIntegerLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/ExpressibleByStringLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/HomogenousTree-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/RecursiveTreeProtocol-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/TreeProtocol-Implementations"],"title":"Default Implementations","generated":true,"anchor":"Default-Implementations"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree"},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ArrayTree"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">"}],"languages":["swift"]}],"kind":"declarations"}],"kind":"symbol","variants":[{"paths":["\/documentation\/compute\/arraytree"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"sections":[],"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ConstructibleTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByArrayLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByBooleanLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByExtendedGraphemeClusterLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByFloatLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByUnicodeScalarLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/HomogenousTree","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveTreeProtocol","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeProtocol"],"kind":"relationships","type":"conformsTo"}],"metadata":{"role":"symbol","roleHeading":"Structure","symbolKind":"struct","modules":[{"name":"Compute"}],"navigatorTitle":[{"text":"ArrayTree","kind":"identifier"}],"externalID":"s:7Compute9ArrayTreeV","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ArrayTree"}],"title":"ArrayTree"},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/init(_:children:)-7748z":{"kind":"symbol","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/init(_:children:)-7748z","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"T"},{"text":" conforms to ","type":"text"},{"code":"ExpressibleByArrayLiteral","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"url":"\/documentation\/compute\/arraytree\/init(_:children:)-7748z","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"TreeValue","preciseIdentifier":"s:7Compute9ArrayTreeV0C5Valuea","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"children"},{"text":": () -> [","kind":"text"},{"text":"T","preciseIdentifier":"s:7Compute9ArrayTreeVAAs013ExpressibleByB7LiteralRzlE1Txmfp","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:s25ExpressibleByArrayLiteralP0cD7ElementQa","text":"ArrayLiteralElement","kind":"typeIdentifier"},{"kind":"text","text":"])"}],"type":"topic","title":"init(_:children:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/Children-swift.typealias":{"url":"\/documentation\/compute\/arraytree\/children-swift.typealias","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/Children-swift.typealias","type":"topic","role":"symbol","abstract":[{"text":"The type of sequence that represents the children of a node in the tree.","type":"text"}],"navigatorTitle":[{"text":"Children","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"Children","kind":"identifier"}],"title":"ArrayTree.Children","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/init(_:)":{"kind":"symbol","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/init(_:)","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"code":"ExpressibleByArrayLiteral","type":"codeVoice"},{"text":".","type":"text"}]},"url":"\/documentation\/compute\/arraytree\/init(_:)","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"preciseIdentifier":"s:7Compute9ArrayTreeVAAs013ExpressibleByB7LiteralRzlE1Txmfp","text":"T","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"ArrayLiteralElement","preciseIdentifier":"s:s25ExpressibleByArrayLiteralP0cD7ElementQa"},{"kind":"text","text":")"}],"type":"topic","title":"init(_:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/init(_:children:)-6ahia":{"url":"\/documentation\/compute\/arraytree\/init(_:children:)-6ahia","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/init(_:children:)-6ahia","type":"topic","role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"T"},{"text":" conforms to ","type":"text"},{"code":"ExpressibleByArrayLiteral","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"abstract":[],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"preciseIdentifier":"s:7Compute9ArrayTreeVAAs013ExpressibleByB7LiteralRzlE1Txmfp","text":"T","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s25ExpressibleByArrayLiteralP0cD7ElementQa","text":"ArrayLiteralElement"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"children"},{"text":": () -> [","kind":"text"},{"preciseIdentifier":"s:7Compute9ArrayTreeVAAs013ExpressibleByB7LiteralRzlE1Txmfp","kind":"typeIdentifier","text":"T"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"ArrayLiteralElement","preciseIdentifier":"s:s25ExpressibleByArrayLiteralP0cD7ElementQa"},{"text":"])","kind":"text"}],"title":"init(_:children:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/HomogenousTree-Implementations":{"title":"HomogenousTree Implementations","type":"topic","kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/HomogenousTree-Implementations","url":"\/documentation\/compute\/arraytree\/homogenoustree-implementations","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/ExpressibleByFloatLiteral-Implementations":{"kind":"article","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/ExpressibleByFloatLiteral-Implementations","url":"\/documentation\/compute\/arraytree\/expressiblebyfloatliteral-implementations","role":"collectionGroup","type":"topic","title":"ExpressibleByFloatLiteral Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/ExpressibleByArrayLiteral-Implementations":{"url":"\/documentation\/compute\/arraytree\/expressiblebyarrayliteral-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/ExpressibleByArrayLiteral-Implementations","type":"topic","role":"collectionGroup","abstract":[],"title":"ExpressibleByArrayLiteral Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/init(_:children:)-50ly8":{"kind":"symbol","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/init(_:children:)-50ly8","url":"\/documentation\/compute\/arraytree\/init(_:children:)-50ly8","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"preciseIdentifier":"s:7Compute12TreeProtocolP0B5ValueQa","text":"TreeValue","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"children","kind":"externalParam"},{"kind":"text","text":": () -> "},{"text":"Children","preciseIdentifier":"s:7Compute9ArrayTreeV8Childrena","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic","title":"init(_:children:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/RecursiveTreeProtocol-Implementations":{"title":"RecursiveTreeProtocol Implementations","url":"\/documentation\/compute\/arraytree\/recursivetreeprotocol-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/RecursiveTreeProtocol-Implementations","type":"topic","kind":"article","abstract":[],"role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByIntegerLiteral":{"url":"\/documentation\/compute\/expressiblebyintegerliteral","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByIntegerLiteral","type":"topic","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"T"},{"text":" conforms to ","type":"text"},{"code":"ExpressibleByIntegerLiteral","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"A type that can be initialized with an integer literal."}],"navigatorTitle":[{"kind":"identifier","text":"ExpressibleByIntegerLiteral"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ExpressibleByIntegerLiteral","kind":"identifier"}],"title":"ExpressibleByIntegerLiteral","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/init(value:children:)-6ief9":{"kind":"symbol","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/init(value:children:)-6ief9","url":"\/documentation\/compute\/arraytree\/init(value:children:)-6ief9","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"value","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Compute9ArrayTreeV5Valuea","text":"Value"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"children"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Compute9ArrayTreeV8Childrena","text":"Children","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","title":"init(value:children:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree":{"url":"\/documentation\/compute\/arraytree","type":"topic","title":"ArrayTree","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ArrayTree","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree","kind":"symbol","abstract":[],"role":"symbol","navigatorTitle":[{"text":"ArrayTree","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByStringLiteral":{"url":"\/documentation\/compute\/expressiblebystringliteral","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByStringLiteral","type":"topic","role":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"T"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"ExpressibleByStringLiteral"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"abstract":[{"type":"text","text":"A type that can be initialized with a string literal."}],"navigatorTitle":[{"text":"ExpressibleByStringLiteral","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressibleByStringLiteral"}],"title":"ExpressibleByStringLiteral","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible":{"kind":"symbol","abstract":[{"type":"text","text":"A type with a customized textual representation."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","navigatorTitle":[{"text":"CustomStringConvertible","kind":"identifier"}],"url":"\/documentation\/compute\/customstringconvertible","role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"T"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Copyable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Escapable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"CustomStringConvertible","kind":"identifier"}],"type":"topic","title":"CustomStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"url":"\/documentation\/compute\/hashable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","type":"topic","role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"T","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"A type that can be hashed into a "},{"code":"Hasher","type":"codeVoice"},{"text":" to produce an integer hash value.","type":"text"}],"navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Hashable","kind":"identifier"}],"title":"Hashable","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/Hashable-Implementations":{"type":"topic","title":"Hashable Implementations","role":"collectionGroup","url":"\/documentation\/compute\/arraytree\/hashable-implementations","kind":"article","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/Hashable-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByUnicodeScalarLiteral":{"kind":"symbol","abstract":[{"text":"A type that can be initialized with a string literal containing a single","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Unicode scalar value."}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByUnicodeScalarLiteral","navigatorTitle":[{"text":"ExpressibleByUnicodeScalarLiteral","kind":"identifier"}],"url":"\/documentation\/compute\/expressiblebyunicodescalarliteral","role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"T"},{"text":" conforms to ","type":"text"},{"code":"ExpressibleByStringLiteral","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ExpressibleByUnicodeScalarLiteral","kind":"identifier"}],"type":"topic","title":"ExpressibleByUnicodeScalarLiteral"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/Value-swift.typealias":{"url":"\/documentation\/compute\/arraytree\/value-swift.typealias","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/Value-swift.typealias","type":"topic","role":"symbol","abstract":[],"navigatorTitle":[{"text":"Value","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"Value","kind":"identifier"}],"title":"ArrayTree.Value","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/ExpressibleByStringLiteral-Implementations":{"title":"ExpressibleByStringLiteral Implementations","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/ExpressibleByStringLiteral-Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/compute\/arraytree\/expressiblebystringliteral-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/ExpressibleByBooleanLiteral-Implementations":{"url":"\/documentation\/compute\/arraytree\/expressiblebybooleanliteral-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/ExpressibleByBooleanLiteral-Implementations","type":"topic","role":"collectionGroup","abstract":[],"title":"ExpressibleByBooleanLiteral Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByArrayLiteral":{"title":"ExpressibleByArrayLiteral","abstract":[{"text":"A type that can be initialized using an array literal.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByArrayLiteral","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ExpressibleByArrayLiteral","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ExpressibleByArrayLiteral"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"T","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ExpressibleByArrayLiteral"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","url":"\/documentation\/compute\/expressiblebyarrayliteral"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/children-swift.property":{"url":"\/documentation\/compute\/arraytree\/children-swift.property","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/children-swift.property","type":"topic","role":"symbol","abstract":[{"text":"The children of the current node.","type":"text"}],"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"children","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Children","kind":"typeIdentifier","preciseIdentifier":"s:7Compute9ArrayTreeV8Childrena"}],"title":"children","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/ConstructibleTree-Implementations":{"title":"ConstructibleTree Implementations","abstract":[],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/ConstructibleTree-Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/compute\/arraytree\/constructibletree-implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"url":"\/documentation\/compute\/equatable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","type":"topic","role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"T"},{"text":" conforms to ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":".","type":"text"}]},"abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Equatable"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Equatable"}],"title":"Equatable","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ConstructibleTree":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ConstructibleTree"}],"role":"symbol","abstract":[{"type":"text","text":"A tree that can be constructed from a value and a list of children."}],"navigatorTitle":[{"kind":"identifier","text":"ConstructibleTree"}],"title":"ConstructibleTree","type":"topic","url":"\/documentation\/compute\/constructibletree","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ConstructibleTree"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByBooleanLiteral":{"title":"ExpressibleByBooleanLiteral","abstract":[{"type":"text","text":"A type that can be initialized with the Boolean literals "},{"type":"codeVoice","code":"true"},{"type":"text","text":" and"},{"type":"text","text":" "},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByBooleanLiteral","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ExpressibleByBooleanLiteral","kind":"identifier"}],"navigatorTitle":[{"text":"ExpressibleByBooleanLiteral","kind":"identifier"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"T","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"ExpressibleByBooleanLiteral","type":"codeVoice"},{"text":".","type":"text"}]},"role":"symbol","url":"\/documentation\/compute\/expressiblebybooleanliteral"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByExtendedGraphemeClusterLiteral":{"url":"\/documentation\/compute\/expressiblebyextendedgraphemeclusterliteral","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByExtendedGraphemeClusterLiteral","type":"topic","role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"T","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"ExpressibleByStringLiteral","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[{"type":"text","text":"A type that can be initialized with a string literal containing a single"},{"text":" ","type":"text"},{"text":"extended grapheme cluster.","type":"text"}],"navigatorTitle":[{"text":"ExpressibleByExtendedGraphemeClusterLiteral","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ExpressibleByExtendedGraphemeClusterLiteral"}],"title":"ExpressibleByExtendedGraphemeClusterLiteral","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/RecursiveTreeProtocol":{"abstract":[{"type":"text","text":"A tree-like data structure."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"RecursiveTreeProtocol","kind":"identifier"}],"type":"topic","title":"RecursiveTreeProtocol","navigatorTitle":[{"text":"RecursiveTreeProtocol","kind":"identifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RecursiveTreeProtocol","url":"\/documentation\/compute\/recursivetreeprotocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByFloatLiteral":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByFloatLiteral","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExpressibleByFloatLiteral","kind":"identifier"}],"title":"ExpressibleByFloatLiteral","navigatorTitle":[{"text":"ExpressibleByFloatLiteral","kind":"identifier"}],"url":"\/documentation\/compute\/expressiblebyfloatliteral","role":"symbol","abstract":[{"text":"A type that can be initialized with a floating-point literal.","type":"text"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"T"},{"text":" conforms to ","type":"text"},{"code":"ExpressibleByFloatLiteral","type":"codeVoice"},{"text":".","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/init(_:child:)":{"url":"\/documentation\/compute\/arraytree\/init(_:child:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/init(_:child:)","type":"topic","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"T"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ExpressibleByArrayLiteral"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"abstract":[],"fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:7Compute9ArrayTreeVAAs013ExpressibleByB7LiteralRzlE1Txmfp","kind":"typeIdentifier","text":"T"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s25ExpressibleByArrayLiteralP0cD7ElementQa","text":"ArrayLiteralElement"},{"kind":"text","text":", "},{"text":"child","kind":"externalParam"},{"kind":"text","text":": () -> "},{"preciseIdentifier":"s:7Compute9ArrayTreeVAAs013ExpressibleByB7LiteralRzlE1Txmfp","text":"T","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"ArrayLiteralElement","kind":"typeIdentifier","preciseIdentifier":"s:s25ExpressibleByArrayLiteralP0cD7ElementQa"},{"text":")","kind":"text"}],"title":"init(_:child:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/TreeProtocol":{"abstract":[{"type":"text","text":"A tree-like data structure."}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"TreeProtocol","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/TreeProtocol","url":"\/documentation\/compute\/treeprotocol","title":"TreeProtocol","kind":"symbol","navigatorTitle":[{"text":"TreeProtocol","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/HomogenousTree":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"HomogenousTree","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/HomogenousTree","url":"\/documentation\/compute\/homogenoustree","type":"topic","abstract":[],"title":"HomogenousTree","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"HomogenousTree","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/Equatable-Implementations":{"title":"Equatable Implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/Equatable-Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/compute\/arraytree\/equatable-implementations","type":"topic","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/value-swift.property":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/value-swift.property","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"value","kind":"identifier"},{"kind":"text","text":": "},{"text":"Value","preciseIdentifier":"s:7Compute9ArrayTreeV5Valuea","kind":"typeIdentifier"}],"title":"value","url":"\/documentation\/compute\/arraytree\/value-swift.property","role":"symbol","abstract":[{"text":"The value stored in the current node.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"url":"\/documentation\/compute\/sendable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","type":"topic","role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"T"},{"text":" conforms to ","type":"text"},{"code":"Copyable","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Escapable","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[],"navigatorTitle":[{"text":"Sendable","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Sendable"}],"title":"Sendable","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/CustomStringConvertible-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/CustomStringConvertible-Implementations","kind":"article","type":"topic","title":"CustomStringConvertible Implementations","url":"\/documentation\/compute\/arraytree\/customstringconvertible-implementations","role":"collectionGroup","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"url":"\/documentation\/compute\/copyable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","type":"topic","role":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"T","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"ExpressibleByFloatLiteral","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"abstract":[{"text":"A type whose values can be implicitly or explicitly copied.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Copyable"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Copyable","kind":"identifier"}],"title":"Copyable","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/mergeLevelwise(with:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/mergeLevelwise(with:)","kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"mergeLevelwise","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Compute9ArrayTreeV","text":"ArrayTree","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:7Compute9ArrayTreeVAASHRzlE1Txmfp","kind":"typeIdentifier","text":"T"},{"text":">) ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Compute9ArrayTreeV","text":"ArrayTree"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier","preciseIdentifier":"s:7Compute9ArrayTreeVAASHRzlE1Txmfp"},{"text":">","kind":"text"}],"title":"mergeLevelwise(with:)","url":"\/documentation\/compute\/arraytree\/mergelevelwise(with:)","role":"symbol","abstract":[],"conformance":{"constraints":[{"code":"T","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/ExpressibleByIntegerLiteral-Implementations":{"url":"\/documentation\/compute\/arraytree\/expressiblebyintegerliteral-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/ExpressibleByIntegerLiteral-Implementations","type":"topic","role":"collectionGroup","abstract":[],"title":"ExpressibleByIntegerLiteral Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/documentation/Compute/ArrayTree/TreeProtocol-Implementations":{"abstract":[],"kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ArrayTree\/TreeProtocol-Implementations","type":"topic","url":"\/documentation\/compute\/arraytree\/treeprotocol-implementations","title":"TreeProtocol Implementations"}}}