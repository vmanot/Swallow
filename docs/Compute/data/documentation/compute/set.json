{"variants":[{"paths":["\/documentation\/compute\/set"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","metadata":{"roleHeading":"Structure","role":"symbol","navigatorTitle":[{"text":"Set","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Set","kind":"identifier"}],"symbolKind":"struct","externalID":"s:Sh","title":"Set","modules":[{"name":"Compute"}]},"abstract":[{"text":"An unordered collection of unique elements.","type":"text"}],"relationshipsSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByArrayLiteral","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SetAlgebra","doc:\/\/com.swallow.documentation.Compute\/7Swallow21AnyCodableConvertibleP","doc:\/\/com.swallow.documentation.Compute\/7Swallow9CountableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow28DestructivelyMutableSequenceP","doc:\/\/com.swallow.documentation.Compute\/7Swallow31DestructivelyMutableSetProtocolP","doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiffableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow45ElementRemoveableDestructivelyMutableSequenceP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18ExtensibleSequenceP","doc:\/\/com.swallow.documentation.Compute\/7Swallow21ExtensibleSetProtocolP","doc:\/\/com.swallow.documentation.Compute\/7Swallow9InitiableP","doc:\/\/com.swallow.documentation.Compute\/7Swallow16JoinableSequenceP","doc:\/\/com.swallow.documentation.Compute\/7Swallow15MutableSequenceP","doc:\/\/com.swallow.documentation.Compute\/7Swallow18MutableSetProtocolP","doc:\/\/com.swallow.documentation.Compute\/7Swallow21NonDestroyingSequenceP","doc:\/\/com.swallow.documentation.Compute\/7Swallow17ResizableSequenceP","doc:\/\/com.swallow.documentation.Compute\/7Swallow20ResizableSetProtocolP","doc:\/\/com.swallow.documentation.Compute\/7Swallow017SequenceInitiableB0P","doc:\/\/com.swallow.documentation.Compute\/7Swallow28SequenceInitiableSetProtocolP","doc:\/\/com.swallow.documentation.Compute\/7Swallow11SetProtocolP","doc:\/\/com.swallow.documentation.Compute\/7Swallow17UnorderedSequenceP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"@frozen","kind":"attribute"},{"kind":"text","text":" "},{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Set"},{"kind":"text","text":"<"},{"text":"Element","kind":"genericParameter"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"Hashable","kind":"typeIdentifier","preciseIdentifier":"s:SH","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable"}],"languages":["swift"]}]},{"content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"text":"You use a set instead of an array when you need to test efficiently for","type":"text"},{"text":" ","type":"text"},{"text":"membership and you aren’t concerned with the order of the elements in the","type":"text"},{"type":"text","text":" "},{"text":"collection, or when you need to ensure that each element appears only once","type":"text"},{"type":"text","text":" "},{"text":"in a collection.","type":"text"}]},{"inlineContent":[{"type":"text","text":"You can create a set with any element type that conforms to the "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" "},{"type":"text","text":"protocol. By default, most types in the standard library are hashable,"},{"text":" ","type":"text"},{"text":"including strings, numeric and Boolean types, enumeration cases without","type":"text"},{"type":"text","text":" "},{"text":"associated values, and even sets themselves.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Swift makes it as easy to create a new set as to create a new array. Simply","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"assign an array literal to a variable or constant with the "},{"type":"codeVoice","code":"Set"},{"type":"text","text":" type"},{"text":" ","type":"text"},{"type":"text","text":"specified."}]},{"type":"codeListing","syntax":null,"code":["let ingredients: Set = [\"cocoa beans\", \"sugar\", \"cocoa butter\", \"salt\"]","if ingredients.contains(\"sugar\") {","    print(\"No thanks, too sweet.\")","}","\/\/ Prints \"No thanks, too sweet.\""]},{"level":1,"text":"Set Operations","type":"heading","anchor":"Set-Operations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Sets provide a suite of mathematical set operations. For example, you can"},{"type":"text","text":" "},{"text":"efficiently test a set for membership of an element or check its","type":"text"},{"type":"text","text":" "},{"type":"text","text":"intersection with another set:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"code":"contains(_:)","type":"codeVoice"},{"type":"text","text":" method to test whether a set contains a specific"},{"type":"text","text":" "},{"text":"element.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Use the “equal to” operator ("},{"code":"==","type":"codeVoice"},{"type":"text","text":") to test whether two sets contain the"},{"text":" ","type":"text"},{"type":"text","text":"same elements."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"isSubset(of:)"},{"text":" method to test whether a set contains all the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements of another set or sequence."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Use the "},{"code":"isSuperset(of:)","type":"codeVoice"},{"type":"text","text":" method to test whether all elements of a set"},{"text":" ","type":"text"},{"type":"text","text":"are contained in another set or sequence."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"code":"isStrictSubset(of:)","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"isStrictSuperset(of:)"},{"type":"text","text":" methods to test"},{"type":"text","text":" "},{"text":"whether a set is a subset or superset of, but not equal to, another set.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the "},{"code":"isDisjoint(with:)","type":"codeVoice"},{"type":"text","text":" method to test whether a set has any elements"},{"type":"text","text":" "},{"type":"text","text":"in common with another set."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also combine, exclude, or subtract the elements of two sets:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"union(_:)"},{"text":" method to create a new set with the elements of a set","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and another set or sequence."}]}]},{"content":[{"inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"intersection(_:)"},{"text":" method to create a new set with only the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements common to a set and another set or sequence."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"symmetricDifference(_:)"},{"type":"text","text":" method to create a new set with the"},{"type":"text","text":" "},{"text":"elements that are in either a set or another set or sequence, but not in","type":"text"},{"text":" ","type":"text"},{"text":"both.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Use the "},{"code":"subtracting(_:)","type":"codeVoice"},{"type":"text","text":" method to create a new set with the elements of"},{"text":" ","type":"text"},{"text":"a set that are not also in another set or sequence.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"You can modify a set in place by using these methods’ mutating","type":"text"},{"type":"text","text":" "},{"text":"counterparts: ","type":"text"},{"code":"formUnion(_:)","type":"codeVoice"},{"type":"text","text":", "},{"code":"formIntersection(_:)","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"codeVoice","code":"formSymmetricDifference(_:)"},{"type":"text","text":", and "},{"code":"subtract(_:)","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Set operations are not limited to use with other sets. Instead, you can"},{"text":" ","type":"text"},{"type":"text","text":"perform set operations with another set, an array, or any other sequence"},{"text":" ","type":"text"},{"text":"type.","type":"text"}]},{"code":["var primes: Set = [2, 3, 5, 7]","","\/\/ Tests whether primes is a subset of a Range<Int>","print(primes.isSubset(of: 0..<10))","\/\/ Prints \"true\"","","\/\/ Performs an intersection with an Array<Int>","let favoriteNumbers = [5, 7, 15, 21]","print(primes.intersection(favoriteNumbers))","\/\/ Prints \"[5, 7]\""],"syntax":null,"type":"codeListing"},{"anchor":"Sequence-and-Collection-Operations","level":1,"text":"Sequence and Collection Operations","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"In addition to the ","type":"text"},{"code":"Set","type":"codeVoice"},{"text":" type’s set operations, you can use any nonmutating","type":"text"},{"text":" ","type":"text"},{"text":"sequence or collection methods with a set.","type":"text"}]},{"type":"codeListing","code":["if primes.isEmpty {","    print(\"No primes!\")","} else {","    print(\"We have \\(primes.count) primes.\")","}","\/\/ Prints \"We have 4 primes.\"","","let primesSum = primes.reduce(0, +)","\/\/ 'primesSum' == 17","","let primeStrings = primes.sorted().map(String.init)","\/\/ 'primeStrings' == [\"2\", \"3\", \"5\", \"7\"]"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can iterate through a set’s unordered elements with a "},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"text":" loop.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["for number in primes {","    print(number)","}","\/\/ Prints \"5\"","\/\/ Prints \"7\"","\/\/ Prints \"2\"","\/\/ Prints \"3\""]},{"inlineContent":[{"text":"Many sequence and collection operations return an array or a type-erasing","type":"text"},{"type":"text","text":" "},{"type":"text","text":"collection wrapper instead of a set. To restore efficient set operations,"},{"type":"text","text":" "},{"type":"text","text":"create a new set from the result."}],"type":"paragraph"},{"syntax":null,"code":["let primesStrings = primes.map(String.init)","\/\/ 'primesStrings' is of type Array<String>","let primesStringsSet = Set(primes.map(String.init))","\/\/ 'primesStringsSet' is of type Set<String>"],"type":"codeListing"},{"text":"Bridging Between Set and NSSet","anchor":"Bridging-Between-Set-and-NSSet","type":"heading","level":1},{"inlineContent":[{"type":"text","text":"You can bridge between "},{"code":"Set","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"NSSet"},{"type":"text","text":" using the "},{"code":"as","type":"codeVoice"},{"type":"text","text":" operator. For"},{"type":"text","text":" "},{"type":"text","text":"bridging to be possible, the "},{"type":"codeVoice","code":"Element"},{"text":" type of a set must be a class, an","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" protocol (a protocol imported from Objective-C or marked with the"},{"type":"text","text":" "},{"type":"codeVoice","code":"@objc"},{"text":" attribute), or a type that bridges to a Foundation type.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Bridging from "},{"code":"Set","type":"codeVoice"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"NSSet"},{"type":"text","text":" always takes O(1) time and space. When the"},{"text":" ","type":"text"},{"type":"text","text":"set’s "},{"code":"Element","type":"codeVoice"},{"type":"text","text":" type is neither a class nor an "},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" protocol, any"},{"text":" ","type":"text"},{"type":"text","text":"required bridging of elements occurs at the first access of each element,"},{"type":"text","text":" "},{"text":"so the first operation that uses the contents of the set (for example, a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"membership test) can take O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":").","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Bridging from ","type":"text"},{"type":"codeVoice","code":"NSSet"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"Set"},{"type":"text","text":" first calls the "},{"type":"codeVoice","code":"copy(with:)"},{"type":"text","text":" method"},{"text":" ","type":"text"},{"text":"(","type":"text"},{"type":"codeVoice","code":"- copyWithZone:"},{"text":" in Objective-C) on the set to get an immutable copy and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"then performs additional Swift bookkeeping work that takes O(1) time. For"},{"type":"text","text":" "},{"text":"instances of ","type":"text"},{"code":"NSSet","type":"codeVoice"},{"type":"text","text":" that are already immutable, "},{"type":"codeVoice","code":"copy(with:)"},{"text":" returns the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"same set in constant time; otherwise, the copying performance is"},{"type":"text","text":" "},{"type":"text","text":"unspecified. The instances of "},{"type":"codeVoice","code":"NSSet"},{"text":" and ","type":"text"},{"code":"Set","type":"codeVoice"},{"type":"text","text":" share buffer using the"},{"text":" ","type":"text"},{"text":"same copy-on-write optimization that is used when two instances of ","type":"text"},{"code":"Set","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"share buffer."}]}],"kind":"content"}],"sections":[],"topicSections":[{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/init(minimumCapacity:)"],"generated":true,"title":"Initializers","anchor":"Initializers"},{"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/capacity"],"title":"Instance Properties","generated":true,"anchor":"Instance-Properties"},{"generated":true,"title":"Instance Methods","identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/filter(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/firstIndex(of:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/formSymmetricDifference(_:)-5u38b","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/insert(_:)-yar4","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/isDisjoint(with:)-2onid","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/isStrictSubset(of:)-787sx","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/isStrictSubset(of:)-96vc3","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/isStrictSuperset(of:)-4d27m","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/isStrictSuperset(of:)-58ejg","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/popFirst()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/remove(_:)-4d3i1","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/remove(at:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/removeAll(keepingCapacity:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/removeFirst()","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/reserveCapacity(_:)","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/subtract(_:)-7cd3y","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/subtracting(_:)-2qge3","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/update(with:)-7r2g"],"anchor":"Instance-Methods"},{"generated":true,"identifiers":["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/Collection-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/CustomDebugStringConvertible-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/CustomReflectable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/CustomStringConvertible-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/Decodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/Encodable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/Equatable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/ExpressibleByArrayLiteral-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/Hashable-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/Sequence-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/SequenceInitiableSetProtocol-Implementations","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/SetAlgebra-Implementations"],"anchor":"Default-Implementations","title":"Default Implementations"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set"},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Set/init(minimumCapacity:)":{"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"minimumCapacity","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"kind":"symbol","type":"topic","title":"init(minimumCapacity:)","abstract":[{"type":"text","text":"Creates an empty set with preallocated space for at least the specified"},{"text":" ","type":"text"},{"type":"text","text":"number of elements."}],"role":"symbol","url":"\/documentation\/compute\/set\/init(minimumcapacity:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/init(minimumCapacity:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Encodable":{"role":"symbol","navigatorTitle":[{"text":"Encodable","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Encodable","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/encodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Encodable","title":"Encodable","abstract":[{"type":"text","text":"A type that can encode itself to an external representation."}],"type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Encodable","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Equatable":{"abstract":[{"text":"A type that can be compared for value equality.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Equatable"}],"type":"topic","title":"Equatable","role":"symbol","url":"\/documentation\/compute\/equatable","kind":"symbol","conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Equatable","navigatorTitle":[{"text":"Equatable","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/removeAll(keepingCapacity:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/removeAll(keepingCapacity:)","title":"removeAll(keepingCapacity:)","type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"abstract":[{"type":"text","text":"Removes all members from the set."}],"role":"symbol","url":"\/documentation\/compute\/set\/removeall(keepingcapacity:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"removeAll"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"keepingCapacity"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}]},"doc://com.swallow.documentation.Compute/7Swallow17UnorderedSequenceP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow17UnorderedSequenceP","type":"unresolvable","title":"Swallow.UnorderedSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/Decodable-Implementations":{"url":"\/documentation\/compute\/set\/decodable-implementations","role":"collectionGroup","kind":"article","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/Decodable-Implementations","abstract":[],"title":"Decodable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/SequenceInitiableSetProtocol-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/SequenceInitiableSetProtocol-Implementations","type":"topic","abstract":[],"url":"\/documentation\/compute\/set\/sequenceinitiablesetprotocol-implementations","role":"collectionGroup","title":"SequenceInitiableSetProtocol Implementations","kind":"article"},"doc://com.swallow.documentation.Compute/7Swallow17ResizableSequenceP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow17ResizableSequenceP","type":"unresolvable","title":"Swallow.ResizableSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/capacity":{"type":"topic","abstract":[{"type":"text","text":"The total number of elements that the set can contain without"},{"text":" ","type":"text"},{"text":"allocating new storage.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/capacity","url":"\/documentation\/compute\/set\/capacity","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"capacity","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","title":"capacity"},"doc://com.swallow.documentation.Compute/documentation/Compute/Sequence":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Sequence","kind":"identifier"}],"kind":"symbol","type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]},"title":"Sequence","abstract":[{"type":"text","text":"A type that provides sequential, iterated access to its elements."}],"navigatorTitle":[{"text":"Sequence","kind":"identifier"}],"role":"symbol","url":"\/documentation\/compute\/sequence","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sequence"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/7Swallow18ExtensibleSequenceP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18ExtensibleSequenceP","type":"unresolvable","title":"Swallow.ExtensibleSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/Equatable-Implementations":{"title":"Equatable Implementations","url":"\/documentation\/compute\/set\/equatable-implementations","role":"collectionGroup","type":"topic","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/Equatable-Implementations","abstract":[]},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/ExpressibleByArrayLiteral-Implementations":{"url":"\/documentation\/compute\/set\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"topic","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/ExpressibleByArrayLiteral-Implementations","abstract":[],"role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/popFirst()":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"popFirst","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"kind":"symbol","type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]},"title":"popFirst()","abstract":[{"type":"text","text":"Removes and returns the first element of the set."}],"role":"symbol","url":"\/documentation\/compute\/set\/popfirst()","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/popFirst()"},"doc://com.swallow.documentation.Compute/documentation/Compute/Decodable":{"role":"symbol","navigatorTitle":[{"text":"Decodable","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Decodable","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/decodable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Decodable","title":"Decodable","abstract":[{"type":"text","text":"A type that can decode itself from an external representation."}],"type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomDebugStringConvertible":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CustomDebugStringConvertible","kind":"identifier"}],"kind":"symbol","type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]},"title":"CustomDebugStringConvertible","abstract":[{"type":"text","text":"A type with a customized textual representation suitable for debugging"},{"text":" ","type":"text"},{"type":"text","text":"purposes."}],"navigatorTitle":[{"kind":"identifier","text":"CustomDebugStringConvertible"}],"role":"symbol","url":"\/documentation\/compute\/customdebugstringconvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomDebugStringConvertible"},"doc://com.swallow.documentation.Compute/7Swallow9InitiableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow9InitiableP","type":"unresolvable","title":"Swallow.Initiable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/remove(at:)":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/remove(at:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"remove"},{"kind":"text","text":"("},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Set","preciseIdentifier":"s:Sh"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sh5IndexV","text":"Index"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Element"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/set\/remove(at:)","abstract":[{"type":"text","text":"Removes the element at the given index of the set."}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"remove(at:)"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set":{"abstract":[{"type":"text","text":"An unordered collection of unique elements."}],"navigatorTitle":[{"text":"Set","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set","title":"Set","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Set"}],"type":"topic","url":"\/documentation\/compute\/set"},"doc://com.swallow.documentation.Compute/7Swallow31DestructivelyMutableSetProtocolP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow31DestructivelyMutableSetProtocolP","type":"unresolvable","title":"Swallow.DestructivelyMutableSetProtocol"},"doc://com.swallow.documentation.Compute/7Swallow16JoinableSequenceP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow16JoinableSequenceP","type":"unresolvable","title":"Swallow.JoinableSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/removeFirst()":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/removeFirst()","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"removeFirst"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"Element"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/compute\/set\/removefirst()","abstract":[{"text":"Removes the first element of the set.","type":"text"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}]},"title":"removeFirst()"},"doc://com.swallow.documentation.Compute/7Swallow21NonDestroyingSequenceP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21NonDestroyingSequenceP","type":"unresolvable","title":"Swallow.NonDestroyingSequence"},"doc://com.swallow.documentation.Compute/7Swallow017SequenceInitiableB0P":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow017SequenceInitiableB0P","type":"unresolvable","title":"Swallow.SequenceInitiableSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/formSymmetricDifference(_:)-5u38b":{"type":"topic","url":"\/documentation\/compute\/set\/formsymmetricdifference(_:)-5u38b","title":"formSymmetricDifference(_:)","abstract":[{"type":"text","text":"Replace this set with the elements contained in this set or the given"},{"text":" ","type":"text"},{"text":"set, but not both.","type":"text"}],"kind":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/formSymmetricDifference(_:)-5u38b","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"formSymmetricDifference"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"text":")","kind":"text"}]},"doc://com.swallow.documentation.Compute/7Swallow8DiffableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow8DiffableP","type":"unresolvable","title":"Swallow.Diffable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/isStrictSubset(of:)-96vc3":{"title":"isStrictSubset(of:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"isStrictSubset"},{"kind":"text","text":"("},{"text":"of","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Set","preciseIdentifier":"s:Sh"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/compute\/set\/isstrictsubset(of:)-96vc3","abstract":[{"type":"text","text":"Returns a Boolean value that indicates whether the set is a strict subset"},{"type":"text","text":" "},{"text":"of the given sequence.","type":"text"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/isStrictSubset(of:)-96vc3","type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/Collection-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/Collection-Implementations","title":"Collection Implementations","abstract":[],"url":"\/documentation\/compute\/set\/collection-implementations","type":"topic","kind":"article","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/CustomStringConvertible-Implementations":{"role":"collectionGroup","kind":"article","url":"\/documentation\/compute\/set\/customstringconvertible-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/CustomStringConvertible-Implementations","title":"CustomStringConvertible Implementations","abstract":[],"type":"topic"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/Encodable-Implementations":{"abstract":[],"kind":"article","type":"topic","role":"collectionGroup","url":"\/documentation\/compute\/set\/encodable-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/Encodable-Implementations","title":"Encodable Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomStringConvertible":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"CustomStringConvertible","kind":"identifier"}],"kind":"symbol","type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]},"title":"CustomStringConvertible","abstract":[{"type":"text","text":"A type with a customized textual representation."}],"navigatorTitle":[{"text":"CustomStringConvertible","kind":"identifier"}],"role":"symbol","url":"\/documentation\/compute\/customstringconvertible","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomStringConvertible"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/Hashable-Implementations":{"abstract":[],"type":"topic","title":"Hashable Implementations","url":"\/documentation\/compute\/set\/hashable-implementations","kind":"article","role":"collectionGroup","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/Hashable-Implementations"},"doc://com.swallow.documentation.Compute/documentation/Compute/SetAlgebra":{"role":"symbol","navigatorTitle":[{"text":"SetAlgebra","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SetAlgebra","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/setalgebra","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/SetAlgebra","title":"SetAlgebra","abstract":[{"type":"text","text":"A type that provides mathematical set operations."}],"type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/7Swallow28DestructivelyMutableSequenceP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow28DestructivelyMutableSequenceP","type":"unresolvable","title":"Swallow.DestructivelyMutableSequence"},"doc://com.swallow.documentation.Compute/7Swallow21ExtensibleSetProtocolP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21ExtensibleSetProtocolP","type":"unresolvable","title":"Swallow.ExtensibleSetProtocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/update(with:)-7r2g":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"update"},{"text":"<","kind":"text"},{"text":"ConcreteElement","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"with"},{"text":": ","kind":"text"},{"text":"ConcreteElement","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ConcreteElement"},{"kind":"text","text":"?"}],"kind":"symbol","type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" is "},{"code":"AnyHashable","type":"codeVoice"},{"type":"text","text":"."}]},"title":"update(with:)","abstract":[],"role":"symbol","url":"\/documentation\/compute\/set\/update(with:)-7r2g","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/update(with:)-7r2g"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/reserveCapacity(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"reserveCapacity"},{"kind":"text","text":"("},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"kind":"text","text":")"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]},"url":"\/documentation\/compute\/set\/reservecapacity(_:)","abstract":[{"text":"Reserves enough space to store the specified number of elements.","type":"text"}],"title":"reserveCapacity(_:)","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/reserveCapacity(_:)","type":"topic","kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/subtract(_:)-7cd3y":{"type":"topic","abstract":[{"text":"Removes the elements of the given sequence from the set.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/subtract(_:)-7cd3y","role":"symbol","kind":"symbol","url":"\/documentation\/compute\/set\/subtract(_:)-7cd3y","title":"subtract(_:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"subtract","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/subtracting(_:)-2qge3":{"kind":"symbol","type":"topic","abstract":[{"text":"Returns a new set containing the elements of this set that do not occur","type":"text"},{"type":"text","text":" "},{"text":"in the given sequence.","type":"text"}],"url":"\/documentation\/compute\/set\/subtracting(_:)-2qge3","title":"subtracting(_:)","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/subtracting(_:)-2qge3","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"subtracting"},{"kind":"text","text":"<"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Set","preciseIdentifier":"s:Sh"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"text":">","kind":"text"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/SetAlgebra-Implementations":{"abstract":[],"url":"\/documentation\/compute\/set\/setalgebra-implementations","title":"SetAlgebra Implementations","role":"collectionGroup","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/SetAlgebra-Implementations","type":"topic"},"doc://com.swallow.documentation.Compute/7Swallow18MutableSetProtocolP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow18MutableSetProtocolP","type":"unresolvable","title":"Swallow.MutableSetProtocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/CustomReflectable":{"navigatorTitle":[{"text":"CustomReflectable","kind":"identifier"}],"url":"\/documentation\/compute\/customreflectable","kind":"symbol","title":"CustomReflectable","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CustomReflectable"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CustomReflectable","abstract":[{"type":"text","text":"A type that explicitly supplies its own mirror."}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Hashable":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Hashable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Hashable","kind":"identifier"}],"role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]},"abstract":[{"text":"A type that can be hashed into a ","type":"text"},{"type":"codeVoice","code":"Hasher"},{"text":" to produce an integer hash value.","type":"text"}],"type":"topic","title":"Hashable","navigatorTitle":[{"text":"Hashable","kind":"identifier"}],"url":"\/documentation\/compute\/hashable","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/isStrictSubset(of:)-787sx":{"abstract":[{"text":"Returns a Boolean value that indicates whether the set is a strict subset","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the given sequence."}],"title":"isStrictSubset(of:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"isStrictSubset","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"S"},{"text":">(","kind":"text"},{"text":"of","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/isStrictSubset(of:)-787sx","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}]},"type":"topic","role":"symbol","url":"\/documentation\/compute\/set\/isstrictsubset(of:)-787sx"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/isStrictSuperset(of:)-58ejg":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/isStrictSuperset(of:)-58ejg","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"isStrictSuperset"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"of","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":") -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"url":"\/documentation\/compute\/set\/isstrictsuperset(of:)-58ejg","title":"isStrictSuperset(of:)","abstract":[{"text":"Returns a Boolean value that indicates whether the set is a strict","type":"text"},{"type":"text","text":" "},{"text":"superset of the given sequence.","type":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/CVarArg":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"CVarArg","kind":"identifier"}],"kind":"symbol","type":"topic","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"CVarArg","abstract":[{"type":"text","text":"A type whose instances can be encoded, and appropriately passed, as"},{"text":" ","type":"text"},{"type":"text","text":"elements of a C "},{"code":"va_list","type":"codeVoice"},{"type":"text","text":"."}],"navigatorTitle":[{"text":"CVarArg","kind":"identifier"}],"role":"symbol","url":"\/documentation\/compute\/cvararg","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/CVarArg"},"doc://com.swallow.documentation.Compute/7Swallow21AnyCodableConvertibleP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow21AnyCodableConvertibleP","type":"unresolvable","title":"Swallow.AnyCodableConvertible"},"doc://com.swallow.documentation.Compute/7Swallow15MutableSequenceP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow15MutableSequenceP","type":"unresolvable","title":"Swallow.MutableSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/firstIndex(of:)":{"abstract":[{"type":"text","text":"Returns the index of the given element in the set, or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if the"},{"type":"text","text":" "},{"text":"element is not a member of the set.","type":"text"}],"role":"symbol","url":"\/documentation\/compute\/set\/firstindex(of:)","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]},"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/firstIndex(of:)","kind":"symbol","title":"firstIndex(of:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"firstIndex","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"of"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Element"},{"text":") -> ","kind":"text"},{"text":"Set","kind":"typeIdentifier","preciseIdentifier":"s:Sh"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"text":">.","kind":"text"},{"text":"Index","preciseIdentifier":"s:Sh5IndexV","kind":"typeIdentifier"},{"text":"?","kind":"text"}]},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/filter(_:)":{"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"text":".","type":"text"}]},"abstract":[{"text":"Returns a new set containing the elements of the set that satisfy the","type":"text"},{"type":"text","text":" "},{"text":"given predicate.","type":"text"}],"url":"\/documentation\/compute\/set\/filter(_:)","title":"filter(_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"filter","kind":"identifier"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Element"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Set","preciseIdentifier":"s:Sh"},{"kind":"text","text":"<"},{"text":"Element","kind":"typeIdentifier"},{"kind":"text","text":">"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/filter(_:)","role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Copyable":{"role":"symbol","navigatorTitle":[{"text":"Copyable","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Copyable","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/copyable","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Copyable","title":"Copyable","abstract":[{"type":"text","text":"A type whose values can be implicitly or explicitly copied."}],"type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/7Swallow9CountableP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow9CountableP","type":"unresolvable","title":"Swallow.Countable"},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Collection"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Collection","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/collection","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","title":"Collection","abstract":[{"type":"text","text":"A sequence whose elements can be traversed multiple times,"},{"text":" ","type":"text"},{"type":"text","text":"nondestructively, and accessed by an indexed subscript."}],"type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/Sequence-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/Sequence-Implementations","kind":"article","abstract":[],"url":"\/documentation\/compute\/set\/sequence-implementations","type":"topic","title":"Sequence Implementations","role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/isDisjoint(with:)-2onid":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"isDisjoint","kind":"identifier"},{"kind":"text","text":"<"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"kind":"symbol","type":"topic","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]},"title":"isDisjoint(with:)","abstract":[{"type":"text","text":"Returns a Boolean value that indicates whether the set has no members in"},{"text":" ","type":"text"},{"type":"text","text":"common with the given sequence."}],"role":"symbol","url":"\/documentation\/compute\/set\/isdisjoint(with:)-2onid","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/isDisjoint(with:)-2onid"},"doc://com.swallow.documentation.Compute/7Swallow11SetProtocolP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow11SetProtocolP","type":"unresolvable","title":"Swallow.SetProtocol"},"doc://com.swallow.documentation.Compute/7Swallow28SequenceInitiableSetProtocolP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow28SequenceInitiableSetProtocolP","type":"unresolvable","title":"Swallow.SequenceInitiableSetProtocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/CustomDebugStringConvertible-Implementations":{"title":"CustomDebugStringConvertible Implementations","url":"\/documentation\/compute\/set\/customdebugstringconvertible-implementations","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/CustomDebugStringConvertible-Implementations","type":"topic","kind":"article","abstract":[],"role":"collectionGroup"},"doc://com.swallow.documentation.Compute/documentation/Compute/ExpressibleByArrayLiteral":{"role":"symbol","navigatorTitle":[{"text":"ExpressibleByArrayLiteral","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ExpressibleByArrayLiteral","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/compute\/expressiblebyarrayliteral","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/ExpressibleByArrayLiteral","title":"ExpressibleByArrayLiteral","abstract":[{"type":"text","text":"A type that can be initialized using an array literal."}],"type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Sendable":{"navigatorTitle":[{"text":"Sendable","kind":"identifier"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"Sendable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Sendable"}],"type":"topic","kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Sendable","url":"\/documentation\/compute\/sendable","abstract":[]},"doc://com.swallow.documentation.Compute/7Swallow20ResizableSetProtocolP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow20ResizableSetProtocolP","type":"unresolvable","title":"Swallow.ResizableSetProtocol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/insert(_:)-yar4":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"insert"},{"text":"<","kind":"text"},{"text":"ConcreteElement","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"ConcreteElement"},{"text":") -> (inserted","kind":"text"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", memberAfterInsert"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ConcreteElement"},{"text":")","kind":"text"}],"kind":"symbol","url":"\/documentation\/compute\/set\/insert(_:)-yar4","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/insert(_:)-yar4","title":"insert(_:)","abstract":[],"type":"topic","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" is "},{"code":"AnyHashable","type":"codeVoice"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/isStrictSuperset(of:)-4d27m":{"kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"isStrictSuperset","kind":"identifier"},{"kind":"text","text":"("},{"text":"of","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Set","kind":"typeIdentifier","preciseIdentifier":"s:Sh"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/isStrictSuperset(of:)-4d27m","title":"isStrictSuperset(of:)","abstract":[{"text":"Returns a Boolean value that indicates whether the set is a strict","type":"text"},{"type":"text","text":" "},{"text":"superset of the given sequence.","type":"text"}],"url":"\/documentation\/compute\/set\/isstrictsuperset(of:)-4d27m","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":"."}]}},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/CustomReflectable-Implementations":{"url":"\/documentation\/compute\/set\/customreflectable-implementations","role":"collectionGroup","abstract":[],"type":"topic","title":"CustomReflectable Implementations","kind":"article","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/CustomReflectable-Implementations"},"doc://com.swallow.documentation.Compute/7Swallow45ElementRemoveableDestructivelyMutableSequenceP":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/7Swallow45ElementRemoveableDestructivelyMutableSequenceP","type":"unresolvable","title":"Swallow.ElementRemoveableDestructivelyMutableSequence"},"doc://com.swallow.documentation.Compute/documentation/Compute/Set/remove(_:)-4d3i1":{"type":"topic","kind":"symbol","title":"remove(_:)","role":"symbol","url":"\/documentation\/compute\/set\/remove(_:)-4d3i1","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"remove","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ConcreteElement","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"ConcreteElement","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"ConcreteElement","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Set\/remove(_:)-4d3i1","abstract":[],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"AnyHashable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]}}}}