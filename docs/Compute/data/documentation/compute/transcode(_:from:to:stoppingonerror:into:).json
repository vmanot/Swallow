{"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"role":"symbol","symbolKind":"func","roleHeading":"Function","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"transcode"},{"kind":"text","text":"<"},{"text":"Input","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"InputEncoding","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"OutputEncoding","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"Input"},{"text":", ","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"text":"InputEncoding","kind":"typeIdentifier"},{"text":".Type, ","kind":"text"},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OutputEncoding"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"stoppingOnError"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"text":"into","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"OutputEncoding"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:s16_UnicodeEncodingP8CodeUnitQa","text":"CodeUnit"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"modules":[{"name":"Compute"}],"title":"transcode(_:from:to:stoppingOnError:into:)","externalID":"s:s9transcode_4from2to15stoppingOnError4intoSbx_q_mq0_mSby8CodeUnitQy0_XEtStRzs16_UnicodeEncodingR_sAHR0_AFQy_7ElementRtzr1_lF"},"sections":[],"kind":"symbol","abstract":[{"text":"Translates the given input from one Unicode encoding to another by calling","type":"text"},{"type":"text","text":" "},{"text":"the given closure.","type":"text"}],"identifier":{"url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/transcode(_:from:to:stoppingOnError:into:)","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/compute\/transcode(_:from:to:stoppingonerror:into:)"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"transcode"},{"kind":"text","text":"<"},{"text":"Input","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"InputEncoding"},{"text":", ","kind":"text"},{"text":"OutputEncoding","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"input","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"from","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"inputEncoding","kind":"internalParam"},{"kind":"text","text":": "},{"text":"InputEncoding","kind":"typeIdentifier"},{"kind":"text","text":".Type, "},{"text":"to","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"outputEncoding","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OutputEncoding"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"stoppingOnError"},{"kind":"text","text":" "},{"text":"stopOnError","kind":"internalParam"},{"kind":"text","text":": "},{"text":"Bool","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"into"},{"kind":"text","text":" "},{"kind":"internalParam","text":"processCodeUnit"},{"text":": (","kind":"text"},{"text":"OutputEncoding","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:s16_UnicodeEncodingP8CodeUnitQa","text":"CodeUnit"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Void","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"IteratorProtocol","preciseIdentifier":"s:St","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol"},{"kind":"text","text":", "},{"text":"InputEncoding","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","text":"_UnicodeEncoding"},{"kind":"text","text":", "},{"text":"OutputEncoding","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"_UnicodeEncoding","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:St7ElementQa","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol\/Element","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"InputEncoding","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"CodeUnit","preciseIdentifier":"s:s16_UnicodeEncodingP8CodeUnitQa"}]}]},{"parameters":[{"name":"input","content":[{"inlineContent":[{"text":"An iterator of code units to be translated, encoded as","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"inputEncoding"},{"text":". If ","type":"text"},{"type":"codeVoice","code":"stopOnError"},{"text":" is ","type":"text"},{"code":"false","type":"codeVoice"},{"text":", the entire iterator will","type":"text"},{"type":"text","text":" "},{"type":"text","text":"be exhausted. Otherwise, iteration will stop if an encoding error is"},{"text":" ","type":"text"},{"type":"text","text":"detected."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The Unicode encoding of "},{"code":"input","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"inputEncoding"},{"name":"outputEncoding","content":[{"inlineContent":[{"text":"The destination Unicode encoding.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Pass "},{"code":"true","type":"codeVoice"},{"type":"text","text":" to stop translation when an encoding error is"},{"type":"text","text":" "},{"text":"detected in ","type":"text"},{"type":"codeVoice","code":"input"},{"text":". Otherwise, a Unicode replacement character","type":"text"},{"text":" ","type":"text"},{"text":"(","type":"text"},{"type":"codeVoice","code":"\"\\u{FFFD}\""},{"type":"text","text":") is inserted for each detected error."}]}],"name":"stopOnError"},{"name":"processCodeUnit","content":[{"type":"paragraph","inlineContent":[{"text":"A closure that processes one ","type":"text"},{"type":"codeVoice","code":"outputEncoding"},{"text":" code","type":"text"},{"type":"text","text":" "},{"text":"unit at a time.","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","text":"Return Value","level":2,"anchor":"return-value"},{"inlineContent":[{"type":"text","text":""},{"code":"true","type":"codeVoice"},{"text":" if the translation detected encoding errors in ","type":"text"},{"type":"codeVoice","code":"input"},{"type":"text","text":";"},{"text":" ","type":"text"},{"text":"otherwise, ","type":"text"},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example transcodes the UTF-8 representation of the string"},{"type":"text","text":" "},{"type":"codeVoice","code":"\"Fermata ùÑê\""},{"type":"text","text":" into UTF-32."}]},{"syntax":null,"type":"codeListing","code":["let fermata = \"Fermata ùÑê\"","let bytes = fermata.utf8","print(Array(bytes))","\/\/ Prints \"[70, 101, 114, 109, 97, 116, 97, 32, 240, 157, 132, 144]\"","","var codeUnits: [UTF32.CodeUnit] = []","let sink = { codeUnits.append($0) }","transcode(bytes.makeIterator(), from: UTF8.self, to: UTF32.self,","          stoppingOnError: false, into: sink)","print(codeUnits)","\/\/ Prints \"[70, 101, 114, 109, 97, 116, 97, 32, 119056]\""]},{"inlineContent":[{"text":"The ","type":"text"},{"code":"sink","type":"codeVoice"},{"type":"text","text":" closure is called with each resulting UTF-32 code unit as the"},{"type":"text","text":" "},{"type":"text","text":"function iterates over its input."}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute"]]},"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Bool":{"url":"\/documentation\/compute\/bool","role":"symbol","title":"Bool","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Bool","kind":"identifier"}],"abstract":[{"type":"text","text":"A value type whose instances are either "},{"type":"codeVoice","code":"true"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"Bool","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Bool","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/IteratorProtocol/Element":{"fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"text":"Element","kind":"identifier"}],"type":"topic","url":"\/documentation\/compute\/iteratorprotocol\/element","abstract":[{"text":"The type of element traversed by the iterator.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol\/Element","title":"Element","kind":"symbol","required":true,"role":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/transcode(_:from:to:stoppingOnError:into:)":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/transcode(_:from:to:stoppingOnError:into:)","role":"symbol","url":"\/documentation\/compute\/transcode(_:from:to:stoppingonerror:into:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"transcode"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"text":", ","kind":"text"},{"text":"InputEncoding","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"OutputEncoding","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"Input","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"InputEncoding"},{"kind":"text","text":".Type, "},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"OutputEncoding"},{"text":".Type, ","kind":"text"},{"text":"stoppingOnError","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"into","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"OutputEncoding","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"CodeUnit","preciseIdentifier":"s:s16_UnicodeEncodingP8CodeUnitQa","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"text":"Translates the given input from one Unicode encoding to another by calling","type":"text"},{"type":"text","text":" "},{"text":"the given closure.","type":"text"}],"title":"transcode(_:from:to:stoppingOnError:into:)","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/Void":{"abstract":[{"text":"The return type of functions that don‚Äôt explicitly specify a return type,","type":"text"},{"text":" ","type":"text"},{"text":"that is, an empty tuple ","type":"text"},{"type":"codeVoice","code":"()"},{"type":"text","text":"."}],"type":"topic","title":"Void","url":"\/documentation\/compute\/void","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Void"}],"navigatorTitle":[{"text":"Void","kind":"identifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Void"},"doc://com.swallow.documentation.Compute/documentation/Compute/IteratorProtocol":{"url":"\/documentation\/compute\/iteratorprotocol","navigatorTitle":[{"kind":"identifier","text":"IteratorProtocol"}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"IteratorProtocol"}],"abstract":[{"type":"text","text":"A type that supplies the values of a sequence one at a time."}],"type":"topic","title":"IteratorProtocol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/IteratorProtocol"}}}