{"kind":"symbol","metadata":{"title":"relative(to:)","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"relative"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sn","text":"Range","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:SX5BoundQa","text":"Bound","kind":"typeIdentifier"},{"kind":"text","text":">"}],"required":true,"modules":[{"name":"Compute"}],"symbolKind":"method","externalID":"s:SX8relative2toSny5BoundQzGqd___tSlRd__5IndexQyd__ADRSlF","role":"symbol"},"abstract":[{"type":"text","text":"Returns the range of indices described by this range expression within"},{"text":" ","type":"text"},{"text":"the given collection.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression\/relative(to:)"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression"]]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"relative","kind":"identifier"},{"kind":"text","text":"<"},{"text":"C","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"to"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"collection"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":") -> ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","kind":"typeIdentifier","text":"Range","preciseIdentifier":"s:Sn"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:SX5BoundQa","text":"Bound","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression\/Bound","kind":"typeIdentifier"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","text":"Collection","preciseIdentifier":"s:Sl"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression\/Bound","text":"Bound","preciseIdentifier":"s:SX5BoundQa"},{"kind":"text","text":" == "},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":"."},{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection\/Index","kind":"typeIdentifier","text":"Index","preciseIdentifier":"s:Sl5IndexQa"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"collection","content":[{"inlineContent":[{"type":"text","text":"The collection to evaluate this range expression"},{"text":" ","type":"text"},{"type":"text","text":"in relation to."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A range suitable for slicing "},{"type":"codeVoice","code":"collection"},{"type":"text","text":". The returned range"},{"text":" ","type":"text"},{"text":"is ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"text":" guaranteed to be inside the bounds of ","type":"text"},{"code":"collection","type":"codeVoice"},{"type":"text","text":". Callers"},{"type":"text","text":" "},{"type":"text","text":"should apply the same preconditions to the return value as they would"},{"text":" ","type":"text"},{"text":"to a range provided directly by the user.","type":"text"}]}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You can use the ","type":"text"},{"type":"codeVoice","code":"relative(to:)"},{"type":"text","text":" method to convert a range expression,"},{"type":"text","text":" "},{"text":"which could be missing one or both of its endpoints, into a concrete","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"range that is bounded on both sides. The following example uses this"},{"text":" ","type":"text"},{"type":"text","text":"method to convert a partial range up to "},{"code":"4","type":"codeVoice"},{"type":"text","text":" into a half-open range,"},{"text":" ","type":"text"},{"type":"text","text":"using an array instance to add the range’s lower bound."}]},{"syntax":null,"code":["let numbers = [10, 20, 30, 40, 50, 60, 70]","let upToFour = ..<4","","let r1 = upToFour.relative(to: numbers)","\/\/ r1 == 0..<4"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"r1"},{"text":" range is bounded on the lower end by ","type":"text"},{"code":"0","type":"codeVoice"},{"text":" because that is the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"starting index of the "},{"type":"codeVoice","code":"numbers"},{"type":"text","text":" array. When the collection passed to"},{"text":" ","type":"text"},{"code":"relative(to:)","type":"codeVoice"},{"type":"text","text":" starts with a different index, that index is used as the"},{"type":"text","text":" "},{"text":"lower bound instead. The next example creates a slice of ","type":"text"},{"type":"codeVoice","code":"numbers"},{"type":"text","text":" "},{"text":"starting at index ","type":"text"},{"code":"2","type":"codeVoice"},{"text":", and then uses the slice with ","type":"text"},{"code":"relative(to:)","type":"codeVoice"},{"type":"text","text":" to"},{"text":" ","type":"text"},{"text":"convert ","type":"text"},{"code":"upToFour","type":"codeVoice"},{"type":"text","text":" to a concrete range."}],"type":"paragraph"},{"code":["let numbersSuffix = numbers[2...]","\/\/ numbersSuffix == [30, 40, 50, 60, 70]","","let r2 = upToFour.relative(to: numbersSuffix)","\/\/ r2 == 2..<4"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this method only if you need the concrete range it produces. To"},{"type":"text","text":" "},{"text":"access a slice of a collection using a range expression, use the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"collection’s generic subscript that uses a range expression as its"},{"type":"text","text":" "},{"type":"text","text":"parameter."}]},{"code":["let numbersPrefix = numbers[upToFour]","\/\/ numbersPrefix == [10, 20, 30, 40]"],"syntax":null,"type":"codeListing"}]}],"sections":[],"variants":[{"paths":["\/documentation\/compute\/rangeexpression\/relative(to:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.swallow.documentation.Compute/documentation/Compute/Collection/Index":{"url":"\/documentation\/compute\/collection\/index","required":true,"role":"symbol","title":"Index","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Index","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"Comparable","preciseIdentifier":"s:SL","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"A type that represents a position in the collection."}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection\/Index","kind":"symbol"},"doc://com.swallow.documentation.Compute/documentation/Compute/Collection":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Collection"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Collection","url":"\/documentation\/compute\/collection","abstract":[{"type":"text","text":"A sequence whose elements can be traversed multiple times,"},{"text":" ","type":"text"},{"text":"nondestructively, and accessed by an indexed subscript.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Collection"}],"title":"Collection"},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeExpression/relative(to:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"relative"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"C"},{"text":">(","kind":"text"},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":") -> "},{"text":"Range","kind":"typeIdentifier","preciseIdentifier":"s:Sn"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Bound","kind":"typeIdentifier","preciseIdentifier":"s:SX5BoundQa"},{"kind":"text","text":">"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression\/relative(to:)","title":"relative(to:)","url":"\/documentation\/compute\/rangeexpression\/relative(to:)","abstract":[{"text":"Returns the range of indices described by this range expression within","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the given collection."}],"role":"symbol","type":"topic","required":true},"doc://com.swallow.documentation.Compute/documentation/Compute/Range":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Range","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/Range","url":"\/documentation\/compute\/range","abstract":[{"text":"A half-open interval from a lower bound up to, but not including, an upper","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"bound."}],"navigatorTitle":[{"text":"Range","kind":"identifier"}],"title":"Range"},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeExpression":{"abstract":[{"text":"A type that can be used to slice a collection.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"RangeExpression","kind":"identifier"}],"url":"\/documentation\/compute\/rangeexpression","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression","kind":"symbol","title":"RangeExpression","role":"symbol","type":"topic","navigatorTitle":[{"text":"RangeExpression","kind":"identifier"}]},"doc://com.swallow.documentation.Compute/documentation/Compute":{"identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute","url":"\/documentation\/compute","role":"collection","kind":"symbol","abstract":[],"type":"topic","title":"Compute"},"doc://com.swallow.documentation.Compute/documentation/Compute/RangeExpression/Bound":{"role":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.Compute\/documentation\/Compute\/RangeExpression\/Bound","title":"Bound","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Bound"},{"kind":"text","text":" : "},{"text":"Comparable","kind":"typeIdentifier","preciseIdentifier":"s:SL"}],"url":"\/documentation\/compute\/rangeexpression\/bound","required":true,"abstract":[{"text":"The type for which the expression describes a range.","type":"text"}],"kind":"symbol"}}}