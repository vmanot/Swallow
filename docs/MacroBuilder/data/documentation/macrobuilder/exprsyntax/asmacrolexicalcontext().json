{"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"asMacroLexicalContext"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B0V","text":"Syntax","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/Syntax"},{"text":"?","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"Returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" for any syntax node that isn’t a lexical context."}]}]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExprSyntax\/asMacroLexicalContext()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"If this syntax node acts as a lexical context from the perspective"},{"type":"text","text":" "},{"type":"text","text":"of a macro, return a new syntax node based on this node that strips all"},{"text":" ","type":"text"},{"type":"text","text":"information that isn’t supposed to be exposed as a lexical context, such"},{"type":"text","text":" "},{"text":"as function bodies or the members of types\/extensions.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/macrobuilder\/exprsyntax\/asmacrolexicalcontext()"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExprSyntax","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExprSyntax\/SyntaxProtocol-Implementations"]]},"sections":[],"metadata":{"modules":[{"name":"MacroBuilder","relatedModules":["SwiftSyntax"]}],"externalID":"s:11SwiftSyntax0B8ProtocolP0aB6MacrosE21asMacroLexicalContextAA0B0VSgyF::SYNTHESIZED::s:11SwiftSyntax04ExprB0V","extendedModule":"SwiftSyntax","role":"symbol","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"asMacroLexicalContext","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"Syntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B0V"},{"kind":"text","text":"?"}],"symbolKind":"method","title":"asMacroLexicalContext()"},"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/ExprSyntax/SyntaxProtocol-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExprSyntax\/SyntaxProtocol-Implementations","abstract":[],"role":"collectionGroup","url":"\/documentation\/macrobuilder\/exprsyntax\/syntaxprotocol-implementations","kind":"article","type":"topic","title":"SyntaxProtocol Implementations"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/ExprSyntax":{"url":"\/documentation\/macrobuilder\/exprsyntax","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ExprSyntax","kind":"identifier"}],"type":"topic","title":"ExprSyntax","abstract":[],"kind":"symbol","navigatorTitle":[{"text":"ExprSyntax","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExprSyntax"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/Syntax":{"abstract":[{"type":"text","text":"A Syntax node represents a tree of nodes with tokens at the leaves."},{"text":" ","type":"text"},{"type":"text","text":"Each node has accessors for its known children, and allows efficient"},{"text":" ","type":"text"},{"text":"iteration over the children through its ","type":"text"},{"type":"codeVoice","code":"children"},{"text":" property.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Syntax"}],"url":"\/documentation\/macrobuilder\/syntax","title":"Syntax","type":"topic","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/Syntax","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Syntax","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/ExprSyntax/asMacroLexicalContext()":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExprSyntax\/asMacroLexicalContext()","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"asMacroLexicalContext"},{"text":"() -> ","kind":"text"},{"text":"Syntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B0V"},{"text":"?","kind":"text"}],"role":"symbol","url":"\/documentation\/macrobuilder\/exprsyntax\/asmacrolexicalcontext()","abstract":[{"text":"If this syntax node acts as a lexical context from the perspective","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of a macro, return a new syntax node based on this node that strips all"},{"text":" ","type":"text"},{"type":"text","text":"information that isn’t supposed to be exposed as a lexical context, such"},{"type":"text","text":" "},{"text":"as function bodies or the members of types\/extensions.","type":"text"}],"title":"asMacroLexicalContext()"}}}