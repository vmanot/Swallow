{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/macrobuilder\/exprsyntax\/init(literal:)"]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExprSyntax\/init(literal:)","interfaceLanguage":"swift"},"metadata":{"role":"symbol","title":"init(literal:)","externalID":"s:11SwiftSyntax04ExprB0V0aB7BuilderE7literalACx_tcAD020ExpressibleByLiteralB0Rzlufc","symbolKind":"init","roleHeading":"Initializer","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"literal"},{"text":": some ","kind":"text"},{"preciseIdentifier":"s:18SwiftSyntaxBuilder020ExpressibleByLiteralB0P","kind":"typeIdentifier","text":"ExpressibleByLiteralSyntax"},{"text":")","kind":"text"}],"modules":[{"name":"MacroBuilder","relatedModules":["SwiftSyntax"]}],"extendedModule":"SwiftSyntax"},"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"text":"literal","kind":"externalParam"},{"text":": some ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:18SwiftSyntaxBuilder020ExpressibleByLiteralB0P","text":"ExpressibleByLiteralSyntax","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExpressibleByLiteralSyntax"},{"text":")","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"type":"codeListing","code":["let arrayExpr = Expr(literal: [\"a\", \"b\", \"c\"])","\/\/ `arrayExpr` is a syntax tree like `[\"a\", \"b\", \"c\"]`"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"This initializer is compatible with types that conform to"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExpressibleByLiteralSyntax"},{"type":"text","text":". These include:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"String"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Substring"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Int"},{"type":"text","text":" and other integer types"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Double"},{"type":"text","text":" and other floating-point types"}]}]},{"content":[{"inlineContent":[{"code":"Bool","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Array"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Set"},{"text":" of conforming elements","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" and "},{"code":"KeyValuePairs","type":"codeVoice"},{"type":"text","text":" of conforming keys and values"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Optional"},{"type":"text","text":" of conforming wrapped value"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conformances will generally handle edge cases sensibly: "},{"type":"codeVoice","code":"String"},{"type":"text","text":" will"},{"text":" ","type":"text"},{"text":"use raw literals and escapes as needed, ","type":"text"},{"code":"Optional","type":"codeVoice"},{"text":" will wrap a nested","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" in "},{"type":"codeVoice","code":".some"},{"text":", ","type":"text"},{"code":"Double","type":"codeVoice"},{"type":"text","text":" will represent special values like infinities"},{"text":" ","type":"text"},{"type":"text","text":"as code sequences like "},{"code":".infinity","type":"codeVoice"},{"type":"text","text":", etc. "},{"type":"codeVoice","code":"Set"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"text":" sort","type":"text"},{"type":"text","text":" "},{"text":"their elements to improve stability.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Because of that intelligent behavior, this initializer is not guaranteed","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to produce a literal as the outermost syntax node, or even to have a"},{"type":"text","text":" "},{"text":"literal anywhere in its syntax tree. Use a convenience initializer on a","type":"text"},{"text":" ","type":"text"},{"text":"specific type if you need that exact type in the syntax tree.","type":"text"}]}],"kind":"content"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExprSyntax"]]},"abstract":[{"text":"Returns a syntax tree for an expression that represents the value of the","type":"text"},{"type":"text","text":" "},{"text":"provided instance. For example, passing an ","type":"text"},{"type":"codeVoice","code":"Array<String>"},{"type":"text","text":" will result in"},{"type":"text","text":" "},{"type":"text","text":"an array literal containing string literals:"}],"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/ExprSyntax/init(literal:)":{"fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"literal"},{"text":": some ","kind":"text"},{"text":"ExpressibleByLiteralSyntax","kind":"typeIdentifier","preciseIdentifier":"s:18SwiftSyntaxBuilder020ExpressibleByLiteralB0P"},{"text":")","kind":"text"}],"role":"symbol","type":"topic","kind":"symbol","title":"init(literal:)","abstract":[{"type":"text","text":"Returns a syntax tree for an expression that represents the value of the"},{"type":"text","text":" "},{"type":"text","text":"provided instance. For example, passing an "},{"code":"Array<String>","type":"codeVoice"},{"text":" will result in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an array literal containing string literals:"}],"url":"\/documentation\/macrobuilder\/exprsyntax\/init(literal:)","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExprSyntax\/init(literal:)"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/ExpressibleByLiteralSyntax":{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExpressibleByLiteralSyntax","navigatorTitle":[{"text":"ExpressibleByLiteralSyntax","kind":"identifier"}],"url":"\/documentation\/macrobuilder\/expressiblebyliteralsyntax","kind":"symbol","role":"symbol","type":"topic","title":"ExpressibleByLiteralSyntax","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ExpressibleByLiteralSyntax","kind":"identifier"}],"abstract":[{"type":"text","text":"A Swift type whose value can be represented directly in source code by a"},{"text":" ","type":"text"},{"text":"Swift literal.","type":"text"}]},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/ExprSyntax":{"url":"\/documentation\/macrobuilder\/exprsyntax","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ExprSyntax","kind":"identifier"}],"type":"topic","title":"ExprSyntax","abstract":[],"kind":"symbol","navigatorTitle":[{"text":"ExprSyntax","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExprSyntax"}}}