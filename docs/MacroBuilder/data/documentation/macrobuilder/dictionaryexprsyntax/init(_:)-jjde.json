{"abstract":[{"type":"text","text":"Converts the given specialized node to this type. Returns "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" if the"},{"text":" ","type":"text"},{"text":"conversion is not possible.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/macrobuilder\/dictionaryexprsyntax\/init(_:)-jjde"]}],"kind":"symbol","identifier":{"url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/DictionaryExprSyntax\/init(_:)-jjde","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"init","kind":"keyword"},{"text":"?(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"node","kind":"internalParam"},{"text":": some ","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxProtocol","text":"SyntaxProtocol","preciseIdentifier":"s:11SwiftSyntax0B8ProtocolP"},{"kind":"text","text":")"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/DictionaryExprSyntax"]]},"sections":[],"metadata":{"role":"symbol","symbolKind":"init","title":"init(_:)","roleHeading":"Initializer","modules":[{"name":"MacroBuilder"}],"externalID":"s:11SwiftSyntax014DictionaryExprB0VyACSgxhcAA0B8ProtocolRzlufc","fragments":[{"text":"init","kind":"identifier"},{"text":"?(some ","kind":"text"},{"text":"SyntaxProtocol","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B8ProtocolP"},{"kind":"text","text":")"}]},"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/DictionaryExprSyntax":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/DictionaryExprSyntax","title":"DictionaryExprSyntax","url":"\/documentation\/macrobuilder\/dictionaryexprsyntax","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A dictionary literal"}],"navigatorTitle":[{"text":"DictionaryExprSyntax","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DictionaryExprSyntax"}]},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SyntaxProtocol":{"title":"SyntaxProtocol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxProtocol","navigatorTitle":[{"text":"SyntaxProtocol","kind":"identifier"}],"abstract":[{"text":"Provide common functionality for specialized syntax nodes. Extend this","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"protocol to provide common functionality for all syntax nodes."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SyntaxProtocol","kind":"identifier"}],"type":"topic","role":"symbol","url":"\/documentation\/macrobuilder\/syntaxprotocol"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/DictionaryExprSyntax/init(_:)-jjde":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?(some "},{"preciseIdentifier":"s:11SwiftSyntax0B8ProtocolP","text":"SyntaxProtocol","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/DictionaryExprSyntax\/init(_:)-jjde","type":"topic","url":"\/documentation\/macrobuilder\/dictionaryexprsyntax\/init(_:)-jjde","title":"init(_:)","abstract":[{"type":"text","text":"Converts the given specialized node to this type. Returns "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" if the"},{"text":" ","type":"text"},{"text":"conversion is not possible.","type":"text"}]}}}