{"kind":"symbol","metadata":{"title":"formatted(using:)","externalID":"s:11SwiftSyntax0B8ProtocolP0A11BasicFormatE9formatted5usingAA0B0VAD0dE0C_tF::SYNTHESIZED::s:11SwiftSyntax014SwitchCaseListB0V7ElementO","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"formatted"},{"kind":"text","text":"("},{"kind":"externalParam","text":"using"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:16SwiftBasicFormat0bC0C","kind":"typeIdentifier","text":"BasicFormat"},{"kind":"text","text":") -> "},{"text":"Syntax","preciseIdentifier":"s:11SwiftSyntax0B0V","kind":"typeIdentifier"}],"roleHeading":"Instance Method","extendedModule":"SwiftSyntax","modules":[{"relatedModules":["SwiftSyntax"],"name":"MacroBuilder"}],"role":"symbol"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SwitchCaseListSyntax\/Element\/formatted(using:)"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/macrobuilder\/switchcaselistsyntax\/element\/formatted(using:)"]}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"formatted"},{"text":"(","kind":"text"},{"text":"using","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"format","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:16SwiftBasicFormat0bC0C","text":"BasicFormat"},{"text":" = BasicFormat()) -> ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/Syntax","kind":"typeIdentifier","text":"Syntax","preciseIdentifier":"s:11SwiftSyntax0B0V"}],"languages":["swift"],"platforms":["macOS"]}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"Inherited from "},{"code":"SyntaxProtocol.formatted(using:)","type":"codeVoice"},{"text":".","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SwitchCaseListSyntax","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SwitchCaseListSyntax\/Element","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SwitchCaseListSyntax\/Element\/SyntaxProtocol-Implementations"]]},"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SwitchCaseListSyntax/Element/SyntaxProtocol-Implementations":{"role":"collectionGroup","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SwitchCaseListSyntax\/Element\/SyntaxProtocol-Implementations","type":"topic","url":"\/documentation\/macrobuilder\/switchcaselistsyntax\/element\/syntaxprotocol-implementations","title":"SyntaxProtocol Implementations","kind":"article"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SwitchCaseListSyntax/Element/formatted(using:)":{"kind":"symbol","title":"formatted(using:)","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SwitchCaseListSyntax\/Element\/formatted(using:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"formatted","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"using"},{"kind":"text","text":": "},{"text":"BasicFormat","preciseIdentifier":"s:16SwiftBasicFormat0bC0C","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Syntax","preciseIdentifier":"s:11SwiftSyntax0B0V"}],"url":"\/documentation\/macrobuilder\/switchcaselistsyntax\/element\/formatted(using:)","type":"topic","abstract":[],"role":"symbol"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SwitchCaseListSyntax":{"abstract":[],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SwitchCaseListSyntax","type":"topic","role":"symbol","title":"SwitchCaseListSyntax","kind":"symbol","url":"\/documentation\/macrobuilder\/switchcaselistsyntax","navigatorTitle":[{"kind":"identifier","text":"SwitchCaseListSyntax"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"SwitchCaseListSyntax","kind":"identifier"}]},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/Syntax":{"abstract":[{"type":"text","text":"A Syntax node represents a tree of nodes with tokens at the leaves."},{"text":" ","type":"text"},{"type":"text","text":"Each node has accessors for its known children, and allows efficient"},{"text":" ","type":"text"},{"text":"iteration over the children through its ","type":"text"},{"type":"codeVoice","code":"children"},{"text":" property.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Syntax"}],"url":"\/documentation\/macrobuilder\/syntax","title":"Syntax","type":"topic","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/Syntax","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Syntax","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SwitchCaseListSyntax/Element":{"url":"\/documentation\/macrobuilder\/switchcaselistsyntax\/element","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SwitchCaseListSyntax\/Element","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Element"}],"type":"topic","abstract":[],"kind":"symbol","role":"symbol","title":"SwitchCaseListSyntax.Element","navigatorTitle":[{"kind":"identifier","text":"Element"}]}}}