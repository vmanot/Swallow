{"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/IntegerLiteralExprSyntax","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/IntegerLiteralExprSyntax\/SyntaxProtocol-Implementations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/macrobuilder\/integerliteralexprsyntax\/asprotocol(_:)-4eevq"]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/IntegerLiteralExprSyntax\/asProtocol(_:)-4eevq","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Instance Method","symbolKind":"method","title":"asProtocol(_:)","modules":[{"name":"MacroBuilder","relatedModules":["SwiftSyntax"]}],"extendedModule":"SwiftSyntax","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"asProtocol"},{"text":"((any ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P","kind":"typeIdentifier","text":"FreestandingMacroExpansionSyntax"},{"text":").Type) -> (any ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P","text":"FreestandingMacroExpansionSyntax"},{"text":")?","kind":"text"}],"externalID":"s:11SwiftSyntax0B8ProtocolPAAE02asC0yAA026FreestandingMacroExpansionB0_pSgAaE_pmF::SYNTHESIZED::s:11SwiftSyntax018IntegerLiteralExprB0V"},"sections":[],"abstract":[{"text":"Return the non-type erased version of this syntax node if it conforms to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"FreestandingMacroExpansionSyntax"},{"text":". Otherwise return ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Note that this will incur an existential conversion."}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"asProtocol","kind":"identifier"},{"kind":"text","text":"("},{"text":"_","kind":"externalParam"},{"text":": (any ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/FreestandingMacroExpansionSyntax","text":"FreestandingMacroExpansionSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P"},{"text":").Type) -> (any ","kind":"text"},{"text":"FreestandingMacroExpansionSyntax","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/FreestandingMacroExpansionSyntax","preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P"},{"kind":"text","text":")?"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"}],"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/IntegerLiteralExprSyntax":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IntegerLiteralExprSyntax"}],"navigatorTitle":[{"text":"IntegerLiteralExprSyntax","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/IntegerLiteralExprSyntax","url":"\/documentation\/macrobuilder\/integerliteralexprsyntax","title":"IntegerLiteralExprSyntax","abstract":[]},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/FreestandingMacroExpansionSyntax":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"FreestandingMacroExpansionSyntax"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FreestandingMacroExpansionSyntax","kind":"identifier"}],"kind":"symbol","abstract":[],"role":"symbol","url":"\/documentation\/macrobuilder\/freestandingmacroexpansionsyntax","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/FreestandingMacroExpansionSyntax","title":"FreestandingMacroExpansionSyntax"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/IntegerLiteralExprSyntax/asProtocol(_:)-4eevq":{"type":"topic","kind":"symbol","title":"asProtocol(_:)","url":"\/documentation\/macrobuilder\/integerliteralexprsyntax\/asprotocol(_:)-4eevq","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/IntegerLiteralExprSyntax\/asProtocol(_:)-4eevq","role":"symbol","abstract":[{"type":"text","text":"Return the non-type erased version of this syntax node if it conforms to"},{"type":"text","text":" "},{"code":"FreestandingMacroExpansionSyntax","type":"codeVoice"},{"text":". Otherwise return ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Note that this will incur an existential conversion."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"asProtocol"},{"kind":"text","text":"((any "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P","text":"FreestandingMacroExpansionSyntax"},{"text":").Type) -> (any ","kind":"text"},{"text":"FreestandingMacroExpansionSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P"},{"text":")?","kind":"text"}]},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/IntegerLiteralExprSyntax/SyntaxProtocol-Implementations":{"kind":"article","role":"collectionGroup","type":"topic","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/IntegerLiteralExprSyntax\/SyntaxProtocol-Implementations","url":"\/documentation\/macrobuilder\/integerliteralexprsyntax\/syntaxprotocol-implementations","title":"SyntaxProtocol Implementations","abstract":[]}}}