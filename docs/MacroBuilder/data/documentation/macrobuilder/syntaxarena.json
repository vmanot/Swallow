{"relationshipsSections":[{"identifiers":["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ParsingSyntaxArena"],"kind":"relationships","type":"inheritedBy","title":"Inherited By"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SyntaxArena"}],"languages":["swift"],"platforms":["macOS"]}]},{"content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"inlineContent":[{"text":"The following is only relevant if you are accessing the raw syntax tree using","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"RawSyntax"},{"type":"text","text":" nodes. When working with syntax trees using SwiftSyntax’s API,"},{"text":" ","type":"text"},{"type":"text","text":"the usage of a "},{"type":"reference","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxArena","isActive":true},{"text":" is transparent.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Contrary to Swift’s usual memory model, syntax node’s are not individually"},{"type":"text","text":" "},{"text":"reference-counted. Instead, they live in an arena. That arena allocates a","type":"text"},{"text":" ","type":"text"},{"text":"chunk of memory at a time, which it can then use to store syntax nodes in.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This way, only a single memory allocation needs to be performed for multiple"},{"text":" ","type":"text"},{"text":"syntax nodes and since memory allocations have a non-trivial cost, this","type":"text"},{"type":"text","text":" "},{"text":"significantly speeds up parsing.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"As a consequence, syntax nodes cannot be freed individually but the memory","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"will get freed once the owning "},{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxArena","type":"reference","isActive":true},{"type":"text","text":" gets freed. Thus, it needs to"},{"type":"text","text":" "},{"text":"be manually ensured that the ","type":"text"},{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxArena","isActive":true,"type":"reference"},{"text":" is not deallocated while any","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of its nodes are being accessed. The "},{"type":"codeVoice","code":"SyntaxData"},{"type":"text","text":" type ensures this as"},{"text":" ","type":"text"},{"text":"follows:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The root node has a strong reference to its "},{"type":"reference","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxArena","isActive":true}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Each node retains its parent "},{"type":"codeVoice","code":"SyntaxData"},{"type":"text","text":", thus keeping it alive."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If any node is allocated within a different ","type":"text"},{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxArena","isActive":true,"type":"reference"},{"type":"text","text":",  that arena"},{"type":"text","text":" "},{"type":"text","text":"is added to the root’s "},{"type":"codeVoice","code":"childRefs"},{"text":" property and thus kept a live as long","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as the parent tree is alive."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As an added benefit of the "},{"type":"reference","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxArena","isActive":true},{"type":"text","text":", "},{"code":"RawSyntax","type":"codeVoice"},{"text":" nodes don’t need to","type":"text"},{"type":"text","text":" "},{"text":"be reference-counted, further improving the performance of ","type":"text"},{"code":"SwiftSyntax","type":"codeVoice"},{"text":" ","type":"text"},{"text":"when worked with at that level.","type":"text"}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder"]]},"variants":[{"paths":["\/documentation\/macrobuilder\/syntaxarena"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","identifier":{"url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxArena","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A syntax arena owns the memory for all syntax nodes within it."}],"metadata":{"modules":[{"name":"MacroBuilder"}],"title":"SyntaxArena","externalID":"s:11SwiftSyntax0B5ArenaC","symbolKind":"class","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SyntaxArena"}],"roleHeading":"Class","role":"symbol","navigatorTitle":[{"text":"SyntaxArena","kind":"identifier"}]},"sections":[],"topicSections":[{"identifiers":["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxArena\/init()"],"title":"Initializers","anchor":"Initializers","generated":true}],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SyntaxArena/init()":{"url":"\/documentation\/macrobuilder\/syntaxarena\/init()","title":"init()","kind":"symbol","type":"topic","abstract":[{"text":"Construct a new ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxArena","isActive":true},{"type":"text","text":" in which syntax nodes can be allocated."}],"fragments":[{"text":"convenience","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"init"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxArena\/init()","role":"symbol"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/ParsingSyntaxArena":{"navigatorTitle":[{"kind":"identifier","text":"ParsingSyntaxArena"}],"abstract":[{"type":"text","text":"SyntaxArena for parsing."}],"type":"topic","title":"ParsingSyntaxArena","url":"\/documentation\/macrobuilder\/parsingsyntaxarena","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"ParsingSyntaxArena","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ParsingSyntaxArena","kind":"symbol"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SyntaxArena":{"kind":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxArena","abstract":[{"type":"text","text":"A syntax arena owns the memory for all syntax nodes within it."}],"url":"\/documentation\/macrobuilder\/syntaxarena","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"SyntaxArena","kind":"identifier"}],"navigatorTitle":[{"text":"SyntaxArena","kind":"identifier"}],"role":"symbol","title":"SyntaxArena"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"}}}