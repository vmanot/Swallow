{"kind":"symbol","sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"nextToken","kind":"identifier"},{"text":"(","kind":"text"},{"text":"viewMode","kind":"externalParam"},{"kind":"text","text":": "},{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxTreeViewMode","text":"SyntaxTreeViewMode","preciseIdentifier":"s:11SwiftSyntax0B12TreeViewModeO","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax05TokenB0V","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/TokenSyntax","text":"TokenSyntax","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"languages":["swift"]}]}],"abstract":[{"text":"Recursively walks through the tree to find the next token semantically","type":"text"},{"text":" ","type":"text"},{"text":"after this node.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ProtocolDeclSyntax","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ProtocolDeclSyntax\/SyntaxProtocol-Implementations"]]},"variants":[{"paths":["\/documentation\/macrobuilder\/protocoldeclsyntax\/nexttoken(viewmode:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"modules":[{"relatedModules":["SwiftSyntax"],"name":"MacroBuilder"}],"role":"symbol","title":"nextToken(viewMode:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"nextToken"},{"kind":"text","text":"("},{"text":"viewMode","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B12TreeViewModeO","text":"SyntaxTreeViewMode"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05TokenB0V","text":"TokenSyntax"},{"text":"?","kind":"text"}],"symbolKind":"method","externalID":"s:11SwiftSyntax0B8ProtocolPAAE9nextToken8viewModeAA0eB0VSgAA0b8TreeViewG0O_tF::SYNTHESIZED::s:11SwiftSyntax012ProtocolDeclB0V","roleHeading":"Instance Method","extendedModule":"SwiftSyntax"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ProtocolDeclSyntax\/nextToken(viewMode:)"},"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SyntaxTreeViewMode":{"kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"SyntaxTreeViewMode","kind":"identifier"}],"url":"\/documentation\/macrobuilder\/syntaxtreeviewmode","type":"topic","navigatorTitle":[{"text":"SyntaxTreeViewMode","kind":"identifier"}],"abstract":[{"type":"text","text":"Specifies how missing and unexpected nodes should be handled when traversing"},{"type":"text","text":" "},{"type":"text","text":"a syntax tree."}],"title":"SyntaxTreeViewMode","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxTreeViewMode","role":"symbol"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/ProtocolDeclSyntax":{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ProtocolDeclSyntax","title":"ProtocolDeclSyntax","type":"topic","abstract":[{"type":"text","text":"A "},{"code":"protocol","type":"codeVoice"},{"text":" declaration","type":"text"}],"url":"\/documentation\/macrobuilder\/protocoldeclsyntax","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ProtocolDeclSyntax","kind":"identifier"}],"kind":"symbol","role":"symbol","navigatorTitle":[{"text":"ProtocolDeclSyntax","kind":"identifier"}]},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/ProtocolDeclSyntax/SyntaxProtocol-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ProtocolDeclSyntax\/SyntaxProtocol-Implementations","title":"SyntaxProtocol Implementations","type":"topic","abstract":[],"url":"\/documentation\/macrobuilder\/protocoldeclsyntax\/syntaxprotocol-implementations","kind":"article","role":"collectionGroup"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/TokenSyntax":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TokenSyntax","kind":"identifier"}],"url":"\/documentation\/macrobuilder\/tokensyntax","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TokenSyntax"}],"abstract":[{"text":"A Syntax node representing a single token.","type":"text"}],"title":"TokenSyntax","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/TokenSyntax","role":"symbol"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/ProtocolDeclSyntax/nextToken(viewMode:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"nextToken","kind":"identifier"},{"kind":"text","text":"("},{"text":"viewMode","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11SwiftSyntax0B12TreeViewModeO","text":"SyntaxTreeViewMode","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"TokenSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05TokenB0V"},{"kind":"text","text":"?"}],"role":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ProtocolDeclSyntax\/nextToken(viewMode:)","kind":"symbol","url":"\/documentation\/macrobuilder\/protocoldeclsyntax\/nexttoken(viewmode:)","type":"topic","abstract":[{"text":"Recursively walks through the tree to find the next token semantically","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"after this node."}],"title":"nextToken(viewMode:)"}}}