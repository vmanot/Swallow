{"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/MacroExpansionExprSyntax"]]},"abstract":[{"type":"text","text":"Converts the given specialized node to this type. Returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if the"},{"text":" ","type":"text"},{"type":"text","text":"conversion is not possible."}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/macrobuilder\/macroexpansionexprsyntax\/init(_:)-8a225"]}],"sections":[],"identifier":{"url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/MacroExpansionExprSyntax\/init(_:)-8a225","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"init","kind":"keyword"},{"text":"?(","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"node"},{"text":": some ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxProtocol","preciseIdentifier":"s:11SwiftSyntax0B8ProtocolP","kind":"typeIdentifier","text":"SyntaxProtocol"},{"kind":"text","text":")"}],"languages":["swift"]}]}],"metadata":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?(some "},{"preciseIdentifier":"s:11SwiftSyntax0B8ProtocolP","text":"SyntaxProtocol","kind":"typeIdentifier"},{"text":")","kind":"text"}],"symbolKind":"init","roleHeading":"Initializer","modules":[{"name":"MacroBuilder"}],"title":"init(_:)","externalID":"s:11SwiftSyntax018MacroExpansionExprB0VyACSgxhcAA0B8ProtocolRzlufc","role":"symbol"},"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/MacroExpansionExprSyntax/init(_:)-8a225":{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/MacroExpansionExprSyntax\/init(_:)-8a225","abstract":[{"text":"Converts the given specialized node to this type. Returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" if the","type":"text"},{"type":"text","text":" "},{"text":"conversion is not possible.","type":"text"}],"type":"topic","kind":"symbol","url":"\/documentation\/macrobuilder\/macroexpansionexprsyntax\/init(_:)-8a225","title":"init(_:)","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"?(some ","kind":"text"},{"text":"SyntaxProtocol","preciseIdentifier":"s:11SwiftSyntax0B8ProtocolP","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/MacroExpansionExprSyntax":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MacroExpansionExprSyntax","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"MacroExpansionExprSyntax","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/MacroExpansionExprSyntax","abstract":[{"type":"text","text":"The expansion of a freestanding macro in a position that expects an expression."}],"type":"topic","url":"\/documentation\/macrobuilder\/macroexpansionexprsyntax","role":"symbol","title":"MacroExpansionExprSyntax"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SyntaxProtocol":{"title":"SyntaxProtocol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxProtocol","navigatorTitle":[{"text":"SyntaxProtocol","kind":"identifier"}],"abstract":[{"text":"Provide common functionality for specialized syntax nodes. Extend this","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"protocol to provide common functionality for all syntax nodes."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SyntaxProtocol","kind":"identifier"}],"type":"topic","role":"symbol","url":"\/documentation\/macrobuilder\/syntaxprotocol"}}}