{"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/StringLiteralExprSyntax\/init(openDelimiter:openingQuote:content:closingQuote:closeDelimiter:)"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"init","kind":"keyword"},{"kind":"text","text":"("},{"text":"openDelimiter","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11SwiftSyntax05TokenB0V","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/TokenSyntax","kind":"typeIdentifier","text":"TokenSyntax"},{"kind":"text","text":"? = nil, "},{"kind":"externalParam","text":"openingQuote"},{"text":": ","kind":"text"},{"text":"TokenSyntax","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/TokenSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05TokenB0V"},{"kind":"text","text":" = .stringQuoteToken(), "},{"kind":"externalParam","text":"content"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", "},{"text":"closingQuote","kind":"externalParam"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/TokenSyntax","text":"TokenSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05TokenB0V"},{"kind":"text","text":" = .stringQuoteToken(), "},{"text":"closeDelimiter","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/TokenSyntax","preciseIdentifier":"s:11SwiftSyntax05TokenB0V","text":"TokenSyntax"},{"text":"? = nil)","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}]}],"kind":"symbol","abstract":[{"type":"text","text":"Creates a string literal, optionally specifying quotes and delimiters."},{"type":"text","text":" "},{"type":"text","text":"If "},{"code":"openDelimiter","type":"codeVoice"},{"type":"text","text":" and "},{"code":"closeDelimiter","type":"codeVoice"},{"text":" are ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", automatically determines","type":"text"},{"text":" ","type":"text"},{"text":"the number of ","type":"text"},{"type":"codeVoice","code":"#"},{"text":"s needed to express the string as-is without any escapes.","type":"text"}],"metadata":{"modules":[{"name":"MacroBuilder","relatedModules":["SwiftSyntax"]}],"title":"init(openDelimiter:openingQuote:content:closingQuote:closeDelimiter:)","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"text":"openDelimiter","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"TokenSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05TokenB0V"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"openingQuote"},{"kind":"text","text":": "},{"text":"TokenSyntax","preciseIdentifier":"s:11SwiftSyntax05TokenB0V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"content","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"closingQuote"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"TokenSyntax","preciseIdentifier":"s:11SwiftSyntax05TokenB0V"},{"text":", ","kind":"text"},{"text":"closeDelimiter","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05TokenB0V","text":"TokenSyntax"},{"text":"?)","kind":"text"}],"roleHeading":"Initializer","extendedModule":"SwiftSyntax","role":"symbol","externalID":"s:11SwiftSyntax017StringLiteralExprB0V0aB7BuilderE13openDelimiter12openingQuote7content07closingJ005closeH0AcA05TokenB0VSg_AKSSAkLtcfc","symbolKind":"init"},"variants":[{"paths":["\/documentation\/macrobuilder\/stringliteralexprsyntax\/init(opendelimiter:openingquote:content:closingquote:closedelimiter:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/StringLiteralExprSyntax"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/StringLiteralExprSyntax":{"kind":"symbol","role":"symbol","abstract":[{"text":"A string literal.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StringLiteralExprSyntax","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/StringLiteralExprSyntax","type":"topic","title":"StringLiteralExprSyntax","url":"\/documentation\/macrobuilder\/stringliteralexprsyntax","navigatorTitle":[{"kind":"identifier","text":"StringLiteralExprSyntax"}]},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/TokenSyntax":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TokenSyntax","kind":"identifier"}],"url":"\/documentation\/macrobuilder\/tokensyntax","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TokenSyntax"}],"abstract":[{"text":"A Syntax node representing a single token.","type":"text"}],"title":"TokenSyntax","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/TokenSyntax","role":"symbol"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/StringLiteralExprSyntax/init(openDelimiter:openingQuote:content:closingQuote:closeDelimiter:)":{"title":"init(openDelimiter:openingQuote:content:closingQuote:closeDelimiter:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/StringLiteralExprSyntax\/init(openDelimiter:openingQuote:content:closingQuote:closeDelimiter:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"openDelimiter"},{"kind":"text","text":": "},{"text":"TokenSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05TokenB0V"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"openingQuote"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11SwiftSyntax05TokenB0V","kind":"typeIdentifier","text":"TokenSyntax"},{"text":", ","kind":"text"},{"text":"content","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"closingQuote","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05TokenB0V","text":"TokenSyntax"},{"kind":"text","text":", "},{"text":"closeDelimiter","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05TokenB0V","text":"TokenSyntax"},{"kind":"text","text":"?)"}],"abstract":[{"text":"Creates a string literal, optionally specifying quotes and delimiters.","type":"text"},{"type":"text","text":" "},{"text":"If ","type":"text"},{"code":"openDelimiter","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"closeDelimiter","type":"codeVoice"},{"text":" are ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":", automatically determines","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the number of "},{"code":"#","type":"codeVoice"},{"type":"text","text":"s needed to express the string as-is without any escapes."}],"type":"topic","url":"\/documentation\/macrobuilder\/stringliteralexprsyntax\/init(opendelimiter:openingquote:content:closingquote:closedelimiter:)","role":"symbol"}}}