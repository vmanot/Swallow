{"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"memoize"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"with"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"cache"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MemoizationCache"},{"text":"? = MemoizationCache.shared, ","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"keyPath","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"text":"T","kind":"typeIdentifier"}],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"cache","content":[{"inlineContent":[{"text":"The shared cache to use; ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" disables caching and simply returns the result of ","type":"text"},{"code":"predicate","type":"codeVoice"},{"type":"text","text":" directly"}],"type":"paragraph"}]}]},{"content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"inlineContent":[{"type":"text","text":"The result from the "},{"code":"predicate","type":"codeVoice"},{"text":", either a previously cached value, or the result of executing the ","type":"text"},{"code":"predicate","type":"codeVoice"}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The source subject (the receiver) and the result object (the return value) should be value types, and the "},{"code":"predicate","type":"codeVoice"},{"text":" must be a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"pure"}]},{"text":" function that captures ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"no state","type":"text"}]},{"text":", in that:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Its return value is the same for the same arguments (no variation with local static variables, non-local variables, mutable reference arguments or input streams from I\/O devices).","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Its evaluation has no side effects (no mutation of local static variables, non-local variables, mutable reference arguments or I\/O streams)."}]}]}]},{"name":"Note","style":"note","content":[{"inlineContent":[{"text":"The calling functionâ€™s source file and line are used as the cache key, so care must be taken to avoid having multiple calls to ","type":"text"},{"code":"memoize","type":"codeVoice"},{"type":"text","text":" occur from a single line of source code."}],"type":"paragraph"}],"type":"aside"},{"content":[{"inlineContent":[{"text":"Re-Throws and errors from ","type":"text"},{"type":"codeVoice","code":"predicate"}],"type":"paragraph"}],"style":"note","type":"aside","name":"Throws"},{"style":"note","type":"aside","name":"Complexity","content":[{"inlineContent":[{"type":"text","text":"Around O(1) for a successful cache hit, otherwise the complexity of the keyPath execution"}],"type":"paragraph"}]}]}],"metadata":{"symbolKind":"method","externalID":"s:SH7SwallowE7memoize4with_qd__AA6_CacheCyAA011MemoizationD3KeyVypGSg_s0F4PathCyxqd__GtlF::SYNTHESIZED::s:11SwiftSyntax017ObjCSelectorPieceB0V","extendedModule":"Swift","roleHeading":"Instance Method","modules":[{"relatedModules":["Swift"],"name":"MacroBuilder"}],"role":"symbol","title":"memoize(with:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"memoize"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"with"},{"text":": ","kind":"text"},{"text":"MemoizationCache","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"T"}]},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ObjCSelectorPieceSyntax","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ObjCSelectorPieceSyntax\/Hashable-Implementations"]]},"abstract":[{"type":"text","text":"Memoize the result of the execution of a predicate for the "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":" receiver."}],"sections":[],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ObjCSelectorPieceSyntax\/memoize(with:_:)-kro4"},"variants":[{"paths":["\/documentation\/macrobuilder\/objcselectorpiecesyntax\/memoize(with:_:)-kro4"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/ObjCSelectorPieceSyntax":{"kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ObjCSelectorPieceSyntax","kind":"identifier"}],"title":"ObjCSelectorPieceSyntax","abstract":[{"text":"A piece of an Objective-C selector. Either consisting of just an identifier for a nullary selector, an identifier and a colon for a labeled argument or just a colon for an unlabeled argument","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ObjCSelectorPieceSyntax"}],"url":"\/documentation\/macrobuilder\/objcselectorpiecesyntax","type":"topic","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ObjCSelectorPieceSyntax"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/ObjCSelectorPieceSyntax/Hashable-Implementations":{"abstract":[],"url":"\/documentation\/macrobuilder\/objcselectorpiecesyntax\/hashable-implementations","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ObjCSelectorPieceSyntax\/Hashable-Implementations","kind":"article","type":"topic","title":"Hashable Implementations","role":"collectionGroup"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/ObjCSelectorPieceSyntax/memoize(with:_:)-kro4":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"memoize","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"MemoizationCache"},{"kind":"text","text":"?, "},{"preciseIdentifier":"s:s7KeyPathC","text":"KeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ObjCSelectorPieceSyntax\/memoize(with:_:)-kro4","kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/macrobuilder\/objcselectorpiecesyntax\/memoize(with:_:)-kro4","title":"memoize(with:_:)","abstract":[{"type":"text","text":"Memoize the result of the execution of a predicate for the "},{"code":"Hashable","type":"codeVoice"},{"text":" receiver.","type":"text"}]}}}