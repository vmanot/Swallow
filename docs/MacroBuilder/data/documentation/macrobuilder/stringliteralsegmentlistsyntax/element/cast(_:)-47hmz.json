{"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/StringLiteralSegmentListSyntax","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/StringLiteralSegmentListSyntax\/Element","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/StringLiteralSegmentListSyntax\/Element\/SyntaxChildChoices-Implementations"]]},"abstract":[{"type":"text","text":"Force-casts the current "},{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxChildChoices","isActive":true,"type":"reference"},{"type":"text","text":" instance to a given specialized syntax type."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"cast","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"S"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"syntaxType","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"text":".Type) -> ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"SyntaxProtocol","preciseIdentifier":"s:11SwiftSyntax0B8ProtocolP","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxProtocol"}]}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"inlineContent":[{"text":"An instance of the specialized syntax type.","type":"text"}],"type":"paragraph"}]},{"content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"style":"warning","name":"Warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This function will crash if the cast is not possible. Use "},{"code":"as","type":"codeVoice"},{"type":"text","text":" for a safe attempt."}]}],"type":"aside"},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"This method is marked as deprecated because it is advised not to use it for unrelated casts."}],"type":"paragraph"}],"name":"Note","style":"note"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/macrobuilder\/stringliteralsegmentlistsyntax\/element\/cast(_:)-47hmz"]}],"metadata":{"modules":[{"relatedModules":["SwiftSyntax"],"name":"MacroBuilder"}],"platforms":[],"role":"symbol","extendedModule":"SwiftSyntax","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"cast","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"S","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"S","kind":"typeIdentifier"}],"roleHeading":"Instance Method","title":"cast(_:)","externalID":"s:11SwiftSyntax0B12ChildChoicesPAAE4castyqd__qd__mAA0B8ProtocolRd__lF::SYNTHESIZED::s:11SwiftSyntax024StringLiteralSegmentListB0V7ElementO"},"kind":"symbol","sections":[],"deprecationSummary":[{"inlineContent":[{"text":"This cast will always fail","type":"text"}],"type":"paragraph"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/StringLiteralSegmentListSyntax\/Element\/cast(_:)-47hmz"},"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SyntaxChildChoices":{"url":"\/documentation\/macrobuilder\/syntaxchildchoices","navigatorTitle":[{"text":"SyntaxChildChoices","kind":"identifier"}],"abstract":[{"type":"text","text":"Protocol for the enums nested inside "},{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/Syntax","type":"reference","isActive":true},{"type":"text","text":" nodes that enumerate all the"},{"type":"text","text":" "},{"type":"text","text":"possible types a child node might have."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxChildChoices","kind":"symbol","title":"SyntaxChildChoices","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SyntaxChildChoices","kind":"identifier"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/StringLiteralSegmentListSyntax":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"StringLiteralSegmentListSyntax","kind":"identifier"}],"role":"symbol","kind":"symbol","abstract":[],"url":"\/documentation\/macrobuilder\/stringliteralsegmentlistsyntax","title":"StringLiteralSegmentListSyntax","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/StringLiteralSegmentListSyntax","navigatorTitle":[{"text":"StringLiteralSegmentListSyntax","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/StringLiteralSegmentListSyntax/Element/SyntaxChildChoices-Implementations":{"abstract":[],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/StringLiteralSegmentListSyntax\/Element\/SyntaxChildChoices-Implementations","role":"collectionGroup","kind":"article","type":"topic","title":"SyntaxChildChoices Implementations","url":"\/documentation\/macrobuilder\/stringliteralsegmentlistsyntax\/element\/syntaxchildchoices-implementations"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/StringLiteralSegmentListSyntax/Element/cast(_:)-47hmz":{"url":"\/documentation\/macrobuilder\/stringliteralsegmentlistsyntax\/element\/cast(_:)-47hmz","abstract":[{"type":"text","text":"Force-casts the current "},{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxChildChoices","isActive":true,"type":"reference"},{"text":" instance to a given specialized syntax type.","type":"text"}],"role":"symbol","kind":"symbol","type":"topic","title":"cast(_:)","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/StringLiteralSegmentListSyntax\/Element\/cast(_:)-47hmz","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cast","kind":"identifier"},{"kind":"text","text":"<"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"kind":"typeIdentifier","text":"S"}],"deprecated":true},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/Syntax":{"abstract":[{"type":"text","text":"A Syntax node represents a tree of nodes with tokens at the leaves."},{"text":" ","type":"text"},{"type":"text","text":"Each node has accessors for its known children, and allows efficient"},{"text":" ","type":"text"},{"text":"iteration over the children through its ","type":"text"},{"type":"codeVoice","code":"children"},{"text":" property.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Syntax"}],"url":"\/documentation\/macrobuilder\/syntax","title":"Syntax","type":"topic","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/Syntax","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Syntax","kind":"identifier"}],"kind":"symbol"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/StringLiteralSegmentListSyntax/Element":{"kind":"symbol","navigatorTitle":[{"text":"Element","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/StringLiteralSegmentListSyntax\/Element","title":"StringLiteralSegmentListSyntax.Element","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Element"}],"url":"\/documentation\/macrobuilder\/stringliteralsegmentlistsyntax\/element","role":"symbol","abstract":[],"type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SyntaxProtocol":{"title":"SyntaxProtocol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxProtocol","navigatorTitle":[{"text":"SyntaxProtocol","kind":"identifier"}],"abstract":[{"text":"Provide common functionality for specialized syntax nodes. Extend this","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"protocol to provide common functionality for all syntax nodes."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SyntaxProtocol","kind":"identifier"}],"type":"topic","role":"symbol","url":"\/documentation\/macrobuilder\/syntaxprotocol"}}}