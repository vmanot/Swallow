{"kind":"symbol","identifier":{"url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/StringLiteralSegmentListSyntax\/Element\/init(validating:)","interfaceLanguage":"swift"},"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"externalID":"s:11SwiftSyntax0B8ProtocolP0aB7BuilderE10validatingxx_tKcfc::SYNTHESIZED::s:11SwiftSyntax024StringLiteralSegmentListB0V7ElementO","extendedModule":"SwiftSyntax","role":"symbol","modules":[{"relatedModules":["SwiftSyntax"],"name":"MacroBuilder"}],"title":"init(validating:)","roleHeading":"Initializer","symbolKind":"init","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"validating","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"}]},"abstract":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"node"},{"text":" has contains no syntax errors, return ","type":"text"},{"code":"node","type":"codeVoice"},{"type":"text","text":", otherwise"},{"type":"text","text":" "},{"text":"throw an error with diagnostics describing the syntax errors.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/StringLiteralSegmentListSyntax","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/StringLiteralSegmentListSyntax\/Element","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/StringLiteralSegmentListSyntax\/Element\/SyntaxProtocol-Implementations"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"init"},{"text":"(","kind":"text"},{"text":"validating","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"node","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}]}]},{"kind":"content","content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"inlineContent":[{"text":"This allows clients to e.g. write ","type":"text"},{"type":"codeVoice","code":"try DeclSyntax(validating: \"struct Foo {}\")"},{"type":"text","text":" "},{"text":"which constructs a ","type":"text"},{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/DeclSyntax","type":"reference","isActive":true},{"type":"text","text":" thatâ€™s guaranteed to be free of syntax"},{"type":"text","text":" "},{"type":"text","text":"errors."}],"type":"paragraph"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/macrobuilder\/stringliteralsegmentlistsyntax\/element\/init(validating:)"]}],"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/StringLiteralSegmentListSyntax":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"StringLiteralSegmentListSyntax","kind":"identifier"}],"role":"symbol","kind":"symbol","abstract":[],"url":"\/documentation\/macrobuilder\/stringliteralsegmentlistsyntax","title":"StringLiteralSegmentListSyntax","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/StringLiteralSegmentListSyntax","navigatorTitle":[{"text":"StringLiteralSegmentListSyntax","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/StringLiteralSegmentListSyntax/Element":{"kind":"symbol","navigatorTitle":[{"text":"Element","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/StringLiteralSegmentListSyntax\/Element","title":"StringLiteralSegmentListSyntax.Element","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Element"}],"url":"\/documentation\/macrobuilder\/stringliteralsegmentlistsyntax\/element","role":"symbol","abstract":[],"type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/StringLiteralSegmentListSyntax/Element/SyntaxProtocol-Implementations":{"kind":"article","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/StringLiteralSegmentListSyntax\/Element\/SyntaxProtocol-Implementations","title":"SyntaxProtocol Implementations","url":"\/documentation\/macrobuilder\/stringliteralsegmentlistsyntax\/element\/syntaxprotocol-implementations","role":"collectionGroup","abstract":[],"type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/DeclSyntax":{"title":"DeclSyntax","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/DeclSyntax","navigatorTitle":[{"text":"DeclSyntax","kind":"identifier"}],"abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DeclSyntax"}],"type":"topic","role":"symbol","url":"\/documentation\/macrobuilder\/declsyntax"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/StringLiteralSegmentListSyntax/Element/init(validating:)":{"abstract":[{"type":"text","text":"If "},{"code":"node","type":"codeVoice"},{"text":" has contains no syntax errors, return ","type":"text"},{"type":"codeVoice","code":"node"},{"type":"text","text":", otherwise"},{"type":"text","text":" "},{"type":"text","text":"throw an error with diagnostics describing the syntax errors."}],"url":"\/documentation\/macrobuilder\/stringliteralsegmentlistsyntax\/element\/init(validating:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/StringLiteralSegmentListSyntax\/Element\/init(validating:)","title":"init(validating:)","role":"symbol","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"validating","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}]}}}