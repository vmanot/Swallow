{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"isImplicit"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":" { ","kind":"text"},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"languages":["swift"]}]}],"sections":[],"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"extendedModule":"SwiftSyntax","modules":[{"name":"MacroBuilder","relatedModules":["SwiftSyntax"]}],"role":"symbol","roleHeading":"Instance Property","title":"isImplicit","symbolKind":"property","platforms":[],"externalID":"s:11SwiftSyntax0B8ProtocolPAAE10isImplicitSbvp::SYNTHESIZED::s:11SwiftSyntax015PackElementExprB0V","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"isImplicit"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}]},"abstract":[{"type":"text","text":"When isImplicit is true, the syntax node doesn’t include any"},{"type":"text","text":" "},{"type":"text","text":"underlying tokens, e.g. an empty CodeBlockItemList."}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/PackElementExprSyntax","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/PackElementExprSyntax\/SyntaxProtocol-Implementations"]]},"deprecationSummary":[{"inlineContent":[{"text":"Check children(viewMode: .all).isEmpty instead","type":"text"}],"type":"paragraph"}],"variants":[{"paths":["\/documentation\/macrobuilder\/packelementexprsyntax\/isimplicit"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/PackElementExprSyntax\/isImplicit","interfaceLanguage":"swift"},"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/PackElementExprSyntax/SyntaxProtocol-Implementations":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/PackElementExprSyntax\/SyntaxProtocol-Implementations","abstract":[],"url":"\/documentation\/macrobuilder\/packelementexprsyntax\/syntaxprotocol-implementations","kind":"article","role":"collectionGroup","title":"SyntaxProtocol Implementations"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/PackElementExprSyntax":{"title":"PackElementExprSyntax","type":"topic","kind":"symbol","url":"\/documentation\/macrobuilder\/packelementexprsyntax","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/PackElementExprSyntax","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"PackElementExprSyntax","kind":"identifier"}],"navigatorTitle":[{"text":"PackElementExprSyntax","kind":"identifier"}],"role":"symbol","abstract":[{"text":"A pack element expression spelled with ","type":"text"},{"code":"each","type":"codeVoice"},{"type":"text","text":"."}]},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/PackElementExprSyntax/isImplicit":{"url":"\/documentation\/macrobuilder\/packelementexprsyntax\/isimplicit","title":"isImplicit","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/PackElementExprSyntax\/isImplicit","deprecated":true,"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"isImplicit","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"abstract":[{"type":"text","text":"When isImplicit is true, the syntax node doesn’t include any"},{"type":"text","text":" "},{"text":"underlying tokens, e.g. an empty CodeBlockItemList.","type":"text"}]}}}