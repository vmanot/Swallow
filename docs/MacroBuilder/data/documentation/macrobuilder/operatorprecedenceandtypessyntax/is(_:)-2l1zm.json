{"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`is`","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"syntaxType"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","anchor":"return-value","text":"Return Value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"code":"true","type":"codeVoice"},{"type":"text","text":" since the node is already of its own type."}]}]},{"kind":"content","content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This method overloads the general "},{"type":"codeVoice","code":"is"},{"type":"text","text":" method and is marked as deprecated to produce a warning,"},{"text":" ","type":"text"},{"type":"text","text":"informing the user that the cast will always succeed."}]}],"name":"Note","type":"aside","style":"note"}]}],"identifier":{"url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/OperatorPrecedenceAndTypesSyntax\/is(_:)-2l1zm","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/OperatorPrecedenceAndTypesSyntax","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/OperatorPrecedenceAndTypesSyntax\/SyntaxProtocol-Implementations"]]},"kind":"symbol","deprecationSummary":[{"inlineContent":[{"type":"text","text":"This cast will always succeed"}],"type":"paragraph"}],"abstract":[{"text":"Checks if the current syntax node can be cast to its own type.","type":"text"}],"metadata":{"symbolKind":"method","externalID":"s:11SwiftSyntax0B8ProtocolPAAE2isySbxmF::SYNTHESIZED::s:11SwiftSyntax026OperatorPrecedenceAndTypesB0V","modules":[{"relatedModules":["SwiftSyntax"],"name":"MacroBuilder"}],"role":"symbol","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"`is`","kind":"identifier"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"platforms":[],"title":"is(_:)","extendedModule":"SwiftSyntax"},"variants":[{"paths":["\/documentation\/macrobuilder\/operatorprecedenceandtypessyntax\/is(_:)-2l1zm"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/OperatorPrecedenceAndTypesSyntax":{"kind":"symbol","role":"symbol","abstract":[{"text":"A clause to specify precedence group in infix operator declarations, and designated types in any operator declaration.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"OperatorPrecedenceAndTypesSyntax"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/OperatorPrecedenceAndTypesSyntax","type":"topic","title":"OperatorPrecedenceAndTypesSyntax","url":"\/documentation\/macrobuilder\/operatorprecedenceandtypessyntax","navigatorTitle":[{"kind":"identifier","text":"OperatorPrecedenceAndTypesSyntax"}]},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/OperatorPrecedenceAndTypesSyntax/is(_:)-2l1zm":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"`is`"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/OperatorPrecedenceAndTypesSyntax\/is(_:)-2l1zm","deprecated":true,"url":"\/documentation\/macrobuilder\/operatorprecedenceandtypessyntax\/is(_:)-2l1zm","kind":"symbol","title":"is(_:)","type":"topic","abstract":[{"type":"text","text":"Checks if the current syntax node can be cast to its own type."}]},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/OperatorPrecedenceAndTypesSyntax/SyntaxProtocol-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/OperatorPrecedenceAndTypesSyntax\/SyntaxProtocol-Implementations","abstract":[],"title":"SyntaxProtocol Implementations","role":"collectionGroup","url":"\/documentation\/macrobuilder\/operatorprecedenceandtypessyntax\/syntaxprotocol-implementations","type":"topic","kind":"article"}}}