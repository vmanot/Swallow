{"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"asProtocol"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"text":": (any ","kind":"text"},{"text":"WithCodeBlockSyntax","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/WithCodeBlockSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax013WithCodeBlockB0P"},{"kind":"text","text":").Type) -> (any "},{"text":"WithCodeBlockSyntax","preciseIdentifier":"s:11SwiftSyntax013WithCodeBlockB0P","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/WithCodeBlockSyntax"},{"kind":"text","text":")?"}],"platforms":["macOS"]}],"kind":"declarations"}],"metadata":{"extendedModule":"SwiftSyntax","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"asProtocol","kind":"identifier"},{"text":"((any ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax013WithCodeBlockB0P","text":"WithCodeBlockSyntax"},{"kind":"text","text":").Type) -> (any "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax013WithCodeBlockB0P","text":"WithCodeBlockSyntax"},{"kind":"text","text":")?"}],"roleHeading":"Instance Method","title":"asProtocol(_:)","symbolKind":"method","modules":[{"name":"MacroBuilder","relatedModules":["SwiftSyntax"]}],"externalID":"s:11SwiftSyntax0B8ProtocolPAAE02asC0yAA013WithCodeBlockB0_pSgAaE_pmF::SYNTHESIZED::s:11SwiftSyntax026OperatorPrecedenceAndTypesB0V"},"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Return the non-type erased version of this syntax node if it conforms to"},{"type":"text","text":" "},{"type":"codeVoice","code":"WithCodeBlockSyntax"},{"type":"text","text":". Otherwise return "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Note that this will incur an existential conversion.","type":"text"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/OperatorPrecedenceAndTypesSyntax","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/OperatorPrecedenceAndTypesSyntax\/SyntaxProtocol-Implementations"]]},"variants":[{"paths":["\/documentation\/macrobuilder\/operatorprecedenceandtypessyntax\/asprotocol(_:)-8h3eg"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/OperatorPrecedenceAndTypesSyntax\/asProtocol(_:)-8h3eg"},"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/OperatorPrecedenceAndTypesSyntax/asProtocol(_:)-8h3eg":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"asProtocol"},{"text":"((any ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax013WithCodeBlockB0P","text":"WithCodeBlockSyntax"},{"kind":"text","text":").Type) -> (any "},{"kind":"typeIdentifier","text":"WithCodeBlockSyntax","preciseIdentifier":"s:11SwiftSyntax013WithCodeBlockB0P"},{"kind":"text","text":")?"}],"role":"symbol","type":"topic","url":"\/documentation\/macrobuilder\/operatorprecedenceandtypessyntax\/asprotocol(_:)-8h3eg","title":"asProtocol(_:)","abstract":[{"text":"Return the non-type erased version of this syntax node if it conforms to","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"WithCodeBlockSyntax"},{"type":"text","text":". Otherwise return "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Note that this will incur an existential conversion."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/OperatorPrecedenceAndTypesSyntax\/asProtocol(_:)-8h3eg","kind":"symbol"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/WithCodeBlockSyntax":{"type":"topic","title":"WithCodeBlockSyntax","url":"\/documentation\/macrobuilder\/withcodeblocksyntax","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"WithCodeBlockSyntax"}],"navigatorTitle":[{"kind":"identifier","text":"WithCodeBlockSyntax"}],"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/WithCodeBlockSyntax","abstract":[]},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/OperatorPrecedenceAndTypesSyntax":{"kind":"symbol","role":"symbol","abstract":[{"text":"A clause to specify precedence group in infix operator declarations, and designated types in any operator declaration.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"OperatorPrecedenceAndTypesSyntax"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/OperatorPrecedenceAndTypesSyntax","type":"topic","title":"OperatorPrecedenceAndTypesSyntax","url":"\/documentation\/macrobuilder\/operatorprecedenceandtypessyntax","navigatorTitle":[{"kind":"identifier","text":"OperatorPrecedenceAndTypesSyntax"}]},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/OperatorPrecedenceAndTypesSyntax/SyntaxProtocol-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/OperatorPrecedenceAndTypesSyntax\/SyntaxProtocol-Implementations","abstract":[],"title":"SyntaxProtocol Implementations","role":"collectionGroup","url":"\/documentation\/macrobuilder\/operatorprecedenceandtypessyntax\/syntaxprotocol-implementations","type":"topic","kind":"article"}}}