{"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/macrobuilder\/regexliteralexprsyntax\/syntaxprotocol-implementations"]}],"sections":[],"metadata":{"roleHeading":"API Collection","title":"SyntaxProtocol Implementations","modules":[{"name":"MacroBuilder"}],"role":"collectionGroup"},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/init(_:)-49qu3","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/init(validating:)"],"generated":true,"anchor":"Initializers"},{"anchor":"Instance-Properties","identifiers":["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/byteRange","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/byteSize","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/byteSizeAfterTrimmingTrivia","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/contentLength","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/debugDescription","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/description","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/detached","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/endPosition","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/endPositionBeforeTrailingTrivia","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/firstToken","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/hasError","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/hasMaximumNestingLevelOverflow","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/hasParent","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/hasSequenceExpr","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/hasWarning","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/id","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/index","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isImplicit","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/keyPathInParent","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/kind","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/lastToken","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/leadingTrivia","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/leadingTriviaLength","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/nextToken","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/parent","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/position","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/positionAfterSkippingLeadingTrivia","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/previousToken","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/root","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/syntaxNodeType","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/syntaxTextBytes","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/totalByteRange","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/totalLength","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/trailingTrivia","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/trailingTriviaLength","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/trimmed","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/trimmedByteRange","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/trimmedDescription","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/trimmedLength"],"generated":true,"title":"Instance Properties"},{"generated":true,"anchor":"Instance-Methods","title":"Instance Methods","identifiers":["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/allMacroLexicalContexts(enclosingSyntax:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asMacroLexicalContext()","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-10uqt","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-27dpx","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-3z2j7","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-41p9i","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-45tys","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-4rf1x","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-54fw1","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-5q094","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-5so74","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-5vs81","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-65bv2","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-6gldw","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-8az9m","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-9ds13","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/children(viewMode:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/debugDescription(includeTrivia:converter:mark:indentString:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/detach()","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/endLocation(converter:afterTrailingTrivia:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/expand(macroSpecs:contextGenerator:indentationWidth:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/expand(macros:contextGenerator:indentationWidth:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/expand(macros:in:indentationWidth:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/firstToken(viewMode:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/formatted(using:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-2ku1u","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-38l88","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-3qr6b","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-48zyq","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-55p3x","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-5w0qt","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-6g0o2","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-6sc3l","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-6z3s0","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-7n50d","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-8nny4","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-8rinc","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-9hqfr","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-9iyeg","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/lastToken(viewMode:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/map(_:_:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/modifying(_:_:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/nextToken(viewMode:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/node(at:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/previousToken(viewMode:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/sourceRange(converter:afterLeadingTrivia:afterTrailingTrivia:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/startLocation(converter:afterLeadingTrivia:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/token(at:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/tokens(viewMode:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/trimmed(matching:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/trimmedDescription(matching:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/with(_:_:)","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/write(to:)"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/SyntaxProtocol-Implementations"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax"]]},"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/lastToken":{"deprecated":true,"kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"lastToken"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05TokenB0V","text":"TokenSyntax"},{"text":"?","kind":"text"}],"url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/lasttoken","abstract":[],"role":"symbol","title":"lastToken","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/lastToken","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/formatted(using:)":{"abstract":[],"title":"formatted(using:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/formatted(using:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/formatted(using:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"formatted","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"using"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"BasicFormat","preciseIdentifier":"s:16SwiftBasicFormat0bC0C"},{"kind":"text","text":") -> "},{"text":"Syntax","preciseIdentifier":"s:11SwiftSyntax0B0V","kind":"typeIdentifier"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/init(_:)-49qu3":{"kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"?<"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S"},{"text":"?)","kind":"text"}],"url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/init(_:)-49qu3","abstract":[{"text":"Initializes a new instance of the conforming type from a given specialized syntax node.","type":"text"}],"role":"symbol","title":"init(_:)","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/init(_:)-49qu3","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/isProtocol(_:)-38l88":{"abstract":[{"text":"Check whether the non-type erased version of this syntax node conforms to","type":"text"},{"text":" ","type":"text"},{"code":"BracedSyntax","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Note that this will incur an existential conversion."}],"title":"isProtocol(_:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/isprotocol(_:)-38l88","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-38l88","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"isProtocol","kind":"identifier"},{"text":"((any ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax06BracedB0P","text":"BracedSyntax"},{"text":").Type) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/trimmedLength":{"kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"trimmedLength"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SourceLength","preciseIdentifier":"s:11SwiftSyntax12SourceLengthV"}],"url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/trimmedlength","abstract":[{"type":"text","text":"The length this node takes up spelled out in the source, excluding its"},{"type":"text","text":" "},{"type":"text","text":"leading or trailing trivia."}],"role":"symbol","title":"trimmedLength","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/trimmedLength","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/isProtocol(_:)-6z3s0":{"abstract":[{"type":"text","text":"Check whether the non-type erased version of this syntax node conforms to"},{"type":"text","text":" "},{"type":"codeVoice","code":"WithCodeBlockSyntax"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Note that this will incur an existential conversion.","type":"text"}],"title":"isProtocol(_:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/isprotocol(_:)-6z3s0","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-6z3s0","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"isProtocol","kind":"identifier"},{"kind":"text","text":"((any "},{"kind":"typeIdentifier","text":"WithCodeBlockSyntax","preciseIdentifier":"s:11SwiftSyntax013WithCodeBlockB0P"},{"text":").Type) -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/index":{"deprecated":true,"kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"index","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B13ChildrenIndexV","text":"SyntaxChildrenIndex"}],"url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/index","abstract":[{"text":"The index of this node in a ","type":"text"},{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxChildren","isActive":true,"type":"reference"},{"type":"text","text":" collection."}],"role":"symbol","title":"index","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/index","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/position":{"abstract":[{"type":"text","text":"The absolute position of the starting point of this node. If the first token"},{"text":" ","type":"text"},{"text":"is with leading trivia, the position points to the start of the leading","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"trivia."}],"title":"position","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/position","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/position","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"position"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AbsolutePosition","preciseIdentifier":"s:11SwiftSyntax16AbsolutePositionV"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/allMacroLexicalContexts(enclosingSyntax:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"allMacroLexicalContexts"},{"kind":"text","text":"("},{"text":"enclosingSyntax","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Syntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B0V"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B0V","text":"Syntax"},{"text":"?) -> [","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B0V","text":"Syntax"},{"text":"]","kind":"text"}],"url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/allmacrolexicalcontexts(enclosingsyntax:)","abstract":[{"type":"text","text":"Return an array of enclosing lexical contexts for the purpose of macros,"},{"type":"text","text":" "},{"text":"from the innermost enclosing lexical context (first in the array) to the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"outermost. If this syntax node itself is a lexical context, it will be"},{"type":"text","text":" "},{"text":"the innermost lexical context.","type":"text"}],"role":"symbol","title":"allMacroLexicalContexts(enclosingSyntax:)","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/allMacroLexicalContexts(enclosingSyntax:)","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/expand(macros:contextGenerator:indentationWidth:)":{"abstract":[],"title":"expand(macros:contextGenerator:indentationWidth:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/expand(macros:contextgenerator:indentationwidth:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/expand(macros:contextGenerator:indentationWidth:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"expand","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Context"},{"kind":"text","text":">("},{"kind":"externalParam","text":"macros"},{"text":": [","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":" : any ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:17SwiftSyntaxMacros5MacroP","text":"Macro"},{"text":".Type], ","kind":"text"},{"text":"contextGenerator","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Syntax","preciseIdentifier":"s:11SwiftSyntax0B0V","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Context"},{"text":", ","kind":"text"},{"text":"indentationWidth","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax6TriviaV","kind":"typeIdentifier","text":"Trivia"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax0B0V","kind":"typeIdentifier","text":"Syntax"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/expand(macroSpecs:contextGenerator:indentationWidth:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"expand"},{"text":"<","kind":"text"},{"text":"Context","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"macroSpecs"},{"kind":"text","text":": ["},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"kind":"text","text":" : "},{"text":"MacroSpec","kind":"typeIdentifier","preciseIdentifier":"s:25SwiftSyntaxMacroExpansion0C4SpecV"},{"text":"], ","kind":"text"},{"kind":"externalParam","text":"contextGenerator"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B0V","text":"Syntax"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Context"},{"kind":"text","text":", "},{"kind":"externalParam","text":"indentationWidth"},{"text":": ","kind":"text"},{"text":"Trivia","preciseIdentifier":"s:11SwiftSyntax6TriviaV","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B0V","text":"Syntax"}],"url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/expand(macrospecs:contextgenerator:indentationwidth:)","abstract":[],"role":"symbol","title":"expand(macroSpecs:contextGenerator:indentationWidth:)","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/expand(macroSpecs:contextGenerator:indentationWidth:)","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/asProtocol(_:)-27dpx":{"abstract":[{"text":"Return the non-type erased version of this syntax node if it conforms to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"NamedDeclSyntax"},{"type":"text","text":". Otherwise return "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Note that this will incur an existential conversion.","type":"text"}],"title":"asProtocol(_:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/asprotocol(_:)-27dpx","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-27dpx","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"asProtocol"},{"text":"((any ","kind":"text"},{"text":"NamedDeclSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax09NamedDeclB0P"},{"kind":"text","text":").Type) -> (any "},{"text":"NamedDeclSyntax","preciseIdentifier":"s:11SwiftSyntax09NamedDeclB0P","kind":"typeIdentifier"},{"kind":"text","text":")?"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/hasParent":{"kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"hasParent","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/hasparent","abstract":[{"type":"text","text":"Whether or not this node has a parent."}],"role":"symbol","title":"hasParent","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/hasParent","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/write(to:)":{"abstract":[{"type":"text","text":"Prints the raw value of this node to the provided stream."}],"title":"write(to:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/write(to:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/write(to:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"write","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Target","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"to"},{"text":": ","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Target"},{"text":")","kind":"text"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/isProtocol(_:)-5w0qt":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"isProtocol"},{"text":"((any ","kind":"text"},{"text":"WithOptionalCodeBlockSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax021WithOptionalCodeBlockB0P"},{"kind":"text","text":").Type) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"abstract":[{"type":"text","text":"Check whether the non-type erased version of this syntax node conforms to"},{"text":" ","type":"text"},{"type":"codeVoice","code":"WithOptionalCodeBlockSyntax"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Note that this will incur an existential conversion."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-5w0qt","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/isprotocol(_:)-5w0qt","title":"isProtocol(_:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/trimmedDescription":{"abstract":[{"type":"text","text":"The description of this node with leading whitespace of the first token"},{"text":" ","type":"text"},{"type":"text","text":"and trailing whitespace of the last token removed."}],"title":"trimmedDescription","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/trimmeddescription","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/trimmedDescription","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"trimmedDescription","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/asProtocol(_:)-5q094":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"asProtocol"},{"text":"((any ","kind":"text"},{"text":"WithOptionalCodeBlockSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax021WithOptionalCodeBlockB0P"},{"text":").Type) -> (any ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax021WithOptionalCodeBlockB0P","text":"WithOptionalCodeBlockSyntax","kind":"typeIdentifier"},{"kind":"text","text":")?"}],"abstract":[{"type":"text","text":"Return the non-type erased version of this syntax node if it conforms to"},{"type":"text","text":" "},{"type":"codeVoice","code":"WithOptionalCodeBlockSyntax"},{"text":". Otherwise return ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Note that this will incur an existential conversion."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-5q094","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/asprotocol(_:)-5q094","title":"asProtocol(_:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/root":{"abstract":[{"type":"text","text":"The root of the tree in which this node resides."}],"title":"root","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/root","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/root","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"root"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11SwiftSyntax0B0V","text":"Syntax","kind":"typeIdentifier"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/expand(macros:in:indentationWidth:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"expand"},{"kind":"text","text":"("},{"text":"macros","kind":"externalParam"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":" : any "},{"kind":"typeIdentifier","preciseIdentifier":"s:17SwiftSyntaxMacros5MacroP","text":"Macro"},{"text":".Type], ","kind":"text"},{"text":"in","kind":"externalParam"},{"text":": some ","kind":"text"},{"text":"MacroExpansionContext","preciseIdentifier":"s:17SwiftSyntaxMacros21MacroExpansionContextP","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"indentationWidth","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Trivia","preciseIdentifier":"s:11SwiftSyntax6TriviaV"},{"text":"?) -> ","kind":"text"},{"text":"Syntax","preciseIdentifier":"s:11SwiftSyntax0B0V","kind":"typeIdentifier"}],"abstract":[],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/expand(macros:in:indentationWidth:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/expand(macros:in:indentationwidth:)","title":"expand(macros:in:indentationWidth:)","role":"symbol","type":"topic","deprecated":true},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/isProtocol(_:)-8rinc":{"abstract":[{"text":"Check whether the non-type erased version of this syntax node conforms to","type":"text"},{"text":" ","type":"text"},{"code":"ParenthesizedSyntax","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Note that this will incur an existential conversion."}],"title":"isProtocol(_:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/isprotocol(_:)-8rinc","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-8rinc","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"isProtocol","kind":"identifier"},{"text":"((any ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax013ParenthesizedB0P","text":"ParenthesizedSyntax"},{"kind":"text","text":").Type) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/trimmedDescription(matching:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"trimmedDescription","kind":"identifier"},{"kind":"text","text":"("},{"text":"matching","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax11TriviaPieceO","text":"TriviaPiece"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"}],"abstract":[{"type":"text","text":"The description of this node with pieces that match "},{"type":"codeVoice","code":"matching"},{"text":" removed","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from the leading trivia of the first token and trailing trivia of the"},{"text":" ","type":"text"},{"type":"text","text":"last token."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/trimmedDescription(matching:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/trimmeddescription(matching:)","title":"trimmedDescription(matching:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/byteSize":{"abstract":[{"type":"text","text":"The textual byte length of this node including leading and trailing trivia."}],"title":"byteSize","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/bytesize","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/byteSize","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"byteSize","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"}],"role":"symbol","deprecated":true,"type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/parent":{"kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parent","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B0V","text":"Syntax"},{"kind":"text","text":"?"}],"abstract":[{"type":"text","text":"The parent of this syntax node, or "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" if this node is the root."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/parent","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/parent","title":"parent","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/keyPathInParent":{"abstract":[],"title":"keyPathInParent","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/keypathinparent","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/keyPathInParent","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"keyPathInParent"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s10AnyKeyPathC","text":"AnyKeyPath"},{"kind":"text","text":"?"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/endPositionBeforeTrailingTrivia":{"kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"endPositionBeforeTrailingTrivia"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11SwiftSyntax16AbsolutePositionV","text":"AbsolutePosition","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"The end position of this node’s content, before any trailing trivia."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/endPositionBeforeTrailingTrivia","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/endpositionbeforetrailingtrivia","title":"endPositionBeforeTrailingTrivia","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/TokenDiagnostic":{"type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TokenDiagnostic"}],"role":"symbol","abstract":[{"text":"If the token has an error that’s inherent to the token itself and not its","type":"text"},{"text":" ","type":"text"},{"text":"surrounding structure, this defines the type of the error.","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"byteOffset"},{"type":"text","text":" specifies at which offset the error occurred."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/TokenDiagnostic","title":"TokenDiagnostic","url":"\/documentation\/macrobuilder\/tokendiagnostic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"TokenDiagnostic","kind":"identifier"}]},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/map(_:_:)":{"abstract":[],"title":"map(_:_:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/map(_:_:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/map(_:_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"map"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">, ("},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/hasWarning":{"kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"hasWarning","kind":"identifier"},{"kind":"text","text":": "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Whether the tree contained by this layout has any tokens with a"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/TokenDiagnostic","isActive":true},{"type":"text","text":" of severity "},{"type":"codeVoice","code":"warning"},{"text":".","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/hasWarning","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/haswarning","title":"hasWarning","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/syntaxTextBytes":{"abstract":[{"text":"Retrieve the syntax text as an array of bytes that models the input","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"source even in the presence of invalid UTF-8."}],"title":"syntaxTextBytes","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/syntaxtextbytes","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/syntaxTextBytes","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"syntaxTextBytes"},{"text":": [","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V","text":"UInt8"},{"text":"]","kind":"text"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/token(at:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"token","kind":"identifier"},{"kind":"text","text":"("},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AbsolutePosition","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax16AbsolutePositionV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"TokenSyntax","preciseIdentifier":"s:11SwiftSyntax05TokenB0V"},{"text":"?","kind":"text"}],"abstract":[{"text":"Find the syntax token at the given absolute position within this","type":"text"},{"type":"text","text":" "},{"text":"syntax node or any of its children.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/token(at:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/token(at:)","title":"token(at:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/node(at:)":{"abstract":[{"text":"If the node with the given ","type":"text"},{"type":"codeVoice","code":"syntaxIdentifier"},{"text":" is a (recursive) child of this node, return the node with that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"identifier."}],"title":"node(at:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/node(at:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/node(at:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"node","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"at"},{"text":": ","kind":"text"},{"text":"SyntaxIdentifier","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B10IdentifierV"},{"kind":"text","text":") -> "},{"text":"Syntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B0V"},{"text":"?","kind":"text"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/startLocation(converter:afterLeadingTrivia:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"startLocation","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"converter"},{"text":": ","kind":"text"},{"text":"SourceLocationConverter","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax23SourceLocationConverterC"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"afterLeadingTrivia"},{"kind":"text","text":": "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax14SourceLocationV","text":"SourceLocation"}],"abstract":[{"type":"text","text":"The starting location, in the provided file, of this Syntax node."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/startLocation(converter:afterLeadingTrivia:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/startlocation(converter:afterleadingtrivia:)","title":"startLocation(converter:afterLeadingTrivia:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/endPosition":{"abstract":[{"type":"text","text":"The end position of this node, including its trivia."}],"title":"endPosition","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/endposition","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/endPosition","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"endPosition","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AbsolutePosition","preciseIdentifier":"s:11SwiftSyntax16AbsolutePositionV"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/tokens(viewMode:)":{"url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/tokens(viewmode:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/tokens(viewMode:)","role":"symbol","title":"tokens(viewMode:)","abstract":[{"type":"text","text":"Sequence of tokens that are part of this Syntax node."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"tokens","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"viewMode"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11SwiftSyntax0B12TreeViewModeO","kind":"typeIdentifier","text":"SyntaxTreeViewMode"},{"text":") -> ","kind":"text"},{"text":"TokenSequence","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax13TokenSequenceV"}],"type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/asProtocol(_:)-8az9m":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"asProtocol","kind":"identifier"},{"text":"((any ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax013WithCodeBlockB0P","kind":"typeIdentifier","text":"WithCodeBlockSyntax"},{"text":").Type) -> (any ","kind":"text"},{"text":"WithCodeBlockSyntax","preciseIdentifier":"s:11SwiftSyntax013WithCodeBlockB0P","kind":"typeIdentifier"},{"kind":"text","text":")?"}],"abstract":[{"type":"text","text":"Return the non-type erased version of this syntax node if it conforms to"},{"type":"text","text":" "},{"type":"codeVoice","code":"WithCodeBlockSyntax"},{"text":". Otherwise return ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Note that this will incur an existential conversion.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-8az9m","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/asprotocol(_:)-8az9m","title":"asProtocol(_:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/hasError":{"abstract":[{"text":"Whether the tree contained by this layout has any","type":"text"}],"title":"hasError","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/haserror","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/hasError","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"hasError"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/debugDescription(includeTrivia:converter:mark:indentString:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"debugDescription","kind":"identifier"},{"text":"(","kind":"text"},{"text":"includeTrivia","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"text":"converter","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax23SourceLocationConverterC","kind":"typeIdentifier","text":"SourceLocationConverter"},{"text":"?, ","kind":"text"},{"text":"mark","kind":"externalParam"},{"kind":"text","text":": (any "},{"text":"SyntaxProtocol","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B8ProtocolP"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"indentString"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"}],"abstract":[{"type":"text","text":"Returns a summarized dump of this node."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/debugDescription(includeTrivia:converter:mark:indentString:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/debugdescription(includetrivia:converter:mark:indentstring:)","title":"debugDescription(includeTrivia:converter:mark:indentString:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/isProtocol(_:)-9hqfr":{"abstract":[{"type":"text","text":"Check whether the non-type erased version of this syntax node conforms to"},{"type":"text","text":" "},{"type":"codeVoice","code":"DeclGroupSyntax"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Note that this will incur an existential conversion."}],"title":"isProtocol(_:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/isprotocol(_:)-9hqfr","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-9hqfr","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"isProtocol"},{"text":"((any ","kind":"text"},{"text":"DeclGroupSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax09DeclGroupB0P"},{"kind":"text","text":").Type) -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/asProtocol(_:)-5vs81":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"asProtocol"},{"text":"((any ","kind":"text"},{"text":"WithStatementsSyntax","preciseIdentifier":"s:11SwiftSyntax014WithStatementsB0P","kind":"typeIdentifier"},{"text":").Type) -> (any ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax014WithStatementsB0P","text":"WithStatementsSyntax"},{"kind":"text","text":")?"}],"abstract":[{"text":"Return the non-type erased version of this syntax node if it conforms to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"WithStatementsSyntax"},{"type":"text","text":". Otherwise return "},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Note that this will incur an existential conversion."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-5vs81","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/asprotocol(_:)-5vs81","title":"asProtocol(_:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/asProtocol(_:)-10uqt":{"abstract":[{"type":"text","text":"Return the non-type erased version of this syntax node if it conforms to"},{"type":"text","text":" "},{"type":"codeVoice","code":"MissingNodeSyntax"},{"type":"text","text":". Otherwise return "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Note that this will incur an existential conversion.","type":"text"}],"title":"asProtocol(_:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/asprotocol(_:)-10uqt","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-10uqt","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"asProtocol","kind":"identifier"},{"text":"((any ","kind":"text"},{"text":"MissingNodeSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax011MissingNodeB0P"},{"kind":"text","text":").Type) -> (any "},{"preciseIdentifier":"s:11SwiftSyntax011MissingNodeB0P","text":"MissingNodeSyntax","kind":"typeIdentifier"},{"kind":"text","text":")?"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/trimmed(matching:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"trimmed"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"matching"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax11TriviaPieceO","text":"TriviaPiece","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"text":"A copy of this node with pieces that match ","type":"text"},{"type":"codeVoice","code":"matching"},{"type":"text","text":" trimmed from the"},{"type":"text","text":" "},{"type":"text","text":"leading trivia of the first token and trailing trivia of the last token."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/trimmed(matching:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/trimmed(matching:)","title":"trimmed(matching:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/children(viewMode:)":{"abstract":[{"type":"text","text":"A sequence over the children of this node."}],"title":"children(viewMode:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/children(viewmode:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/children(viewMode:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"children","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"viewMode"},{"kind":"text","text":": "},{"text":"SyntaxTreeViewMode","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B12TreeViewModeO"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:11SwiftSyntax0B8ChildrenV","text":"SyntaxChildren","kind":"typeIdentifier"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/byteRange":{"kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"byteRange","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax15ByteSourceRangeV","text":"ByteSourceRange"}],"abstract":[],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/byteRange","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/byterange","title":"byteRange","role":"symbol","type":"topic","deprecated":true},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/byteSizeAfterTrimmingTrivia":{"abstract":[{"type":"text","text":"The textual byte length of this node excluding leading and trailing trivia."}],"deprecated":true,"url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/bytesizeaftertrimmingtrivia","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/byteSizeAfterTrimmingTrivia","title":"byteSizeAfterTrimmingTrivia","role":"symbol","type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"byteSizeAfterTrimmingTrivia"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"}]},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/firstToken":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"firstToken","kind":"identifier"},{"text":": ","kind":"text"},{"text":"TokenSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05TokenB0V"},{"text":"?","kind":"text"}],"abstract":[],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/firstToken","title":"firstToken","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/firsttoken","type":"topic","deprecated":true,"kind":"symbol","role":"symbol"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/isImplicit":{"abstract":[{"type":"text","text":"When isImplicit is true, the syntax node doesn’t include any"},{"type":"text","text":" "},{"text":"underlying tokens, e.g. an empty CodeBlockItemList.","type":"text"}],"title":"isImplicit","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/isimplicit","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isImplicit","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"isImplicit"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"role":"symbol","deprecated":true,"type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/asProtocol(_:)-6gldw":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"asProtocol","kind":"identifier"},{"kind":"text","text":"((any "},{"text":"WithModifiersSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax013WithModifiersB0P"},{"kind":"text","text":").Type) -> (any "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax013WithModifiersB0P","text":"WithModifiersSyntax"},{"text":")?","kind":"text"}],"abstract":[{"type":"text","text":"Return the non-type erased version of this syntax node if it conforms to"},{"type":"text","text":" "},{"code":"WithModifiersSyntax","type":"codeVoice"},{"type":"text","text":". Otherwise return "},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Note that this will incur an existential conversion."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-6gldw","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/asprotocol(_:)-6gldw","title":"asProtocol(_:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/nextToken":{"abstract":[],"title":"nextToken","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/nexttoken","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/nextToken","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"nextToken","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11SwiftSyntax05TokenB0V","text":"TokenSyntax","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"role":"symbol","deprecated":true,"type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/syntaxNodeType":{"kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"syntaxNodeType","kind":"identifier"},{"kind":"text","text":": any "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B8ProtocolP","text":"SyntaxProtocol"},{"text":".Type","kind":"text"}],"abstract":[{"text":"The dynamic metatype of the concrete node.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/syntaxNodeType","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/syntaxnodetype","title":"syntaxNodeType","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/firstToken(viewMode:)":{"abstract":[{"text":"Returns the first token node that is part of this syntax node.","type":"text"}],"title":"firstToken(viewMode:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/firsttoken(viewmode:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/firstToken(viewMode:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"firstToken"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"viewMode"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B12TreeViewModeO","text":"SyntaxTreeViewMode"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05TokenB0V","text":"TokenSyntax"},{"kind":"text","text":"?"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/with(_:_:)":{"title":"with(_:_:)","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/with(_:_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"with"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">, "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"type":"topic","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/with(_:_:)","abstract":[{"type":"text","text":"Returns a new syntax node that has the child at "},{"code":"keyPath","type":"codeVoice"},{"type":"text","text":" replaced by"},{"type":"text","text":" "},{"type":"codeVoice","code":"value"},{"text":".","type":"text"}],"kind":"symbol"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/modifying(_:_:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"modifying","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">, (","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"abstract":[],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/modifying(_:_:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/modifying(_:_:)","title":"modifying(_:_:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/trimmedByteRange":{"abstract":[{"type":"text","text":"The byte source range of this node excluding leading and trailing trivia."}],"title":"trimmedByteRange","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/trimmedbyterange","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/trimmedByteRange","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"trimmedByteRange","kind":"identifier"},{"text":": ","kind":"text"},{"text":"ByteSourceRange","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax15ByteSourceRangeV"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/id":{"kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"id"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax0B10IdentifierV","kind":"typeIdentifier","text":"SyntaxIdentifier"}],"abstract":[{"text":"Returns a value representing the unique identity of the node.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/id","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/id","title":"id","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/totalByteRange":{"url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/totalbyterange","title":"totalByteRange","kind":"symbol","type":"topic","abstract":[{"text":"The byte source range of this node including leading and trailing trivia.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/totalByteRange","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"totalByteRange","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax15ByteSourceRangeV","text":"ByteSourceRange"}],"role":"symbol"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/previousToken(viewMode:)":{"abstract":[{"text":"Recursively walks through the tree to find the token semantically before","type":"text"},{"type":"text","text":" "},{"text":"this node.","type":"text"}],"title":"previousToken(viewMode:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/previoustoken(viewmode:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/previousToken(viewMode:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"previousToken","kind":"identifier"},{"kind":"text","text":"("},{"text":"viewMode","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"SyntaxTreeViewMode","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B12TreeViewModeO"},{"kind":"text","text":") -> "},{"text":"TokenSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05TokenB0V"},{"kind":"text","text":"?"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/lastToken(viewMode:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"lastToken","kind":"identifier"},{"text":"(","kind":"text"},{"text":"viewMode","kind":"externalParam"},{"kind":"text","text":": "},{"text":"SyntaxTreeViewMode","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B12TreeViewModeO"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05TokenB0V","text":"TokenSyntax"},{"text":"?","kind":"text"}],"abstract":[{"text":"Returns the last token node that is part of this syntax node.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/lastToken(viewMode:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/lasttoken(viewmode:)","title":"lastToken(viewMode:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/init(validating:)":{"abstract":[{"text":"If ","type":"text"},{"code":"node","type":"codeVoice"},{"type":"text","text":" has contains no syntax errors, return "},{"type":"codeVoice","code":"node"},{"text":", otherwise","type":"text"},{"type":"text","text":" "},{"type":"text","text":"throw an error with diagnostics describing the syntax errors."}],"title":"init(validating:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/init(validating:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/init(validating:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"validating"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/isProtocol(_:)-48zyq":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"isProtocol"},{"text":"((any ","kind":"text"},{"text":"FreestandingMacroExpansionSyntax","preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P","kind":"typeIdentifier"},{"kind":"text","text":").Type) -> "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Check whether the non-type erased version of this syntax node conforms to"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FreestandingMacroExpansionSyntax"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Note that this will incur an existential conversion."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-48zyq","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/isprotocol(_:)-48zyq","title":"isProtocol(_:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/trailingTrivia":{"abstract":[{"type":"text","text":"The trailing trivia of this syntax node."}],"title":"trailingTrivia","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/trailingtrivia","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/trailingTrivia","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"trailingTrivia"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax6TriviaV","text":"Trivia","kind":"typeIdentifier"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/debugDescription":{"kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"debugDescription","kind":"identifier"},{"kind":"text","text":": "},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"}],"abstract":[{"type":"text","text":"A simple description of this node (ie. its type)."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/debugDescription","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/debugdescription","title":"debugDescription","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/isProtocol(_:)-6g0o2":{"abstract":[{"type":"text","text":"Check whether the non-type erased version of this syntax node conforms to"},{"type":"text","text":" "},{"type":"codeVoice","code":"WithModifiersSyntax"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Note that this will incur an existential conversion.","type":"text"}],"title":"isProtocol(_:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/isprotocol(_:)-6g0o2","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-6g0o2","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"isProtocol","kind":"identifier"},{"text":"((any ","kind":"text"},{"kind":"typeIdentifier","text":"WithModifiersSyntax","preciseIdentifier":"s:11SwiftSyntax013WithModifiersB0P"},{"text":").Type) -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/asProtocol(_:)-3z2j7":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"asProtocol"},{"text":"((any ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax014WithAttributesB0P","text":"WithAttributesSyntax","kind":"typeIdentifier"},{"kind":"text","text":").Type) -> (any "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax014WithAttributesB0P","text":"WithAttributesSyntax"},{"kind":"text","text":")?"}],"abstract":[{"type":"text","text":"Return the non-type erased version of this syntax node if it conforms to"},{"type":"text","text":" "},{"code":"WithAttributesSyntax","type":"codeVoice"},{"text":". Otherwise return ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Note that this will incur an existential conversion.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-3z2j7","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/asprotocol(_:)-3z2j7","title":"asProtocol(_:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/isProtocol(_:)-3qr6b":{"abstract":[{"text":"Check whether the non-type erased version of this syntax node conforms to","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NamedDeclSyntax"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"Note that this will incur an existential conversion."}],"title":"isProtocol(_:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/isprotocol(_:)-3qr6b","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-3qr6b","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"isProtocol"},{"kind":"text","text":"((any "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax09NamedDeclB0P","text":"NamedDeclSyntax"},{"text":").Type) -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SyntaxChildren":{"title":"SyntaxChildren","abstract":[{"text":"Collection that contains the present child ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/Syntax","type":"reference"},{"type":"text","text":" nodes of the given node."}],"url":"\/documentation\/macrobuilder\/syntaxchildren","role":"symbol","navigatorTitle":[{"text":"SyntaxChildren","kind":"identifier"}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SyntaxChildren","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxChildren"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/asProtocol(_:)-45tys":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"asProtocol"},{"text":"((any ","kind":"text"},{"text":"WithTrailingCommaSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax017WithTrailingCommaB0P"},{"kind":"text","text":").Type) -> (any "},{"text":"WithTrailingCommaSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax017WithTrailingCommaB0P"},{"kind":"text","text":")?"}],"abstract":[{"type":"text","text":"Return the non-type erased version of this syntax node if it conforms to"},{"type":"text","text":" "},{"code":"WithTrailingCommaSyntax","type":"codeVoice"},{"type":"text","text":". Otherwise return "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Note that this will incur an existential conversion."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-45tys","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/asprotocol(_:)-45tys","title":"asProtocol(_:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/description":{"abstract":[{"type":"text","text":"A source-accurate description of this node."}],"title":"description","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/description","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/description","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"description"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/isProtocol(_:)-8nny4":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"isProtocol"},{"text":"((any ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax014WithAttributesB0P","kind":"typeIdentifier","text":"WithAttributesSyntax"},{"text":").Type) -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"abstract":[{"text":"Check whether the non-type erased version of this syntax node conforms to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"WithAttributesSyntax"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Note that this will incur an existential conversion."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-8nny4","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/isprotocol(_:)-8nny4","title":"isProtocol(_:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/leadingTriviaLength":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/leadingTriviaLength","kind":"symbol","abstract":[{"type":"text","text":"The length this node’s leading trivia takes up spelled out in source."}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"leadingTriviaLength"},{"kind":"text","text":": "},{"text":"SourceLength","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax12SourceLengthV"}],"title":"leadingTriviaLength","role":"symbol","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/leadingtrivialength"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/leadingTrivia":{"abstract":[{"type":"text","text":"The leading trivia of this syntax node."}],"title":"leadingTrivia","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/leadingtrivia","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/leadingTrivia","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"leadingTrivia"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax6TriviaV","text":"Trivia"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/asProtocol(_:)-65bv2":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-65bv2","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"asProtocol","kind":"identifier"},{"text":"((any ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax09DeclGroupB0P","kind":"typeIdentifier","text":"DeclGroupSyntax"},{"kind":"text","text":").Type) -> (any "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax09DeclGroupB0P","text":"DeclGroupSyntax"},{"text":")?","kind":"text"}],"role":"symbol","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/asprotocol(_:)-65bv2","abstract":[{"type":"text","text":"Return the non-type erased version of this syntax node if it conforms to"},{"type":"text","text":" "},{"code":"DeclGroupSyntax","type":"codeVoice"},{"text":". Otherwise return ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Note that this will incur an existential conversion."}],"title":"asProtocol(_:)"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/isProtocol(_:)-7n50d":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"isProtocol"},{"text":"((any ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax011MissingNodeB0P","kind":"typeIdentifier","text":"MissingNodeSyntax"},{"text":").Type) -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"abstract":[{"text":"Check whether the non-type erased version of this syntax node conforms to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"MissingNodeSyntax"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Note that this will incur an existential conversion."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-7n50d","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/isprotocol(_:)-7n50d","title":"isProtocol(_:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/isProtocol(_:)-2ku1u":{"abstract":[{"type":"text","text":"Check whether the non-type erased version of this syntax node conforms to"},{"type":"text","text":" "},{"type":"codeVoice","code":"WithTrailingCommaSyntax"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Note that this will incur an existential conversion.","type":"text"}],"title":"isProtocol(_:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/isprotocol(_:)-2ku1u","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-2ku1u","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"isProtocol"},{"text":"((any ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax017WithTrailingCommaB0P","kind":"typeIdentifier","text":"WithTrailingCommaSyntax"},{"text":").Type) -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/isProtocol(_:)-6sc3l":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"isProtocol"},{"kind":"text","text":"((any "},{"text":"WithGenericParametersSyntax","preciseIdentifier":"s:11SwiftSyntax021WithGenericParametersB0P","kind":"typeIdentifier"},{"text":").Type) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"text":"Check whether the non-type erased version of this syntax node conforms to","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"WithGenericParametersSyntax"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Note that this will incur an existential conversion."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-6sc3l","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/isprotocol(_:)-6sc3l","title":"isProtocol(_:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/hasSequenceExpr":{"abstract":[{"type":"text","text":"Whether this tree contains a missing token or unexpected node."}],"title":"hasSequenceExpr","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/hassequenceexpr","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/hasSequenceExpr","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"hasSequenceExpr"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/contentLength":{"kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"contentLength"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax12SourceLengthV","kind":"typeIdentifier","text":"SourceLength"}],"abstract":[],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/contentLength","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/contentlength","title":"contentLength","role":"symbol","type":"topic","deprecated":true},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SyntaxKind/functionDecl":{"url":"\/documentation\/macrobuilder\/syntaxkind\/functiondecl","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"kind":"identifier","text":"functionDecl"}],"title":"SyntaxKind.functionDecl","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxKind\/functionDecl","role":"symbol","type":"topic","kind":"symbol"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/asMacroLexicalContext()":{"abstract":[{"type":"text","text":"If this syntax node acts as a lexical context from the perspective"},{"text":" ","type":"text"},{"type":"text","text":"of a macro, return a new syntax node based on this node that strips all"},{"text":" ","type":"text"},{"text":"information that isn’t supposed to be exposed as a lexical context, such","type":"text"},{"type":"text","text":" "},{"type":"text","text":"as function bodies or the members of types\/extensions."}],"title":"asMacroLexicalContext()","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/asmacrolexicalcontext()","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asMacroLexicalContext()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"asMacroLexicalContext"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B0V","text":"Syntax"},{"text":"?","kind":"text"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/kind":{"kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"kind","kind":"identifier"},{"kind":"text","text":": "},{"text":"SyntaxKind","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B4KindO"}],"abstract":[{"type":"text","text":"The kind of the syntax node, e.g. if it is a "},{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxKind\/functionDecl","isActive":true,"type":"reference"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/kind","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/kind","title":"kind","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/isProtocol(_:)-9iyeg":{"abstract":[{"type":"text","text":"Check whether the non-type erased version of this syntax node conforms to"},{"text":" ","type":"text"},{"type":"codeVoice","code":"WithStatementsSyntax"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Note that this will incur an existential conversion."}],"title":"isProtocol(_:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/isprotocol(_:)-9iyeg","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-9iyeg","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"isProtocol","kind":"identifier"},{"text":"((any ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax014WithStatementsB0P","kind":"typeIdentifier","text":"WithStatementsSyntax"},{"text":").Type) -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/previousToken":{"kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"previousToken"},{"text":": ","kind":"text"},{"text":"TokenSyntax","preciseIdentifier":"s:11SwiftSyntax05TokenB0V","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"abstract":[],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/previousToken","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/previoustoken","title":"previousToken","role":"symbol","type":"topic","deprecated":true},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/asProtocol(_:)-9ds13":{"abstract":[{"text":"Return the non-type erased version of this syntax node if it conforms to","type":"text"},{"type":"text","text":" "},{"code":"FreestandingMacroExpansionSyntax","type":"codeVoice"},{"type":"text","text":". Otherwise return "},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Note that this will incur an existential conversion.","type":"text"}],"title":"asProtocol(_:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/asprotocol(_:)-9ds13","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-9ds13","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"asProtocol","kind":"identifier"},{"text":"((any ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P","text":"FreestandingMacroExpansionSyntax","kind":"typeIdentifier"},{"kind":"text","text":").Type) -> (any "},{"preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P","kind":"typeIdentifier","text":"FreestandingMacroExpansionSyntax"},{"text":")?","kind":"text"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/detached":{"abstract":[{"type":"text","text":"Return this subtree with this node as the root, ie. detach this node"},{"text":" ","type":"text"},{"text":"from its parent.","type":"text"}],"title":"detached","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/detached","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/detached","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"detached"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/endLocation(converter:afterTrailingTrivia:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"endLocation","kind":"identifier"},{"kind":"text","text":"("},{"text":"converter","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"SourceLocationConverter","preciseIdentifier":"s:11SwiftSyntax23SourceLocationConverterC"},{"kind":"text","text":", "},{"text":"afterTrailingTrivia","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax14SourceLocationV","text":"SourceLocation"}],"abstract":[{"type":"text","text":"The ending location, in the provided file, of this Syntax node."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/endLocation(converter:afterTrailingTrivia:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/endlocation(converter:aftertrailingtrivia:)","title":"endLocation(converter:afterTrailingTrivia:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/totalLength":{"abstract":[{"type":"text","text":"The length of this node including all of its trivia."}],"title":"totalLength","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/totallength","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/totalLength","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"totalLength"},{"text":": ","kind":"text"},{"text":"SourceLength","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax12SourceLengthV"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/isProtocol(_:)-55p3x":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"isProtocol","kind":"identifier"},{"text":"((any ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax016EffectSpecifiersB0P","kind":"typeIdentifier","text":"EffectSpecifiersSyntax"},{"text":").Type) -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"abstract":[{"type":"text","text":"Check whether the non-type erased version of this syntax node conforms to"},{"type":"text","text":" "},{"code":"EffectSpecifiersSyntax","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Note that this will incur an existential conversion."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/isProtocol(_:)-55p3x","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/isprotocol(_:)-55p3x","title":"isProtocol(_:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/trailingTriviaLength":{"abstract":[{"type":"text","text":"The length this node’s trailing trivia takes up spelled out in source."}],"title":"trailingTriviaLength","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/trailingtrivialength","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/trailingTriviaLength","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"trailingTriviaLength"},{"text":": ","kind":"text"},{"text":"SourceLength","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax12SourceLengthV"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/asProtocol(_:)-5so74":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"asProtocol","kind":"identifier"},{"kind":"text","text":"((any "},{"kind":"typeIdentifier","text":"BracedSyntax","preciseIdentifier":"s:11SwiftSyntax06BracedB0P"},{"text":").Type) -> (any ","kind":"text"},{"text":"BracedSyntax","preciseIdentifier":"s:11SwiftSyntax06BracedB0P","kind":"typeIdentifier"},{"text":")?","kind":"text"}],"abstract":[{"type":"text","text":"Return the non-type erased version of this syntax node if it conforms to"},{"type":"text","text":" "},{"code":"BracedSyntax","type":"codeVoice"},{"type":"text","text":". Otherwise return "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Note that this will incur an existential conversion.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-5so74","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/asprotocol(_:)-5so74","title":"asProtocol(_:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/positionAfterSkippingLeadingTrivia":{"abstract":[{"text":"The absolute position of the starting point of this node, skipping any","type":"text"},{"type":"text","text":" "},{"type":"text","text":"leading trivia attached to the first token syntax."}],"title":"positionAfterSkippingLeadingTrivia","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/positionafterskippingleadingtrivia","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/positionAfterSkippingLeadingTrivia","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"positionAfterSkippingLeadingTrivia"},{"text":": ","kind":"text"},{"text":"AbsolutePosition","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax16AbsolutePositionV"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/asProtocol(_:)-54fw1":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"asProtocol","kind":"identifier"},{"kind":"text","text":"((any "},{"kind":"typeIdentifier","text":"ParenthesizedSyntax","preciseIdentifier":"s:11SwiftSyntax013ParenthesizedB0P"},{"text":").Type) -> (any ","kind":"text"},{"text":"ParenthesizedSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax013ParenthesizedB0P"},{"kind":"text","text":")?"}],"abstract":[{"type":"text","text":"Return the non-type erased version of this syntax node if it conforms to"},{"type":"text","text":" "},{"code":"ParenthesizedSyntax","type":"codeVoice"},{"type":"text","text":". Otherwise return "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Note that this will incur an existential conversion.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-54fw1","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/asprotocol(_:)-54fw1","title":"asProtocol(_:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/trimmed":{"abstract":[{"text":"A copy of this node without the leading trivia of the first token in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"node and the trailing trivia of the last token in the node."}],"title":"trimmed","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/trimmed","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/trimmed","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"trimmed"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/asProtocol(_:)-4rf1x":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"asProtocol","kind":"identifier"},{"kind":"text","text":"((any "},{"kind":"typeIdentifier","text":"EffectSpecifiersSyntax","preciseIdentifier":"s:11SwiftSyntax016EffectSpecifiersB0P"},{"text":").Type) -> (any ","kind":"text"},{"text":"EffectSpecifiersSyntax","preciseIdentifier":"s:11SwiftSyntax016EffectSpecifiersB0P","kind":"typeIdentifier"},{"text":")?","kind":"text"}],"abstract":[{"type":"text","text":"Return the non-type erased version of this syntax node if it conforms to"},{"type":"text","text":" "},{"code":"EffectSpecifiersSyntax","type":"codeVoice"},{"type":"text","text":". Otherwise return "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"Note that this will incur an existential conversion.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-4rf1x","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/asprotocol(_:)-4rf1x","title":"asProtocol(_:)","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/asProtocol(_:)-41p9i":{"abstract":[{"text":"Return the non-type erased version of this syntax node if it conforms to","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"WithGenericParametersSyntax"},{"type":"text","text":". Otherwise return "},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Note that this will incur an existential conversion."}],"title":"asProtocol(_:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/asprotocol(_:)-41p9i","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/asProtocol(_:)-41p9i","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"asProtocol","kind":"identifier"},{"kind":"text","text":"((any "},{"kind":"typeIdentifier","text":"WithGenericParametersSyntax","preciseIdentifier":"s:11SwiftSyntax021WithGenericParametersB0P"},{"text":").Type) -> (any ","kind":"text"},{"text":"WithGenericParametersSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax021WithGenericParametersB0P"},{"kind":"text","text":")?"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/hasMaximumNestingLevelOverflow":{"kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"hasMaximumNestingLevelOverflow","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/hasMaximumNestingLevelOverflow","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/hasmaximumnestingleveloverflow","title":"hasMaximumNestingLevelOverflow","role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/sourceRange(converter:afterLeadingTrivia:afterTrailingTrivia:)":{"abstract":[{"type":"text","text":"The source range, in the provided file, of this Syntax node."}],"title":"sourceRange(converter:afterLeadingTrivia:afterTrailingTrivia:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/sourcerange(converter:afterleadingtrivia:aftertrailingtrivia:)","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/sourceRange(converter:afterLeadingTrivia:afterTrailingTrivia:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"sourceRange","kind":"identifier"},{"kind":"text","text":"("},{"text":"converter","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"SourceLocationConverter","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax23SourceLocationConverterC"},{"text":", ","kind":"text"},{"text":"afterLeadingTrivia","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":", "},{"text":"afterTrailingTrivia","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax11SourceRangeV","text":"SourceRange"}],"role":"symbol","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax":{"navigatorTitle":[{"kind":"identifier","text":"RegexLiteralExprSyntax"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"RegexLiteralExprSyntax"}],"url":"\/documentation\/macrobuilder\/regexliteralexprsyntax","type":"topic","abstract":[],"role":"symbol","title":"RegexLiteralExprSyntax","kind":"symbol"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/detach()":{"abstract":[],"deprecated":true,"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/detach()","title":"detach()","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/detach()","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"detach","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"Self","kind":"typeIdentifier"}],"role":"symbol"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/RegexLiteralExprSyntax/nextToken(viewMode:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"nextToken"},{"kind":"text","text":"("},{"kind":"externalParam","text":"viewMode"},{"text":": ","kind":"text"},{"text":"SyntaxTreeViewMode","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B12TreeViewModeO"},{"text":") -> ","kind":"text"},{"text":"TokenSyntax","preciseIdentifier":"s:11SwiftSyntax05TokenB0V","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"abstract":[{"type":"text","text":"Recursively walks through the tree to find the next token semantically"},{"text":" ","type":"text"},{"text":"after this node.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/RegexLiteralExprSyntax\/nextToken(viewMode:)","url":"\/documentation\/macrobuilder\/regexliteralexprsyntax\/nexttoken(viewmode:)","title":"nextToken(viewMode:)","role":"symbol","type":"topic"}}}