{"metadata":{"externalID":"s:18SwiftSyntaxBuilder020ExpressibleByLiteralB0PAASFRzs25LosslessStringConvertibleRzrlE04makefB00aB004ExprB0VyF","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"FloatingPoint"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"LosslessStringConvertible"},{"text":".","type":"text"}]},"modules":[{"name":"MacroBuilder","relatedModules":["SwiftSyntaxBuilder"]}],"extendedModule":"SwiftSyntaxBuilder","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"makeLiteralSyntax","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax04ExprB0V","text":"ExprSyntax"}],"roleHeading":"Instance Method","title":"makeLiteralSyntax()"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExpressibleByLiteralSyntax","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExpressibleByLiteralSyntax\/makeLiteralSyntax()-3qmsa"]]},"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExpressibleByLiteralSyntax\/makeLiteralSyntax()-3a03s"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeLiteralSyntax"},{"text":"() -> ","kind":"text"},{"text":"ExprSyntax","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExprSyntax","preciseIdentifier":"s:11SwiftSyntax04ExprB0V"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"inlineContent":[{"text":"This method is usually not called directly. Instead, conforming types can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"be turned into syntax trees using "},{"code":"SwiftSyntax\/ExprSyntax\/init(literal:)","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let expr2 = Expr(literal: [0+1, 1+1, 2+1])","\/\/ `expr2` is a syntax tree for `[1, 2, 3]`."]},{"type":"paragraph","inlineContent":[{"text":"Or interpolated into a Swift source code literal with the syntax","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"\\(literal: <value>)"},{"text":":","type":"text"}]},{"code":["let greeting = \"Hello, world!\"","let expr1 = ExprSyntax(\"print(\\(literal: greeting))\")","\/\/ `expr1` is a syntax tree for `print(\"Hello, world!\")`"],"type":"codeListing","syntax":null}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/macrobuilder\/expressiblebyliteralsyntax\/makeliteralsyntax()-3a03s"]}],"abstract":[{"text":"Returns a syntax tree that represents the value of this instance.","type":"text"}],"sections":[],"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/ExpressibleByLiteralSyntax/makeLiteralSyntax()-3qmsa":{"type":"topic","title":"makeLiteralSyntax()","kind":"symbol","url":"\/documentation\/macrobuilder\/expressiblebyliteralsyntax\/makeliteralsyntax()-3qmsa","abstract":[{"text":"Returns a syntax tree that represents the value of this instance.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"makeLiteralSyntax","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"LiteralType","preciseIdentifier":"s:18SwiftSyntaxBuilder020ExpressibleByLiteralB0P0F4TypeQa","kind":"typeIdentifier"}],"defaultImplementations":2,"required":true,"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExpressibleByLiteralSyntax\/makeLiteralSyntax()-3qmsa","role":"symbol"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/ExpressibleByLiteralSyntax":{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExpressibleByLiteralSyntax","navigatorTitle":[{"text":"ExpressibleByLiteralSyntax","kind":"identifier"}],"url":"\/documentation\/macrobuilder\/expressiblebyliteralsyntax","kind":"symbol","role":"symbol","type":"topic","title":"ExpressibleByLiteralSyntax","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ExpressibleByLiteralSyntax","kind":"identifier"}],"abstract":[{"type":"text","text":"A Swift type whose value can be represented directly in source code by a"},{"text":" ","type":"text"},{"text":"Swift literal.","type":"text"}]},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/ExprSyntax":{"url":"\/documentation\/macrobuilder\/exprsyntax","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ExprSyntax","kind":"identifier"}],"type":"topic","title":"ExprSyntax","abstract":[],"kind":"symbol","navigatorTitle":[{"text":"ExprSyntax","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExprSyntax"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/ExpressibleByLiteralSyntax/makeLiteralSyntax()-3a03s":{"url":"\/documentation\/macrobuilder\/expressiblebyliteralsyntax\/makeliteralsyntax()-3a03s","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/ExpressibleByLiteralSyntax\/makeLiteralSyntax()-3a03s","abstract":[{"text":"Returns a syntax tree that represents the value of this instance.","type":"text"}],"role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"FloatingPoint","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"LosslessStringConvertible"},{"text":".","type":"text"}]},"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"makeLiteralSyntax","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"ExprSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax04ExprB0V"}],"kind":"symbol","title":"makeLiteralSyntax()"}}}