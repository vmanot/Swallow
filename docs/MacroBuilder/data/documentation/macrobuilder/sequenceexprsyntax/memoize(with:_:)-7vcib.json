{"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/macrobuilder\/sequenceexprsyntax\/memoize(with:_:)-7vcib"]}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"memoize","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"cache","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"MemoizationCache","kind":"typeIdentifier"},{"text":"? = MemoizationCache.shared, ","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"keyPath"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"text":">) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The shared cache to use; "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" disables caching and simply returns the result of "},{"type":"codeVoice","code":"predicate"},{"text":" directly","type":"text"}],"type":"paragraph"}],"name":"cache"}]},{"content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"text":"The result from the ","type":"text"},{"code":"predicate","type":"codeVoice"},{"type":"text","text":", either a previously cached value, or the result of executing the "},{"code":"predicate","type":"codeVoice"}]}],"kind":"content"},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The source subject (the receiver) and the result object (the return value) should be value types, and the "},{"type":"codeVoice","code":"predicate"},{"text":" must be a ","type":"text"},{"inlineContent":[{"type":"text","text":"pure"}],"type":"emphasis"},{"type":"text","text":" function that captures "},{"inlineContent":[{"type":"text","text":"no state"}],"type":"emphasis"},{"type":"text","text":", in that:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Its return value is the same for the same arguments (no variation with local static variables, non-local variables, mutable reference arguments or input streams from I\/O devices)."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Its evaluation has no side effects (no mutation of local static variables, non-local variables, mutable reference arguments or I\/O streams).","type":"text"}]}]}]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"The calling functionâ€™s source file and line are used as the cache key, so care must be taken to avoid having multiple calls to ","type":"text"},{"type":"codeVoice","code":"memoize"},{"type":"text","text":" occur from a single line of source code."}]}],"name":"Note"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Re-Throws and errors from ","type":"text"},{"code":"predicate","type":"codeVoice"}]}],"name":"Throws","style":"note","type":"aside"},{"name":"Complexity","style":"note","type":"aside","content":[{"inlineContent":[{"text":"Around O(1) for a successful cache hit, otherwise the complexity of the keyPath execution","type":"text"}],"type":"paragraph"}]}]}],"abstract":[{"type":"text","text":"Memoize the result of the execution of a predicate for the "},{"code":"Hashable","type":"codeVoice"},{"text":" receiver.","type":"text"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SequenceExprSyntax","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SequenceExprSyntax\/Hashable-Implementations"]]},"kind":"symbol","metadata":{"extendedModule":"Swift","role":"symbol","symbolKind":"method","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"memoize","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"with"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"MemoizationCache"},{"text":"?, ","kind":"text"},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"externalID":"s:SH7SwallowE7memoize4with_qd__AA6_CacheCyAA011MemoizationD3KeyVypGSg_s0F4PathCyxqd__GtlF::SYNTHESIZED::s:11SwiftSyntax012SequenceExprB0V","title":"memoize(with:_:)","modules":[{"relatedModules":["Swift"],"name":"MacroBuilder"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SequenceExprSyntax\/memoize(with:_:)-7vcib"},"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SequenceExprSyntax/memoize(with:_:)-7vcib":{"abstract":[{"text":"Memoize the result of the execution of a predicate for the ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"text":" receiver.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SequenceExprSyntax\/memoize(with:_:)-7vcib","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"memoize"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"text":"MemoizationCache","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"preciseIdentifier":"s:s7KeyPathC","text":"KeyPath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"T"}],"title":"memoize(with:_:)","kind":"symbol","url":"\/documentation\/macrobuilder\/sequenceexprsyntax\/memoize(with:_:)-7vcib","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SequenceExprSyntax/Hashable-Implementations":{"role":"collectionGroup","url":"\/documentation\/macrobuilder\/sequenceexprsyntax\/hashable-implementations","kind":"article","type":"topic","abstract":[],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SequenceExprSyntax\/Hashable-Implementations","title":"Hashable Implementations"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SequenceExprSyntax":{"url":"\/documentation\/macrobuilder\/sequenceexprsyntax","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SequenceExprSyntax","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"SequenceExprSyntax","kind":"identifier"}],"title":"SequenceExprSyntax","abstract":[{"type":"text","text":"A flat list of expressions before operator folding using the "},{"type":"codeVoice","code":"SwiftOperators"},{"type":"text","text":" library."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SequenceExprSyntax","kind":"identifier"}],"type":"topic"}}}