{"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/macrobuilder\/sequenceexprsyntax\/hasmaximumnestingleveloverflow"]}],"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SequenceExprSyntax","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SequenceExprSyntax\/SyntaxProtocol-Implementations"]]},"abstract":[{"type":"text","text":"Inherited from "},{"code":"SyntaxProtocol.hasMaximumNestingLevelOverflow","type":"codeVoice"},{"text":".","type":"text"}],"sections":[],"identifier":{"url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SequenceExprSyntax\/hasMaximumNestingLevelOverflow","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Instance Property","modules":[{"name":"MacroBuilder","relatedModules":["SwiftSyntax"]}],"extendedModule":"SwiftSyntax","role":"symbol","symbolKind":"property","title":"hasMaximumNestingLevelOverflow","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hasMaximumNestingLevelOverflow","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"externalID":"s:11SwiftSyntax0B8ProtocolPAAE30hasMaximumNestingLevelOverflowSbvp::SYNTHESIZED::s:11SwiftSyntax012SequenceExprB0V"},"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"hasMaximumNestingLevelOverflow"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":" { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}],"languages":["swift"]}]}],"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SequenceExprSyntax/SyntaxProtocol-Implementations":{"kind":"article","role":"collectionGroup","title":"SyntaxProtocol Implementations","abstract":[],"url":"\/documentation\/macrobuilder\/sequenceexprsyntax\/syntaxprotocol-implementations","type":"topic","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SequenceExprSyntax\/SyntaxProtocol-Implementations"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SequenceExprSyntax":{"url":"\/documentation\/macrobuilder\/sequenceexprsyntax","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SequenceExprSyntax","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"SequenceExprSyntax","kind":"identifier"}],"title":"SequenceExprSyntax","abstract":[{"type":"text","text":"A flat list of expressions before operator folding using the "},{"type":"codeVoice","code":"SwiftOperators"},{"type":"text","text":" library."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SequenceExprSyntax","kind":"identifier"}],"type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SequenceExprSyntax/hasMaximumNestingLevelOverflow":{"kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SequenceExprSyntax\/hasMaximumNestingLevelOverflow","title":"hasMaximumNestingLevelOverflow","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"hasMaximumNestingLevelOverflow","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"type":"topic","url":"\/documentation\/macrobuilder\/sequenceexprsyntax\/hasmaximumnestingleveloverflow","role":"symbol","abstract":[]}}}