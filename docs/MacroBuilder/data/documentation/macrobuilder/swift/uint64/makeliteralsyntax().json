{"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/Swift","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/Swift\/UInt64","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/Swift\/UInt64\/ExpressibleByLiteralSyntax-Implementations"]]},"abstract":[{"type":"text","text":"Returns a syntax tree that represents the value of this instance."}],"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"makeLiteralSyntax","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"IntegerLiteralExprSyntax","preciseIdentifier":"s:11SwiftSyntax018IntegerLiteralExprB0V"}],"title":"makeLiteralSyntax()","extendedModule":"SwiftSyntaxBuilder","modules":[{"relatedModules":["SwiftSyntaxBuilder"],"name":"MacroBuilder"}],"role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"BinaryInteger"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"externalID":"s:18SwiftSyntaxBuilder020ExpressibleByLiteralB0PAASzRzrlE04makefB00aB007Integerf4ExprB0VyF::SYNTHESIZED::s:s6UInt64V","symbolKind":"method"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/macrobuilder\/swift\/uint64\/makeliteralsyntax()"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"makeLiteralSyntax","kind":"identifier"},{"text":"() -> ","kind":"text"},{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/IntegerLiteralExprSyntax","preciseIdentifier":"s:11SwiftSyntax018IntegerLiteralExprB0V","text":"IntegerLiteralExprSyntax","kind":"typeIdentifier"}]}]},{"content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"inlineContent":[{"type":"text","text":"This method is usually not called directly. Instead, conforming types can"},{"type":"text","text":" "},{"type":"text","text":"be turned into syntax trees using "},{"type":"codeVoice","code":"SwiftSyntax\/ExprSyntax\/init(literal:)"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":null,"code":["let expr2 = Expr(literal: [0+1, 1+1, 2+1])","\/\/ `expr2` is a syntax tree for `[1, 2, 3]`."],"type":"codeListing"},{"inlineContent":[{"text":"Or interpolated into a Swift source code literal with the syntax","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\\(literal: <value>)"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["let greeting = \"Hello, world!\"","let expr1 = ExprSyntax(\"print(\\(literal: greeting))\")","\/\/ `expr1` is a syntax tree for `print(\"Hello, world!\")`"],"syntax":null,"type":"codeListing"}],"kind":"content"}],"kind":"symbol","identifier":{"url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/Swift\/UInt64\/makeLiteralSyntax()","interfaceLanguage":"swift"},"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/Swift/UInt64/ExpressibleByLiteralSyntax-Implementations":{"type":"topic","kind":"article","title":"ExpressibleByLiteralSyntax Implementations","role":"collectionGroup","abstract":[],"url":"\/documentation\/macrobuilder\/swift\/uint64\/expressiblebyliteralsyntax-implementations","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/Swift\/UInt64\/ExpressibleByLiteralSyntax-Implementations"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/Swift":{"abstract":[],"type":"topic","role":"collection","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/Swift","url":"\/documentation\/macrobuilder\/swift","kind":"symbol","title":"Swift"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/Swift/UInt64":{"abstract":[],"title":"UInt64","fragments":[{"text":"extension","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UInt64","preciseIdentifier":"s:s6UInt64V"}],"navigatorTitle":[{"text":"UInt64","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/macrobuilder\/swift\/uint64","type":"topic","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/Swift\/UInt64"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/Swift/UInt64/makeLiteralSyntax()":{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/Swift\/UInt64\/makeLiteralSyntax()","url":"\/documentation\/macrobuilder\/swift\/uint64\/makeliteralsyntax()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"makeLiteralSyntax","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"IntegerLiteralExprSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax018IntegerLiteralExprB0V"}],"type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"BinaryInteger"},{"type":"text","text":"."}]},"kind":"symbol","title":"makeLiteralSyntax()","role":"symbol","abstract":[{"type":"text","text":"Returns a syntax tree that represents the value of this instance."}]},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/IntegerLiteralExprSyntax":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IntegerLiteralExprSyntax"}],"navigatorTitle":[{"text":"IntegerLiteralExprSyntax","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/IntegerLiteralExprSyntax","url":"\/documentation\/macrobuilder\/integerliteralexprsyntax","title":"IntegerLiteralExprSyntax","abstract":[]}}}