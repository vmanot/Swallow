{"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"asProtocol","kind":"identifier"},{"text":"((any ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax021WithGenericParametersB0P","text":"WithGenericParametersSyntax","kind":"typeIdentifier"},{"kind":"text","text":").Type) -> (any "},{"preciseIdentifier":"s:11SwiftSyntax021WithGenericParametersB0P","kind":"typeIdentifier","text":"WithGenericParametersSyntax"},{"text":")?","kind":"text"}],"extendedModule":"SwiftSyntax","title":"asProtocol(_:)","modules":[{"name":"MacroBuilder","relatedModules":["SwiftSyntax"]}],"role":"symbol","roleHeading":"Instance Method","externalID":"s:11SwiftSyntax0B8ProtocolPAAE02asC0yAA021WithGenericParametersB0_pSgAaE_pmF::SYNTHESIZED::s:11SwiftSyntax026CompositionTypeElementListB0V","symbolKind":"method"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/CompositionTypeElementListSyntax","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/CompositionTypeElementListSyntax\/SyntaxProtocol-Implementations"]]},"abstract":[{"type":"text","text":"Return the non-type erased version of this syntax node if it conforms to"},{"type":"text","text":" "},{"code":"WithGenericParametersSyntax","type":"codeVoice"},{"text":". Otherwise return ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Note that this will incur an existential conversion.","type":"text"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/macrobuilder\/compositiontypeelementlistsyntax\/asprotocol(_:)-3r0qd"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"asProtocol","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":": (any ","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/WithGenericParametersSyntax","text":"WithGenericParametersSyntax","preciseIdentifier":"s:11SwiftSyntax021WithGenericParametersB0P"},{"text":").Type) -> (any ","kind":"text"},{"text":"WithGenericParametersSyntax","preciseIdentifier":"s:11SwiftSyntax021WithGenericParametersB0P","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/WithGenericParametersSyntax"},{"kind":"text","text":")?"}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/CompositionTypeElementListSyntax\/asProtocol(_:)-3r0qd"},"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/CompositionTypeElementListSyntax":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CompositionTypeElementListSyntax"}],"navigatorTitle":[{"text":"CompositionTypeElementListSyntax","kind":"identifier"}],"type":"topic","url":"\/documentation\/macrobuilder\/compositiontypeelementlistsyntax","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/CompositionTypeElementListSyntax","abstract":[],"kind":"symbol","title":"CompositionTypeElementListSyntax"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/CompositionTypeElementListSyntax/SyntaxProtocol-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/CompositionTypeElementListSyntax\/SyntaxProtocol-Implementations","url":"\/documentation\/macrobuilder\/compositiontypeelementlistsyntax\/syntaxprotocol-implementations","type":"topic","kind":"article","role":"collectionGroup","title":"SyntaxProtocol Implementations","abstract":[]},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/WithGenericParametersSyntax":{"url":"\/documentation\/macrobuilder\/withgenericparameterssyntax","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/WithGenericParametersSyntax","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"WithGenericParametersSyntax","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Syntax nodes that have generic parameters."}],"kind":"symbol","role":"symbol","title":"WithGenericParametersSyntax","navigatorTitle":[{"text":"WithGenericParametersSyntax","kind":"identifier"}]},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/CompositionTypeElementListSyntax/asProtocol(_:)-3r0qd":{"kind":"symbol","type":"topic","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/CompositionTypeElementListSyntax\/asProtocol(_:)-3r0qd","title":"asProtocol(_:)","url":"\/documentation\/macrobuilder\/compositiontypeelementlistsyntax\/asprotocol(_:)-3r0qd","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"asProtocol","kind":"identifier"},{"kind":"text","text":"((any "},{"preciseIdentifier":"s:11SwiftSyntax021WithGenericParametersB0P","text":"WithGenericParametersSyntax","kind":"typeIdentifier"},{"text":").Type) -> (any ","kind":"text"},{"kind":"typeIdentifier","text":"WithGenericParametersSyntax","preciseIdentifier":"s:11SwiftSyntax021WithGenericParametersB0P"},{"kind":"text","text":")?"}],"abstract":[{"type":"text","text":"Return the non-type erased version of this syntax node if it conforms to"},{"text":" ","type":"text"},{"type":"codeVoice","code":"WithGenericParametersSyntax"},{"text":". Otherwise return ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Note that this will incur an existential conversion.","type":"text"}]}}}