{"metadata":{"extendedModule":"SwiftSyntaxBuilder","externalID":"s:18SwiftSyntaxBuilder04DeclB9ParseablePAAEyxAA0B10NodeStringVKcfc::SYNTHESIZED::s:11SwiftSyntax012EnumCaseDeclB0V","title":"init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"SyntaxNodeString","kind":"typeIdentifier","preciseIdentifier":"s:18SwiftSyntaxBuilder0B10NodeStringV"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"}],"modules":[{"name":"MacroBuilder","relatedModules":["SwiftSyntaxBuilder"]}],"roleHeading":"Initializer","symbolKind":"init","role":"symbol"},"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/EnumCaseDeclSyntax\/init(_:)-7u3vq"},"abstract":[{"type":"text","text":"Create a syntax node from the given string interpolation."}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"stringInterpolation","kind":"internalParam"},{"kind":"text","text":": "},{"text":"SyntaxNodeString","preciseIdentifier":"s:18SwiftSyntaxBuilder0B10NodeStringV","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxNodeString","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This initializer throws if the syntax node was not able to be parsed as"},{"type":"text","text":" "},{"type":"text","text":"this type, e.g. when calling "},{"type":"codeVoice","code":"ClassDeclSyntax(\"actor Foo {})"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"If there are syntax errors in the string, the initializer will return a"},{"type":"text","text":" "},{"text":"node that contains errors without throwing.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/macrobuilder\/enumcasedeclsyntax\/init(_:)-7u3vq"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/EnumCaseDeclSyntax","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/EnumCaseDeclSyntax\/DeclSyntaxParseable-Implementations"]]},"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SyntaxNodeString":{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxNodeString","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"SyntaxNodeString","kind":"identifier"}],"navigatorTitle":[{"text":"SyntaxNodeString","kind":"identifier"}],"kind":"symbol","title":"SyntaxNodeString","role":"symbol","type":"topic","abstract":[{"type":"text","text":"A type that is expressible by string interpolation the same way that syntax"},{"type":"text","text":" "},{"type":"text","text":"nodes are, but instead of producing a node, it stores the string interpolation"},{"text":" ","type":"text"},{"type":"text","text":"text."}],"url":"\/documentation\/macrobuilder\/syntaxnodestring"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/EnumCaseDeclSyntax/DeclSyntaxParseable-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/EnumCaseDeclSyntax\/DeclSyntaxParseable-Implementations","url":"\/documentation\/macrobuilder\/enumcasedeclsyntax\/declsyntaxparseable-implementations","title":"DeclSyntaxParseable Implementations","abstract":[],"role":"collectionGroup","kind":"article","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/EnumCaseDeclSyntax/init(_:)-7u3vq":{"url":"\/documentation\/macrobuilder\/enumcasedeclsyntax\/init(_:)-7u3vq","title":"init(_:)","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/EnumCaseDeclSyntax\/init(_:)-7u3vq","kind":"symbol","abstract":[{"text":"Create a syntax node from the given string interpolation.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:18SwiftSyntaxBuilder0B10NodeStringV","text":"SyntaxNodeString"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"}]},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/EnumCaseDeclSyntax":{"title":"EnumCaseDeclSyntax","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"EnumCaseDeclSyntax"}],"type":"topic","navigatorTitle":[{"text":"EnumCaseDeclSyntax","kind":"identifier"}],"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"case"},{"text":" declaration of a Swift ","type":"text"},{"type":"codeVoice","code":"enum"},{"type":"text","text":". It can have 1 or more "},{"type":"codeVoice","code":"EnumCaseElement"},{"type":"text","text":"s inside, each declaring a different case of the enum."}],"kind":"symbol","url":"\/documentation\/macrobuilder\/enumcasedeclsyntax","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/EnumCaseDeclSyntax"}}}