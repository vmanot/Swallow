{"kind":"symbol","sections":[],"identifier":{"url":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/DynamicReplacementAttributeArgumentsSyntax\/is(_:)-62pap","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/DynamicReplacementAttributeArgumentsSyntax","doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/DynamicReplacementAttributeArgumentsSyntax\/SyntaxProtocol-Implementations"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"`is`"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"syntaxType"},{"kind":"text","text":": "},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":" "},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxProtocol","kind":"typeIdentifier","text":"SyntaxProtocol","preciseIdentifier":"s:11SwiftSyntax0B8ProtocolP"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"code":"true","type":"codeVoice"},{"text":" if the node can be cast, ","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":" otherwise."}]}]}],"abstract":[{"type":"text","text":"Checks if the current syntax node can be cast to a given specialized syntax type."}],"metadata":{"roleHeading":"Instance Method","title":"is(_:)","role":"symbol","extendedModule":"SwiftSyntax","modules":[{"relatedModules":["SwiftSyntax"],"name":"MacroBuilder"}],"externalID":"s:11SwiftSyntax0B8ProtocolPAAE2isySbqd__mAaBRd__lF::SYNTHESIZED::s:11SwiftSyntax036DynamicReplacementAttributeArgumentsB0V","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"`is`","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/macrobuilder\/dynamicreplacementattributeargumentssyntax\/is(_:)-62pap"]}],"references":{"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/DynamicReplacementAttributeArgumentsSyntax/is(_:)-62pap":{"abstract":[{"type":"text","text":"Checks if the current syntax node can be cast to a given specialized syntax type."}],"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/DynamicReplacementAttributeArgumentsSyntax\/is(_:)-62pap","title":"is(_:)","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"`is`"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"text":".Type) -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"kind":"symbol","url":"\/documentation\/macrobuilder\/dynamicreplacementattributeargumentssyntax\/is(_:)-62pap"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder":{"url":"\/documentation\/macrobuilder","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder","abstract":[],"role":"collection","kind":"symbol","title":"MacroBuilder","type":"topic"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/DynamicReplacementAttributeArgumentsSyntax":{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/DynamicReplacementAttributeArgumentsSyntax","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DynamicReplacementAttributeArgumentsSyntax"}],"navigatorTitle":[{"text":"DynamicReplacementAttributeArgumentsSyntax","kind":"identifier"}],"kind":"symbol","title":"DynamicReplacementAttributeArgumentsSyntax","role":"symbol","type":"topic","abstract":[{"type":"text","text":"The arguments for the ‘@_dynamicReplacement’ attribute"}],"url":"\/documentation\/macrobuilder\/dynamicreplacementattributeargumentssyntax"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/DynamicReplacementAttributeArgumentsSyntax/SyntaxProtocol-Implementations":{"identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/DynamicReplacementAttributeArgumentsSyntax\/SyntaxProtocol-Implementations","kind":"article","title":"SyntaxProtocol Implementations","role":"collectionGroup","type":"topic","abstract":[],"url":"\/documentation\/macrobuilder\/dynamicreplacementattributeargumentssyntax\/syntaxprotocol-implementations"},"doc://com.swallow.documentation.MacroBuilder/documentation/MacroBuilder/SyntaxProtocol":{"title":"SyntaxProtocol","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.MacroBuilder\/documentation\/MacroBuilder\/SyntaxProtocol","navigatorTitle":[{"text":"SyntaxProtocol","kind":"identifier"}],"abstract":[{"text":"Provide common functionality for specialized syntax nodes. Extend this","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"protocol to provide common functionality for all syntax nodes."}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SyntaxProtocol","kind":"identifier"}],"type":"topic","role":"symbol","url":"\/documentation\/macrobuilder\/syntaxprotocol"}}}