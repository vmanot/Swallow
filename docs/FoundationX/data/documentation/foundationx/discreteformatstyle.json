{"identifier":{"url":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"text":"A format style that transforms a continuous input into a discrete output and provides","type":"text"},{"text":" ","type":"text"},{"text":"information about its discretization boundaries.","type":"text"}],"metadata":{"roleHeading":"Protocol","navigatorTitle":[{"kind":"identifier","text":"DiscreteFormatStyle"}],"modules":[{"name":"FoundationX"}],"title":"DiscreteFormatStyle","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"DiscreteFormatStyle"}],"symbolKind":"protocol","externalID":"s:10Foundation19DiscreteFormatStyleP","role":"symbol","platforms":[{"unavailable":false,"deprecated":false,"beta":false,"introducedAt":"18.0","name":"iOS"},{"introducedAt":"15.0","unavailable":false,"beta":false,"deprecated":false,"name":"macOS"},{"beta":false,"introducedAt":"18.0","deprecated":false,"name":"tvOS","unavailable":false},{"unavailable":false,"beta":false,"introducedAt":"11.0","deprecated":false,"name":"watchOS"}]},"variants":[{"paths":["\/documentation\/foundationx\/discreteformatstyle"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX"]]},"relationshipsSections":[{"title":"Inherits From","identifiers":["doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/FormatStyle","doc:\/\/com.swallow.documentation.FoundationX\/Se","doc:\/\/com.swallow.documentation.FoundationX\/SE","doc:\/\/com.swallow.documentation.FoundationX\/SQ","doc:\/\/com.swallow.documentation.FoundationX\/SH"],"type":"inheritsFrom","kind":"relationships"},{"identifiers":["doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/Date\/AnchoredRelativeFormatStyle","doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/Date\/ComponentsFormatStyle","doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/Date\/FormatStyle","doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/Date\/FormatStyle\/Attributed-swift.struct","doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/Date\/VerbatimFormatStyle","doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/Date\/VerbatimFormatStyle\/Attributed-swift.struct","doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/Swift\/Duration\/TimeFormatStyle","doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/Swift\/Duration\/TimeFormatStyle\/Attributed-swift.struct","doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/Swift\/Duration\/UnitsFormatStyle","doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/Swift\/Duration\/UnitsFormatStyle\/Attributed-swift.struct"],"type":"conformingTypes","kind":"relationships","title":"Conforming Types"}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DiscreteFormatStyle","kind":"identifier"},{"kind":"text","text":"<"},{"text":"FormatInput","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation11FormatStyleP0B5InputQa","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/FormatStyle\/FormatInput"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation11FormatStyleP0B6OutputQa","text":"FormatOutput","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/FormatStyle\/FormatOutput"},{"kind":"text","text":"> : "},{"text":"FormatStyle","kind":"typeIdentifier","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/FormatStyle","preciseIdentifier":"s:10Foundation11FormatStyleP"}]}]},{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"inlineContent":[{"type":"text","text":"Use this protocol to keep displays up to date if input changes continuously, or to iterate"},{"type":"text","text":" "},{"type":"text","text":"over all possible outputs of a "},{"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/FormatStyle","type":"reference","isActive":true},{"type":"text","text":" by obtaining the next discrete input in either direction"},{"text":" ","type":"text"},{"text":"from ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/discreteInput(before:)"},{"text":" or ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/discreteInput(after:)","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","anchor":"Ordering-of-Inputs","level":2,"text":"Ordering of Inputs"},{"inlineContent":[{"text":"The ordering over ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/FormatStyle\/FormatInput","type":"reference"},{"type":"text","text":" "},{"type":"text","text":"defined by "},{"isActive":true,"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/discreteInput(before:)","type":"reference"},{"type":"text","text":" \/ "},{"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/discreteInput(after:)","isActive":true,"type":"reference"},{"type":"text","text":" must be"},{"type":"text","text":" "},{"type":"text","text":"consistent between the two functions. If "},{"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/FormatStyle\/FormatInput","isActive":true,"type":"reference"},{"type":"text","text":" conforms to the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":" protocol, the format style’s ordering ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"should"}]},{"type":"text","text":" be consistent with the canonical ordering"},{"text":" ","type":"text"},{"type":"text","text":"defined via the "},{"type":"codeVoice","code":"Comparable"},{"text":" conformance, i.e. it should hold that","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"discreteInput(before: x)! < x < discreteInput(after: x)!"},{"type":"text","text":" where discrete inputs"},{"text":" ","type":"text"},{"type":"text","text":"are not nil."}],"type":"paragraph"},{"level":2,"anchor":"Stepping-through-Discrete-InputOutput-Pairs","text":"Stepping through Discrete Input\/Output Pairs","type":"heading"},{"inlineContent":[{"text":"One use case of this protocol is enumerating all discrete inputs of a format style and their respective","type":"text"},{"type":"text","text":" "},{"text":"outputs.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"While the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/discreteInput(before:)","type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/discreteInput(after:)","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"functions are the right tool for that, they do not give a guarantee that their respective return values","type":"text"},{"type":"text","text":" "},{"text":"actually produce an output that is different from the output produced by formatting the ","type":"text"},{"code":"input","type":"codeVoice"},{"text":" value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"used when calling "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/discreteInput(before:)"},{"type":"text","text":" \/ "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/discreteInput(after:)"},{"type":"text","text":", they only"},{"type":"text","text":" "},{"text":"provide a value that produces a different output for ","type":"text"},{"inlineContent":[{"type":"text","text":"most"}],"type":"emphasis"},{"text":" inputs. E.g. when formatting a floating point","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value as an integer, we can get the next discrete input after "},{"code":"x","type":"codeVoice"},{"text":" by calculating ","type":"text"},{"code":"floor(x + 1)","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"However, when rounding toward zero, the whole interval (-1;1) formats as zero. It would be ok for a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"discrete format style to ignore that edge case and return "},{"type":"codeVoice","code":"0"},{"text":" for the ","type":"text"},{"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/discreteInput(after:)","isActive":true,"type":"reference"},{"type":"text","text":" a"},{"text":" ","type":"text"},{"type":"text","text":"negative value greater than "},{"code":"-1","type":"codeVoice"},{"type":"text","text":". Therefore, to enumerate all discrete input\/output pairs, adjacent"},{"text":" ","type":"text"},{"type":"text","text":"outputs must be deduplicated in order to guarantee no adjacent outputs are the same."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The following example produces all discrete input\/output pairs for inputs in a given ","type":"text"},{"type":"codeVoice","code":"range"},{"type":"text","text":" making"},{"type":"text","text":" "},{"text":"sure adjacent outputs are unequal:","type":"text"}]},{"code":["extension DiscreteFormatStyle","    where FormatInput : Comparable, FormatOutput : Equatable","{","        func enumerated(","        in range: ClosedRange<FormatInput>","    ) -> [(input: FormatInput, output: FormatOutput)] {","        var input = range.lowerBound","        var output = format(input)","","        var pairs = [(input: FormatInput, output: FormatOutput)]()","        pairs.append((input, output))","","        \/\/ get the next discretization bound","        while let nextInput = discreteInput(after: input),","              \/\/ check that it is still in the requested `range`","              nextInput <= range.upperBound {","            \/\/ get the respective formatted output","            let nextOutput = format(nextInput)","            \/\/ deduplicate based on the formatted output","            if nextOutput != output {","                pairs.append((nextInput, nextOutput))","            }","                input = nextInput","            output = nextOutput","        }","","        return pairs","    }","}"],"syntax":"swift","type":"codeListing"},{"text":"Imperfect Discretization Boundaries","anchor":"Imperfect-Discretization-Boundaries","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"In some scenarios, a format style cannot provide precise discretization boundaries in","type":"text"},{"type":"text","text":" "},{"text":"a performant manner. In those cases it must override ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/input(before:)-40c5p"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/input(after:)-7d98c"},{"text":" to reflect that. For any discretization boundary ","type":"text"},{"type":"codeVoice","code":"x"},{"type":"text","text":" returned by either"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/discreteInput(before:)","isActive":true},{"type":"text","text":" or "},{"type":"reference","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/discreteInput(after:)","isActive":true},{"type":"text","text":" based on the"},{"type":"text","text":" "},{"type":"text","text":"original input "},{"code":"y","type":"codeVoice"},{"text":", all values representable in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/FormatStyle\/FormatInput","isActive":true},{"text":"strictly  between","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"x"},{"type":"text","text":" and the return value of "},{"code":"input(after: x)","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"input(before: x)"},{"text":", respectively, are not","type":"text"},{"type":"text","text":" "},{"type":"text","text":"guaranteed to produce the same formatted output as "},{"type":"codeVoice","code":"y"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following schematic shows an overview of the guarantees given by the protocol:"}]},{"type":"codeListing","syntax":null,"code":["xB = discreteInput(before: y)       y      xA = discreteInput(after: y)","      |                             |                             |","<-----+---+-------------------------+-------------------------+---+--->","          |                                                   |"," zB = input(after: xB)                          zA = input(before: xA)"]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"the formatted output for everything in ","type":"text"},{"type":"codeVoice","code":"zB...zA"},{"text":" (including bounds) is ","type":"text"},{"type":"strong","inlineContent":[{"text":"guaranteed","type":"text"}]},{"text":" to be equal","type":"text"},{"type":"text","text":" "},{"text":"to ","type":"text"},{"code":"format(y)","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"the formatted output for "},{"type":"codeVoice","code":"xB"},{"text":" and lower is ","type":"text"},{"type":"strong","inlineContent":[{"text":"most likely","type":"text"}]},{"type":"text","text":" different from "},{"code":"format(y)","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"the formatted output for ","type":"text"},{"code":"xA","type":"codeVoice"},{"type":"text","text":" and higher is "},{"type":"strong","inlineContent":[{"text":"most likely","type":"text"}]},{"type":"text","text":" different from "},{"code":"format(y)","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"text":"the  formatted output between ","type":"text"},{"type":"codeVoice","code":"xB"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"zB"},{"type":"text","text":", as well as "},{"type":"codeVoice","code":"zA"},{"type":"text","text":" and "},{"code":"xA","type":"codeVoice"},{"text":" (excluding bounds) cannot","type":"text"},{"type":"text","text":" "},{"type":"text","text":"be predicted"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/discreteInput(after:)","doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/discreteInput(before:)","doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/input(after:)-7d98c","doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/input(before:)-40c5p"],"generated":true,"anchor":"Instance-Methods"}],"references":{"doc://com.swallow.documentation.FoundationX/SE":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/SE","title":"Swift.Encodable"},"doc://com.swallow.documentation.FoundationX/documentation/FoundationX/DiscreteFormatStyle/input(after:)-7d98c":{"type":"topic","kind":"symbol","role":"symbol","required":true,"defaultImplementations":4,"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/input(after:)-7d98c","abstract":[{"text":"The next input value after the given input.","type":"text"}],"title":"input(after:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"input","kind":"identifier"},{"kind":"text","text":"("},{"text":"after","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation11FormatStyleP0B5InputQa","text":"FormatInput"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"FormatInput","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation11FormatStyleP0B5InputQa"},{"text":"?","kind":"text"}],"url":"\/documentation\/foundationx\/discreteformatstyle\/input(after:)-7d98c"},"doc://com.swallow.documentation.FoundationX/documentation/FoundationX/Date/ComponentsFormatStyle":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ComponentsFormatStyle"}],"abstract":[],"role":"symbol","title":"Date.ComponentsFormatStyle","navigatorTitle":[{"text":"ComponentsFormatStyle","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/Date\/ComponentsFormatStyle","url":"\/documentation\/foundationx\/date\/componentsformatstyle","kind":"symbol"},"doc://com.swallow.documentation.FoundationX/documentation/FoundationX":{"abstract":[],"kind":"symbol","title":"FoundationX","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX","url":"\/documentation\/foundationx","role":"collection","type":"topic"},"doc://com.swallow.documentation.FoundationX/documentation/FoundationX/Date/FormatStyle":{"url":"\/documentation\/foundationx\/date\/formatstyle","title":"Date.FormatStyle","type":"topic","role":"symbol","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/Date\/FormatStyle","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FormatStyle"}],"kind":"symbol","navigatorTitle":[{"text":"FormatStyle","kind":"identifier"}],"abstract":[{"type":"text","text":"Strategies for formatting a "},{"code":"Date","type":"codeVoice"},{"type":"text","text":"."}]},"doc://com.swallow.documentation.FoundationX/documentation/FoundationX/Swift/Duration/UnitsFormatStyle/Attributed-swift.struct":{"type":"topic","role":"symbol","abstract":[{"type":"text","text":"A format style to format a duration as an attributed string. Units in the string are annotated with the "},{"code":"durationField","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"measurement","type":"codeVoice"},{"type":"text","text":" attribute keys and the "},{"type":"codeVoice","code":"DurationFieldAttribute"},{"type":"text","text":" and "},{"type":"codeVoice","code":"MeasurementAttribute"},{"type":"text","text":" attribute values."}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Attributed","kind":"identifier"}],"url":"\/documentation\/foundationx\/swift\/duration\/unitsformatstyle\/attributed-swift.struct","title":"Duration.UnitsFormatStyle.Attributed","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/Swift\/Duration\/UnitsFormatStyle\/Attributed-swift.struct","navigatorTitle":[{"kind":"identifier","text":"Attributed"}]},"doc://com.swallow.documentation.FoundationX/SH":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/SH","title":"Swift.Hashable"},"doc://com.swallow.documentation.FoundationX/documentation/FoundationX/Date/VerbatimFormatStyle/Attributed-swift.struct":{"abstract":[{"type":"text","text":"The type preserving attributed variant of this style."}],"type":"topic","kind":"symbol","title":"Date.VerbatimFormatStyle.Attributed","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Attributed"}],"url":"\/documentation\/foundationx\/date\/verbatimformatstyle\/attributed-swift.struct","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/Date\/VerbatimFormatStyle\/Attributed-swift.struct","navigatorTitle":[{"text":"Attributed","kind":"identifier"}],"role":"symbol"},"doc://com.swallow.documentation.FoundationX/documentation/FoundationX/Date/VerbatimFormatStyle":{"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/Date\/VerbatimFormatStyle","abstract":[{"text":"Formats a ","type":"text"},{"code":"Date","type":"codeVoice"},{"text":" using the given format.","type":"text"}],"type":"topic","title":"Date.VerbatimFormatStyle","url":"\/documentation\/foundationx\/date\/verbatimformatstyle","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"VerbatimFormatStyle","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"VerbatimFormatStyle"}],"role":"symbol","kind":"symbol"},"doc://com.swallow.documentation.FoundationX/documentation/FoundationX/DiscreteFormatStyle/discreteInput(before:)":{"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/discreteInput(before:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"discreteInput","kind":"identifier"},{"kind":"text","text":"("},{"text":"before","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation11FormatStyleP0B5InputQa","text":"FormatInput"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"FormatInput","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation11FormatStyleP0B5InputQa"},{"text":"?","kind":"text"}],"type":"topic","url":"\/documentation\/foundationx\/discreteformatstyle\/discreteinput(before:)","role":"symbol","kind":"symbol","required":true,"abstract":[{"text":"The next discretization boundary before the given input.","type":"text"}],"title":"discreteInput(before:)"},"doc://com.swallow.documentation.FoundationX/documentation/FoundationX/DiscreteFormatStyle/discreteInput(after:)":{"type":"topic","role":"symbol","url":"\/documentation\/foundationx\/discreteformatstyle\/discreteinput(after:)","required":true,"abstract":[{"type":"text","text":"The next discretization boundary after the given input."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"discreteInput","kind":"identifier"},{"kind":"text","text":"("},{"text":"after","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"FormatInput","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation11FormatStyleP0B5InputQa"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"FormatInput","preciseIdentifier":"s:10Foundation11FormatStyleP0B5InputQa","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"title":"discreteInput(after:)","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/discreteInput(after:)"},"doc://com.swallow.documentation.FoundationX/documentation/FoundationX/FormatStyle/FormatInput":{"type":"topic","kind":"symbol","required":true,"title":"FormatInput","fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FormatInput"}],"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/FormatStyle\/FormatInput","abstract":[{"text":"The type of data to format.","type":"text"}],"url":"\/documentation\/foundationx\/formatstyle\/formatinput","role":"symbol"},"doc://com.swallow.documentation.FoundationX/documentation/FoundationX/DiscreteFormatStyle":{"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DiscreteFormatStyle"}],"type":"topic","url":"\/documentation\/foundationx\/discreteformatstyle","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"DiscreteFormatStyle","kind":"identifier"}],"abstract":[{"text":"A format style that transforms a continuous input into a discrete output and provides","type":"text"},{"text":" ","type":"text"},{"text":"information about its discretization boundaries.","type":"text"}],"title":"DiscreteFormatStyle"},"doc://com.swallow.documentation.FoundationX/documentation/FoundationX/Swift/Duration/TimeFormatStyle":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TimeFormatStyle"}],"url":"\/documentation\/foundationx\/swift\/duration\/timeformatstyle","type":"topic","navigatorTitle":[{"text":"TimeFormatStyle","kind":"identifier"}],"role":"symbol","title":"Duration.TimeFormatStyle","kind":"symbol","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/Swift\/Duration\/TimeFormatStyle","abstract":[{"type":"text","text":"Format style to format a "},{"type":"codeVoice","code":"Duration"},{"type":"text","text":" in a localized positional format."},{"text":" ","type":"text"},{"text":"For example, one hour and ten minutes is displayed as “1:10:00” in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the U.S. English locale, or “1.10.00” in the Finnish locale."}]},"doc://com.swallow.documentation.FoundationX/Se":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/Se","title":"Swift.Decodable"},"doc://com.swallow.documentation.FoundationX/documentation/FoundationX/DiscreteFormatStyle/input(before:)-40c5p":{"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/DiscreteFormatStyle\/input(before:)-40c5p","type":"topic","abstract":[{"type":"text","text":"The next input value before the given input."}],"url":"\/documentation\/foundationx\/discreteformatstyle\/input(before:)-40c5p","kind":"symbol","role":"symbol","defaultImplementations":4,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"input","kind":"identifier"},{"kind":"text","text":"("},{"text":"before","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"FormatInput","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation11FormatStyleP0B5InputQa"},{"kind":"text","text":") -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"FormatInput","preciseIdentifier":"s:10Foundation11FormatStyleP0B5InputQa","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"input(before:)","required":true},"doc://com.swallow.documentation.FoundationX/documentation/FoundationX/FormatStyle":{"role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"FormatStyle","kind":"identifier"}],"type":"topic","title":"FormatStyle","url":"\/documentation\/foundationx\/formatstyle","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"FormatStyle"}],"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/FormatStyle","abstract":[{"text":"A type that can convert a given data type into a representation.","type":"text"}]},"doc://com.swallow.documentation.FoundationX/documentation/FoundationX/Swift/Duration/TimeFormatStyle/Attributed-swift.struct":{"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/Swift\/Duration\/TimeFormatStyle\/Attributed-swift.struct","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Attributed","kind":"identifier"}],"abstract":[{"text":"Formats a duration as an attributed string with the ","type":"text"},{"type":"codeVoice","code":"durationField"},{"type":"text","text":" attribute key and "},{"code":"FoundationAttributes.DurationFieldAttribute","type":"codeVoice"},{"type":"text","text":" attribute."}],"navigatorTitle":[{"kind":"identifier","text":"Attributed"}],"type":"topic","role":"symbol","url":"\/documentation\/foundationx\/swift\/duration\/timeformatstyle\/attributed-swift.struct","kind":"symbol","title":"Duration.TimeFormatStyle.Attributed"},"doc://com.swallow.documentation.FoundationX/documentation/FoundationX/Date/AnchoredRelativeFormatStyle":{"url":"\/documentation\/foundationx\/date\/anchoredrelativeformatstyle","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnchoredRelativeFormatStyle","kind":"identifier"}],"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/Date\/AnchoredRelativeFormatStyle","role":"symbol","abstract":[{"type":"text","text":"A relative format style that is detached from the system time, and instead"},{"text":" ","type":"text"},{"text":"formats an anchor date relative to the format input.","type":"text"}],"title":"Date.AnchoredRelativeFormatStyle","navigatorTitle":[{"kind":"identifier","text":"AnchoredRelativeFormatStyle"}],"type":"topic"},"doc://com.swallow.documentation.FoundationX/documentation/FoundationX/Swift/Duration/UnitsFormatStyle":{"title":"Duration.UnitsFormatStyle","type":"topic","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/Swift\/Duration\/UnitsFormatStyle","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnitsFormatStyle"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"UnitsFormatStyle","kind":"identifier"}],"url":"\/documentation\/foundationx\/swift\/duration\/unitsformatstyle","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"FormatStyle"},{"text":" that displays a duration as a list of duration units, such as “2 hours, 43 minutes, 26 seconds” in English.","type":"text"}]},"doc://com.swallow.documentation.FoundationX/documentation/FoundationX/Date/FormatStyle/Attributed-swift.struct":{"type":"topic","role":"symbol","abstract":[{"text":"The type preserving attributed variant of this style.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Attributed","kind":"identifier"}],"url":"\/documentation\/foundationx\/date\/formatstyle\/attributed-swift.struct","title":"Date.FormatStyle.Attributed","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/Date\/FormatStyle\/Attributed-swift.struct","navigatorTitle":[{"text":"Attributed","kind":"identifier"}]},"doc://com.swallow.documentation.FoundationX/SQ":{"type":"unresolvable","identifier":"doc:\/\/com.swallow.documentation.FoundationX\/SQ","title":"Swift.Equatable"},"doc://com.swallow.documentation.FoundationX/documentation/FoundationX/FormatStyle/FormatOutput":{"type":"topic","kind":"symbol","required":true,"title":"FormatOutput","fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FormatOutput"}],"identifier":"doc:\/\/com.swallow.documentation.FoundationX\/documentation\/FoundationX\/FormatStyle\/FormatOutput","abstract":[{"text":"The type of the formatted data.","type":"text"}],"url":"\/documentation\/foundationx\/formatstyle\/formatoutput","role":"symbol"}}}