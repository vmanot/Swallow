{"identifier":{"url":"doc:\/\/com.swallow.documentation.SwallowMacrosClient\/documentation\/SwallowMacrosClient\/MutableValueBox\/memoize(with:_:)-8skmg","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.swallow.documentation.SwallowMacrosClient\/documentation\/SwallowMacrosClient","doc:\/\/com.swallow.documentation.SwallowMacrosClient\/documentation\/SwallowMacrosClient\/MutableValueBox","doc:\/\/com.swallow.documentation.SwallowMacrosClient\/documentation\/SwallowMacrosClient\/MutableValueBox\/Hashable-Implementations"]]},"metadata":{"modules":[{"name":"SwallowMacrosClient","relatedModules":["Swift"]}],"symbolKind":"method","title":"memoize(with:_:)","externalID":"s:SH7SwallowE7memoize4with_qd__AA6_CacheCyAA011MemoizationD3KeyVypGSg_s0F4PathCyxqd__GtlF::SYNTHESIZED::s:7Swallow15MutableValueBoxV","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"memoize"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"with","kind":"externalParam"},{"kind":"text","text":": "},{"text":"MemoizationCache","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier","text":"KeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":", "},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"extendedModule":"Swift","roleHeading":"Instance Method","role":"symbol"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"memoize","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"with"},{"kind":"text","text":" "},{"kind":"internalParam","text":"cache"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"MemoizationCache"},{"text":"? = MemoizationCache.shared, ","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"keyPath"},{"text":": ","kind":"text"},{"text":"KeyPath","preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"T","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"name":"cache","content":[{"type":"paragraph","inlineContent":[{"text":"The shared cache to use; ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" disables caching and simply returns the result of "},{"code":"predicate","type":"codeVoice"},{"text":" directly","type":"text"}]}]}],"kind":"parameters"},{"content":[{"anchor":"return-value","type":"heading","text":"Return Value","level":2},{"inlineContent":[{"type":"text","text":"The result from the "},{"code":"predicate","type":"codeVoice"},{"text":", either a previously cached value, or the result of executing the ","type":"text"},{"code":"predicate","type":"codeVoice"}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"inlineContent":[{"text":"The source subject (the receiver) and the result object (the return value) should be value types, and the ","type":"text"},{"code":"predicate","type":"codeVoice"},{"text":" must be a ","type":"text"},{"inlineContent":[{"type":"text","text":"pure"}],"type":"emphasis"},{"text":" function that captures ","type":"text"},{"inlineContent":[{"text":"no state","type":"text"}],"type":"emphasis"},{"type":"text","text":", in that:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Its return value is the same for the same arguments (no variation with local static variables, non-local variables, mutable reference arguments or input streams from I\/O devices)."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Its evaluation has no side effects (no mutation of local static variables, non-local variables, mutable reference arguments or I\/O streams)."}],"type":"paragraph"}]}]},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The calling functionâ€™s source file and line are used as the cache key, so care must be taken to avoid having multiple calls to "},{"type":"codeVoice","code":"memoize"},{"text":" occur from a single line of source code.","type":"text"}]}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Re-Throws and errors from ","type":"text"},{"type":"codeVoice","code":"predicate"}]}],"style":"note","name":"Throws"},{"content":[{"inlineContent":[{"text":"Around O(1) for a successful cache hit, otherwise the complexity of the keyPath execution","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside","name":"Complexity"}]}],"abstract":[{"type":"text","text":"Memoize the result of the execution of a predicate for the "},{"code":"Hashable","type":"codeVoice"},{"text":" receiver.","type":"text"}],"sections":[],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swallowmacrosclient\/mutablevaluebox\/memoize(with:_:)-8skmg"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://com.swallow.documentation.SwallowMacrosClient/documentation/SwallowMacrosClient/MutableValueBox/memoize(with:_:)-8skmg":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"memoize"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"with","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"MemoizationCache"},{"text":"?, ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"type":"topic","abstract":[{"type":"text","text":"Memoize the result of the execution of a predicate for the "},{"code":"Hashable","type":"codeVoice"},{"text":" receiver.","type":"text"}],"identifier":"doc:\/\/com.swallow.documentation.SwallowMacrosClient\/documentation\/SwallowMacrosClient\/MutableValueBox\/memoize(with:_:)-8skmg","kind":"symbol","title":"memoize(with:_:)","url":"\/documentation\/swallowmacrosclient\/mutablevaluebox\/memoize(with:_:)-8skmg","role":"symbol"},"doc://com.swallow.documentation.SwallowMacrosClient/documentation/SwallowMacrosClient":{"title":"SwallowMacrosClient","kind":"symbol","abstract":[],"type":"topic","url":"\/documentation\/swallowmacrosclient","identifier":"doc:\/\/com.swallow.documentation.SwallowMacrosClient\/documentation\/SwallowMacrosClient","role":"collection"},"doc://com.swallow.documentation.SwallowMacrosClient/documentation/SwallowMacrosClient/MutableValueBox/Hashable-Implementations":{"type":"topic","identifier":"doc:\/\/com.swallow.documentation.SwallowMacrosClient\/documentation\/SwallowMacrosClient\/MutableValueBox\/Hashable-Implementations","url":"\/documentation\/swallowmacrosclient\/mutablevaluebox\/hashable-implementations","kind":"article","abstract":[],"role":"collectionGroup","title":"Hashable Implementations"},"doc://com.swallow.documentation.SwallowMacrosClient/documentation/SwallowMacrosClient/MutableValueBox":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"MutableValueBox","kind":"identifier"}],"title":"MutableValueBox","type":"topic","identifier":"doc:\/\/com.swallow.documentation.SwallowMacrosClient\/documentation\/SwallowMacrosClient\/MutableValueBox","navigatorTitle":[{"text":"MutableValueBox","kind":"identifier"}],"url":"\/documentation\/swallowmacrosclient\/mutablevaluebox","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A type capable of either storing a direct value or flattening a property wrapper."}]}}}