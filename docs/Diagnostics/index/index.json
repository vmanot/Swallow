{"includedArchiveIdentifiers":["com.swallow.documentation.Diagnostics"],"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/actorisolated\/init(_:)-7y0zd","title":"init(Value)","type":"init"},{"path":"\/documentation\/diagnostics\/actorisolated\/init(_:)-nkz4","title":"init(@autoclosure () throws -> Value) rethrows","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/actorisolated\/value","title":"var value: Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/actorisolated\/withcriticalregion(_:)-4j848","title":"func withCriticalRegion<T>((inout Value) async throws -> T) async rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/actorisolated\/withcriticalregion(_:)-9tl86","title":"func withCriticalRegion<T>((inout Value) throws -> T) rethrows -> T","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/actorisolated\/subscript(dynamicmember:)","title":"subscript<Subject>(dynamicMember _: KeyPath<Value, Subject>) -> Subject","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/actorisolated\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/diagnostics\/actorisolated\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/actorisolated\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/diagnostics\/actorisolated\/actor-implementations","title":"Actor Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/actorisolated\/init(arrayliteral:)","title":"convenience init(arrayLiteral: Value.ArrayLiteralElement...)","type":"init"}],"path":"\/documentation\/diagnostics\/actorisolated\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/actorisolated","title":"ActorIsolated","type":"class"},{"path":"\/documentation\/diagnostics\/anyreferencebox","title":"AnyReferenceBox","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/init(_:isautodeallocating:)","title":"init(UnsafeBufferPointer<T>, isAutodeallocating: Trilean)","type":"init"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/init(start:count:isautodeallocating:)","title":"convenience init<P, N>(start: P?, count: N, isAutodeallocating: Trilean)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/baseaddress","title":"var baseAddress: AutodeallocatingUnsafeBufferPointer<T>.BaseAddressPointer?","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/endindex","title":"var endIndex: AutodeallocatingUnsafeBufferPointer<T>.Index","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/startindex","title":"var startIndex: AutodeallocatingUnsafeBufferPointer<T>.Index","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/makeiterator()","title":"func makeIterator() -> AutodeallocatingUnsafeBufferPointer<T>.Iterator","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(_:)-68iui","title":"subscript(AutodeallocatingUnsafeBufferPointer<T>.Index) -> AutodeallocatingUnsafeBufferPointer<T>.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(_:)-6bma","title":"subscript(Range<AutodeallocatingUnsafeBufferPointer<T>.Index>) -> AutodeallocatingUnsafeBufferPointer<T>.SubSequence","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/baseaddresspointer","title":"AutodeallocatingUnsafeBufferPointer.BaseAddressPointer","type":"typealias"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/element","title":"AutodeallocatingUnsafeBufferPointer.Element","type":"typealias"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/index","title":"AutodeallocatingUnsafeBufferPointer.Index","type":"typealias"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/iterator","title":"AutodeallocatingUnsafeBufferPointer.Iterator","type":"typealias"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subsequence","title":"AutodeallocatingUnsafeBufferPointer.SubSequence","type":"typealias"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/value","title":"AutodeallocatingUnsafeBufferPointer.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/unsafebufferpointerrepresentation","title":"var unsafeBufferPointerRepresentation: UnsafeBufferPointer<Self.Element>","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/unsafemutablebufferpointerrepresentation","title":"var unsafeMutableBufferPointerRepresentation: UnsafeMutableBufferPointer<Self.Element>","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/unsafemutablepointerrepresentation","title":"var unsafeMutablePointerRepresentation: UnsafeMutablePointer<Self.Element>?","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/unsafepointerrepresentation","title":"var unsafePointerRepresentation: UnsafePointer<Self.Element>?","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/unsaferawpointerrepresentation","title":"var unsafeRawPointerRepresentation: UnsafeRawPointer?","type":"property"}],"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/bufferpointer-implementations","title":"BufferPointer Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/bounds","title":"var bounds: Range<Self.Index>","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/last","title":"var last: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/lastindex","title":"var lastIndex: Self.Index?","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/second","title":"var second: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/allsubrangeschunked(by:)","title":"func allSubrangesChunked<C>(by: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/chunked(by:)","title":"func chunked(by: Int) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/consecutives()","title":"func consecutives() -> AnySequence<(Self.Element, Self.Element)>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/consecutivesallowinghalfemptypairs()","title":"func consecutivesAllowingHalfEmptyPairs() -> LazyMapSequence<Self._EnumeratedSequence, (Self.Element, Self.Element?)>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/contains(_:)","title":"func contains(Range<Self.Index>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/contains(after:)","title":"func contains(after: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/containsindex(_:)","title":"func containsIndex(Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/cycle(index:)","title":"func cycle(index: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/distancefromstartindex(to:)","title":"func distanceFromStartIndex(to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/enumeratelazysubsequences(matching:)","title":"func enumerateLazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<(Range<Self.Index>, Self.SubSequence), Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/erasetoanycollection()","title":"func eraseToAnyCollection() -> AnyCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/index(_:insetby:)","title":"func index(Self.Index, insetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/index(_:offsetbydistancefromstartindexfor:)","title":"func index(Self.Index, offsetByDistanceFromStartIndexFor: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/index(after:)","title":"func index(after: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/index(atdistance:)","title":"func index(atDistance: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/index(before:)","title":"func index(before: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/indices(of:)-2yki2","title":"func indices(of: Self.Element) -> [Self.Index]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/indices(of:)-6m6h1","title":"func indices(of: Self.Element) -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/indices(where:)","title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/join(_:_:)","title":"func join<C0, C1>(C0, C1) -> Join3Collection<Self, C0, C1>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/lazysubsequences(matching:)","title":"func lazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<Self.SubSequence, Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/map(_:)-chiy","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/nilifempty()","title":"func nilIfEmpty() -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/prefix(till:)","title":"func prefix(till: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/range(from:)","title":"func range(from: Range<Int>) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/removingsubranges(_:)","title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/sharedkeysbyequalvalue(where:)","title":"func sharedKeysByEqualValue<T, U>(where: (U, U) throws -> Bool) rethrows -> [T : U]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/split(separator:maxsplits:omittingemptysubsequences:)-5km00","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/split(separator:maxsplits:omittingemptysubsequences:)-wg94","title":"func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-3g6c9","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: CasePath<Self.Element, Separator>) -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-9ehf2","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: (Self.Element) throws -> Separator?) rethrows -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/splitincludingseparators(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func splitIncludingSeparators(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/splittingfirst()","title":"func splittingFirst() -> (head: Self.Element, tail: Self.SubSequence)?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/tocollectionofone()","title":"func toCollectionOfOne() throws -> CollectionOfOne<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/tocollectionofzeroorone()","title":"func toCollectionOfZeroOrOne() throws -> CollectionOfOne<Self.Element>?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/unfoldingforward()","title":"func unfoldingForward() -> UnfoldSequence<(Self.Element, Self.SubSequence), Self.SubSequence>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(_:)-2bdpr","title":"subscript(RelativeIndex) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(_:)-2zk9o","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(_:)-5hwvt","title":"subscript(FirstOrLastCollectionIndex) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(_:)-8fbza","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(_:)-cfo7","title":"subscript(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(after:)","title":"subscript(after _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(atdistance:)","title":"subscript(atDistance _: Int) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(cycling:)","title":"subscript(cycling _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(try:)-2itmf","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(try:)-39sam","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(try:)-3i5um","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"}],"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/bounds","title":"var bounds: Range<Self.Index>","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/last","title":"var last: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/lastindex","title":"var lastIndex: Self.Index?","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/second","title":"var second: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/allsubrangeschunked(by:)","title":"func allSubrangesChunked<C>(by: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/chunked(by:)","title":"func chunked(by: Int) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/consecutives()","title":"func consecutives() -> AnySequence<(Self.Element, Self.Element)>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/consecutivesallowinghalfemptypairs()","title":"func consecutivesAllowingHalfEmptyPairs() -> LazyMapSequence<Self._EnumeratedSequence, (Self.Element, Self.Element?)>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/contains(_:)","title":"func contains(Range<Self.Index>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/contains(after:)","title":"func contains(after: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/containsindex(_:)","title":"func containsIndex(Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/cycle(index:)","title":"func cycle(index: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/distancefromstartindex(to:)","title":"func distanceFromStartIndex(to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/enumeratelazysubsequences(matching:)","title":"func enumerateLazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<(Range<Self.Index>, Self.SubSequence), Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/erasetoanycollection()","title":"func eraseToAnyCollection() -> AnyCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/index(_:insetby:)","title":"func index(Self.Index, insetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/index(_:offsetbydistancefromstartindexfor:)","title":"func index(Self.Index, offsetByDistanceFromStartIndexFor: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/index(after:)","title":"func index(after: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/index(atdistance:)","title":"func index(atDistance: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/index(before:)","title":"func index(before: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/indices(of:)-2yki2","title":"func indices(of: Self.Element) -> [Self.Index]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/indices(of:)-6m6h1","title":"func indices(of: Self.Element) -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/indices(where:)","title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/join(_:_:)","title":"func join<C0, C1>(C0, C1) -> Join3Collection<Self, C0, C1>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/lazysubsequences(matching:)","title":"func lazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<Self.SubSequence, Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/map(_:)-chiy","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/nilifempty()","title":"func nilIfEmpty() -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/prefix(till:)","title":"func prefix(till: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/range(from:)","title":"func range(from: Range<Int>) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/removingsubranges(_:)","title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/sharedkeysbyequalvalue(where:)","title":"func sharedKeysByEqualValue<T, U>(where: (U, U) throws -> Bool) rethrows -> [T : U]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/split(separator:maxsplits:omittingemptysubsequences:)-5km00","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/split(separator:maxsplits:omittingemptysubsequences:)-wg94","title":"func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-3g6c9","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: CasePath<Self.Element, Separator>) -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-9ehf2","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: (Self.Element) throws -> Separator?) rethrows -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/splitincludingseparators(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func splitIncludingSeparators(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/splittingfirst()","title":"func splittingFirst() -> (head: Self.Element, tail: Self.SubSequence)?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/tocollectionofone()","title":"func toCollectionOfOne() throws -> CollectionOfOne<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/tocollectionofzeroorone()","title":"func toCollectionOfZeroOrOne() throws -> CollectionOfOne<Self.Element>?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/unfoldingforward()","title":"func unfoldingForward() -> UnfoldSequence<(Self.Element, Self.SubSequence), Self.SubSequence>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(_:)-2bdpr","title":"subscript(RelativeIndex) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(_:)-2zk9o","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(_:)-5hwvt","title":"subscript(FirstOrLastCollectionIndex) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(_:)-8fbza","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(_:)-cfo7","title":"subscript(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(after:)","title":"subscript(after _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(atdistance:)","title":"subscript(atDistance _: Int) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(cycling:)","title":"subscript(cycling _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(try:)-2itmf","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(try:)-39sam","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(try:)-3i5um","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"}],"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/assumingmemorybound(to:)","title":"func assumingMemoryBound<T>(to: T.Type) -> UnsafeBufferPointer<T>","type":"method"}],"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/constantbufferpointer-implementations","title":"ConstantBufferPointer Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/allsatisfy(_:)-3qhlv","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/allsatisfy(_:)-3zdus","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/compactmap(_:)-46j1u","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/compactmap(_:)-9zczo","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/distinct()-4z6gr","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/distinct()-6lmwy","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/distinct(by:)-1p2ca","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/distinct(by:)-2h4iv","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/fill(using:)-3y8lm","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/fill(using:)-4o89z","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/fill(using:)-wlvr","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/filter(_:)-2v7d7","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/filter(_:)-5ivy2","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/find(_:)-21k6z","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/find(_:)-6zeod","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/find(_:mutate:)-4gfk","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/find(_:mutate:)-8pwyc","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/first(byunwrapping:)-1hes1","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/first(byunwrapping:)-41dyq","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/first(oftype:)-2pqoe","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/first(oftype:)-6n7n8","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/firstandonly(byunwrapping:)-36b0o","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/firstandonly(byunwrapping:)-40q4n","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/firstandonly(oftype:)-16tu","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/firstandonly(oftype:)-zu2t","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/flatmap(_:)-218sc","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/flatmap(_:)-69xk4","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/flatmap(_:)-7ntgx","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/hasprefix(_:)-5c5fj","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/hasprefix(_:)-9wuvc","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/joined(separator:)-25anu","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/joined(separator:)-57smv","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/longestconsecutivesequences(by:relativeto:)-74ohx","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/longestconsecutivesequences(by:relativeto:)-gsax","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/map(_:)-3bvi4","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/map(_:)-4mw5w","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/minormax(_:by:)-696v6","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/minormax(_:by:)-g70m","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/reduce(_:_:)-6784t","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/reduce(_:_:)-96waj","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/removefirst(_:)-1vbn1","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/removefirst(_:)-5f5vz","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/removefirst(byunwrapping:)-2xpg6","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/removefirst(byunwrapping:)-utju","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/sorted(by:order:)-1ym25","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/sorted(by:order:)-7bmgp","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/sorted(using:)-4k0sv","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/sorted(using:)-6pbqr","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/split(separator:maxsplits:omittingemptysubsequences:)-7mnbv","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/allsatisfy(_:)-3qhlv","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/allsatisfy(_:)-3zdus","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/compactmap(_:)-46j1u","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/compactmap(_:)-9zczo","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/distinct()-4z6gr","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/distinct()-6lmwy","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/distinct(by:)-1p2ca","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/distinct(by:)-2h4iv","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/fill(using:)-3y8lm","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/fill(using:)-4o89z","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/fill(using:)-wlvr","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/filter(_:)-2v7d7","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/filter(_:)-5ivy2","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/find(_:)-21k6z","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/find(_:)-6zeod","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/find(_:mutate:)-4gfk","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/find(_:mutate:)-8pwyc","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/first(byunwrapping:)-1hes1","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/first(byunwrapping:)-41dyq","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/first(oftype:)-2pqoe","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/first(oftype:)-6n7n8","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/firstandonly(byunwrapping:)-36b0o","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/firstandonly(byunwrapping:)-40q4n","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/firstandonly(oftype:)-16tu","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/firstandonly(oftype:)-zu2t","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/flatmap(_:)-218sc","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/flatmap(_:)-69xk4","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/flatmap(_:)-7ntgx","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/hasprefix(_:)-5c5fj","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/hasprefix(_:)-9wuvc","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/joined(separator:)-25anu","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/joined(separator:)-57smv","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/longestconsecutivesequences(by:relativeto:)-74ohx","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/longestconsecutivesequences(by:relativeto:)-gsax","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/map(_:)-3bvi4","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/map(_:)-4mw5w","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/minormax(_:by:)-696v6","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/minormax(_:by:)-g70m","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/reduce(_:_:)-6784t","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/reduce(_:_:)-96waj","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/removefirst(_:)-1vbn1","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/removefirst(_:)-5f5vz","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/removefirst(byunwrapping:)-2xpg6","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/removefirst(byunwrapping:)-utju","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/sorted(by:order:)-1ym25","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/sorted(by:order:)-7bmgp","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/sorted(using:)-4k0sv","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/sorted(using:)-6pbqr","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/split(separator:maxsplits:omittingemptysubsequences:)-7mnbv","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/autodeallocatingunsafebufferpointer","title":"AutodeallocatingUnsafeBufferPointer","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fopen\/init(buffer:count:mode:)","title":"convenience init?(buffer: UnsafeMutableRawPointer, count: Int, mode: Fopen.FILEMode)","type":"init"},{"path":"\/documentation\/diagnostics\/fopen\/init(cookie:reader:writer:seeker:closer:)","title":"convenience init?(cookie: UnsafeRawPointer?, reader: (UnsafeMutableRawPointer?, UnsafeMutablePointer<CChar>?, CInt) -> CInt, writer: (UnsafeMutableRawPointer?, UnsafePointer<CChar>?, CInt) -> CInt, seeker: (UnsafeMutableRawPointer?, fpos_t, CInt) -> fpos_t, closer: (UnsafeMutableRawPointer?) -> CInt)","type":"init"},{"path":"\/documentation\/diagnostics\/fopen\/init(fd:mode:)","title":"convenience init?(fd: CInt, mode: Fopen.FILEMode)","type":"init"},{"path":"\/documentation\/diagnostics\/fopen\/init(path:mode:)","title":"convenience init?(path: String, mode: Fopen.FILEMode)","type":"init"},{"path":"\/documentation\/diagnostics\/fopen\/init(stream:)","title":"init?(stream: UnsafeMutablePointer<FILE>?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fopen\/filestream","title":"var fileStream: UnsafeMutablePointer<FILE>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fopen\/seek(to:)","title":"func seek(to: Fopen.FILESeek) -> CInt","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/tell()","title":"func tell() -> Int","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fopen\/filemode\/other(_:)","title":"case other(String)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fopen\/filemode\/init(_:)","title":"init(String)","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fopen\/filemode\/append","title":"static let append: Fopen.FILEMode","type":"property"},{"path":"\/documentation\/diagnostics\/fopen\/filemode\/both","title":"static let both: Fopen.FILEMode","type":"property"},{"path":"\/documentation\/diagnostics\/fopen\/filemode\/new","title":"static let new: Fopen.FILEMode","type":"property"},{"path":"\/documentation\/diagnostics\/fopen\/filemode\/read","title":"static let read: Fopen.FILEMode","type":"property"},{"path":"\/documentation\/diagnostics\/fopen\/filemode\/write","title":"static let write: Fopen.FILEMode","type":"property"}],"path":"\/documentation\/diagnostics\/fopen\/filemode","title":"Fopen.FILEMode","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fopen\/fileseek\/absolute(_:)","title":"case absolute(Int)","type":"case"},{"path":"\/documentation\/diagnostics\/fopen\/fileseek\/fromend(_:)","title":"case fromEnd(Int)","type":"case"},{"path":"\/documentation\/diagnostics\/fopen\/fileseek\/relative(_:)","title":"case relative(Int)","type":"case"}],"path":"\/documentation\/diagnostics\/fopen\/fileseek","title":"Fopen.FILESeek","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fopen\/flush()","title":"func flush() -> CInt","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/next()","title":"func next() -> String?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/print(_:separator:terminator:)","title":"func print(Any..., separator: String, terminator: String) -> CInt","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/readall(close:)","title":"func readAll(close: Bool) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/readline(strippingnewline:)","title":"func readLine(strippingNewline: Bool) -> String?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/write(data:)","title":"func write(data: Data) -> Int","type":"method"}],"path":"\/documentation\/diagnostics\/fopen\/filestream-implementations","title":"FILEStream Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fopen\/erasetoanyiterator()","title":"func eraseToAnyIterator() -> AnyIterator<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/exhaust()","title":"func exhaust()","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/exhaust(count:)","title":"func exhaust<N>(count: N) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/exhausting()","title":"func exhausting() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/makesequence()","title":"func makeSequence() -> IteratorSequence<Self>","type":"method"}],"path":"\/documentation\/diagnostics\/fopen\/iteratorprotocol-implementations","title":"IteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fopen\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/fopen\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/fopen\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/fopen\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/fopen\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/fopen\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/fopen\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fopen\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/allsatisfy(_:)-73zjq","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/allsatisfy(_:)-7vws0","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/compactmap(_:)-1vz6a","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/compactmap(_:)-7m39o","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/distinct()","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/distinct(by:)-24b9o","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/distinct(by:)-y4ps","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/filter(_:)-7g183","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/filter(_:)-9ulvw","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/find(_:)-13bh5","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/find(_:)-8j4m2","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/find(_:mutate:)-6flgv","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/find(_:mutate:)-9bsmj","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/first(byunwrapping:)-4wms8","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/first(byunwrapping:)-5deo8","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/first(oftype:)","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/firstandonly(byunwrapping:)-24pdr","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/firstandonly(byunwrapping:)-79uxu","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/firstandonly(oftype:)","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/flatmap(_:)-73xjs","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/flatmap(_:)-8zdrm","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/flatmap(_:)-s5yl","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/hasprefix(_:)","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/joined(separator:)","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/longestconsecutivesequences(by:relativeto:)-41mt9","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/longestconsecutivesequences(by:relativeto:)-8oqxj","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/makeiterator()","title":"func makeIterator() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/map(_:)-153pq","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/map(_:)-3rt0p","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/minormax(_:by:)-8of67","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/minormax(_:by:)-o99f","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/reduce(_:_:)-4vatk","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/reduce(_:_:)-7mrnv","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/removefirst(byunwrapping:)-3jntt","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/removefirst(byunwrapping:)-8fyvb","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/sorted(by:order:)-6zs4a","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/sorted(by:order:)-7ddyw","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/sorted(using:)-1yb5q","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/sorted(using:)-4ofir","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fopen\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/fopen\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fopen\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/fopen\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/fopen\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/fopen\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/fopen\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/fopen\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/fopen\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fopen\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/allsatisfy(_:)-73zjq","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/allsatisfy(_:)-7vws0","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/compactmap(_:)-1vz6a","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/compactmap(_:)-7m39o","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/distinct()","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/distinct(by:)-24b9o","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/distinct(by:)-y4ps","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/filter(_:)-7g183","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/filter(_:)-9ulvw","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/find(_:)-13bh5","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/find(_:)-8j4m2","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/find(_:mutate:)-6flgv","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/find(_:mutate:)-9bsmj","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/first(byunwrapping:)-4wms8","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/first(byunwrapping:)-5deo8","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/first(oftype:)","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/firstandonly(byunwrapping:)-24pdr","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/firstandonly(byunwrapping:)-79uxu","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/firstandonly(oftype:)","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/flatmap(_:)-73xjs","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/flatmap(_:)-8zdrm","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/flatmap(_:)-s5yl","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/hasprefix(_:)","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/joined(separator:)","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/longestconsecutivesequences(by:relativeto:)-41mt9","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/longestconsecutivesequences(by:relativeto:)-8oqxj","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/makeiterator()","title":"func makeIterator() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/map(_:)-153pq","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/map(_:)-3rt0p","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/minormax(_:by:)-8of67","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/minormax(_:by:)-o99f","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/reduce(_:_:)-4vatk","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/reduce(_:_:)-7mrnv","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/removefirst(byunwrapping:)-3jntt","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/removefirst(byunwrapping:)-8fyvb","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/sorted(by:order:)-6zs4a","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/sorted(by:order:)-7ddyw","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/sorted(using:)-1yb5q","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/sorted(using:)-4ofir","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/fopen\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fopen\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/fopen\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/fopen","title":"Fopen","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/glob\/init(pattern:flags:)","title":"init?(pattern: String, flags: CInt)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/glob\/next()","title":"func next() -> URL?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/glob\/erasetoanyiterator()","title":"func eraseToAnyIterator() -> AnyIterator<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/exhaust()","title":"func exhaust()","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/exhaust(count:)","title":"func exhaust<N>(count: N) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/exhausting()","title":"func exhausting() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/makesequence()","title":"func makeSequence() -> IteratorSequence<Self>","type":"method"}],"path":"\/documentation\/diagnostics\/glob\/iteratorprotocol-implementations","title":"IteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/glob\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/glob\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/glob\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/glob\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/glob\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/glob\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/allsatisfy(_:)-32y2a","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/allsatisfy(_:)-74ihp","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/compactmap(_:)-2bjdf","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/compactmap(_:)-9lo9j","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/distinct()","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/distinct(by:)-29avd","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/distinct(by:)-324td","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/filter(_:)-5bkb7","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/filter(_:)-9lkf5","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/find(_:)-56qpt","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/find(_:)-5fgpf","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/find(_:mutate:)-2dtge","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/find(_:mutate:)-962xk","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/first(byunwrapping:)-50fij","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/first(byunwrapping:)-7a8qh","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/first(oftype:)","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/firstandonly(byunwrapping:)-4lkq5","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/firstandonly(byunwrapping:)-69w9f","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/firstandonly(oftype:)","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/flatmap(_:)-1hrku","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/flatmap(_:)-48he4","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/flatmap(_:)-9ibm6","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/hasprefix(_:)","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/longestconsecutivesequences(by:relativeto:)-8hiy","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/longestconsecutivesequences(by:relativeto:)-8orwh","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/makeiterator()","title":"func makeIterator() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/map(_:)-3opvj","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/map(_:)-l4ff","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/minormax(_:by:)-2ntwl","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/minormax(_:by:)-943pb","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/reduce(_:_:)-62klp","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/reduce(_:_:)-o07w","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/removefirst(byunwrapping:)-1xyai","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/removefirst(byunwrapping:)-2vk44","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/sorted(by:order:)-4jbpm","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/sorted(by:order:)-7y0xs","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/sorted(using:)-4i5em","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/sorted(using:)-50evt","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/glob\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/glob\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/glob\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/glob\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/glob\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/glob\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/glob\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/glob\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/allsatisfy(_:)-32y2a","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/allsatisfy(_:)-74ihp","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/compactmap(_:)-2bjdf","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/compactmap(_:)-9lo9j","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/distinct()","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/distinct(by:)-29avd","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/distinct(by:)-324td","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/filter(_:)-5bkb7","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/filter(_:)-9lkf5","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/find(_:)-56qpt","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/find(_:)-5fgpf","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/find(_:mutate:)-2dtge","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/find(_:mutate:)-962xk","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/first(byunwrapping:)-50fij","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/first(byunwrapping:)-7a8qh","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/first(oftype:)","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/firstandonly(byunwrapping:)-4lkq5","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/firstandonly(byunwrapping:)-69w9f","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/firstandonly(oftype:)","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/flatmap(_:)-1hrku","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/flatmap(_:)-48he4","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/flatmap(_:)-9ibm6","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/hasprefix(_:)","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/longestconsecutivesequences(by:relativeto:)-8hiy","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/longestconsecutivesequences(by:relativeto:)-8orwh","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/makeiterator()","title":"func makeIterator() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/map(_:)-3opvj","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/map(_:)-l4ff","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/minormax(_:by:)-2ntwl","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/minormax(_:by:)-943pb","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/reduce(_:_:)-62klp","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/reduce(_:_:)-o07w","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/removefirst(byunwrapping:)-1xyai","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/removefirst(byunwrapping:)-2vk44","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/sorted(by:order:)-4jbpm","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/sorted(by:order:)-7y0xs","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/sorted(using:)-4i5em","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/sorted(using:)-50evt","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/glob\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/glob\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/glob\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/glob","title":"Glob","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lazyreferencebox\/init(wrappedvalue:)","title":"init(wrappedValue: @autoclosure () -> T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lazyreferencebox\/wrappedvalue","title":"var wrappedValue: T","type":"property"}],"path":"\/documentation\/diagnostics\/lazyreferencebox","title":"LazyReferenceBox","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lazyweakreferencebox\/init(_:)","title":"init(() -> T?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lazyweakreferencebox\/wrappedvalue","title":"var wrappedValue: T","type":"property"}],"path":"\/documentation\/diagnostics\/lazyweakreferencebox","title":"LazyWeakReferenceBox","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/configuration","title":"PassthroughLogger.Configuration","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/logentry\/level","title":"let level: LogLevel","type":"property"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/logentry\/message","title":"let message: LogMessage","type":"property"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/logentry\/scope","title":"let scope: PassthroughLogger.Scope","type":"property"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/logentry\/sourcecodelocation","title":"let sourceCodeLocation: SourceCodeLocation?","type":"property"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/logentry\/timestamp","title":"let timestamp: Date","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/logentry\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/logentry\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/logentry\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/logentry\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/logentry\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/logentry\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/logentry\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/logentry\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/logentry\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/logentry\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/logentry\/memoize(with:_:)-72cjo","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/logentry\/memoize(with:_:)-lcc6","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/logentry\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/logentry","title":"PassthroughLogger.LogEntry","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/init(rawvalue:)","title":"init(rawValue: String)","type":"init"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/description","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/stringliteraltype","title":"PassthroughLogger.Message.StringLiteralType","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/decodeifpresent(from:)-6h50e","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/decodeifpresent(from:)-6wjti","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/init(stringinterpolation:)","title":"init(stringInterpolation: DefaultStringInterpolation)","type":"init"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/expressiblebystringinterpolation-implementations","title":"ExpressibleByStringInterpolation Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/memoize(with:_:)-4hnxg","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/memoize(with:_:)-4i6k9","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/message\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/message","title":"PassthroughLogger.Message","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/source-swift.struct\/description","title":"var description: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/source-swift.struct\/location(_:)","title":"static func location(SourceCodeLocation) -> PassthroughLogger.Source","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/source-swift.struct\/logger(_:scope:)","title":"static func logger(any LoggerProtocol, scope: AnyLogScope) -> PassthroughLogger.Source","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/source-swift.struct\/object(_:)","title":"static func object(AnyObject) -> PassthroughLogger.Source","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/source-swift.struct\/something(_:)","title":"static func something(Any) -> PassthroughLogger.Source","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/source-swift.struct\/type(_:)","title":"static func type(Any.Type) -> PassthroughLogger.Source","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/source-swift.struct\/content\/logger(_:scope:)","title":"case logger(any LoggerProtocol, scope: AnyLogScope?)","type":"case"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/source-swift.struct\/content\/object(_:)","title":"case object(Weak<AnyObject>)","type":"case"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/source-swift.struct\/content\/something(_:)","title":"case something(Any)","type":"case"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/source-swift.struct\/content\/sourcecodelocation(_:)","title":"case sourceCodeLocation(SourceCodeLocation)","type":"case"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/source-swift.struct\/content\/type(_:)","title":"case type(Any.Type)","type":"case"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/source-swift.struct\/content","title":"PassthroughLogger.Source.Content","type":"enum"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/source-swift.struct","title":"PassthroughLogger.Source","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/init(file:function:line:column:)","title":"init(file: StaticString, function: StaticString, line: UInt, column: UInt?)","type":"init"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/init(print:)","title":"init(print: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/init(source:)","title":"init(source: Source)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/entrypublisher","title":"var entryPublisher: AnyPublisher<LogEntry, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/source-swift.property","title":"var source: Source","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/log(file:function:line:column:operation:)-1179u","title":"func log<Result>(file: String, function: String, line: UInt, column: UInt?, operation: () throws -> Result) throws -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/log(file:function:line:column:operation:)-9mtm7","title":"func log<Result>(file: String, function: String, line: UInt, column: UInt?, operation: () async throws -> Result) async throws -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/scoped(to:)-5y6s7","title":"func scoped(to: AnyLogScope) throws -> PassthroughLogger","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/loglevel","title":"PassthroughLogger.LogLevel","type":"typealias"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/logmessage","title":"PassthroughLogger.LogMessage","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/debug(_:metadata:file:function:line:)","title":"func debug(@autoclosure () -> String, metadata: [String : Any]?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/error(_:metadata:file:function:line:)-599nq","title":"func error(@autoclosure () -> Error, metadata: [String : Any]?, file: String, function: String, line: UInt) -> any Swift.Error","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/error(_:metadata:file:function:line:)-9kvbn","title":"func error(@autoclosure () -> String, metadata: [String : Any]?, file: String, function: String, line: UInt) -> any Swift.Error","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/info(_:metadata:file:function:line:)","title":"func info(@autoclosure () -> String, metadata: [String : Any]?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/log(level:_:metadata:file:function:line:)","title":"func log(level: LogLevel, @autoclosure () -> LogMessage, metadata: @autoclosure () -> [String : Any]?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/warning(_:metadata:file:function:line:)-1i4jk","title":"func warning(@autoclosure () -> String, metadata: [String : Any]?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/warning(_:metadata:file:function:line:)-7vynh","title":"func warning(@autoclosure () -> Error, metadata: [String : Any]?, file: String, function: String, line: UInt)","type":"method"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/loggerprotocol-implementations","title":"LoggerProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/objectwillchange","title":"var objectWillChange: ObservableObjectPublisher","type":"property"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/observableobject-implementations","title":"ObservableObject Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/scoped(to:)-14zx6","title":"func scoped(to: some LogScope) throws -> PassthroughLogger","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/scope\/child(parent:scope:)","title":"case child(parent: `Self`, scope: AnyLogScope)","type":"case"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/scope\/root","title":"case root","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/scope\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/scope\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/scope\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/scope\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/scope\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/scope\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/scope\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/scope\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/scope\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/scope\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/scope\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/scope\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/scope\/memoize(with:_:)-4ii1d","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/scope\/memoize(with:_:)-5ekbo","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/scope\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/scope","title":"PassthroughLogger.Scope","type":"enum"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/scopedlogger-implementations","title":"ScopedLogger Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/write(_:)","title":"func write(String)","type":"method"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/textoutputstream-implementations","title":"TextOutputStream Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/passthroughlogger\/exportlog()","title":"func exportLog() async throws -> some _LogFormat","type":"method"}],"path":"\/documentation\/diagnostics\/passthroughlogger\/_logexporting-implementations","title":"_LogExporting Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/passthroughlogger","title":"PassthroughLogger","type":"class"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/popen\/terminationerror\/localizeddescription","title":"var localizedDescription: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/popen\/terminationerror\/throw()","title":"func `throw`() throws -> Never","type":"method"}],"path":"\/documentation\/diagnostics\/popen\/terminationerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/popen\/terminationerror","title":"Popen.TerminationError","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/popen\/init(cmd:mode:)","title":"init?(cmd: String, mode: Fopen.FILEMode)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/popen\/exitstatus","title":"var exitStatus: CInt?","type":"property"},{"path":"\/documentation\/diagnostics\/popen\/filestream","title":"var fileStream: UnsafeMutablePointer<FILE>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/popen\/terminatedok()","title":"func terminatedOK() -> Bool","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/popen\/shellcommand","title":"static var shellCommand: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/popen\/shell(cmd:shell:)","title":"class func shell(cmd: String, shell: String) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/system(_:errors:)","title":"class func system(String, errors: Bool) throws -> String?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/popen\/flush()","title":"func flush() -> CInt","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/next()","title":"func next() -> String?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/print(_:separator:terminator:)","title":"func print(Any..., separator: String, terminator: String) -> CInt","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/readall(close:)","title":"func readAll(close: Bool) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/readline(strippingnewline:)","title":"func readLine(strippingNewline: Bool) -> String?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/write(data:)","title":"func write(data: Data) -> Int","type":"method"}],"path":"\/documentation\/diagnostics\/popen\/filestream-implementations","title":"FILEStream Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/popen\/erasetoanyiterator()","title":"func eraseToAnyIterator() -> AnyIterator<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/exhaust()","title":"func exhaust()","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/exhaust(count:)","title":"func exhaust<N>(count: N) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/exhausting()","title":"func exhausting() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/makesequence()","title":"func makeSequence() -> IteratorSequence<Self>","type":"method"}],"path":"\/documentation\/diagnostics\/popen\/iteratorprotocol-implementations","title":"IteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/popen\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/popen\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/popen\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/popen\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/popen\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/popen\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/popen\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/popen\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/allsatisfy(_:)-76aoq","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/allsatisfy(_:)-9z6ct","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/compactmap(_:)-2fdih","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/compactmap(_:)-3rgwu","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/distinct()","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/distinct(by:)-3zt9w","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/distinct(by:)-58kut","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/filter(_:)-36e3y","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/filter(_:)-70s62","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/find(_:)-12wnh","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/find(_:)-2hhog","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/find(_:mutate:)-22btj","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/find(_:mutate:)-60cau","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/first(byunwrapping:)-4vpbm","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/first(byunwrapping:)-5yvp9","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/first(oftype:)","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/firstandonly(byunwrapping:)-24alr","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/firstandonly(byunwrapping:)-6wtfp","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/firstandonly(oftype:)","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/flatmap(_:)-3qcpf","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/flatmap(_:)-pqse","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/flatmap(_:)-xc9g","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/hasprefix(_:)","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/joined(separator:)","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/longestconsecutivesequences(by:relativeto:)-43fc1","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/longestconsecutivesequences(by:relativeto:)-82k38","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/makeiterator()","title":"func makeIterator() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/map(_:)-4d9zu","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/map(_:)-7ysj0","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/minormax(_:by:)-59f33","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/minormax(_:by:)-mgj7","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/reduce(_:_:)-1o9ny","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/reduce(_:_:)-41sl8","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/removefirst(byunwrapping:)-6lu4b","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/removefirst(byunwrapping:)-701oz","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/sorted(by:order:)-1dadx","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/sorted(by:order:)-45y88","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/sorted(using:)-68xyd","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/sorted(using:)-7jsdb","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/popen\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/popen\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/popen\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/popen\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/popen\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/popen\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/popen\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/popen\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/popen\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/popen\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/allsatisfy(_:)-76aoq","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/allsatisfy(_:)-9z6ct","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/compactmap(_:)-2fdih","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/compactmap(_:)-3rgwu","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/distinct()","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/distinct(by:)-3zt9w","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/distinct(by:)-58kut","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/filter(_:)-36e3y","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/filter(_:)-70s62","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/find(_:)-12wnh","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/find(_:)-2hhog","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/find(_:mutate:)-22btj","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/find(_:mutate:)-60cau","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/first(byunwrapping:)-4vpbm","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/first(byunwrapping:)-5yvp9","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/first(oftype:)","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/firstandonly(byunwrapping:)-24alr","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/firstandonly(byunwrapping:)-6wtfp","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/firstandonly(oftype:)","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/flatmap(_:)-3qcpf","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/flatmap(_:)-pqse","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/flatmap(_:)-xc9g","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/hasprefix(_:)","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/joined(separator:)","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/longestconsecutivesequences(by:relativeto:)-43fc1","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/longestconsecutivesequences(by:relativeto:)-82k38","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/makeiterator()","title":"func makeIterator() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/map(_:)-4d9zu","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/map(_:)-7ysj0","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/minormax(_:by:)-59f33","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/minormax(_:by:)-mgj7","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/reduce(_:_:)-1o9ny","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/reduce(_:_:)-41sl8","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/removefirst(byunwrapping:)-6lu4b","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/removefirst(byunwrapping:)-701oz","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/sorted(by:order:)-1dadx","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/sorted(by:order:)-45y88","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/sorted(using:)-68xyd","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/sorted(using:)-7jsdb","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/popen\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/popen\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/popen\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/popen","title":"Popen","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/referencebox\/init(_:)","title":"init(T)","type":"init"},{"path":"\/documentation\/diagnostics\/referencebox\/init(nilliteral:)","title":"init(nilLiteral: ())","type":"init"},{"path":"\/documentation\/diagnostics\/referencebox\/init(wrappedvalue:)","title":"init(wrappedValue: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/referencebox\/value","title":"var value: T","type":"property"},{"path":"\/documentation\/diagnostics\/referencebox\/wrappedvalue","title":"var wrappedValue: T","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/referencebox\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/referencebox\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/referencebox\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/referencebox\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/referencebox","title":"ReferenceBox","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/additionoperatable\/+(_:_:)","title":"static func + (Self, Self) -> Self","type":"op"}],"path":"\/documentation\/diagnostics\/additionoperatable","title":"AdditionOperatable","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/allcaseinitiable\/all","title":"static var all: Self","type":"property"}],"path":"\/documentation\/diagnostics\/allcaseinitiable","title":"AllCaseInitiable","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anybidirectionalcollectiontype\/init(_:)-23z9m","title":"init<C>(C)","type":"init"},{"path":"\/documentation\/diagnostics\/anybidirectionalcollectiontype\/init(_:)-4dttd","title":"init(AnyBidirectionalCollection<Self.Element>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anybidirectionalcollectiontype\/erasetoanybidirectionalcollection()","title":"func eraseToAnyBidirectionalCollection() -> AnyBidirectionalCollection<Self.Element>","type":"method"}],"path":"\/documentation\/diagnostics\/anybidirectionalcollectiontype","title":"AnyBidirectionalCollectionType","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodableconvertible\/toanycodable()","title":"func toAnyCodable() throws -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/anycodableconvertible","title":"AnyCodableConvertible","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/approximatelyequatable\/~=(_:_:)","title":"static func ~= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/approximatelyequatable","title":"ApproximatelyEquatable","type":"protocol"},{"path":"\/documentation\/diagnostics\/arithmeticoperatable","title":"ArithmeticOperatable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/asyncbidirectionaliteratorprotocol\/previous()","title":"func previous() async throws -> Self.Element?","type":"method"}],"path":"\/documentation\/diagnostics\/asyncbidirectionaliteratorprotocol","title":"AsyncBidirectionalIteratorProtocol","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bidirectionalindex\/predecessor()","title":"func predecessor() -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/bidirectionalindex","title":"BidirectionalIndex","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bitpatternconvertible\/bitpattern-swift.associatedtype","title":"BitPattern","type":"associatedtype"},{"title":"Initializers","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/bitpatternconvertible\/init(bitpattern:)-5tm67","title":"init(bitPattern: Self.BitPattern)","type":"init"}],"title":"BitPatternConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/bitpatternconvertible\/init(bitpattern:)-acwd","title":"init(bitPattern: Self.BitPattern)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bitpatternconvertible\/bitpattern-swift.property","title":"var bitPattern: Self.BitPattern","type":"property"}],"path":"\/documentation\/diagnostics\/bitpatternconvertible","title":"BitPatternConvertible","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bitshiftoperable\/__(_:_:)-4yp5e","title":"static func << (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/bitshiftoperable\/__(_:_:)-6km4r","title":"static func >> (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/bitshiftoperable\/__=(_:_:)-2dfc","title":"static func >>= (inout Self, Self)","type":"op"},{"path":"\/documentation\/diagnostics\/bitshiftoperable\/__=(_:_:)-5inj9","title":"static func <<= (inout Self, Self)","type":"op"},{"path":"\/documentation\/diagnostics\/bitshiftoperable\/__~(_:_:)","title":"static func >>~ (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/bitshiftoperable\/__~=(_:_:)","title":"static func >>~= (inout Self, Self)","type":"op"},{"path":"\/documentation\/diagnostics\/bitshiftoperable\/~__(_:_:)","title":"static func ~<< (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/bitshiftoperable\/~__=(_:_:)","title":"static func ~<<= (inout Self, Self)","type":"op"}],"path":"\/documentation\/diagnostics\/bitshiftoperable","title":"BitshiftOperable","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/boolean\/&&-_(_:_:)-1hr5b","title":"static func &&-> <T>(Self, @autoclosure () throws -> T) rethrows -> T?","type":"op"},{"path":"\/documentation\/diagnostics\/boolean\/&&-_(_:_:)-8ymb5","title":"static func &&-> <T>(Self, @autoclosure () throws -> T?) rethrows -> T?","type":"op"},{"path":"\/documentation\/diagnostics\/boolean\/&&=(_:_:)","title":"static func &&= (inout Self, @autoclosure () throws -> Self) rethrows","type":"op"},{"path":"\/documentation\/diagnostics\/boolean\/__=(_:_:)","title":"static func ||= (inout Self, @autoclosure () throws -> Self) rethrows","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/boolean\/boolvalue","title":"var boolValue: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/boolean\/or(_:)-24tx9","title":"func or<T>(@autoclosure () throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/boolean\/or(_:)-9xwtu","title":"func or<T>(@autoclosure () throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/boolean\/orthrow()","title":"func orThrow() throws","type":"method"},{"path":"\/documentation\/diagnostics\/boolean\/orthrow(_:)","title":"func orThrow(any Error) throws","type":"method"},{"path":"\/documentation\/diagnostics\/boolean\/then(_:)-9u79","title":"func then<T>(@autoclosure () throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/boolean\/then(_:)-a2nw","title":"func then<T>(@autoclosure () throws -> T?) rethrows -> T?","type":"method"}],"path":"\/documentation\/diagnostics\/boolean","title":"Boolean","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/booleaninitiable\/init(_:)-8nr08","title":"init(Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/booleaninitiable\/init(_:)-13512","title":"init(DarwinBoolean)","type":"init"},{"path":"\/documentation\/diagnostics\/booleaninitiable\/init(_:)-4evqf","title":"init(ObjCBool)","type":"init"}],"title":"BooleanInitiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/booleaninitiable\/init(_:)-1db2u","title":"init(ObjCBool)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/booleaninitiable\/init(_:)-4evqf","title":"init(ObjCBool)","type":"init"},{"path":"\/documentation\/diagnostics\/booleaninitiable\/init(_:)-8nr08","title":"init(Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/booleaninitiable\/init(_:)-13512","title":"init(DarwinBoolean)","type":"init"}],"title":"BooleanInitiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/booleaninitiable\/init(_:)-6gy2y","title":"init(Bool)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/booleaninitiable\/init(_:)-13512","title":"init(DarwinBoolean)","type":"init"},{"path":"\/documentation\/diagnostics\/booleaninitiable\/init(_:)-8nr08","title":"init(Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/booleaninitiable\/init(_:)-4evqf","title":"init(ObjCBool)","type":"init"}],"title":"BooleanInitiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/booleaninitiable\/init(_:)-9m6k4","title":"init(DarwinBoolean)","type":"init"},{"path":"\/documentation\/diagnostics\/booleaninitiable\/init(boolean:)","title":"init<T>(boolean: T)","type":"init"},{"path":"\/documentation\/diagnostics\/booleaninitiable\/init(booleanliteral:)","title":"init(booleanLiteral: Bool)","type":"init"}],"path":"\/documentation\/diagnostics\/booleaninitiable","title":"BooleanInitiable","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/boundinitiablerangeprotocol\/init(bounds:)","title":"init(bounds: (lower: Self.Bound, upper: Self.Bound))","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/boundinitiablerangeprotocol\/init(uncheckedbounds:)-8obib","title":"init(uncheckedBounds: (lower: Self.Bound, upper: Self.Bound))","type":"init"}],"title":"BoundInitiableRangeProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/boundinitiablerangeprotocol\/init(uncheckedbounds:)-2uwt9","title":"init(uncheckedBounds: (lower: Self.Bound, upper: Self.Bound))","type":"init"}],"path":"\/documentation\/diagnostics\/boundinitiablerangeprotocol","title":"BoundInitiableRangeProtocol","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/bounded\/isminimumormaximum-lne0","title":"var isMinimumOrMaximum: Bool","type":"property"}],"title":"Bounded Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/bounded\/isminimumormaximum-bq7g","title":"var isMinimumOrMaximum: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/bounded\/maximum-785xf","title":"static var maximum: Self","type":"property"}],"title":"Bounded Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/bounded\/maximum-4s3g7","title":"static var maximum: Self","type":"property"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/bounded\/minimum-7uyez","title":"static var minimum: Self","type":"property"}],"title":"Bounded Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/bounded\/minimum-5rnth","title":"static var minimum: Self","type":"property"}],"path":"\/documentation\/diagnostics\/bounded","title":"Bounded","type":"protocol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/boundedrandomnable\/random(maximum:)-18a6d","title":"static func random(maximum: Self) -> Self","type":"method"}],"title":"BoundedRandomnable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/boundedrandomnable\/random(maximum:)-548z1","title":"static func random(maximum: Self) -> Self","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/boundedrandomnable\/random(minimum:)-6w5xe","title":"static func random(minimum: Self) -> Self","type":"method"}],"title":"BoundedRandomnable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/boundedrandomnable\/random(minimum:)-6uc5","title":"static func random(minimum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/boundedrandomnable\/random(minimum:maximum:)","title":"static func random(minimum: Self, maximum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/boundedrandomnable\/random(minimum:maximum:excluding:)-1yx03","title":"static func random(minimum: Self, maximum: Self, excluding: Range<Self>) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/boundedrandomnable\/random(minimum:maximum:excluding:)-4bp3c","title":"static func random(minimum: Self, maximum: Self, excluding: Self) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/boundedrandomnable","title":"BoundedRandomnable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bufferpointer\/baseaddresspointer","title":"BaseAddressPointer","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bufferpointer\/baseaddress","title":"var baseAddress: Self.BaseAddressPointer?","type":"property"},{"path":"\/documentation\/diagnostics\/bufferpointer\/unsafebufferpointerrepresentation","title":"var unsafeBufferPointerRepresentation: UnsafeBufferPointer<Self.Element>","type":"property"},{"path":"\/documentation\/diagnostics\/bufferpointer\/unsafemutablebufferpointerrepresentation","title":"var unsafeMutableBufferPointerRepresentation: UnsafeMutableBufferPointer<Self.Element>","type":"property"},{"path":"\/documentation\/diagnostics\/bufferpointer\/unsafemutablepointerrepresentation","title":"var unsafeMutablePointerRepresentation: UnsafeMutablePointer<Self.Element>?","type":"property"},{"path":"\/documentation\/diagnostics\/bufferpointer\/unsafepointerrepresentation","title":"var unsafePointerRepresentation: UnsafePointer<Self.Element>?","type":"property"},{"path":"\/documentation\/diagnostics\/bufferpointer\/unsaferawpointerrepresentation","title":"var unsafeRawPointerRepresentation: UnsafeRawPointer?","type":"property"}],"path":"\/documentation\/diagnostics\/bufferpointer","title":"BufferPointer","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/byteorderswappable\/bigendianview-5da25","title":"var bigEndianView: Self","type":"property"}],"title":"ByteOrderSwappable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/byteorderswappable\/bigendianview-4sb8n","title":"var bigEndianView: Self","type":"property"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/byteorderswappable\/littleendianview-adil","title":"var littleEndianView: Self","type":"property"}],"title":"ByteOrderSwappable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/byteorderswappable\/littleendianview-74f9e","title":"var littleEndianView: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/byteorderswappable\/swapbyteorder()-3ozg5","title":"func swapByteOrder()","type":"method"}],"title":"ByteOrderSwappable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/byteorderswappable\/swapbyteorder()-g60z","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/byteorderswappable\/swapbyteorderbigtohost()","title":"func swapByteOrderBigToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/byteorderswappable\/swapbyteorderhosttobig()","title":"func swapByteOrderHostToBig()","type":"method"},{"path":"\/documentation\/diagnostics\/byteorderswappable\/swapbyteorderhosttolittle()","title":"func swapByteOrderHostToLittle()","type":"method"},{"path":"\/documentation\/diagnostics\/byteorderswappable\/swapbyteorderhosttoportable()","title":"func swapByteOrderHostToPortable()","type":"method"},{"path":"\/documentation\/diagnostics\/byteorderswappable\/swapbyteorderlittletohost()","title":"func swapByteOrderLittleToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/byteorderswappable\/swapbyteorderportabletohost()","title":"func swapByteOrderPortableToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/byteorderswappable\/swappingbyteorder()","title":"func swappingByteOrder() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/byteorderswappable\/swappingbyteorderbigtohost()","title":"func swappingByteOrderBigToHost() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/byteorderswappable\/swappingbyteorderhosttobig()","title":"func swappingByteOrderHostToBig() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/byteorderswappable\/swappingbyteorderhosttolittle()","title":"func swappingByteOrderHostToLittle() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/byteorderswappable\/swappingbyteorderhosttoportable()","title":"func swappingByteOrderHostToPortable() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/byteorderswappable\/swappingbyteorderlittletohost()","title":"func swappingByteOrderLittleToHost() -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/byteorderswappable","title":"ByteOrderSwappable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetupleconvertible\/bytetupletype","title":"ByteTupleType","type":"associatedtype"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetupleconvertible\/init(_:)","title":"init(Bit)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/bytetupleconvertible\/init(bytetuple:)-1id37","title":"init(byteTuple: Self.ByteTupleType)","type":"init"}],"title":"ByteTupleConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/bytetupleconvertible\/init(bytetuple:)-95rte","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/bytetupleconvertible\/bytetuple-1gc7s","title":"var byteTuple: NativeByteTupleType","type":"property"},{"path":"\/documentation\/diagnostics\/bytetupleconvertible\/bytetuple-49veg","title":"var byteTuple: Self.ByteTupleType","type":"property"}],"title":"ByteTupleConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/bytetupleconvertible\/bytetuple-3qm36","title":"var byteTuple: Self.ByteTupleType","type":"property"}],"path":"\/documentation\/diagnostics\/bytetupleconvertible","title":"ByteTupleConvertible","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/clientloglevelprotocol\/critical","title":"static var critical: Self","type":"property"},{"path":"\/documentation\/diagnostics\/clientloglevelprotocol\/debug","title":"static var debug: Self","type":"property"},{"path":"\/documentation\/diagnostics\/clientloglevelprotocol\/error","title":"static var error: Self","type":"property"},{"path":"\/documentation\/diagnostics\/clientloglevelprotocol\/fault","title":"static var fault: Self","type":"property"},{"path":"\/documentation\/diagnostics\/clientloglevelprotocol\/info","title":"static var info: Self","type":"property"},{"path":"\/documentation\/diagnostics\/clientloglevelprotocol\/notice","title":"static var notice: Self","type":"property"},{"path":"\/documentation\/diagnostics\/clientloglevelprotocol\/undefined","title":"static var undefined: Self","type":"property"},{"path":"\/documentation\/diagnostics\/clientloglevelprotocol\/warning","title":"static var warning: Self","type":"property"}],"path":"\/documentation\/diagnostics\/clientloglevelprotocol","title":"ClientLogLevelProtocol","type":"protocol"},{"path":"\/documentation\/diagnostics\/closedrangeprotocol","title":"ClosedRangeProtocol","type":"protocol"},{"path":"\/documentation\/diagnostics\/coderprimitive","title":"CoderPrimitive","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/constantbufferpointer\/assumingmemorybound(to:)-xj01","title":"func assumingMemoryBound<T>(to: T.Type) -> UnsafeBufferPointer<T>","type":"method"}],"title":"ConstantBufferPointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/constantbufferpointer\/assumingmemorybound(to:)-60b5r","title":"func assumingMemoryBound<T>(to: T.Type) -> UnsafeBufferPointer<T>","type":"method"}],"path":"\/documentation\/diagnostics\/constantbufferpointer","title":"ConstantBufferPointer","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/constantpointer\/assumingmemorybound(to:)-8hfek","title":"func assumingMemoryBound<T>(to: T.Type) -> UnsafePointer<T>","type":"method"}],"title":"ConstantPointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/constantpointer\/assumingmemorybound(to:)-85t5m","title":"func assumingMemoryBound<T>(to: T.Type) -> UnsafePointer<T>","type":"method"}],"path":"\/documentation\/diagnostics\/constantpointer","title":"ConstantPointer","type":"protocol"},{"path":"\/documentation\/diagnostics\/constantrawbufferpointer","title":"ConstantRawBufferPointer","type":"protocol"},{"path":"\/documentation\/diagnostics\/constantrawpointer","title":"ConstantRawPointer","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/contiguousstorage\/element","title":"Element","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/contiguousstorage\/withbufferpointer(_:)","title":"func withBufferPointer<BP, T>(((BP) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/contiguousstorage\/withunsafebufferpointer(_:)","title":"func withUnsafeBufferPointer<T>(((UnsafeBufferPointer<Self.Element>) throws -> T)) rethrows -> T","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/contiguousstorage\/withunsafebytes(_:)-37bo8","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"}],"title":"ContiguousStorage Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/contiguousstorage\/withunsafebytes(_:)-5j8pd","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/contiguousstorage","title":"ContiguousStorage","type":"protocol"},{"path":"\/documentation\/diagnostics\/continuous","title":"Continuous","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/countable\/count-swift.associatedtype","title":"Count","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/countable\/count-swift.property","title":"var count: Self.Count","type":"property"}],"path":"\/documentation\/diagnostics\/countable","title":"Countable","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/customsourcedeclarationreflectable\/customsourcedeclarationmirror-7r1ay","title":"static var customSourceDeclarationMirror: _StaticSwift.SourceDeclarationMirror","type":"property"}],"title":"CustomSourceDeclarationReflectable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/customsourcedeclarationreflectable\/customsourcedeclarationmirror-d5tw","title":"static var customSourceDeclarationMirror: _StaticSwift.SourceDeclarationMirror","type":"property"}],"path":"\/documentation\/diagnostics\/customsourcedeclarationreflectable","title":"CustomSourceDeclarationReflectable","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customstringconvertibleoptionset\/descriptions","title":"static var descriptions: [Self : String]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customstringconvertibleoptionset\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/customstringconvertibleoptionset\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/customstringconvertibleoptionset","title":"CustomStringConvertibleOptionSet","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customtruncatedstringconvertible\/truncateddescription","title":"var truncatedDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/customtruncatedstringconvertible","title":"CustomTruncatedStringConvertible","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/datadecodable\/datadecodingstrategy","title":"DataDecodingStrategy","type":"associatedtype"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/datadecodable\/init(data:using:)","title":"init(data: Data, using: Self.DataDecodingStrategy) throws","type":"init"}],"path":"\/documentation\/diagnostics\/datadecodable","title":"DataDecodable","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/datadecodablewithdefaultstrategy\/init(data:)","title":"init(data: Data) throws","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/datadecodablewithdefaultstrategy\/defaultdatadecodingstrategy-1vbcs","title":"static var defaultDataDecodingStrategy: ()","type":"property"}],"title":"DataDecodableWithDefaultStrategy Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/datadecodablewithdefaultstrategy\/defaultdatadecodingstrategy-58e0t","title":"static var defaultDataDecodingStrategy: Self.DataDecodingStrategy","type":"property"}],"path":"\/documentation\/diagnostics\/datadecodablewithdefaultstrategy","title":"DataDecodableWithDefaultStrategy","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/dataencodable\/dataencodingstrategy","title":"DataEncodingStrategy","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/dataencodable\/data(using:)","title":"func data(using: Self.DataEncodingStrategy) throws -> Data","type":"method"}],"path":"\/documentation\/diagnostics\/dataencodable","title":"DataEncodable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/dataencodablewithdefaultstrategy\/data()","title":"func data() throws -> Data","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/dataencodablewithdefaultstrategy\/defaultdataencodingstrategy-7x48b","title":"static var defaultDataEncodingStrategy: ()","type":"property"}],"title":"DataEncodableWithDefaultStrategy Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/dataencodablewithdefaultstrategy\/defaultdataencodingstrategy-818li","title":"static var defaultDataEncodingStrategy: Self.DataEncodingStrategy","type":"property"}],"path":"\/documentation\/diagnostics\/dataencodablewithdefaultstrategy","title":"DataEncodableWithDefaultStrategy","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/datecodingstrategy\/rawvalue","title":"RawValue","type":"associatedtype"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/datecodingstrategy\/decode(_:)","title":"static func decode(Self.RawValue) throws -> Date","type":"method"},{"path":"\/documentation\/diagnostics\/datecodingstrategy\/encode(_:)","title":"static func encode(Date) throws -> Self.RawValue","type":"method"}],"path":"\/documentation\/diagnostics\/datecodingstrategy","title":"DateCodingStrategy","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/destructivelymutablesequence\/-(_:_:)-8a13b","title":"static func - (Self, Self.Element) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/destructivelymutablesequence\/-(_:_:)-8ejau","title":"static func - <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/destructivelymutablesequence\/-=(_:_:)-4gjqj","title":"static func -= <S>(inout Self, S)","type":"op"},{"path":"\/documentation\/diagnostics\/destructivelymutablesequence\/-=(_:_:)-88y8t","title":"static func -= (inout Self, Self.Element)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/destructivelymutablesequence\/filterinplace(_:)-4f796","title":"func filterInPlace(((Self.Element) throws -> Bool)) rethrows","type":"method"}],"title":"DestructivelyMutableSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/destructivelymutablesequence\/filterinplace(_:)-3sxtf","title":"func filterInPlace(((Self.Element) throws -> Bool)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/destructivelymutablesequence\/remove(contentsof:)-9h3y0","title":"func remove<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/destructivelymutablesequence\/remove(contentsof:)-xj0","title":"func remove<S>(contentsOf: S)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/destructivelymutablesequence\/removeall()-7jpm6","title":"func removeAll()","type":"method"},{"path":"\/documentation\/diagnostics\/destructivelymutablesequence\/removeall()-1r6ig","title":"func removeAll()","type":"method"}],"title":"DestructivelyMutableSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/destructivelymutablesequence\/removeall()-56mt3","title":"func removeAll()","type":"method"},{"path":"\/documentation\/diagnostics\/destructivelymutablesequence\/removeall(of:)","title":"func removeAll(of: Self.Element)","type":"method"},{"path":"\/documentation\/diagnostics\/destructivelymutablesequence\/removeall(where:)","title":"func removeAll(where: ((Self.Element) throws -> Bool)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/destructivelymutablesequence\/removing(allof:)","title":"func removing(allOf: Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/destructivelymutablesequence\/removing(contentsof:)-7e6rl","title":"func removing<C>(contentsOf: C) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/destructivelymutablesequence\/removing(contentsof:)-zjom","title":"func removing<S>(contentsOf: S) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/destructivelymutablesequence","title":"DestructivelyMutableSequence","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/destructivelymutablesetprotocol\/remove(contentsof:)","title":"func remove<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/destructivelymutablesetprotocol\/removing(_:)","title":"func removing(Self.Element) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/destructivelymutablesetprotocol","title":"DestructivelyMutableSetProtocol","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/dictionaryprotocol\/dictionarykey","title":"DictionaryKey","type":"associatedtype"},{"path":"\/documentation\/diagnostics\/dictionaryprotocol\/dictionaryvalue","title":"DictionaryValue","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/dictionaryprotocol\/contains(key:)","title":"func contains(key: Self.DictionaryKey) -> Bool","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/dictionaryprotocol\/value(forkey:)-1okb8","title":"func value(forKey: Self.DictionaryKey) -> Self.DictionaryValue?","type":"method"}],"title":"DictionaryProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/dictionaryprotocol\/value(forkey:)-9stk7","title":"func value(forKey: Self.DictionaryKey) -> Self.DictionaryValue?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/dictionaryprotocol\/subscript(_:)-8q2qz","title":"subscript(any Any.Type) -> Self.DictionaryValue?","type":"subscript"},{"path":"\/documentation\/diagnostics\/dictionaryprotocol\/subscript(_:)-1rfns","title":"subscript(Self.DictionaryKey?) -> Self.DictionaryValue?","type":"subscript"},{"path":"\/documentation\/diagnostics\/dictionaryprotocol\/subscript(_:)-4p748","title":"subscript(Self.DictionaryKey?) -> Self.DictionaryValue?","type":"subscript"}],"title":"DictionaryProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/dictionaryprotocol\/subscript(_:)-4pcll","title":"subscript(Self.DictionaryKey) -> Self.DictionaryValue?","type":"subscript"}],"path":"\/documentation\/diagnostics\/dictionaryprotocol","title":"DictionaryProtocol","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/diffable\/difference","title":"Difference","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/diffable\/applyunconditionally(_:)-2748u","title":"func applyUnconditionally(Self.Difference) throws","type":"method"}],"title":"Diffable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/diffable\/applyunconditionally(_:)-9c9re","title":"func applyUnconditionally(Self.Difference) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/diffable\/applying(_:)-4o9q0","title":"func applying(Self.Difference) -> Self?","type":"method"}],"title":"Diffable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/diffable\/applying(_:)-222p8","title":"func applying(Self.Difference) -> Self?","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/diffable\/difference(from:)-4v2wm","title":"func difference(from: Self) -> Self.Difference","type":"method"}],"title":"Diffable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/diffable\/difference(from:)-1mz14","title":"func difference(from: Self) -> Self.Difference","type":"method"}],"path":"\/documentation\/diagnostics\/diffable","title":"Diffable","type":"protocol"},{"path":"\/documentation\/diagnostics\/discrete","title":"Discrete","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/discreteorcontinuous\/iscontinuous","title":"static var isContinuous: Bool","type":"property"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/discreteorcontinuous\/isdiscrete-fj5s","title":"static var isDiscrete: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/discreteorcontinuous\/isdiscrete-150o4","title":"static var isDiscrete: Bool","type":"property"}],"title":"DiscreteOrContinuous Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/discreteorcontinuous\/isdiscrete-k7k8","title":"static var isDiscrete: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/discreteorcontinuous","title":"DiscreteOrContinuous","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/divisionoperatable\/_(_:_:)","title":"static func \/ (Self, Self) -> Self","type":"op"}],"path":"\/documentation\/diagnostics\/divisionoperatable","title":"DivisionOperatable","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/eitherrepresentable\/init(_:)-2mgrk","title":"init(Either<Self.LeftValue, Self.RightValue>)","type":"init"}],"title":"EitherRepresentable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/eitherrepresentable\/init(_:)-7tlfz","title":"init(Either<Self.LeftValue, Self.RightValue>)","type":"init"},{"path":"\/documentation\/diagnostics\/eitherrepresentable\/init(leftvalue:)","title":"init(leftValue: Self.LeftValue)","type":"init"},{"path":"\/documentation\/diagnostics\/eitherrepresentable\/init(rightvalue:)","title":"init(rightValue: Self.RightValue)","type":"init"}],"path":"\/documentation\/diagnostics\/eitherrepresentable","title":"EitherRepresentable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/leftvalue-swift.associatedtype","title":"LeftValue","type":"associatedtype"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/rightvalue-swift.associatedtype","title":"RightValue","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/eithervalue-swift.property","title":"var eitherValue: Either<Self.LeftValue, Self.RightValue>","type":"property"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/isleft","title":"var isLeft: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/isright","title":"var isRight: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/leftorright","title":"var leftOrRight: Self.LeftValue","type":"property"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/leftvalue-swift.property","title":"var leftValue: Self.LeftValue?","type":"property"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/rightvalue-swift.property","title":"var rightValue: Self.RightValue?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/collapse(_:)-1pmmk","title":"func collapse<T>(((Self.LeftValue) throws -> T)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/collapse(_:)-4pti1","title":"func collapse<T>(((Self.RightValue) throws -> T)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/collapse(_:_:)","title":"func collapse<T, U>(((Self.LeftValue) throws -> T), ((Self.RightValue) throws -> U)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/collapse(_:_:_:)","title":"func collapse((Self.LeftValue.LeftValue) throws -> (), (Self.LeftValue.RightValue) throws -> (), (Self.RightValue) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/collapse(_:do:)","title":"func collapse<T, U>(((Self.LeftValue) throws -> T), do: @autoclosure () throws -> U) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/collapse(do:_:)","title":"func collapse<T, U>(do: @autoclosure () throws -> T, ((Self.RightValue) throws -> U)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/collapse(do:do:)","title":"func collapse<T, U>(do: @autoclosure () throws -> T, do: @autoclosure () throws -> U) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/filter(_:_:)","title":"func filter(((Self.LeftValue) throws -> Bool), ((Self.RightValue) throws -> Bool)) rethrows -> Self.EitherValue?","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/filterormap(_:_:)","title":"func filterOrMap<T>(((Self.LeftValue) throws -> Bool), ((Self.RightValue) throws -> T)) rethrows -> Either<Self.LeftValue, T>?","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/flatmap(left:right:)","title":"func flatMap<T, U>(left: ((Self.LeftValue) throws -> T?), right: ((Self.RightValue) throws -> U?)) rethrows -> Either<T, U>?","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/map(_:_:)","title":"func map<T, U>(((Self.LeftValue) throws -> T), ((Self.RightValue) throws -> U)) rethrows -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/map(left:)","title":"func map<T>(left: ((Self.LeftValue) throws -> T)) rethrows -> Either<T, Self.RightValue>","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/map(left:right:)","title":"func map<T, U>(left: ((Self.LeftValue) throws -> T), right: ((Self.RightValue) throws -> U)) rethrows -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/map(right:)","title":"func map<T>(right: ((Self.RightValue) throws -> T)) rethrows -> Either<Self.LeftValue, T>","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/mapleft(_:)","title":"func mapLeft<T>(((Self.LeftValue) throws -> T)) rethrows -> Either<T, Self.RightValue>","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/mapright(_:)","title":"func mapRight<T>(((Self.RightValue) throws -> T)) rethrows -> Either<Self.LeftValue, T>","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/reduce(_:)-1s79l","title":"func reduce(((Self.RightValue) throws -> Self.LeftValue)) rethrows -> Self.LeftValue","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/reduce(_:)-86ii","title":"func reduce(((Self.LeftValue) throws -> Self.RightValue)) rethrows -> Self.RightValue","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/reduce(_:_:)-1x383","title":"func reduce<T>(((Self.LeftValue) throws -> T), @autoclosure () throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/reduce(_:_:)-3ifqa","title":"func reduce<T>(@autoclosure () throws -> T, ((Self.RightValue) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/reduce(_:_:)-874va","title":"func reduce<T>(((Self.LeftValue) throws -> T), ((Self.RightValue) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/reduce(_:_:)-9w2wa","title":"func reduce<T>(@autoclosure () throws -> T, @autoclosure () throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/reduce(_:_:_:)","title":"func reduce<T>(((Self.LeftValue.LeftValue) throws -> T), ((Self.LeftValue.RightValue) throws -> T), ((Self.RightValue) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/reduce(left:right:)","title":"func reduce<T>(left: ((Self.LeftValue) throws -> T), right: ((Self.RightValue) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/eithervalueconvertible\/eithervalue-swift.typealias","title":"EitherValueConvertible.EitherValue","type":"typealias"}],"path":"\/documentation\/diagnostics\/eithervalueconvertible","title":"EitherValueConvertible","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/elementremoveabledestructivelymutablesequence\/remove(_:)","title":"func remove(Self.Element) -> Self.Element?","type":"method"}],"path":"\/documentation\/diagnostics\/elementremoveabledestructivelymutablesequence","title":"ElementRemoveableDestructivelyMutableSequence","type":"protocol"},{"path":"\/documentation\/diagnostics\/errorclassificationprotocol","title":"ErrorClassificationProtocol","type":"protocol"},{"path":"\/documentation\/diagnostics\/exclusiverangeprotocol","title":"ExclusiveRangeProtocol","type":"protocol"},{"path":"\/documentation\/diagnostics\/expressiblebynumericliteral","title":"ExpressibleByNumericLiteral","type":"protocol"},{"path":"\/documentation\/diagnostics\/extensiblecollection","title":"ExtensibleCollection","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/extensiblerangereplaceablecollection\/+(_:_:)-5vdko","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/extensiblerangereplaceablecollection\/+(_:_:)-65h1i","title":"static func + (Self, Self.Element) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/extensiblerangereplaceablecollection\/+(_:_:)-67r27","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/extensiblerangereplaceablecollection\/+(_:_:)-728f2","title":"static func + <S>(S, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/extensiblerangereplaceablecollection\/+(_:_:)-8f1yb","title":"static func + (Self.Element, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/extensiblerangereplaceablecollection\/+=(_:_:)-3d63p","title":"static func += <S>(inout Self, S)","type":"op"},{"path":"\/documentation\/diagnostics\/extensiblerangereplaceablecollection\/+=(_:_:)-4pq0s","title":"static func += (inout Self, Self.Element)","type":"op"},{"path":"\/documentation\/diagnostics\/extensiblerangereplaceablecollection\/+=(_:_:)-8oly","title":"static func += <S>(inout Self, S)","type":"op"}],"path":"\/documentation\/diagnostics\/extensiblerangereplaceablecollection","title":"ExtensibleRangeReplaceableCollection","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/+(_:_:)-20605","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/+(_:_:)-3f34l","title":"static func + (Self.Element, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/+(_:_:)-3m5b9","title":"static func + (Self, Self.Element) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/+(_:_:)-4vyx1","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/+(_:_:)-9bemb","title":"static func + <S>(S, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/+=(_:_:)-644w4","title":"static func += <S>(inout Self, S)","type":"op"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/+=(_:_:)-7hfu0","title":"static func += (inout Self, Self.Element)","type":"op"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/+=(_:_:)-yp2i","title":"static func += <S>(inout Self, S)","type":"op"},{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/elementappendresult","title":"ElementAppendResult","type":"associatedtype"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/elementinsertresult","title":"ElementInsertResult","type":"associatedtype"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/elementsappendresult","title":"ElementsAppendResult","type":"associatedtype"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/elementsinsertresult","title":"ElementsInsertResult","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/append(_:)","title":"func append(Self.Element) -> Self.ElementAppendResult","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/extensiblesequence\/append(contentsof:)-8ua4d","title":"func append<S>(contentsOf: S)","type":"method"}],"title":"ExtensibleSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/extensiblesequence\/append(contentsof:)-2rpbe","title":"func append<C>(contentsOf: C) -> Self.ElementsAppendResult","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/extensiblesequence\/append(contentsof:)-8ua4d","title":"func append<S>(contentsOf: S)","type":"method"}],"title":"ExtensibleSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/extensiblesequence\/append(contentsof:)-4j99u","title":"func append<C>(contentsOf: C) -> Self.ElementsAppendResult","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/extensiblesequence\/append(contentsof:)-8ua4d","title":"func append<S>(contentsOf: S)","type":"method"}],"title":"ExtensibleSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/extensiblesequence\/append(contentsof:)-5emtc","title":"func append<S>(contentsOf: S) -> Self.ElementsAppendResult","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/extensiblesequence\/append(contentsof:)-8ua4d","title":"func append<S>(contentsOf: S)","type":"method"}],"title":"ExtensibleSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/extensiblesequence\/append(contentsof:)-81su","title":"func append<C>(contentsOf: C) -> Self.ElementsAppendResult","type":"method"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/appending(_:)-21a0o","title":"func appending(Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/appending(_:)-8a2gl","title":"func appending(Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/appending(contentsof:)-8va22","title":"func appending<S>(contentsOf: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/appending(contentsof:)-9s4kv","title":"func appending<S>(contentsOf: S) -> Self","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/extensiblesequence\/insert(_:)-20n9t","title":"func insert(Self.Element)","type":"method"}],"title":"ExtensibleSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/extensiblesequence\/insert(_:)-7vplm","title":"func insert(Self.Element) -> Self.ElementInsertResult","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/extensiblesequence\/insert(contentsof:)-7qih5","title":"func insert<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/insert(contentsof:)-6jod5","title":"func insert<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/insert(contentsof:)-8mqgi","title":"func insert<S>(contentsOf: S)","type":"method"}],"title":"ExtensibleSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/extensiblesequence\/insert(contentsof:)-1k0eb","title":"func insert<C>(contentsOf: C) -> Self.ElementsInsertResult","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/extensiblesequence\/insert(contentsof:)-8mqgi","title":"func insert<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/insert(contentsof:)-7qih5","title":"func insert<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/insert(contentsof:)-6jod5","title":"func insert<C>(contentsOf: C)","type":"method"}],"title":"ExtensibleSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/extensiblesequence\/insert(contentsof:)-35jua","title":"func insert<S>(contentsOf: S) -> Self.ElementsInsertResult","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/extensiblesequence\/insert(contentsof:)-7qih5","title":"func insert<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/insert(contentsof:)-6jod5","title":"func insert<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/insert(contentsof:)-8mqgi","title":"func insert<S>(contentsOf: S)","type":"method"}],"title":"ExtensibleSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/extensiblesequence\/insert(contentsof:)-4mvpc","title":"func insert<C>(contentsOf: C) -> Self.ElementsInsertResult","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/extensiblesequence\/insert(contentsof:)-8mqgi","title":"func insert<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/insert(contentsof:)-7qih5","title":"func insert<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/insert(contentsof:)-6jod5","title":"func insert<C>(contentsOf: C)","type":"method"}],"title":"ExtensibleSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/extensiblesequence\/insert(contentsof:)-6lm0h","title":"func insert<C>(contentsOf: C) -> Self.ElementsInsertResult","type":"method"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/inserting(_:)-5knub","title":"func inserting(Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/inserting(_:)-69ug0","title":"func inserting(Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/inserting(contentsof:)-129vr","title":"func inserting<S>(contentsOf: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/extensiblesequence\/inserting(contentsof:)-7ff11","title":"func inserting<S>(contentsOf: S) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/extensiblesequence","title":"ExtensibleSequence","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/extensiblesetprotocol\/union(_:)-2nj3t","title":"func union(Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/extensiblesetprotocol\/union(_:)-3mmad","title":"func union<S>(S) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/extensiblesetprotocol","title":"ExtensibleSetProtocol","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/filestream\/filestream","title":"var fileStream: UnsafeMutablePointer<FILE>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/filestream\/flush()","title":"func flush() -> CInt","type":"method"},{"path":"\/documentation\/diagnostics\/filestream\/next()","title":"func next() -> String?","type":"method"},{"path":"\/documentation\/diagnostics\/filestream\/print(_:separator:terminator:)","title":"func print(Any..., separator: String, terminator: String) -> CInt","type":"method"},{"path":"\/documentation\/diagnostics\/filestream\/readall(close:)","title":"func readAll(close: Bool) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/filestream\/readline(strippingnewline:)","title":"func readLine(strippingNewline: Bool) -> String?","type":"method"},{"path":"\/documentation\/diagnostics\/filestream\/write(data:)","title":"func write(data: Data) -> Int","type":"method"}],"path":"\/documentation\/diagnostics\/filestream","title":"FILEStream","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/failablewrapper\/init(_:)","title":"init?(Self.Value)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/failablewrapper\/init(uncheckedvalue:)-5q0cw","title":"init(uncheckedValue: Self.Value)","type":"init"}],"title":"FailableWrapper Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/failablewrapper\/init(uncheckedvalue:)-g958","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/failablewrapper","title":"FailableWrapper","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-hv5g","title":"init(Decimal)","type":"init"},{"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-4nch7","title":"init(CGFloat)","type":"init"},{"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-63etk","title":"init(NSDecimalNumber)","type":"init"}],"title":"FloatingPointInitiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-10m9d","title":"init(Float)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-63etk","title":"init(NSDecimalNumber)","type":"init"},{"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-hv5g","title":"init(Decimal)","type":"init"},{"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-4nch7","title":"init(CGFloat)","type":"init"}],"title":"FloatingPointInitiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-1loji","title":"init(NSNumber)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-63etk","title":"init(NSDecimalNumber)","type":"init"},{"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-hv5g","title":"init(Decimal)","type":"init"},{"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-4nch7","title":"init(CGFloat)","type":"init"}],"title":"FloatingPointInitiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-3bshm","title":"init(CGFloat)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-hv5g","title":"init(Decimal)","type":"init"},{"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-4nch7","title":"init(CGFloat)","type":"init"},{"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-63etk","title":"init(NSDecimalNumber)","type":"init"}],"title":"FloatingPointInitiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-3vn5v","title":"init(NSDecimalNumber)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-63etk","title":"init(NSDecimalNumber)","type":"init"},{"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-4nch7","title":"init(CGFloat)","type":"init"},{"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-hv5g","title":"init(Decimal)","type":"init"}],"title":"FloatingPointInitiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-8u6bl","title":"init(Double)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-4nch7","title":"init(CGFloat)","type":"init"},{"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-hv5g","title":"init(Decimal)","type":"init"},{"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-63etk","title":"init(NSDecimalNumber)","type":"init"}],"title":"FloatingPointInitiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(_:)-8x16w","title":"init(Decimal)","type":"init"},{"path":"\/documentation\/diagnostics\/floatingpointinitiable\/init(floatliteral:)","title":"init(floatLiteral: Float)","type":"init"}],"path":"\/documentation\/diagnostics\/floatingpointinitiable","title":"FloatingPointInitiable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/forwardindex\/distance","title":"Distance","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/forwardindex\/successor()","title":"func successor() -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/forwardindex","title":"ForwardIndex","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/functioninitiable\/initiatingfunctionparameters","title":"InitiatingFunctionParameters","type":"associatedtype"},{"path":"\/documentation\/diagnostics\/functioninitiable\/initiatingfunctionresult","title":"InitiatingFunctionResult","type":"associatedtype"},{"title":"Initializers","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/functioninitiable\/init(_:)-6szdv","title":"init(((Self.InitiatingFunctionParameters) -> Self.InitiatingFunctionResult))","type":"init"}],"title":"FunctionInitiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/functioninitiable\/init(_:)-6tbqt","title":"init(((Self.InitiatingFunctionParameters) -> Self.InitiatingFunctionResult))","type":"init"}],"path":"\/documentation\/diagnostics\/functioninitiable","title":"FunctionInitiable","type":"protocol"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashequatable\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/hashequatable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/hashequatable","title":"HashEquatable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionarykey\/domain","title":"Domain","type":"associatedtype"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionarykey\/value","title":"Value","type":"associatedtype"}],"path":"\/documentation\/diagnostics\/heterogeneousdictionarykey","title":"HeterogeneousDictionaryKey","type":"protocol"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionaryprotocol","title":"HeterogeneousDictionaryProtocol","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarraytype\/id","title":"ID","type":"associatedtype"}],"path":"\/documentation\/diagnostics\/identifierindexingarraytype","title":"IdentifierIndexingArrayType","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/initiable\/init()-17fab","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/initiable\/init()-47d9k","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/initiable\/init()-9wkna","title":"init()","type":"init"}],"title":"Initiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/initiable\/init()-6bkk7","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/initiable","title":"Initiable","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/init(_:)-13p51","title":"init<BP>(BP)","type":"init"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/init(_:)-1hl9n","title":"init<BP>(BP)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/init(start:count:)-6uict","title":"init<P, N>(start: P?, count: N)","type":"init"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/init(start:count:)-1yasu","title":"init<P, N>(start: P?, count: N)","type":"init"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/init(start:count:)-3dwxp","title":"init<P>(start: P?, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/init(start:count:)-3jmb0","title":"init<P, N>(start: P?, count: N)","type":"init"}],"title":"InitiableBufferPointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/initiablebufferpointer\/init(start:count:)-9rxdx","title":"init(start: Self.BaseAddressPointer?, count: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/immutablerepresentation","title":"var immutableRepresentation: Self.ImmutableRepresentation","type":"property"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/mutablerepresentation","title":"var mutableRepresentation: Self.MutableRepresentation","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/allocate(capacity:)-8cf2i","title":"static func allocate<N>(capacity: N) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/allocate(capacity:)-5ifo4","title":"static func allocate(capacity: Int) -> Self","type":"method"}],"title":"InitiableBufferPointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/initiablebufferpointer\/allocate(capacity:)-5u4t2","title":"static func allocate(capacity: Int) -> Self","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:)-6e4iz","title":"static func initializing<C>(from: C) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:)-44tm8","title":"static func initializing<S>(from: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:)-6z01c","title":"static func initializing<BPI>(from: BPI) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:)-1hohk","title":"static func initializing<BPI>(from: BPI) -> Self","type":"method"}],"title":"InitiableBufferPointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:)-212fe","title":"static func initializing<C>(from: C) -> Self","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:)-44tm8","title":"static func initializing<S>(from: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:)-6e4iz","title":"static func initializing<C>(from: C) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:)-6z01c","title":"static func initializing<BPI>(from: BPI) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:)-1hohk","title":"static func initializing<BPI>(from: BPI) -> Self","type":"method"}],"title":"InitiableBufferPointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:)-6hyxn","title":"static func initializing<S>(from: S) -> Self","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:count:)-4gu1g","title":"static func initializing(from: Self.BaseAddressPointer, count: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:count:)-9ww13","title":"static func initializing<S>(from: S, count: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:count:)-6ikxh","title":"static func initializing<C>(from: C, count: Int) -> Self","type":"method"}],"title":"InitiableBufferPointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:count:)-1r7o2","title":"static func initializing<C>(from: C, count: Int) -> Self","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:count:)-4gu1g","title":"static func initializing(from: Self.BaseAddressPointer, count: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:count:)-9ww13","title":"static func initializing<S>(from: S, count: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:count:)-6ikxh","title":"static func initializing<C>(from: C, count: Int) -> Self","type":"method"}],"title":"InitiableBufferPointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:count:)-2r02u","title":"static func initializing<S>(from: S, count: Int) -> Self","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:count:)-4gu1g","title":"static func initializing(from: Self.BaseAddressPointer, count: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:count:)-9ww13","title":"static func initializing<S>(from: S, count: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:count:)-6ikxh","title":"static func initializing<C>(from: C, count: Int) -> Self","type":"method"}],"title":"InitiableBufferPointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/initiablebufferpointer\/initializing(from:count:)-9clyj","title":"static func initializing(from: Self.BaseAddressPointer, count: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/initiablebufferpointer\/to(assuminglayoutcompatible:)","title":"static func to<T>(assumingLayoutCompatible: inout T) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/initiablebufferpointer","title":"InitiableBufferPointer","type":"protocol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/initiablemutablerawbufferpointer\/allocate(bytecount:alignment:)","title":"static func allocate(byteCount: Int, alignment: Int) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/initiablemutablerawbufferpointer","title":"InitiableMutableRawBufferPointer","type":"protocol"},{"path":"\/documentation\/diagnostics\/integerinitiable","title":"IntegerInitiable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/joinablecollection\/jointsequencetype","title":"JointSequenceType","type":"associatedtype"}],"path":"\/documentation\/diagnostics\/joinablecollection","title":"JoinableCollection","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/joinablesequence\/jointsequencetype","title":"JointSequenceType","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/joinablesequence\/join(_:)-8nd4","title":"func join(Self) -> Self.JointSequenceType","type":"method"},{"path":"\/documentation\/diagnostics\/joinablesequence\/join(_:)-3972b","title":"func join(Self) -> Self.JointSequenceType","type":"method"}],"title":"JoinableSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/joinablesequence\/join(_:)-6ospv","title":"func join(Self) -> Self.JointSequenceType","type":"method"}],"path":"\/documentation\/diagnostics\/joinablesequence","title":"JoinableSequence","type":"protocol"},{"path":"\/documentation\/diagnostics\/keyexposingmutabledictionaryprotocol","title":"KeyExposingMutableDictionaryProtocol","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/keyedvalues\/key","title":"Key","type":"associatedtype"},{"path":"\/documentation\/diagnostics\/keyedvalues\/value","title":"Value","type":"associatedtype"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/keyedvalues\/init(uniquekeyswithvalues:)","title":"init(uniqueKeysWithValues: some KeyedValues<Self.Key, Self.Value>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/keyedvalues\/unorderedmapvalues(_:)","title":"func unorderedMapValues<T>((Self.Value) throws -> T) rethrows -> Dictionary<Self.Key, T>","type":"method"}],"path":"\/documentation\/diagnostics\/keyedvalues","title":"KeyedValues","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/keyedvaluesofconstructible\/init(from:)","title":"init(from: KeyedValuesOf<Self>) throws","type":"init"}],"path":"\/documentation\/diagnostics\/keyedvaluesofconstructible","title":"KeyedValuesOfConstructible","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/keysexposingdictionaryprotocol\/dictionarykeysandvaluessequence","title":"DictionaryKeysAndValuesSequence","type":"associatedtype"},{"path":"\/documentation\/diagnostics\/keysexposingdictionaryprotocol\/dictionarykeyssequence","title":"DictionaryKeysSequence","type":"associatedtype"},{"path":"\/documentation\/diagnostics\/keysexposingdictionaryprotocol\/dictionaryvaluessequence","title":"DictionaryValuesSequence","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/keysexposingdictionaryprotocol\/keys-wskh","title":"var keys: AnySequence<Self.DictionaryKey>","type":"property"}],"title":"KeysExposingDictionaryProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/keysexposingdictionaryprotocol\/keys-8awt0","title":"var keys: Self.DictionaryKeysSequence","type":"property"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/keysexposingdictionaryprotocol\/keysandvalues-40u14","title":"var keysAndValues: AnySequence<(key: Self.DictionaryKey, value: Self.DictionaryValue)>","type":"property"},{"path":"\/documentation\/diagnostics\/keysexposingdictionaryprotocol\/keysandvalues-4ec8w","title":"var keysAndValues: AnySequence<(key: Self.DictionaryKey, value: Self.DictionaryValue)>","type":"property"}],"title":"KeysExposingDictionaryProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/keysexposingdictionaryprotocol\/keysandvalues-8epkb","title":"var keysAndValues: Self.DictionaryKeysAndValuesSequence","type":"property"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/keysexposingdictionaryprotocol\/values-4po6n","title":"var values: AnySequence<Self.DictionaryValue>","type":"property"},{"path":"\/documentation\/diagnostics\/keysexposingdictionaryprotocol\/values-8ubul","title":"var values: AnySequence<Self.DictionaryValue>","type":"property"}],"title":"KeysExposingDictionaryProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/keysexposingdictionaryprotocol\/values-2kcgz","title":"var values: Self.DictionaryValuesSequence","type":"property"}],"path":"\/documentation\/diagnostics\/keysexposingdictionaryprotocol","title":"KeysExposingDictionaryProtocol","type":"protocol"},{"path":"\/documentation\/diagnostics\/logentryprotocol","title":"LogEntryProtocol","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/loglevelprotocol\/debug","title":"static var debug: Self","type":"property"},{"path":"\/documentation\/diagnostics\/loglevelprotocol\/error","title":"static var error: Self","type":"property"}],"path":"\/documentation\/diagnostics\/loglevelprotocol","title":"LogLevelProtocol","type":"protocol"},{"path":"\/documentation\/diagnostics\/logmessageprotocol","title":"LogMessageProtocol","type":"protocol"},{"path":"\/documentation\/diagnostics\/logscope","title":"LogScope","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/logstoreprotocol\/logentries","title":"LogEntries","type":"associatedtype"},{"path":"\/documentation\/diagnostics\/logstoreprotocol\/logentry","title":"LogEntry","type":"associatedtype"},{"path":"\/documentation\/diagnostics\/logstoreprotocol\/logenumeratoroptions","title":"LogEnumeratorOptions","type":"associatedtype"},{"path":"\/documentation\/diagnostics\/logstoreprotocol\/logposition","title":"LogPosition","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/logstoreprotocol\/getentries(with:at:matching:)","title":"func getEntries(with: LogEnumeratorOptions, at: LogPosition?, matching: NSPredicate?) throws -> LogEntries","type":"method"}],"path":"\/documentation\/diagnostics\/logstoreprotocol","title":"LogStoreProtocol","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/loggerprotocol\/loglevel","title":"LogLevel","type":"associatedtype"},{"path":"\/documentation\/diagnostics\/loggerprotocol\/logmessage","title":"LogMessage","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/loggerprotocol\/debug(_:metadata:file:function:line:)","title":"func debug(@autoclosure () -> String, metadata: [String : Any]?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/diagnostics\/loggerprotocol\/error(_:metadata:file:function:line:)-35na6","title":"func error(@autoclosure () -> String, metadata: [String : Any]?, file: String, function: String, line: UInt) -> any Swift.Error","type":"method"},{"path":"\/documentation\/diagnostics\/loggerprotocol\/error(_:metadata:file:function:line:)-tfxz","title":"func error(@autoclosure () -> Error, metadata: [String : Any]?, file: String, function: String, line: UInt) -> any Swift.Error","type":"method"},{"path":"\/documentation\/diagnostics\/loggerprotocol\/info(_:metadata:file:function:line:)","title":"func info(@autoclosure () -> String, metadata: [String : Any]?, file: String, function: String, line: UInt)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/loggerprotocol\/log(level:_:metadata:file:function:line:)-7kv28","title":"func log(level: LogLevel, @autoclosure () -> LogMessage, metadata: @autoclosure () -> [String : Any]?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/diagnostics\/loggerprotocol\/log(level:_:metadata:file:function:line:)-2p0p5","title":"func log(level: LogLevel, @autoclosure () -> String, metadata: @autoclosure () -> [String : Any]?, file: String, function: String, line: UInt)","type":"method"}],"title":"LoggerProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/loggerprotocol\/log(level:_:metadata:file:function:line:)-7gbrh","title":"func log(level: LogLevel, @autoclosure () -> LogMessage, metadata: @autoclosure () -> [String : Any]?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/diagnostics\/loggerprotocol\/warning(_:metadata:file:function:line:)-5eqzu","title":"func warning(@autoclosure () -> String, metadata: [String : Any]?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/diagnostics\/loggerprotocol\/warning(_:metadata:file:function:line:)-fl9p","title":"func warning(@autoclosure () -> Error, metadata: [String : Any]?, file: String, function: String, line: UInt)","type":"method"}],"path":"\/documentation\/diagnostics\/loggerprotocol","title":"LoggerProtocol","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/logging\/logger-17p6v","title":"var logger: PassthroughLogger","type":"property"},{"path":"\/documentation\/diagnostics\/logging\/logger-9qmpz","title":"static var logger: PassthroughLogger","type":"property"}],"title":"Logging Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/logging\/logger-37t4a","title":"var logger: PassthroughLogger","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/logging\/logger-9qmpz","title":"static var logger: PassthroughLogger","type":"property"},{"path":"\/documentation\/diagnostics\/logging\/logger-17p6v","title":"var logger: PassthroughLogger","type":"property"}],"title":"Logging Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/logging\/logger-7x2bu","title":"static var logger: PassthroughLogger","type":"property"}],"path":"\/documentation\/diagnostics\/logging","title":"Logging","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/logicalconjunctionoperatable\/&&(_:_:)","title":"static func && (Self, Self) -> Self","type":"op"}],"path":"\/documentation\/diagnostics\/logicalconjunctionoperatable","title":"LogicalConjunctionOperatable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mergeoperatable\/mergeinplace(with:)","title":"func mergeInPlace(with: Self)","type":"method"},{"path":"\/documentation\/diagnostics\/mergeoperatable\/merging(_:)","title":"func merging(Self) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/mergeoperatable","title":"MergeOperatable","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/multiplicationoperatable\/*(_:_:)","title":"static func * (Self, Self) -> Self","type":"op"}],"path":"\/documentation\/diagnostics\/multiplicationoperatable","title":"MultiplicationOperatable","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutableadditionoperatable\/+=(_:_:)","title":"static func += (inout Self, Self)","type":"op"}],"path":"\/documentation\/diagnostics\/mutableadditionoperatable","title":"MutableAdditionOperatable","type":"protocol"},{"path":"\/documentation\/diagnostics\/mutablearithmeticoperatable","title":"MutableArithmeticOperatable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablebufferpointer\/assign(from:)","title":"func assign<BP>(from: BP)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutablebufferpointer\/assumingmemorybound(to:)-7vsrb","title":"func assumingMemoryBound<T>(to: T.Type) -> UnsafeMutableBufferPointer<T>","type":"method"}],"title":"MutableBufferPointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutablebufferpointer\/assumingmemorybound(to:)-2wirc","title":"func assumingMemoryBound<T>(to: T.Type) -> UnsafeMutableBufferPointer<T>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutablebufferpointer\/deallocate()-3f2sk","title":"func deallocate()","type":"method"}],"title":"MutableBufferPointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutablebufferpointer\/deallocate()-ligw","title":"func deallocate()","type":"method"},{"path":"\/documentation\/diagnostics\/mutablebufferpointer\/deinitialize()","title":"func deinitialize()","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutablebufferpointer\/deinitialize(count:)-5ct8m","title":"func deinitialize(count: Int)","type":"method"}],"title":"MutableBufferPointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutablebufferpointer\/deinitialize(count:)-1lyes","title":"func deinitialize(count: Int)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutablebufferpointer\/initialize(from:)-8h9mj","title":"func initialize<S>(from: S) -> (S.Iterator, Self.Index)","type":"method"}],"title":"MutableBufferPointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutablebufferpointer\/initialize(from:)-1rsfw","title":"func initialize<BC>(from: BC) -> (BC.Iterator, Self.Index)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutablebufferpointer\/initialize(from:)-8h9mj","title":"func initialize<S>(from: S) -> (S.Iterator, Self.Index)","type":"method"}],"title":"MutableBufferPointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutablebufferpointer\/initialize(from:)-8x5vr","title":"func initialize<C>(from: C) -> (C.Iterator, Self.Index)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutablebufferpointer\/initialize(from:)-8h9mj","title":"func initialize<S>(from: S) -> (S.Iterator, Self.Index)","type":"method"}],"title":"MutableBufferPointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutablebufferpointer\/initialize(from:)-9975w","title":"func initialize<RAC>(from: RAC) -> (RAC.Iterator, Self.Index)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutablebufferpointer\/initialize(from:)-8h9mj","title":"func initialize<S>(from: S) -> (S.Iterator, Self.Index)","type":"method"}],"title":"MutableBufferPointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutablebufferpointer\/initialize(from:)-csjr","title":"func initialize<S>(from: S) -> (S.Iterator, Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/mutablebufferpointer\/update(from:)","title":"func update<P>(from: P)","type":"method"},{"path":"\/documentation\/diagnostics\/mutablebufferpointer\/update(from:count:)-4jke3","title":"func update<BP>(from: BP, count: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/mutablebufferpointer\/update(from:count:)-6ubgs","title":"func update<P>(from: P, count: Int)","type":"method"}],"path":"\/documentation\/diagnostics\/mutablebufferpointer","title":"MutableBufferPointer","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablecontiguousstorage\/withmutablebufferpointer(_:)","title":"func withMutableBufferPointer<BP, T>(((BP) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/mutablecontiguousstorage\/withunsafemutablebufferpointer(_:)","title":"func withUnsafeMutableBufferPointer<T>(((UnsafeMutableBufferPointer<Self.Element>) throws -> T)) rethrows -> T","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutablecontiguousstorage\/withunsafemutablebytes(_:)-6v4sz","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"}],"title":"MutableContiguousStorage Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutablecontiguousstorage\/withunsafemutablebytes(_:)-6lpwn","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/mutablecontiguousstorage","title":"MutableContiguousStorage","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutabledictionaryprotocol\/removevalue(forkey:)-2nuqe","title":"func removeValue(forKey: any Any.Type)","type":"method"},{"path":"\/documentation\/diagnostics\/mutabledictionaryprotocol\/removevalue(forkey:)-3lygr","title":"func removeValue(forKey: Self.DictionaryKey) -> Self.DictionaryValue?","type":"method"}],"title":"MutableDictionaryProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutabledictionaryprotocol\/removevalue(forkey:)-dlgj","title":"func removeValue(forKey: Self.DictionaryKey) -> Self.DictionaryValue?","type":"method"},{"path":"\/documentation\/diagnostics\/mutabledictionaryprotocol\/removevalues(forkeys:)","title":"func removeValues(forKeys: some Sequence<Self.DictionaryKey>)","type":"method"},{"path":"\/documentation\/diagnostics\/mutabledictionaryprotocol\/removingvalue(forkey:)","title":"func removingValue(forKey: Self.DictionaryKey) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/mutabledictionaryprotocol\/removingvalues(forkeys:)","title":"func removingValues(forKeys: some Sequence<Self.DictionaryKey>) -> Self","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutabledictionaryprotocol\/setvalue(_:forkey:)-7ka4u","title":"func setValue(Self.DictionaryValue, forKey: Self.DictionaryKey)","type":"method"}],"title":"MutableDictionaryProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutabledictionaryprotocol\/setvalue(_:forkey:)-59x3q","title":"func setValue(Self.DictionaryValue, forKey: Self.DictionaryKey)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutabledictionaryprotocol\/updatevalue(_:forkey:)-l1mp","title":"func updateValue(Self.DictionaryValue, forKey: Self.DictionaryKey) -> Self.DictionaryValue?","type":"method"}],"title":"MutableDictionaryProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutabledictionaryprotocol\/updatevalue(_:forkey:)-bh5t","title":"func updateValue(Self.DictionaryValue, forKey: Self.DictionaryKey) -> Self.DictionaryValue?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/dictionaryprotocol\/subscript(_:)-1rfns","title":"subscript(Self.DictionaryKey?) -> Self.DictionaryValue?","type":"subscript"},{"path":"\/documentation\/diagnostics\/dictionaryprotocol\/subscript(_:)-8q2qz","title":"subscript(any Any.Type) -> Self.DictionaryValue?","type":"subscript"}],"title":"DictionaryProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutabledictionaryprotocol\/subscript(_:)","title":"subscript(Self.DictionaryKey) -> Self.DictionaryValue?","type":"subscript"},{"path":"\/documentation\/diagnostics\/mutabledictionaryprotocol\/subscript(_:default:)","title":"subscript(Self.DictionaryKey, default _: @autoclosure () -> Self.DictionaryValue) -> Self.DictionaryValue","type":"subscript"},{"path":"\/documentation\/diagnostics\/mutabledictionaryprotocol\/subscript(_:defaultinplace:)","title":"subscript(Self.DictionaryKey, defaultInPlace _: @autoclosure () -> Self.DictionaryValue) -> Self.DictionaryValue","type":"subscript"}],"path":"\/documentation\/diagnostics\/mutabledictionaryprotocol","title":"MutableDictionaryProtocol","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutabledivisionoperatable\/_=(_:_:)","title":"static func \/= (inout Self, Self)","type":"op"}],"path":"\/documentation\/diagnostics\/mutabledivisionoperatable","title":"MutableDivisionOperatable","type":"protocol"},{"path":"\/documentation\/diagnostics\/mutableeitherrepresentable","title":"MutableEitherRepresentable","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutableeithervalueconvertible\/eithervalue","title":"var eitherValue: Either<Self.LeftValue, Self.RightValue>","type":"property"},{"path":"\/documentation\/diagnostics\/mutableeithervalueconvertible\/leftvalue","title":"var leftValue: Self.LeftValue?","type":"property"},{"path":"\/documentation\/diagnostics\/mutableeithervalueconvertible\/rightvalue","title":"var rightValue: Self.RightValue?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutableeithervalueconvertible\/mapinplace(_:_:)-2yhdp","title":"func mapInPlace(((Self.LeftValue) throws -> Self.RightValue), ((Self.RightValue) throws -> Self.RightValue)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/mutableeithervalueconvertible\/mapinplace(_:_:)-3e8yl","title":"func mapInPlace(((Self.LeftValue) throws -> Self.LeftValue), ((Self.RightValue) throws -> Self.LeftValue)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/mutableeithervalueconvertible\/mapinplace(_:_:)-41d1a","title":"func mapInPlace(@autoclosure () throws -> Self.RightValue, ((Self.RightValue) throws -> Self.RightValue)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/mutableeithervalueconvertible\/mapinplace(_:_:)-4p8uz","title":"func mapInPlace(((Self.LeftValue) throws -> Self.LeftValue), @autoclosure () throws -> Self.RightValue) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/mutableeithervalueconvertible\/mapinplace(_:_:)-7p736","title":"func mapInPlace(((Self.LeftValue) throws -> Self.LeftValue), @autoclosure () throws -> Self.LeftValue) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/mutableeithervalueconvertible\/mapinplace(_:_:)-9787h","title":"func mapInPlace(@autoclosure () throws -> Self.LeftValue, ((Self.RightValue) throws -> Self.RightValue)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/mutableeithervalueconvertible\/mapinplace(_:_:)-osa2","title":"func mapInPlace(((Self.LeftValue) throws -> Self.LeftValue), ((Self.RightValue) throws -> Self.RightValue)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/mutableeithervalueconvertible\/mapormutate(_:_:)-6w2rh","title":"func mapOrMutate<T, U>(@autoclosure () throws -> T, ((inout Self.RightValue) throws -> U)) rethrows -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/mutableeithervalueconvertible\/mapormutate(_:_:)-7gvia","title":"func mapOrMutate<T, U>(((Self.LeftValue) -> T), ((inout Self.RightValue) -> U)) -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/mutableeithervalueconvertible\/mutate(_:_:)","title":"func mutate<T, U>(((inout Self.LeftValue) throws -> T), ((inout Self.RightValue) throws -> U)) rethrows -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/mutableeithervalueconvertible\/mutateormap(_:_:)-4brkj","title":"func mutateOrMap<T, U>(((inout Self.LeftValue) -> T), ((Self.RightValue) -> U)) -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/mutableeithervalueconvertible\/mutateormap(_:_:)-4yxvs","title":"func mutateOrMap<T, U>(((inout Self.LeftValue) throws -> T), @autoclosure () throws -> U) rethrows -> Either<T, U>","type":"method"}],"path":"\/documentation\/diagnostics\/mutableeithervalueconvertible","title":"MutableEitherValueConvertible","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablemultiplicationoperatable\/*=(_:_:)","title":"static func *= (inout Self, Self)","type":"op"}],"path":"\/documentation\/diagnostics\/mutablemultiplicationoperatable","title":"MutableMultiplicationOperatable","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablenamed\/name","title":"var name: Self.Name","type":"property"}],"path":"\/documentation\/diagnostics\/mutablenamed","title":"MutableNamed","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutablepointer\/init(mutating:)-5pt9t","title":"init?(mutating: UnsafePointer<Self.Pointee>?)","type":"init"},{"path":"\/documentation\/diagnostics\/mutablepointer\/init(mutating:)-7o92z","title":"init(mutating: UnsafePointer<Self.Pointee>)","type":"init"}],"title":"MutablePointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutablepointer\/init(mutating:)-88j50","title":"init(mutating: UnsafePointer<Self.Pointee>)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutablepointer\/init(mutating:)-5pt9t","title":"init?(mutating: UnsafePointer<Self.Pointee>?)","type":"init"},{"path":"\/documentation\/diagnostics\/mutablepointer\/init(mutating:)-7o92z","title":"init(mutating: UnsafePointer<Self.Pointee>)","type":"init"}],"title":"MutablePointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutablepointer\/init(mutating:)-9nbpm","title":"init?(mutating: UnsafePointer<Self.Pointee>?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablepointer\/pointee","title":"var pointee: Self.Pointee","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutablepointer\/assumingmemorybound(to:)-uusp","title":"func assumingMemoryBound<T>(to: T.Type) -> UnsafeMutablePointer<T>","type":"method"}],"title":"MutablePointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutablepointer\/assumingmemorybound(to:)-21anb","title":"func assumingMemoryBound<T>(to: T.Type) -> UnsafeMutablePointer<T>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutablepointer\/deallocate()-5mf6n","title":"func deallocate()","type":"method"}],"title":"MutablePointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutablepointer\/deallocate()-6xf6k","title":"func deallocate()","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/deinitialize(capacity:)","title":"func deinitialize<N>(capacity: N) -> UnsafeMutableRawPointer","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutablepointer\/deinitialize(count:)-73p8l","title":"func deinitialize(count: Int) -> UnsafeMutableRawPointer","type":"method"}],"title":"MutablePointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutablepointer\/deinitialize(count:)-8tqbq","title":"func deinitialize(count: Self.Stride) -> UnsafeMutableRawPointer","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/deinitializefirst()","title":"func deinitializeFirst() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/initialize(from:)-1h45n","title":"func initialize<C>(from: C)","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/initialize(from:)-5g57l","title":"func initialize<S>(from: S)","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/initialize(from:)-5xw1u","title":"func initialize<BP>(from: BP)","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/initialize(from:count:)","title":"func initialize<P>(from: P, count: Self.Stride)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutablepointer\/initialize(repeating:count:)-4da0k","title":"func initialize<N>(repeating: Self.Pointee, count: N)","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/initialize(repeating:count:)-2vtrj","title":"func initialize(repeating: Self.Pointee, count: Self.Stride)","type":"method"}],"title":"MutablePointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutablepointer\/initialize(repeating:count:)-ya9j","title":"func initialize(repeating: Self.Pointee, count: Self.Stride)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutablepointer\/initialize(to:)-9y2ig","title":"func initialize(to: Self.Pointee)","type":"method"}],"title":"MutablePointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutablepointer\/initialize(to:)-7qou0","title":"func initialize(to: Self.Pointee)","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/initializing(to:)","title":"func initializing(to: Self.Pointee) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/initializing(to:count:)","title":"func initializing<N>(to: Self.Pointee, count: N) -> Self","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutablepointer\/move()-5pz0p","title":"func move() -> Self.Pointee","type":"method"}],"title":"MutablePointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutablepointer\/move()-6ja2u","title":"func move() -> Self.Pointee","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/reinitialize(to:)","title":"func reinitialize(to: Self.Pointee)","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/remove()","title":"func remove() -> Self.Pointee","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/set(pointee:at:)","title":"func set(pointee: Self.Pointee, at: Self.Stride)","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/update(from:)-2patg","title":"func update<BP>(from: BP)","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/update(from:)-6arf1","title":"func update<C>(from: C)","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/update(from:)-9gqyo","title":"func update<S>(from: S)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutablepointer\/update(from:count:)-72fea","title":"func update<P, N>(from: P, count: N)","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/update(from:count:)-8w9jl","title":"func update<P>(from: P, count: Self.Stride)","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/update(from:count:)-1adfa","title":"func update(from: UnsafePointer<Self.Pointee>, count: Self.Stride)","type":"method"}],"title":"MutablePointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutablepointer\/update(from:count:)-7lro5","title":"func update(from: UnsafePointer<Self.Pointee>, count: Self.Stride)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutablepointer\/update(repeating:count:)-gf1z","title":"func update(repeating: Self.Pointee, count: Self.Stride)","type":"method"}],"title":"MutablePointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutablepointer\/update(repeating:count:)-6gmoe","title":"func update(repeating: Self.Pointee, count: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/update(to:)","title":"func update(to: Self.Pointee)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablepointer\/allocate(capacity:)","title":"static func allocate(capacity: Self.Stride) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/initializing(from:)-1c68s","title":"static func initializing<S>(from: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/initializing(from:)-20te6","title":"static func initializing<C>(from: C) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/initializing(from:)-331zh","title":"static func initializing<BP>(from: BP) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/mutablepointer\/initializing(from:count:)","title":"static func initializing<P>(from: P, count: Self.Stride) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/mutablepointer","title":"MutablePointer","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablepropertywrapper\/wrappedvalue","title":"var wrappedValue: Self.WrappedValue","type":"property"}],"path":"\/documentation\/diagnostics\/mutablepropertywrapper","title":"MutablePropertyWrapper","type":"protocol"},{"path":"\/documentation\/diagnostics\/mutablerawbufferpointer","title":"MutableRawBufferPointer","type":"protocol"},{"path":"\/documentation\/diagnostics\/mutablerawpointer","title":"MutableRawPointer","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablerawrepresentable\/init(rawvalue:)","title":"init(rawValue: Self.RawValue)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablerawrepresentable\/rawvalue","title":"var rawValue: Self.RawValue","type":"property"}],"path":"\/documentation\/diagnostics\/mutablerawrepresentable","title":"MutableRawRepresentable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablerawvalueconvertible\/rawvalue-swift.associatedtype","title":"RawValue","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablerawvalueconvertible\/rawvalue-swift.property","title":"var rawValue: Self.RawValue","type":"property"}],"path":"\/documentation\/diagnostics\/mutablerawvalueconvertible","title":"MutableRawValueConvertible","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutablerepresentationconvertible\/immutablerepresentation-5vg8j","title":"var immutableRepresentation: Self","type":"property"}],"title":"MutableRepresentationConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutablerepresentationconvertible\/immutablerepresentation-jrug","title":"var immutableRepresentation: Self.ImmutableRepresentation","type":"property"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/mutablerepresentationconvertible\/mutablerepresentation-378vw","title":"var mutableRepresentation: Self","type":"property"}],"title":"MutableRepresentationConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/mutablerepresentationconvertible\/mutablerepresentation-6yyto","title":"var mutableRepresentation: Self.MutableRepresentation","type":"property"}],"path":"\/documentation\/diagnostics\/mutablerepresentationconvertible","title":"MutableRepresentationConvertible","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablesequence\/replace(allof:with:)","title":"func replace(allOf: Self.Element, with: Self.Element)","type":"method"}],"path":"\/documentation\/diagnostics\/mutablesequence","title":"MutableSequence","type":"protocol"},{"path":"\/documentation\/diagnostics\/mutablesetprotocol","title":"MutableSetProtocol","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablestringconvertible\/stringvalue","title":"var stringValue: String","type":"property"}],"path":"\/documentation\/diagnostics\/mutablestringconvertible","title":"MutableStringConvertible","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablesubtractionoperatable\/-=(_:_:)","title":"static func -= (inout Self, Self)","type":"op"}],"path":"\/documentation\/diagnostics\/mutablesubtractionoperatable","title":"MutableSubtractionOperatable","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablevalueconvertible\/value","title":"var value: Self.Value","type":"property"}],"path":"\/documentation\/diagnostics\/mutablevalueconvertible","title":"MutableValueConvertible","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablewrapper\/value","title":"var value: Self.Value","type":"property"}],"path":"\/documentation\/diagnostics\/mutablewrapper","title":"MutableWrapper","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nameinitiable\/init(name:)","title":"init(name: String)","type":"init"}],"path":"\/documentation\/diagnostics\/nameinitiable","title":"NameInitiable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/named\/name-swift.associatedtype","title":"Name","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/named\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/diagnostics\/named\/name-swift.property","title":"var name: Self.Name","type":"property"}],"path":"\/documentation\/diagnostics\/named","title":"Named","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nativewordsized\/bytetupletype","title":"ByteTupleType","type":"associatedtype"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nativewordsized\/init(bytetuple:)","title":"init(byteTuple: NativeByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/bytetupleconvertible\/bytetuple-1gc7s","title":"var byteTuple: NativeByteTupleType","type":"property"}],"title":"ByteTupleConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/nativewordsized\/bytetuple","title":"var byteTuple: NativeByteTupleType","type":"property"}],"path":"\/documentation\/diagnostics\/nativewordsized","title":"NativeWordSized","type":"protocol"},{"path":"\/documentation\/diagnostics\/nondestroyingbidirectionalcollection","title":"NonDestroyingBidirectionalCollection","type":"protocol"},{"path":"\/documentation\/diagnostics\/nondestroyingcollection","title":"NonDestroyingCollection","type":"protocol"},{"path":"\/documentation\/diagnostics\/nondestroyingmutablebidirectionalcollection","title":"NonDestroyingMutableBidirectionalCollection","type":"protocol"},{"path":"\/documentation\/diagnostics\/nondestroyingmutablecollection","title":"NonDestroyingMutableCollection","type":"protocol"},{"path":"\/documentation\/diagnostics\/nondestroyingmutablerandomaccesscollection","title":"NonDestroyingMutableRandomAccessCollection","type":"protocol"},{"path":"\/documentation\/diagnostics\/nondestroyingmutablesequence","title":"NonDestroyingMutableSequence","type":"protocol"},{"path":"\/documentation\/diagnostics\/nondestroyingrandomaccesscollection","title":"NonDestroyingRandomAccessCollection","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nondestroyingsequence\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/nondestroyingsequence\/nondestructivecount","title":"var nonDestructiveCount: Self.Count","type":"property"}],"path":"\/documentation\/diagnostics\/nondestroyingsequence","title":"NonDestroyingSequence","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nonemptysequence\/first","title":"var first: Self.Element","type":"property"},{"path":"\/documentation\/diagnostics\/nonemptysequence\/last","title":"var last: Self.Element","type":"property"}],"path":"\/documentation\/diagnostics\/nonemptysequence","title":"NonEmptySequence","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/number\/nativetype","title":"NativeType","type":"associatedtype"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/number\/init(unchecked:)","title":"init<N>(unchecked: N)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/number\/ceiling","title":"var ceiling: Self","type":"property"},{"path":"\/documentation\/diagnostics\/number\/floor","title":"var floor: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/number\/denormalize(_:_:)","title":"func denormalize(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/number\/interpolate(_:_:)","title":"func interpolate(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/number\/normalize(_:_:)","title":"func normalize(Self, Self) -> Self","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/number\/lossless(from:)-12ih2","title":"static func lossless<N>(from: N) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/number\/lossless(from:)-45qr","title":"static func lossless(from: AnyNumber) throws -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/number","title":"Number","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/numberconvertible\/nativefloatingpointvalue","title":"var nativeFloatingPointValue: NativeFloatingPoint","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/numberconvertible\/tobool()-1j3i1","title":"func toBool() -> Bool","type":"method"}],"title":"NumberConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/numberconvertible\/tobool()-3u1qo","title":"func toBool() -> Bool","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/numberconvertible\/tocgfloat()-43142","title":"func toCGFloat() -> CGFloat","type":"method"}],"title":"NumberConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/numberconvertible\/tocgfloat()-40kwm","title":"func toCGFloat() -> CGFloat","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/numberconvertible\/todecimal()-gszb","title":"func toDecimal() -> Decimal","type":"method"}],"title":"NumberConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/numberconvertible\/todecimal()-2aaza","title":"func toDecimal() -> Decimal","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/numberconvertible\/todouble()-8gsaj","title":"func toDouble() -> Double","type":"method"}],"title":"NumberConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/numberconvertible\/todouble()-8kys3","title":"func toDouble() -> Double","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/numberconvertible\/tofloat()-64gqk","title":"func toFloat() -> Float","type":"method"}],"title":"NumberConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/numberconvertible\/tofloat()-86wun","title":"func toFloat() -> Float","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/numberconvertible\/toint()-6e4or","title":"func toInt() -> Int","type":"method"}],"title":"NumberConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/numberconvertible\/toint()-59sdd","title":"func toInt() -> Int","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/numberconvertible\/toint16()-puet","title":"func toInt16() -> Int16","type":"method"}],"title":"NumberConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/numberconvertible\/toint16()-3tely","title":"func toInt16() -> Int16","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/numberconvertible\/toint32()-3109j","title":"func toInt32() -> Int32","type":"method"}],"title":"NumberConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/numberconvertible\/toint32()-7p61s","title":"func toInt32() -> Int32","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/numberconvertible\/toint64()-5e6oy","title":"func toInt64() -> Int64","type":"method"}],"title":"NumberConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/numberconvertible\/toint64()-25cnm","title":"func toInt64() -> Int64","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/numberconvertible\/toint8()-912r0","title":"func toInt8() -> Int8","type":"method"}],"title":"NumberConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/numberconvertible\/toint8()-rp65","title":"func toInt8() -> Int8","type":"method"},{"path":"\/documentation\/diagnostics\/numberconvertible\/tonsnumber()","title":"func toNSNumber() -> NSNumber","type":"method"},{"path":"\/documentation\/diagnostics\/numberconvertible\/tonativefloatingpointvalue()","title":"func toNativeFloatingPointValue() -> NativeFloatingPoint","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/numberconvertible\/touint()-704oi","title":"func toUInt() -> UInt","type":"method"}],"title":"NumberConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/numberconvertible\/touint()-5dl8i","title":"func toUInt() -> UInt","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/numberconvertible\/touint16()-8cak6","title":"func toUInt16() -> UInt16","type":"method"}],"title":"NumberConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/numberconvertible\/touint16()-8uvzc","title":"func toUInt16() -> UInt16","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/numberconvertible\/touint32()-nuxh","title":"func toUInt32() -> UInt32","type":"method"}],"title":"NumberConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/numberconvertible\/touint32()-7pb2g","title":"func toUInt32() -> UInt32","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/numberconvertible\/touint64()-ye3w","title":"func toUInt64() -> UInt64","type":"method"}],"title":"NumberConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/numberconvertible\/touint64()-7agj2","title":"func toUInt64() -> UInt64","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/numberconvertible\/touint8()-8qlfz","title":"func toUInt8() -> UInt8","type":"method"}],"title":"NumberConvertible Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/numberconvertible\/touint8()-31rk7","title":"func toUInt8() -> UInt8","type":"method"}],"path":"\/documentation\/diagnostics\/numberconvertible","title":"NumberConvertible","type":"protocol"},{"path":"\/documentation\/diagnostics\/numberinitiable","title":"NumberInitiable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectivecbridgeable\/bridgetoobjectivec()","title":"func bridgeToObjectiveC() throws -> Self.ObjectiveCType","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectivecbridgeable\/objectivectype","title":"ObjectiveCBridgeable.ObjectiveCType","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectivecbridgeable\/bridgefromobjectivec(_:)","title":"static func bridgeFromObjectiveC(Self.ObjectiveCType) throws -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/objectivecbridgeable","title":"ObjectiveCBridgeable","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/opaquepointerinitiable\/init(_:)-42pfm","title":"init?<P>(P?)","type":"init"}],"title":"OpaquePointerInitiable Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/diagnostics\/pointer\/init(_:)-5fjve","title":"init<P>(P)","type":"init"},{"path":"\/documentation\/diagnostics\/pointer\/init(_:)-6kl9a","title":"init<P>(P)","type":"init"}],"title":"Pointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/opaquepointerinitiable\/init(_:)-4jqqe","title":"init(OpaquePointer)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/opaquepointerinitiable\/init(_:)-42pfm","title":"init?<P>(P?)","type":"init"}],"title":"OpaquePointerInitiable Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/diagnostics\/pointer\/init(_:)-5fjve","title":"init<P>(P)","type":"init"},{"path":"\/documentation\/diagnostics\/pointer\/init(_:)-6kl9a","title":"init<P>(P)","type":"init"}],"title":"Pointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/opaquepointerinitiable\/init(_:)-4z8la","title":"init?(OpaquePointer?)","type":"init"}],"path":"\/documentation\/diagnostics\/opaquepointerinitiable","title":"OpaquePointerInitiable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionalprotocol\/wrapped","title":"Wrapped","type":"associatedtype"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionalprotocol\/init(_:)","title":"init(Self.Wrapped?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionalprotocol\/isnil","title":"var isNil: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/optionalprotocol\/isnotnil","title":"var isNotNil: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionalprotocol\/mutate(with:)","title":"func mutate<T>(with: ((inout Self.Wrapped) throws -> T)) rethrows -> T?","type":"method"}],"path":"\/documentation\/diagnostics\/optionalprotocol","title":"OptionalProtocol","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/orderedcollection\/prefix(upto:)","title":"func prefix(upTo: Self.Element) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/orderedcollection\/suffix(from:)","title":"func suffix(from: Self.Element) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/diagnostics\/orderedcollection","title":"OrderedCollection","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/parameterlesspropertywrapper\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/parameterlesspropertywrapper\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/diagnostics\/parameterlesspropertywrapper\/init(wrappedvalue:)","title":"init(wrappedValue: Self.WrappedValue)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/parameterlesspropertywrapper\/description","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/parameterlesspropertywrapper\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/parameterlesspropertywrapper\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/diagnostics\/parameterlesspropertywrapper","title":"ParameterlessPropertyWrapper","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/peekable\/peekresult","title":"PeekResult","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/peekable\/peek()","title":"func peek() -> Self.PeekResult","type":"method"}],"path":"\/documentation\/diagnostics\/peekable","title":"Peekable","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/placeholderproviding\/placeholder","title":"static var placeholder: Self","type":"property"}],"path":"\/documentation\/diagnostics\/placeholderproviding","title":"PlaceholderProviding","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pointer\/pointee","title":"Pointee","type":"associatedtype"},{"title":"Initializers","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/opaquepointerinitiable\/init(_:)-42pfm","title":"init?<P>(P?)","type":"init"}],"title":"OpaquePointerInitiable Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/diagnostics\/pointer\/init(_:)-5fjve","title":"init<P>(P)","type":"init"},{"path":"\/documentation\/diagnostics\/pointer\/init(_:)-6kl9a","title":"init<P>(P)","type":"init"}],"title":"Pointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/pointer\/init(_:)-4w49y","title":"init(UnsafeMutablePointer<Self.Pointee>)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/opaquepointerinitiable\/init(_:)-42pfm","title":"init?<P>(P?)","type":"init"}],"title":"OpaquePointerInitiable Implementations","type":"groupMarker"},{"children":[{"path":"\/documentation\/diagnostics\/pointer\/init(_:)-5fjve","title":"init<P>(P)","type":"init"},{"path":"\/documentation\/diagnostics\/pointer\/init(_:)-6kl9a","title":"init<P>(P)","type":"init"}],"title":"Pointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/pointer\/init(_:)-8msty","title":"init?(UnsafeMutablePointer<Self.Pointee>?)","type":"init"},{"path":"\/documentation\/diagnostics\/pointer\/init(bitpattern:)","title":"init<P>(bitPattern: P)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pointer\/immutablerepresentation","title":"var immutableRepresentation: Self.ImmutableRepresentation","type":"property"},{"path":"\/documentation\/diagnostics\/pointer\/mutablerawrepresentation","title":"var mutableRawRepresentation: UnsafeMutableRawPointer","type":"property"},{"path":"\/documentation\/diagnostics\/pointer\/mutablerepresentation","title":"var mutableRepresentation: Self.MutableRepresentation","type":"property"},{"path":"\/documentation\/diagnostics\/pointer\/nativewordpointerrepresentation","title":"var nativeWordPointerRepresentation: UnsafePointer<NativeWord>","type":"property"},{"path":"\/documentation\/diagnostics\/pointer\/opaquepointerrepresentation","title":"var opaquePointerRepresentation: OpaquePointer","type":"property"},{"path":"\/documentation\/diagnostics\/pointer\/rawrepresentation","title":"var rawRepresentation: UnsafeRawPointer","type":"property"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/pointer\/unsafemutablepointerrepresentation-1z95i","title":"var unsafeMutablePointerRepresentation: UnsafeMutablePointer<Self.Pointee>","type":"property"}],"title":"Pointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/pointer\/unsafemutablepointerrepresentation-wjuc","title":"var unsafeMutablePointerRepresentation: UnsafeMutablePointer<Self.Pointee>","type":"property"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/pointer\/unsafepointerrepresentation-2m85q","title":"var unsafePointerRepresentation: UnsafePointer<Self.Pointee>","type":"property"}],"title":"Pointer Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/pointer\/unsafepointerrepresentation-66t9o","title":"var unsafePointerRepresentation: UnsafePointer<Self.Pointee>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pointer\/allocate(initializingto:)","title":"static func allocate(initializingTo: Self.Pointee) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/pointer\/allocate(initializingto:count:)","title":"static func allocate<N>(initializingTo: Self.Pointee, count: N) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/pointer\/to(_:)","title":"static func to(inout Self.Pointee) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/pointer\/to(assuminglayoutcompatible:)","title":"static func to<T>(assumingLayoutCompatible: inout T) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/pointer","title":"Pointer","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/polymorphicdecodable\/decodingtypediscriminator","title":"DecodingTypeDiscriminator","type":"associatedtype"},{"title":"Type Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/polymorphicdecodable\/decodetypediscriminator(from:)-3g3fe","title":"static func decodeTypeDiscriminator(from: any Decoder) throws -> Self.DecodingTypeDiscriminator","type":"method"}],"title":"PolymorphicDecodable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/polymorphicdecodable\/decodetypediscriminator(from:)-3ix3e","title":"static func decodeTypeDiscriminator(from: any Decoder) throws -> Self.DecodingTypeDiscriminator","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/polymorphicdecodable\/resolvesubtype(for:)-5o15e","title":"static func resolveSubtype(for: Self.DecodingTypeDiscriminator) throws -> any PolymorphicDecodable.Type","type":"method"}],"title":"PolymorphicDecodable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/polymorphicdecodable\/resolvesubtype(for:)-7t5p7","title":"static func resolveSubtype(for: Self.DecodingTypeDiscriminator) throws -> any PolymorphicDecodable.Type","type":"method"}],"path":"\/documentation\/diagnostics\/polymorphicdecodable","title":"PolymorphicDecodable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/poppable\/popresult","title":"PopResult","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/poppable\/pop()","title":"func pop() -> Self.PopResult","type":"method"}],"path":"\/documentation\/diagnostics\/poppable","title":"Poppable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/propertywrapper\/wrappedvalue-swift.associatedtype","title":"WrappedValue","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/propertywrapper\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/diagnostics\/propertywrapper\/wrappedvalue-swift.property","title":"var wrappedValue: Self.WrappedValue","type":"property"}],"path":"\/documentation\/diagnostics\/propertywrapper","title":"PropertyWrapper","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/randomaccessindex\/-(_:_:)","title":"static func - (Self, Self.Stride) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/randomaccessindex\/-=(_:_:)","title":"static func -= (inout Self, Self.Stride)","type":"op"}],"path":"\/documentation\/diagnostics\/randomaccessindex","title":"RandomAccessIndex","type":"protocol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/randomnable\/random()-1nqyc","title":"static func random() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/randomnable\/random()-5bx25","title":"static func random() -> Self","type":"method"}],"title":"Randomnable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/randomnable\/random()-43law","title":"static func random() -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/randomnable","title":"Randomnable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/rangeprotocol\/bound","title":"Bound","type":"associatedtype"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/rangeprotocol\/init(_:)","title":"init(Self.Bound)","type":"init"},{"path":"\/documentation\/diagnostics\/rangeprotocol\/init(lowerbound:upperbound:)","title":"init(lowerBound: Self.Bound, upperBound: Self.Bound)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/rangeprotocol\/lowerbound","title":"var lowerBound: Self.Bound","type":"property"},{"path":"\/documentation\/diagnostics\/rangeprotocol\/upperbound","title":"var upperBound: Self.Bound","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/rangeprotocol\/clampinplace(to:)","title":"func clampInPlace(to: Self)","type":"method"},{"path":"\/documentation\/diagnostics\/rangeprotocol\/clamped(to:)","title":"func clamped(to: Self) -> Self","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/rangeprotocol\/contains(_:)-8td1a","title":"func contains(Self) -> Bool","type":"method"}],"title":"RangeProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/rangeprotocol\/contains(_:)-9boxb","title":"func contains(Range<Self.Bound>) -> Bool","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/rangeprotocol\/contains(_:)-8td1a","title":"func contains(Self) -> Bool","type":"method"}],"title":"RangeProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/rangeprotocol\/contains(_:)-9tzi5","title":"func contains(ClosedRange<Self.Bound>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/rangeprotocol\/overlaps(with:)","title":"func overlaps(with: Self) -> Bool","type":"method"}],"path":"\/documentation\/diagnostics\/rangeprotocol","title":"RangeProtocol","type":"protocol"},{"path":"\/documentation\/diagnostics\/rawbufferpointer","title":"RawBufferPointer","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/rawpointer\/advancedbystride(of:)","title":"func advancedByStride<T>(of: T.Type) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/rawpointer","title":"RawPointer","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/rawvalueconvertible\/rawvalue-swift.associatedtype","title":"RawValue","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/rawvalueconvertible\/rawvalue-swift.property","title":"var rawValue: Self.RawValue","type":"property"}],"path":"\/documentation\/diagnostics\/rawvalueconvertible","title":"RawValueConvertible","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/referencetype\/isuniquelyreferenced-3afu8","title":"var isUniquelyReferenced: Bool","type":"property"}],"title":"ReferenceType Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/referencetype\/isuniquelyreferenced-5gf0j","title":"var isUniquelyReferenced: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/referencetype","title":"ReferenceType","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/resizablecollection\/isempty","title":"var isEmpty: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/resizablecollection","title":"ResizableCollection","type":"protocol"},{"path":"\/documentation\/diagnostics\/resizablesequence","title":"ResizableSequence","type":"protocol"},{"path":"\/documentation\/diagnostics\/resizablesetprotocol","title":"ResizableSetProtocol","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/resultinitiable\/resultfailuretype","title":"ResultFailureType","type":"associatedtype"},{"path":"\/documentation\/diagnostics\/resultinitiable\/resultsuccesstype","title":"ResultSuccessType","type":"associatedtype"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/resultinitiable\/init(_:)","title":"init(Result<Self.ResultSuccessType, Self.ResultFailureType>)","type":"init"}],"path":"\/documentation\/diagnostics\/resultinitiable","title":"ResultInitiable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/scopedlogger\/scope","title":"Scope","type":"associatedtype"},{"path":"\/documentation\/diagnostics\/scopedlogger\/scopedlogger","title":"ScopedLogger","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/scopedlogger\/scoped(to:)-5e1k2","title":"func scoped<Scope>(to: Scope) throws -> ScopedLogger","type":"method"}],"title":"ScopedLogger Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/scopedlogger\/scoped(to:)-9kr8u","title":"func scoped(to: Scope) throws -> ScopedLogger","type":"method"}],"path":"\/documentation\/diagnostics\/scopedlogger","title":"ScopedLogger","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(_:)-6npyq","title":"init<C>(C)","type":"init"},{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(_:)-6rsgg","title":"init<S>(S)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(_:count:)-4pn99","title":"init<S>(S, count: Int)","type":"init"}],"title":"SequenceInitiableSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(_:count:)-3c6k","title":"init<S>(S, count: Int)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(_:count:)-4pn99","title":"init<S>(S, count: Int)","type":"init"}],"title":"SequenceInitiableSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(_:count:)-weq4","title":"init<C>(C, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(element:)-12bqi","title":"init(element: Self.Element)","type":"init"}],"title":"SequenceInitiableSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(element:)-p213","title":"init(element: Self.Element)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(iterator:)-4dybj","title":"init<I>(iterator: I)","type":"init"},{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(iterator:)-546uu","title":"init<I>(iterator: inout I)","type":"init"}],"title":"SequenceInitiableSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(iterator:)-213ot","title":"init<I>(iterator: inout I)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(iterator:)-546uu","title":"init<I>(iterator: inout I)","type":"init"},{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(iterator:)-4dybj","title":"init<I>(iterator: I)","type":"init"}],"title":"SequenceInitiableSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(iterator:)-65oc7","title":"init<I>(iterator: I)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(iterator:count:)-4n09l","title":"init<I>(iterator: I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(iterator:count:)-css0","title":"init<I>(iterator: inout I, count: Int)","type":"init"}],"title":"SequenceInitiableSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(iterator:count:)-2qih8","title":"init<I>(iterator: inout I, count: Int)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(iterator:count:)-css0","title":"init<I>(iterator: inout I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(iterator:count:)-4n09l","title":"init<I>(iterator: I, count: Int)","type":"init"}],"title":"SequenceInitiableSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(iterator:count:)-7201w","title":"init<I>(iterator: I, count: Int)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(nosequence:)-28ihe","title":"init(noSequence: ())","type":"init"}],"title":"SequenceInitiableSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(nosequence:)-9ol5w","title":"init(noSequence: ())","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(repeating:count:)-7y3mh","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(repeating:count:)-3w8ha","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(repeating:count:)-lglr","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(repeating:count:)-3m4qh","title":"init(repeating: Self.Element, count: Int)","type":"init"}],"title":"SequenceInitiableSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(repeating:count:)-104wh","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(repeating:count:)-3m4qh","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(repeating:count:)-3w8ha","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(repeating:count:)-7y3mh","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(repeating:count:)-lglr","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"}],"title":"SequenceInitiableSequence Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/init(repeating:count:)-2wkov","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequenceinitiablesequence\/prependall(_:)","title":"func prependAll<S>(Self.Element) -> S","type":"method"}],"path":"\/documentation\/diagnostics\/sequenceinitiablesequence","title":"SequenceInitiableSequence","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/sequenceinitiablesetprotocol\/intersection(_:)-9kqfl","title":"func intersection<S>(S) -> Self","type":"method"}],"title":"SequenceInitiableSetProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/sequenceinitiablesetprotocol\/intersection(_:)-3m2x1","title":"func intersection(Self) -> Self","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/sequenceinitiablesetprotocol\/intersection(_:)-9kqfl","title":"func intersection<S>(S) -> Self","type":"method"}],"title":"SequenceInitiableSetProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/sequenceinitiablesetprotocol\/intersection(_:)-5f8tj","title":"func intersection<C>(C) -> Self","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/sequenceinitiablesetprotocol\/intersection(_:)-9kqfl","title":"func intersection<S>(S) -> Self","type":"method"}],"title":"SequenceInitiableSetProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/sequenceinitiablesetprotocol\/intersection(_:)-93ukm","title":"func intersection<S>(S) -> Self","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/setprotocol\/issubset(of:)-4sw22","title":"func isSubset<S>(of: S) -> Bool","type":"method"}],"title":"SetProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/sequenceinitiablesetprotocol\/issubset(of:)-8nfep","title":"func isSubset<C>(of: C) -> Bool","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/setprotocol\/issubset(of:)-4sw22","title":"func isSubset<S>(of: S) -> Bool","type":"method"}],"title":"SetProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/sequenceinitiablesetprotocol\/issubset(of:)-hibi","title":"func isSubset<S>(of: S) -> Bool","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/setprotocol\/issuperset(of:)-5m6wg","title":"func isSuperset<S>(of: S) -> Bool","type":"method"}],"title":"SetProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/sequenceinitiablesetprotocol\/issuperset(of:)-524n0","title":"func isSuperset<S>(of: S) -> Bool","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/setprotocol\/issuperset(of:)-5m6wg","title":"func isSuperset<S>(of: S) -> Bool","type":"method"}],"title":"SetProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/sequenceinitiablesetprotocol\/issuperset(of:)-7esvd","title":"func isSuperset<C>(of: C) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequenceinitiablesetprotocol\/union(_:)-122m4","title":"func union<S>(S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/sequenceinitiablesetprotocol\/union(_:)-49tk4","title":"func union<S>(S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/sequenceinitiablesetprotocol\/union(_:)-99emd","title":"func union(Self) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/sequenceinitiablesetprotocol","title":"SequenceInitiableSetProtocol","type":"protocol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/serverloglevelprotocol\/critical","title":"static var critical: Self","type":"property"},{"path":"\/documentation\/diagnostics\/serverloglevelprotocol\/debug","title":"static var debug: Self","type":"property"},{"path":"\/documentation\/diagnostics\/serverloglevelprotocol\/error","title":"static var error: Self","type":"property"},{"path":"\/documentation\/diagnostics\/serverloglevelprotocol\/info","title":"static var info: Self","type":"property"},{"path":"\/documentation\/diagnostics\/serverloglevelprotocol\/notice","title":"static var notice: Self","type":"property"},{"path":"\/documentation\/diagnostics\/serverloglevelprotocol\/trace","title":"static var trace: Self","type":"property"},{"path":"\/documentation\/diagnostics\/serverloglevelprotocol\/warning","title":"static var warning: Self","type":"property"}],"path":"\/documentation\/diagnostics\/serverloglevelprotocol","title":"ServerLogLevelProtocol","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/setprotocol\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/setprotocol\/issubset(of:)-4sw22","title":"func isSubset<S>(of: S) -> Bool","type":"method"}],"title":"SetProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/setprotocol\/issubset(of:)-5rmet","title":"func isSubset(of: Self) -> Bool","type":"method"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/setprotocol\/issuperset(of:)-5m6wg","title":"func isSuperset<S>(of: S) -> Bool","type":"method"}],"title":"SetProtocol Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/setprotocol\/issuperset(of:)-52hx3","title":"func isSuperset(of: Self) -> Bool","type":"method"}],"path":"\/documentation\/diagnostics\/setprotocol","title":"SetProtocol","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/shouldnotbedecodedfrombool\/init(exactly:)","title":"init?(exactly: NSNumber)","type":"init"}],"path":"\/documentation\/diagnostics\/shouldnotbedecodedfrombool","title":"ShouldNotBeDecodedFromBool","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/signed\/-(_:)","title":"static func - (Self) -> Self","type":"op"}],"path":"\/documentation\/diagnostics\/signed","title":"Signed","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-6dh3z","title":"init(Int64)","type":"init"},{"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-1xnv","title":"init(Int16)","type":"init"},{"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-9ohqq","title":"init(Int32)","type":"init"},{"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-7idnc","title":"init(Int8)","type":"init"}],"title":"SignedIntegerInitiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-4mv04","title":"init(Int32)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-6dh3z","title":"init(Int64)","type":"init"},{"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-1xnv","title":"init(Int16)","type":"init"},{"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-7idnc","title":"init(Int8)","type":"init"},{"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-9ohqq","title":"init(Int32)","type":"init"}],"title":"SignedIntegerInitiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-5ek4w","title":"init(Int)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-1xnv","title":"init(Int16)","type":"init"},{"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-6dh3z","title":"init(Int64)","type":"init"},{"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-9ohqq","title":"init(Int32)","type":"init"},{"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-7idnc","title":"init(Int8)","type":"init"}],"title":"SignedIntegerInitiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-67whb","title":"init(Int8)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-6dh3z","title":"init(Int64)","type":"init"},{"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-7idnc","title":"init(Int8)","type":"init"},{"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-9ohqq","title":"init(Int32)","type":"init"},{"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-1xnv","title":"init(Int16)","type":"init"}],"title":"SignedIntegerInitiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-8e1x0","title":"init(Int16)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-6dh3z","title":"init(Int64)","type":"init"},{"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-9ohqq","title":"init(Int32)","type":"init"},{"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-1xnv","title":"init(Int16)","type":"init"},{"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-7idnc","title":"init(Int8)","type":"init"}],"title":"SignedIntegerInitiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/signedintegerinitiable\/init(_:)-992ug","title":"init(Int64)","type":"init"}],"path":"\/documentation\/diagnostics\/signedintegerinitiable","title":"SignedIntegerInitiable","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/signedorunsigned\/absolutevalue-7utgj","title":"var absoluteValue: Self","type":"property"},{"path":"\/documentation\/diagnostics\/signedorunsigned\/absolutevalue-7yqg4","title":"var absoluteValue: Self","type":"property"}],"title":"SignedOrUnsigned Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/signedorunsigned\/absolutevalue-3kd5f","title":"var absoluteValue: Self","type":"property"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/signedorunsigned\/isnegative-5uv0i","title":"var isNegative: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/signedorunsigned\/isnegative-6ongp","title":"var isNegative: Bool","type":"property"}],"title":"SignedOrUnsigned Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/signedorunsigned\/isnegative-4abn7","title":"var isNegative: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/signedorunsigned\/canbesignminus-6o49t","title":"static var canBeSignMinus: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/signedorunsigned\/canbesignminus-1uwxh","title":"static var canBeSignMinus: Bool","type":"property"}],"title":"SignedOrUnsigned Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/signedorunsigned\/canbesignminus-1z7k","title":"static var canBeSignMinus: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/signedorunsigned","title":"SignedOrUnsigned","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sourcecodelocationinitiable\/init(_:)","title":"init(SourceCodeLocation)","type":"init"},{"path":"\/documentation\/diagnostics\/sourcecodelocationinitiable\/init(file:fileid:function:line:column:)-25d7b","title":"init(file: String, fileID: String?, function: String, line: UInt, column: UInt?)","type":"init"},{"path":"\/documentation\/diagnostics\/sourcecodelocationinitiable\/init(file:fileid:function:line:column:)-8ovws","title":"init(file: StaticString, fileID: StaticString?, function: StaticString, line: UInt, column: UInt?)","type":"init"}],"path":"\/documentation\/diagnostics\/sourcecodelocationinitiable","title":"SourceCodeLocationInitiable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/stringcodingstrategy\/output","title":"Output","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/stringcodingstrategy\/decode(_:)","title":"func decode(Self.Output) throws -> String","type":"method"},{"path":"\/documentation\/diagnostics\/stringcodingstrategy\/encode(_:)","title":"func encode(String) throws -> Self.Output","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/stringcodingstrategy\/base64","title":"static var base64: StringCodingStrategies.Base64","type":"property"},{"path":"\/documentation\/diagnostics\/stringcodingstrategy\/utf8","title":"static var utf8: StringCodingStrategies.UTF8","type":"property"}],"path":"\/documentation\/diagnostics\/stringcodingstrategy","title":"StringCodingStrategy","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/stringconvertible\/stringvalue","title":"var stringValue: String","type":"property"}],"path":"\/documentation\/diagnostics\/stringconvertible","title":"StringConvertible","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/stringinitializable\/init(stringvalue:)-2lxxj","title":"init?(stringValue: String)","type":"init"}],"title":"StringInitializable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/stringinitializable\/init(stringvalue:)-4iytg","title":"init?(stringValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/stringinitializable\/stringvalue","title":"var stringValue: String","type":"property"}],"path":"\/documentation\/diagnostics\/stringinitializable","title":"StringInitializable","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/subtractionoperatable\/-(_:_:)","title":"static func - (Self, Self) -> Self","type":"op"}],"path":"\/documentation\/diagnostics\/subtractionoperatable","title":"SubtractionOperatable","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/throwingfunctioninitiable\/init(_:)","title":"init(((Self.InitiatingFunctionParameters) throws -> Self.InitiatingFunctionResult))","type":"init"}],"path":"\/documentation\/diagnostics\/throwingfunctioninitiable","title":"ThrowingFunctionInitiable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/throwingmergeoperatable\/mergeinplace(with:)","title":"func mergeInPlace(with: Self) throws","type":"method"},{"path":"\/documentation\/diagnostics\/throwingmergeoperatable\/merging(_:)-1t2lx","title":"func merging(Self) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/throwingmergeoperatable\/merging(_:)-7jxe3","title":"func merging(Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/throwingmergeoperatable\/merginginplace(with:)-4whuf","title":"func mergingInPlace(with: Self) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/throwingmergeoperatable\/merginginplace(with:)-8lksc","title":"func mergingInPlace(with: Self) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/throwingmergeoperatable","title":"ThrowingMergeOperatable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/throwingrawvalueconvertible\/rawvalue-swift.associatedtype","title":"RawValue","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/throwingrawvalueconvertible\/rawvalue-swift.property","title":"var rawValue: Self.RawValue","type":"property"}],"path":"\/documentation\/diagnostics\/throwingrawvalueconvertible","title":"ThrowingRawValueConvertible","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trivial\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/trivial\/init(null:)-8xhm5","title":"init(null: Void)","type":"init"}],"title":"Trivial Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/trivial\/init(null:)-6m3hf","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trivial\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/trivial\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trivial\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/trivial\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/trivial\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/trivial\/null-2vw3q","title":"static var null: Self","type":"property"}],"title":"Trivial Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/trivial\/null-2smv2","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/trivial\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/trivial\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trivial\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/trivial\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/trivial","title":"Trivial","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/typediscriminable\/typediscriminator-swift.associatedtype","title":"TypeDiscriminator","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/typediscriminable\/typediscriminator-swift.property","title":"var typeDiscriminator: Self.TypeDiscriminator","type":"property"}],"path":"\/documentation\/diagnostics\/typediscriminable","title":"TypeDiscriminable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/typediscriminator\/resolvetype()","title":"func resolveType() throws -> Self._DiscriminatedSwiftType._Metatype","type":"method"}],"path":"\/documentation\/diagnostics\/typediscriminator","title":"TypeDiscriminator","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/typediscriminatordecoding\/typediscriminator","title":"TypeDiscriminator","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/typediscriminatordecoding\/decodetypediscriminator(from:)","title":"func decodeTypeDiscriminator(from: any Decoder) throws -> Self.TypeDiscriminator","type":"method"}],"path":"\/documentation\/diagnostics\/typediscriminatordecoding","title":"TypeDiscriminatorDecoding","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/utf8representable\/init(managedutf8string:)","title":"init?<P>(managedUTF8String: P?)","type":"init"},{"path":"\/documentation\/diagnostics\/utf8representable\/init(managedutf8string:count:)","title":"init?<P>(managedUTF8String: P?, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/utf8representable\/init(unmanagedutf8string:)","title":"init?<P>(unmanagedUTF8String: P?)","type":"init"},{"path":"\/documentation\/diagnostics\/utf8representable\/init(unmanagedutf8string:count:)","title":"init?<P>(unmanagedUTF8String: P?, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/utf8representable\/init(utf8character:)","title":"init(utf8Character: CChar)","type":"init"},{"path":"\/documentation\/diagnostics\/utf8representable\/init(utf8string:)-6tb6g","title":"init<P>(utf8String: P)","type":"init"},{"path":"\/documentation\/diagnostics\/utf8representable\/init(utf8string:)-7ej1i","title":"init?(utf8String: NullTerminatedUTF8String?)","type":"init"},{"path":"\/documentation\/diagnostics\/utf8representable\/init(utf8string:)-90y1a","title":"init?<P>(utf8String: P?)","type":"init"},{"path":"\/documentation\/diagnostics\/utf8representable\/init(utf8string:)-95lt0","title":"init(utf8String: NullTerminatedUTF8String)","type":"init"},{"path":"\/documentation\/diagnostics\/utf8representable\/init(utf8string:count:)-1uvj7","title":"init?<P>(utf8String: P?, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/utf8representable\/init(utf8string:count:)-91vgi","title":"init<P>(utf8String: P, count: Int)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/utf8representable\/init(utf8string:count:deallocate:)-63484","title":"init?(utf8String: NullTerminatedUTF8String?, count: Int, deallocate: Bool)","type":"init"}],"title":"UTF8Representable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/utf8representable\/init(utf8string:count:deallocate:)-7osez","title":"init(utf8String: NullTerminatedUTF8String, count: Int, deallocate: Bool)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/utf8representable\/init(utf8string:count:managed:)-20c55","title":"init?(utf8String: NullTerminatedUTF8String?, count: Int, managed: Bool)","type":"init"}],"title":"UTF8Representable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/utf8representable\/init(utf8string:count:managed:)-52p1a","title":"init(utf8String: NullTerminatedUTF8String, count: Int, managed: Bool)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/utf8representable\/init(utf8string:deallocate:)-2erjm","title":"init<P>(utf8String: P, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/utf8representable\/init(utf8string:deallocate:)-1v99n","title":"init?(utf8String: NullTerminatedUTF8String?, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/utf8representable\/init(utf8string:deallocate:)-4m984","title":"init?<P>(utf8String: P?, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/utf8representable\/init(utf8string:deallocate:)-5xzhi","title":"init(utf8String: NullTerminatedUTF8String, deallocate: Bool)","type":"init"}],"title":"UTF8Representable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/utf8representable\/init(utf8string:deallocate:)-znag","title":"init(utf8String: NullTerminatedUTF8String, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/utf8representable\/init(utf8string:managed:)-1k742","title":"init?(utf8String: NullTerminatedUTF8String?, managed: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/utf8representable\/init(utf8string:managed:)-9vucr","title":"init(utf8String: NullTerminatedUTF8String, managed: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/utf8representable\/init(validatingutf8string:)","title":"init?(validatingUTF8String: NullTerminatedUTF8String?)","type":"init"},{"path":"\/documentation\/diagnostics\/utf8representable\/init(validatingutf8string:deallocate:)","title":"init?(validatingUTF8String: NullTerminatedUTF8String?, deallocate: Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/utf8representable\/mutatingwithmutablecstring(_:)","title":"func mutatingWithMutableCString<T>(((NullTerminatedUTF8String) throws -> T)) rethrows -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/utf8representable\/nullterminatedutf8string()","title":"func nullTerminatedUTF8String() -> NullTerminatedUTF8String","type":"method"},{"path":"\/documentation\/diagnostics\/utf8representable\/withmutablecstring(_:)","title":"func withMutableCString<T>(((NullTerminatedUTF8String) throws -> T)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/utf8representable","title":"UTF8Representable","type":"protocol"},{"path":"\/documentation\/diagnostics\/unorderedsequence","title":"UnorderedSequence","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/unsafebufferpointerinitiable\/init(_:)-4758n","title":"init<T>(UnsafeBufferPointer<T>)","type":"init"},{"path":"\/documentation\/diagnostics\/unsafebufferpointerinitiable\/init(_:)-67ntg","title":"init<T>(UnsafeMutableBufferPointer<T>)","type":"init"}],"path":"\/documentation\/diagnostics\/unsafebufferpointerinitiable","title":"UnsafeBufferPointerInitiable","type":"protocol"},{"path":"\/documentation\/diagnostics\/unsigned","title":"Unsigned","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-9ny2","title":"init(UInt16)","type":"init"},{"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-3t2wo","title":"init(UInt32)","type":"init"},{"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-9suuo","title":"init(UInt8)","type":"init"},{"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-84bv9","title":"init(UInt64)","type":"init"}],"title":"UnsignedIntegerInitiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-4rlmi","title":"init(UInt64)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-84bv9","title":"init(UInt64)","type":"init"},{"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-9suuo","title":"init(UInt8)","type":"init"},{"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-3t2wo","title":"init(UInt32)","type":"init"},{"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-9ny2","title":"init(UInt16)","type":"init"}],"title":"UnsignedIntegerInitiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-6xrh1","title":"init(UInt8)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-9ny2","title":"init(UInt16)","type":"init"},{"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-9suuo","title":"init(UInt8)","type":"init"},{"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-3t2wo","title":"init(UInt32)","type":"init"},{"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-84bv9","title":"init(UInt64)","type":"init"}],"title":"UnsignedIntegerInitiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-7wbd4","title":"init(UInt)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-3t2wo","title":"init(UInt32)","type":"init"},{"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-9ny2","title":"init(UInt16)","type":"init"},{"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-9suuo","title":"init(UInt8)","type":"init"},{"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-84bv9","title":"init(UInt64)","type":"init"}],"title":"UnsignedIntegerInitiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-879jc","title":"init(UInt16)","type":"init"},{"children":[{"children":[{"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-9ny2","title":"init(UInt16)","type":"init"},{"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-3t2wo","title":"init(UInt32)","type":"init"},{"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-84bv9","title":"init(UInt64)","type":"init"},{"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-9suuo","title":"init(UInt8)","type":"init"}],"title":"UnsignedIntegerInitiable Implementations","type":"groupMarker"}],"path":"\/documentation\/diagnostics\/unsignedintegerinitiable\/init(_:)-9xiwb","title":"init(UInt32)","type":"init"}],"path":"\/documentation\/diagnostics\/unsignedintegerinitiable","title":"UnsignedIntegerInitiable","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/valueconvertible\/value-swift.associatedtype","title":"Value","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/valueconvertible\/value-swift.property","title":"var value: Self.Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/valueconvertible\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/valueconvertible","title":"ValueConvertible","type":"protocol"},{"path":"\/documentation\/diagnostics\/warning","title":"Warning","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/wrapper\/init(_:)","title":"init(Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/wrapper","title":"Wrapper","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyasynciterator\/init(_:)-2bpri","title":"init<Iterator>(() async throws -> Iterator)","type":"init"},{"path":"\/documentation\/diagnostics\/anyasynciterator\/init(_:)-9m0da","title":"init<Iterator>(Iterator)","type":"init"},{"path":"\/documentation\/diagnostics\/anyasynciterator\/init(_:)-qvv9","title":"init<Iterator>(Iterator)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyasynciterator\/filter(_:)","title":"func filter((Element) async -> Bool) -> AnyAsyncIterator<Element>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasynciterator\/next()","title":"func next() async throws -> Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyasynciterator\/erasetoanyasynciterator()","title":"func eraseToAnyAsyncIterator() -> AnyAsyncIterator<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasynciterator\/exhaust()","title":"func exhaust() async throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/anyasynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/diagnostics\/anyasynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyasynciterator\/erasetoanyasynciterator()","title":"func eraseToAnyAsyncIterator() -> AnyAsyncIterator<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasynciterator\/exhaust()","title":"func exhaust() async throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/anyasynciterator\/next(isolation:)","title":"func next(isolation: isolated (any Actor)?) async throws(Self.Failure) -> Self.Element?","type":"method"}],"path":"\/documentation\/diagnostics\/anyasynciterator\/asynciteratorprotocol-implementations","title":"AsyncIteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/anyasynciterator","title":"AnyAsyncIterator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/init(_:)-36key","title":"init<Iterator>(() -> Iterator)","type":"init"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/init(_:)-3njkc","title":"init<Iterator>(() -> Iterator)","type":"init"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/init(_:)-47bxq","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/init(_:)-99jhp","title":"init<S>(S)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/makeasynciterator()","title":"func makeAsyncIterator() -> AnyAsyncIterator<Element>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/compactmap(_:)-1xiif","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/compactmap(_:)-271q8","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/flatmap(_:)-1w700","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/flatmap(_:)-28f0c","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/flatmap(_:)-2q249","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/flatmap(_:)-4j2g2","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/map(_:)-477z8","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/map(_:)-781h2","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/diagnostics\/anyasyncsequence\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/characters","title":"var characters: AsyncCharacterSequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/lines","title":"var lines: AsyncLineSequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/unicodescalars","title":"var unicodeScalars: AsyncUnicodeScalarSequence<Self>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/compactmap(_:)-1xiif","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/compactmap(_:)-271q8","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/flatmap(_:)-1w700","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/flatmap(_:)-28f0c","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/flatmap(_:)-2q249","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/flatmap(_:)-4j2g2","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/map(_:)-477z8","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/map(_:)-781h2","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/max()","title":"func max() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/min()","title":"func min() async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/anyasyncsequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/diagnostics\/anyasyncsequence\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/anyasyncsequence","title":"AnyAsyncSequence","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/==(_:_:)-2vs7d","title":"static func == (AnyCodingKey, any CodingKey) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/init(erasing:)","title":"init(erasing: any CodingKey)","type":"init"},{"path":"\/documentation\/diagnostics\/anycodingkey\/init(intvalue:)","title":"init(intValue: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/anycodingkey\/init(stringvalue:)","title":"init(stringValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/intvalue","title":"var intValue: Int?","type":"property"},{"path":"\/documentation\/diagnostics\/anycodingkey\/stringvalue","title":"var stringValue: String","type":"property"},{"path":"\/documentation\/diagnostics\/anycodingkey\/value","title":"var value: any Codable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/lowercased()","title":"func lowercased() -> AnyCodingKey","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/'...(_:)-3jhq6","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/anycodingkey\/'...(_:)-qtvw","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/anycodingkey\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/anycodingkey\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/anycodingkey\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/anycodingkey\/_(_:_:)-97glv","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anycodingkey\/_(_:_:)-io5v","title":"static func < (AnyCodingKey, AnyCodingKey) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anycodingkey\/_=(_:_:)-93dtu","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anycodingkey\/_=(_:_:)-9f9es","title":"static func >= (Self, Self) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/erasedasanycomparable","title":"var erasedAsAnyComparable: AnyComparable","type":"property"}],"path":"\/documentation\/diagnostics\/anycodingkey\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/'...(_:)-3jhq6","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/anycodingkey\/'...(_:)-qtvw","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/anycodingkey\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/anycodingkey\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/anycodingkey\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/anycodingkey\/_(_:_:)-97glv","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anycodingkey\/_(_:_:)-io5v","title":"static func < (AnyCodingKey, AnyCodingKey) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anycodingkey\/_=(_:_:)-93dtu","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anycodingkey\/_=(_:_:)-9f9es","title":"static func >= (Self, Self) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/erasedasanycomparable","title":"var erasedAsAnyComparable: AnyComparable","type":"property"}],"path":"\/documentation\/diagnostics\/anycodingkey\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/anycodingkey\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/custommirror","title":"var customMirror: Mirror","type":"property"}],"path":"\/documentation\/diagnostics\/anycodingkey\/customreflectable-implementations","title":"CustomReflectable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/anycodingkey\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/anycodingkey\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/anycodingkey\/decodeifpresent(from:)-1bqcg","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/anycodingkey\/decodeifpresent(from:)-2tqmt","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/anycodingkey\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/anycodingkey\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/anycodingkey\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/anycodingkey\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/anycodingkey\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/anycodingkey\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/anycodingkey\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/anycodingkey\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anycodingkey\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/anycodingkey\/==(_:_:)-7fdcu","title":"static func == (AnyCodingKey, AnyCodingKey) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anycodingkey\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anycodingkey\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/anycodingkey\/==(_:_:)-7fdcu","title":"static func == (AnyCodingKey, AnyCodingKey) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anycodingkey\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/diagnostics\/anycodingkey\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"}],"path":"\/documentation\/diagnostics\/anycodingkey\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/diagnostics\/anycodingkey\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/diagnostics\/anycodingkey\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/anycodingkey\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/anycodingkey\/memoize(with:_:)-925uc","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/anycodingkey\/memoize(with:_:)-96nvb","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/anycodingkey\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodingkey\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/anycodingkey\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/anycodingkey\/memoize(with:_:)-925uc","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/anycodingkey\/memoize(with:_:)-96nvb","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/anycodingkey\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/anycodingkey","title":"AnyCodingKey","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycomparable\/init(erasing:)","title":"init<T>(erasing: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycomparable\/base","title":"let base: any Comparable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycomparable\/iscomparable(with:)","title":"func isComparable(with: AnyComparable) -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycomparable\/'...(_:)-18nc","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/'...(_:)-62b13","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/_(_:_:)-1yf3u","title":"static func > (AnyComparable, AnyComparable) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/_(_:_:)-2q6ts","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/_(_:_:)-4ussu","title":"static func < (AnyComparable, AnyComparable) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/_=(_:_:)-9st28","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/_=(_:_:)-y018","title":"static func <= (Self, Self) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycomparable\/erasedasanycomparable","title":"var erasedAsAnyComparable: AnyComparable","type":"property"}],"path":"\/documentation\/diagnostics\/anycomparable\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycomparable\/'...(_:)-18nc","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/'...(_:)-62b13","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/_(_:_:)-1yf3u","title":"static func > (AnyComparable, AnyComparable) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/_(_:_:)-2q6ts","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/_(_:_:)-4ussu","title":"static func < (AnyComparable, AnyComparable) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/_=(_:_:)-9st28","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/_=(_:_:)-y018","title":"static func <= (Self, Self) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycomparable\/erasedasanycomparable","title":"var erasedAsAnyComparable: AnyComparable","type":"property"}],"path":"\/documentation\/diagnostics\/anycomparable\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycomparable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/==(_:_:)","title":"static func == (AnyComparable, AnyComparable) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycomparable\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anycomparable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycomparable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/anycomparable\/==(_:_:)","title":"static func == (AnyComparable, AnyComparable) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycomparable\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anycomparable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/anycomparable","title":"AnyComparable","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyencodable\/init(_:)","title":"init(((any Encoder) throws -> ()))","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyencodable\/impl","title":"let impl: ((any Encoder) throws -> ())","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyencodable\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyencodable\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/anyencodable\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/anyencodable\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/anyencodable","title":"AnyEncodable","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyequatable\/==(_:_:)","title":"static func == (AnyEquatable, AnyEquatable) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyequatable\/init(erasing:)","title":"init<T>(erasing: T)","type":"init"},{"path":"\/documentation\/diagnostics\/anyequatable\/init(from:)","title":"init(from: Any) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyequatable\/base","title":"let base: any Equatable","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyequatable\/equate(_:_:)","title":"static func equate<T>(T, T) -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyequatable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anyequatable\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyequatable\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anyequatable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyequatable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anyequatable\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyequatable\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anyequatable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/anyequatable","title":"AnyEquatable","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyerror\/==(_:_:)","title":"static func == (AnyError, AnyError) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyerror\/init(description:)","title":"init(description: String)","type":"init"},{"path":"\/documentation\/diagnostics\/anyerror\/init(erasing:)-252sr","title":"init?(erasing: (any Error)?)","type":"init"},{"path":"\/documentation\/diagnostics\/anyerror\/init(erasing:)-gchx","title":"init(erasing: any Error)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyerror\/base","title":"let base: any Error","type":"property"},{"path":"\/documentation\/diagnostics\/anyerror\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/diagnostics\/anyerror\/localizeddescription","title":"var localizedDescription: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyerror\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/anyerror\/throw()","title":"func `throw`() throws -> Never","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyerror\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/anyerror\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anyerror\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyerror\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anyerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anyerror\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyerror\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anyerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyerror\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyerror\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/anyerror\/memoize(with:_:)-7dejd","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/anyerror\/memoize(with:_:)-dyai","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/anyerror\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyerror\/traits","title":"var traits: ErrorTraits","type":"property"}],"path":"\/documentation\/diagnostics\/anyerror\/_errorx-implementations","title":"_ErrorX Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/anyerror","title":"AnyError","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyhashablesendable\/==(_:_:)","title":"static func == (AnyHashableSendable, AnyHashableSendable) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyhashablesendable\/init(_:)","title":"init(some Hashable & Sendable)","type":"init"},{"path":"\/documentation\/diagnostics\/anyhashablesendable\/init(erasing:)","title":"init(erasing: some Hashable & Sendable)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyhashablesendable\/base","title":"let base: any Hashable & Sendable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyhashablesendable\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyhashablesendable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anyhashablesendable\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyhashablesendable\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anyhashablesendable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyhashablesendable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anyhashablesendable\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyhashablesendable\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anyhashablesendable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyhashablesendable\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyhashablesendable\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/anyhashablesendable\/memoize(with:_:)-60rfs","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/anyhashablesendable\/memoize(with:_:)-8lxdu","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/anyhashablesendable\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/anyhashablesendable","title":"AnyHashableSendable","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyheterogeneousdictionarykey\/init(base:)","title":"init(base: any Any.Type)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyheterogeneousdictionarykey\/base","title":"var base: any Any.Type","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyheterogeneousdictionarykey\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anyheterogeneousdictionarykey\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyheterogeneousdictionarykey\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anyheterogeneousdictionarykey\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyheterogeneousdictionarykey\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anyheterogeneousdictionarykey\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyheterogeneousdictionarykey\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anyheterogeneousdictionarykey\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyheterogeneousdictionarykey\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyheterogeneousdictionarykey\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/anyheterogeneousdictionarykey\/memoize(with:_:)-5648y","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/anyheterogeneousdictionarykey\/memoize(with:_:)-6uti8","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/anyheterogeneousdictionarykey\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/anyheterogeneousdictionarykey","title":"AnyHeterogeneousDictionaryKey","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyidentifiable\/init(erasing:)","title":"init(erasing: any Identifiable<ID>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyidentifiable\/base","title":"let base: any Identifiable<ID>","type":"property"},{"path":"\/documentation\/diagnostics\/anyidentifiable\/id","title":"var id: AnyHashable","type":"property"}],"path":"\/documentation\/diagnostics\/anyidentifiable","title":"AnyIdentifiable","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anylogscope\/==(_:_:)","title":"static func == (`Self`, `Self`) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anylogscope\/init(erasing:)","title":"init<T>(erasing: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anylogscope\/description","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anylogscope\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anylogscope\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anylogscope\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anylogscope\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anylogscope\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anylogscope\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anylogscope\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anylogscope\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anylogscope\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anylogscope\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anylogscope\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/anylogscope\/memoize(with:_:)-3iws2","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/anylogscope\/memoize(with:_:)-45lsp","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/anylogscope\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/anylogscope","title":"AnyLogScope","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anymutablepropertywrapper\/init(_:)","title":"init<Wrapper>(Wrapper)","type":"init"},{"path":"\/documentation\/diagnostics\/anymutablepropertywrapper\/init(unsafelyadapting:)","title":"init<Wrapper>(unsafelyAdapting: Wrapper)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anymutablepropertywrapper\/wrappedvalue","title":"var wrappedValue: Value","type":"property"}],"path":"\/documentation\/diagnostics\/anymutablepropertywrapper","title":"AnyMutablePropertyWrapper","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-1m2gf","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-6lkj4","title":"init<N>(N)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-8274b","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(opaque:)","title":"init(opaque: any Number)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anynumber\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/anynumber\/tonsnumber()","title":"func toNSNumber() throws -> NSNumber","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-4o4gm","title":"init(ObjCBool)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-6rie5","title":"init(DarwinBoolean)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-91ifx","title":"init(Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(boolean:)","title":"init<T>(boolean: T)","type":"init"}],"path":"\/documentation\/diagnostics\/anynumber\/booleaninitiable-implementations","title":"BooleanInitiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anynumber\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/anynumber\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anynumber\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/anynumber\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/anynumber\/decodeifpresent(from:)-3f8t6","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/anynumber\/decodeifpresent(from:)-6uqva","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/anynumber\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/anynumber\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anynumber\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/anynumber\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/anynumber\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anynumber\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anynumber\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anynumber\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anynumber\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anynumber\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anynumber\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anynumber\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anynumber\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-1jsa6","title":"init(NSDecimalNumber)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-2rw5z","title":"init(CGFloat)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-378kf","title":"init(Decimal)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-54w00","title":"init(NSNumber)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-6vh6m","title":"init(Double)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-irls","title":"init(Decimal)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-mpw5","title":"init(Float)","type":"init"}],"path":"\/documentation\/diagnostics\/anynumber\/floatingpointinitiable-implementations","title":"FloatingPointInitiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anynumber\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anynumber\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/anynumber\/memoize(with:_:)-2gckx","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/anynumber\/memoize(with:_:)-2ogq4","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/anynumber\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-25i2t","title":"init(Int16)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-33xkb","title":"init(Int64)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-5mx22","title":"init(Int32)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-5otzx","title":"init(Int8)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-7n597","title":"init(Int)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-88lh0","title":"init(Int64)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-8vrho","title":"init(Int16)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-947gx","title":"init(Int32)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-9e4ck","title":"init(Int8)","type":"init"}],"path":"\/documentation\/diagnostics\/anynumber\/signedintegerinitiable-implementations","title":"SignedIntegerInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-1rqc9","title":"init(UInt8)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-22l2t","title":"init(UInt16)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-3a1m2","title":"init(UInt)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-57ts7","title":"init(UInt32)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-5n2c5","title":"init(UInt32)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-7sea","title":"init(UInt8)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-7xtsl","title":"init(UInt64)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-813mg","title":"init(UInt64)","type":"init"},{"path":"\/documentation\/diagnostics\/anynumber\/init(_:)-9chzl","title":"init(UInt16)","type":"init"}],"path":"\/documentation\/diagnostics\/anynumber\/unsignedintegerinitiable-implementations","title":"UnsignedIntegerInitiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/anynumber","title":"AnyNumber","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anysendable\/init(erasing:)","title":"init(erasing: any Sendable)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anysendable\/base","title":"let base: any Sendable","type":"property"}],"path":"\/documentation\/diagnostics\/anysendable","title":"AnySendable","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anystringkey\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/diagnostics\/anystringkey\/init(intvalue:)","title":"init?(intValue: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/anystringkey\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"path":"\/documentation\/diagnostics\/anystringkey\/init(stringvalue:)","title":"init(stringValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anystringkey\/intvalue","title":"var intValue: Int?","type":"property"},{"path":"\/documentation\/diagnostics\/anystringkey\/stringvalue","title":"var stringValue: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anystringkey\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anystringkey\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/diagnostics\/anystringkey\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/anystringkey\/codingkey-implementations","title":"CodingKey Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anystringkey\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/anystringkey\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/anystringkey\/decodeifpresent(from:)-74mvs","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/anystringkey\/decodeifpresent(from:)-78hov","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/anystringkey\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/anystringkey\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anystringkey\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/anystringkey\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/anystringkey\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anystringkey\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anystringkey\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anystringkey\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anystringkey\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anystringkey\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anystringkey\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anystringkey\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anystringkey\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anystringkey\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/diagnostics\/anystringkey\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anystringkey\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/diagnostics\/anystringkey\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anystringkey\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anystringkey\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/anystringkey\/memoize(with:_:)-26lx7","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/anystringkey\/memoize(with:_:)-56lp7","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/anystringkey\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/anystringkey","title":"AnyStringKey","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/init(left:element:right:)","title":"init(left: LeftSequence, element: Element, right: RightSequence)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/element-swift.property","title":"let element: Element","type":"property"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/left","title":"let left: LeftSequence","type":"property"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/right","title":"let right: RightSequence","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/makeiterator()","title":"func makeIterator() -> AroundElementSequence<LeftSequence, Element, RightSequence>.Iterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/element-swift.typealias","title":"AroundElementSequence.Element","type":"typealias"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/iterator","title":"AroundElementSequence.Iterator","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/allsatisfy(_:)-8n42n","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/allsatisfy(_:)-wwho","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/compactmap(_:)-6d1pw","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/compactmap(_:)-7besl","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/contains(_:)-14dcg","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/contains(_:)-85nim","title":"func contains<Value>(CasePath<Self.Element, Value>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/distinct()-2c4vc","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/distinct()-2dv25","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/distinct(by:)-8id23","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/distinct(by:)-92crg","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/fill(using:)-5feuk","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/fill(using:)-6ozo8","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/fill(using:)-9l1np","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/filter(_:)-7yv0b","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/filter(_:)-91ypp","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/find(_:)-6hxd1","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/find(_:)-7flh0","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/find(_:mutate:)-1zizw","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/find(_:mutate:)-3xug4","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/first(byunwrapping:)-4gpz9","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/first(byunwrapping:)-9i7js","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/first(oftype:)-21o2x","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/first(oftype:)-2988s","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/firstandonly(byunwrapping:)-5v9a7","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/firstandonly(byunwrapping:)-7sjzu","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/firstandonly(oftype:)-32tr5","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/firstandonly(oftype:)-h3up","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/flatmap(_:)-4mido","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/flatmap(_:)-81q84","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/flatmap(_:)-9q4ap","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/hasprefix(_:)-9t21e","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/hasprefix(_:)-e1xx","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/joined(separator:)-2x0u9","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/joined(separator:)-35eg","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/longestconsecutivesequences(by:relativeto:)-56y0b","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/longestconsecutivesequences(by:relativeto:)-titr","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/map(_:)-13cdr","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/map(_:)-5m8gq","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/minormax(_:by:)-1xvx3","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/minormax(_:by:)-67bde","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/reduce(_:_:)-29e9b","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/reduce(_:_:)-ftle","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/removefirst(_:)-21jtt","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/removefirst(_:)-7wpe","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/removefirst(byunwrapping:)-93j6o","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/removefirst(byunwrapping:)-9ir9y","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/sorted(by:order:)-24ua3","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/sorted(by:order:)-8xbeo","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/sorted(using:)-1wkql","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/sorted(using:)-5ke5y","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/aroundelementsequence\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/allsatisfy(_:)-8n42n","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/allsatisfy(_:)-wwho","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/compactmap(_:)-6d1pw","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/compactmap(_:)-7besl","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/contains(_:)-14dcg","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/contains(_:)-85nim","title":"func contains<Value>(CasePath<Self.Element, Value>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/distinct()-2c4vc","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/distinct()-2dv25","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/distinct(by:)-8id23","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/distinct(by:)-92crg","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/fill(using:)-5feuk","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/fill(using:)-6ozo8","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/fill(using:)-9l1np","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/filter(_:)-7yv0b","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/filter(_:)-91ypp","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/find(_:)-6hxd1","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/find(_:)-7flh0","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/find(_:mutate:)-1zizw","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/find(_:mutate:)-3xug4","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/first(byunwrapping:)-4gpz9","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/first(byunwrapping:)-9i7js","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/first(oftype:)-21o2x","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/first(oftype:)-2988s","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/firstandonly(byunwrapping:)-5v9a7","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/firstandonly(byunwrapping:)-7sjzu","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/firstandonly(oftype:)-32tr5","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/firstandonly(oftype:)-h3up","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/flatmap(_:)-4mido","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/flatmap(_:)-81q84","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/flatmap(_:)-9q4ap","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/hasprefix(_:)-9t21e","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/hasprefix(_:)-e1xx","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/joined(separator:)-2x0u9","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/joined(separator:)-35eg","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/longestconsecutivesequences(by:relativeto:)-56y0b","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/longestconsecutivesequences(by:relativeto:)-titr","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/map(_:)-13cdr","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/map(_:)-5m8gq","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/minormax(_:by:)-1xvx3","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/minormax(_:by:)-67bde","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/reduce(_:_:)-29e9b","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/reduce(_:_:)-ftle","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/removefirst(_:)-21jtt","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/removefirst(_:)-7wpe","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/removefirst(byunwrapping:)-93j6o","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/removefirst(byunwrapping:)-9ir9y","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/sorted(by:order:)-24ua3","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/sorted(by:order:)-8xbeo","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/sorted(using:)-1wkql","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/sorted(using:)-5ke5y","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/aroundelementsequence\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/aroundelementsequence\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/aroundelementsequence","title":"AroundElementSequence","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/arraybuilder\/buildblock()","title":"static func buildBlock<Element>() -> [Element]","type":"method"},{"path":"\/documentation\/diagnostics\/arraybuilder\/buildblock(_:)-4fe5m","title":"static func buildBlock<Element>(Element) -> [Element]","type":"method"},{"path":"\/documentation\/diagnostics\/arraybuilder\/buildblock(_:)-5365h","title":"static func buildBlock<Element>(Element...) -> [Element]","type":"method"},{"path":"\/documentation\/diagnostics\/arraybuilder\/buildblock(_:)-5bfm2","title":"static func buildBlock<Element>([Element]) -> [Element]","type":"method"},{"path":"\/documentation\/diagnostics\/arraybuilder\/buildeither(first:)","title":"static func buildEither<Element>(first: Element) -> [Element]","type":"method"},{"path":"\/documentation\/diagnostics\/arraybuilder\/buildeither(second:)","title":"static func buildEither<Element>(second: Element) -> [Element]","type":"method"},{"path":"\/documentation\/diagnostics\/arraybuilder\/buildif(_:)","title":"static func buildIf<Element>(Element?) -> [Element]","type":"method"}],"path":"\/documentation\/diagnostics\/arraybuilder","title":"ArrayBuilder","type":"struct"},{"path":"\/documentation\/diagnostics\/binarydatadecodingstrategy","title":"BinaryDataDecodingStrategy","type":"struct"},{"path":"\/documentation\/diagnostics\/binarydataencodingstrategy","title":"BinaryDataEncodingStrategy","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/init()","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/init(wrappedvalue:)","title":"init(wrappedValue: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/wrappedvalue","title":"var wrappedValue: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/decodeifpresent(from:)-35vlb","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/decodeifpresent(from:)-d6vd","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/booldecodingdefault\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/booldecodingdefault\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/booldecodingdefault\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/booldecodingdefault\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/memoize(with:_:)-76fu2","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/booldecodingdefault\/memoize(with:_:)-jjgp","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/booldecodingdefault\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/booldecodingdefault","title":"BoolDecodingDefault","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/breakpoint\/trigger()","title":"static func trigger()","type":"method"}],"path":"\/documentation\/diagnostics\/breakpoint","title":"Breakpoint","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple1\/init(_:)-1n5g0","title":"init(ByteTuple1.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple1\/value-swift.property","title":"var value: ByteTuple1.Value","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple1\/value-swift.typealias","title":"ByteTuple1.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple1\/init(bitpattern:)","title":"init(bitPattern: Self.BitPattern)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple1\/bitpattern-swift.property","title":"var bitPattern: ByteTuple1.BitPattern","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple1\/bitpattern-swift.typealias","title":"ByteTuple1.BitPattern","type":"typealias"}],"path":"\/documentation\/diagnostics\/bytetuple1\/bitpatternconvertible-implementations","title":"BitPatternConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple1\/init(_:)-93zwc","title":"init(Bit)","type":"init"},{"path":"\/documentation\/diagnostics\/bytetuple1\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple1\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple1\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple1\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple1\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple1\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple1\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple1\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple1\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple1\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple1\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple1\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple1\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple1\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple1\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple1\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/bytetuple1\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple1\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple1\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple1\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple1\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple1\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple1\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple1\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple1\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple1\/trivial-implementations","title":"Trivial Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/bytetuple1","title":"ByteTuple1","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple128\/init(_:)","title":"init(ByteTuple128.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple128\/value-swift.property","title":"var value: ByteTuple128.Value","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple128\/value-swift.typealias","title":"ByteTuple128.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple128\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple128\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple128\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple128\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple128\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple128\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple128\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple128\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple128\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple128\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple128\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple128\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple128\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple128\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple128\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple128\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/bytetuple128\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple128\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/bytetuple128\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple128\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple128\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple128\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple128\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple128\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple128\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple128\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple128\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple128\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple128\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple128\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/bytetuple128","title":"ByteTuple128","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple16\/init(_:)","title":"init(ByteTuple16.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple16\/value-swift.property","title":"var value: ByteTuple16.Value","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple16\/value-swift.typealias","title":"ByteTuple16.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple16\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple16\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple16\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple16\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple16\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple16\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple16\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple16\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple16\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple16\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple16\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple16\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple16\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple16\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple16\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple16\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/bytetuple16\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple16\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/bytetuple16\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple16\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple16\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple16\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple16\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple16\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple16\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple16\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple16\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple16\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple16\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple16\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/bytetuple16","title":"ByteTuple16","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple2\/init(_:)","title":"init(ByteTuple2.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple2\/value-swift.property","title":"var value: ByteTuple2.Value","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple2\/value-swift.typealias","title":"ByteTuple2.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple2\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple2\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple2\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple2\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple2\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple2\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple2\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple2\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple2\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple2\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple2\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple2\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple2\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple2\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple2\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple2\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/bytetuple2\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple2\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/bytetuple2\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple2\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple2\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple2\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple2\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple2\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple2\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple2\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple2\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple2\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple2\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple2\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/bytetuple2","title":"ByteTuple2","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple256\/init(_:)","title":"init(ByteTuple256.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple256\/value-swift.property","title":"var value: ByteTuple256.Value","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple256\/value-swift.typealias","title":"ByteTuple256.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple256\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple256\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple256\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple256\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple256\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple256\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple256\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple256\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple256\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple256\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple256\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple256\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple256\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple256\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple256\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple256\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/bytetuple256\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple256\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/bytetuple256\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple256\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple256\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple256\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple256\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple256\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple256\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple256\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple256\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple256\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple256\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple256\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/bytetuple256","title":"ByteTuple256","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple3\/init(_:)","title":"init(ByteTuple3.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple3\/value-swift.property","title":"var value: ByteTuple3.Value","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple3\/value-swift.typealias","title":"ByteTuple3.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple3\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple3\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple3\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple3\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple3\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple3\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple3\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple3\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple3\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple3\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple3\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple3\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple3\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple3\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple3\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple3\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/bytetuple3\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple3\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/bytetuple3\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple3\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple3\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple3\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple3\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple3\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple3\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple3\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple3\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple3\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple3\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple3\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/bytetuple3","title":"ByteTuple3","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple32\/init(_:)","title":"init(ByteTuple32.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple32\/value-swift.property","title":"var value: ByteTuple32.Value","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple32\/value-swift.typealias","title":"ByteTuple32.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple32\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple32\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple32\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple32\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple32\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple32\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple32\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple32\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple32\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple32\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple32\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple32\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple32\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple32\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple32\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple32\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/bytetuple32\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple32\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/bytetuple32\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple32\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple32\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple32\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple32\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple32\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple32\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple32\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple32\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple32\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple32\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple32\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/bytetuple32","title":"ByteTuple32","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple4\/init(_:)","title":"init(ByteTuple4.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple4\/value-swift.property","title":"var value: ByteTuple4.Value","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple4\/value-swift.typealias","title":"ByteTuple4.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple4\/init(bitpattern:)","title":"init(bitPattern: Self.BitPattern)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple4\/bitpattern-swift.property","title":"var bitPattern: ByteTuple4.BitPattern","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple4\/bitpattern-swift.typealias","title":"ByteTuple4.BitPattern","type":"typealias"}],"path":"\/documentation\/diagnostics\/bytetuple4\/bitpatternconvertible-implementations","title":"BitPatternConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple4\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple4\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple4\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple4\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple4\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple4\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple4\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple4\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple4\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple4\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple4\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple4\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple4\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple4\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple4\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple4\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/bytetuple4\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple4\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/bytetuple4\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple4\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple4\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple4\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple4\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple4\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple4\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple4\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple4\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple4\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple4\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple4\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/bytetuple4","title":"ByteTuple4","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple512\/init(_:)","title":"init(ByteTuple512.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple512\/value-swift.property","title":"var value: ByteTuple512.Value","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple512\/value-swift.typealias","title":"ByteTuple512.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple512\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple512\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple512\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple512\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple512\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple512\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple512\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple512\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple512\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple512\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple512\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple512\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple512\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple512\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple512\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple512\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/bytetuple512\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple512\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/bytetuple512\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple512\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple512\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple512\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple512\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple512\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple512\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple512\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple512\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple512\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple512\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple512\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/bytetuple512","title":"ByteTuple512","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple64\/init(_:)","title":"init(ByteTuple64.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple64\/value-swift.property","title":"var value: ByteTuple64.Value","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple64\/value-swift.typealias","title":"ByteTuple64.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple64\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple64\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple64\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple64\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple64\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple64\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple64\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple64\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple64\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple64\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple64\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple64\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple64\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple64\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple64\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple64\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/bytetuple64\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple64\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/bytetuple64\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple64\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple64\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple64\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple64\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple64\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple64\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple64\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple64\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple64\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple64\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple64\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/bytetuple64","title":"ByteTuple64","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple8\/init(_:)","title":"init(ByteTuple8.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple8\/value-swift.property","title":"var value: ByteTuple8.Value","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple8\/value-swift.typealias","title":"ByteTuple8.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple8\/init(bitpattern:)","title":"init(bitPattern: Self.BitPattern)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple8\/bitpattern-swift.property","title":"var bitPattern: ByteTuple8.BitPattern","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple8\/bitpattern-swift.typealias","title":"ByteTuple8.BitPattern","type":"typealias"}],"path":"\/documentation\/diagnostics\/bytetuple8\/bitpatternconvertible-implementations","title":"BitPatternConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple8\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple8\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple8\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple8\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple8\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple8\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple8\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple8\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple8\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple8\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple8\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple8\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/bytetuple8\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple8\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple8\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple8\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/bytetuple8\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple8\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/bytetuple8\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple8\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple8\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple8\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple8\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/bytetuple8\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple8\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple8\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/bytetuple8\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/bytetuple8\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bytetuple8\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/bytetuple8\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/bytetuple8","title":"ByteTuple8","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/casepath\/'..(_:_:)-4zgft","title":"static func .. <AppendedValue>(CasePath<_Root, _Value>, CasePath<CasePath<_Root, _Value>.Value, AppendedValue>) -> CasePath<CasePath<_Root, _Value>.Root, AppendedValue>","type":"op"},{"path":"\/documentation\/diagnostics\/casepath\/'..(_:_:)-7q0g","title":"static func .. <AppendedValue>(CasePath<_Root, _Value>, (AppendedValue) -> CasePath<_Root, _Value>.Value) -> CasePath<CasePath<_Root, _Value>.Root, AppendedValue>","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/casepath\/init(_:)-3799u","title":"init((CasePath<_Root, _Value>.Value) -> CasePath<_Root, _Value>.Root)","type":"init"},{"path":"\/documentation\/diagnostics\/casepath\/init(_:)-3tdx6","title":"init(CasePath<_Root, _Value>.Root)","type":"init"},{"path":"\/documentation\/diagnostics\/casepath\/init(_:)-6e6xq","title":"init(CasePath<_Root, _Value>.Root.Type)","type":"init"},{"path":"\/documentation\/diagnostics\/casepath\/init(embed:extract:)","title":"init(embed: (CasePath<_Root, _Value>.Value) -> CasePath<_Root, _Value>.Root, extract: (CasePath<_Root, _Value>.Root) -> CasePath<_Root, _Value>.Value?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/casepath\/appending(path:)","title":"func appending<AppendedValue>(path: CasePath<CasePath<_Root, _Value>.Value, AppendedValue>) -> CasePath<CasePath<_Root, _Value>.Root, AppendedValue>","type":"method"},{"path":"\/documentation\/diagnostics\/casepath\/embed(_:)","title":"func embed(CasePath<_Root, _Value>.Value) -> CasePath<_Root, _Value>.Root","type":"method"},{"path":"\/documentation\/diagnostics\/casepath\/extract(from:)","title":"func extract(from: CasePath<_Root, _Value>.Root) -> CasePath<_Root, _Value>.Value?","type":"method"},{"path":"\/documentation\/diagnostics\/casepath\/modify(_:_:)","title":"func modify<Result>(inout CasePath<_Root, _Value>.Root, (inout CasePath<_Root, _Value>.Value) throws -> Result) throws -> Result","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/casepath\/root","title":"CasePath.Root","type":"typealias"},{"path":"\/documentation\/diagnostics\/casepath\/value","title":"CasePath.Value","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/casepath\/description-swift.type.property","title":"static var description: CasePath<String, _Value>","type":"property"},{"path":"\/documentation\/diagnostics\/casepath\/never","title":"static var never: CasePath<_Root, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/casepath\/rawvalue","title":"static var rawValue: CasePath<_Root, _Value>","type":"property"},{"path":"\/documentation\/diagnostics\/casepath\/self","title":"static var `self`: CasePath<_Root, _Root>","type":"property"},{"path":"\/documentation\/diagnostics\/casepath\/some","title":"static var some: CasePath<_Root, _Value>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/casepath\/constant(_:)","title":"static func constant(CasePath<_Root, _Value>.Value) -> CasePath<_Root, _Value>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/casepath\/description-swift.property","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/casepath\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/casepath\/isequal(to:)","title":"func isEqual(to: CasePath<_Root, _Value>) -> Bool?","type":"method"}],"path":"\/documentation\/diagnostics\/casepath\/_partiallyequatable-implementations","title":"_PartiallyEquatable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/casepath","title":"CasePath","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/chunksequence\/init(_:)","title":"init(S)","type":"init"},{"path":"\/documentation\/diagnostics\/chunksequence\/init(_:chunksize:)","title":"init(S, chunkSize: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/chunksequence\/chunksize","title":"var chunkSize: Int","type":"property"},{"path":"\/documentation\/diagnostics\/chunksequence\/value","title":"var value: S","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/chunksequence\/makeiterator()","title":"func makeIterator() -> AnyIterator<[S.Element]>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/chunksequence\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/chunksequence\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/chunksequence\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/chunksequence\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/chunksequence\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/chunksequence\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/chunksequence\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/chunksequence\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/chunksequence\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/chunksequence\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/allsatisfy(_:)-55xgx","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/allsatisfy(_:)-rbwu","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/compactmap(_:)-5sort","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/compactmap(_:)-8ngzk","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/distinct()-2v3du","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/distinct()-8072n","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/distinct(by:)-25se9","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/distinct(by:)-2j2da","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/filter(_:)-3dzba","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/filter(_:)-4e0ca","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/find(_:)-48w8a","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/find(_:)-4hrdg","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/find(_:mutate:)-2zy72","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/find(_:mutate:)-9n2bk","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/first(byunwrapping:)-2an7x","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/first(byunwrapping:)-4dfzv","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/first(oftype:)","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/firstandonly(byunwrapping:)-19n0p","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/firstandonly(byunwrapping:)-1wl2k","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/firstandonly(oftype:)","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/flatmap(_:)-3nzp4","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/flatmap(_:)-6n9h2","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/flatmap(_:)-7my52","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/hasprefix(_:)-5xjbv","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/hasprefix(_:)-9sl7g","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/joined(separator:)","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/longestconsecutivesequences(by:relativeto:)-1fw8x","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/longestconsecutivesequences(by:relativeto:)-2sgx8","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/map(_:)-819uz","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/map(_:)-g0j","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/minormax(_:by:)-1kj8y","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/minormax(_:by:)-74g94","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/reduce(_:_:)-37bai","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/reduce(_:_:)-9wqdh","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/removefirst(byunwrapping:)-36r1u","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/removefirst(byunwrapping:)-8bx4x","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/sorted(by:order:)-6fq6","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/sorted(by:order:)-7wkni","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/sorted(using:)-3n8u6","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/sorted(using:)-58azd","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/chunksequence\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/chunksequence\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/chunksequence\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/chunksequence\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/chunksequence\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/chunksequence\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/chunksequence\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/chunksequence\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/allsatisfy(_:)-55xgx","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/allsatisfy(_:)-rbwu","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/compactmap(_:)-5sort","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/compactmap(_:)-8ngzk","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/distinct()-2v3du","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/distinct()-8072n","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/distinct(by:)-25se9","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/distinct(by:)-2j2da","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/filter(_:)-3dzba","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/filter(_:)-4e0ca","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/find(_:)-48w8a","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/find(_:)-4hrdg","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/find(_:mutate:)-2zy72","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/find(_:mutate:)-9n2bk","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/first(byunwrapping:)-2an7x","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/first(byunwrapping:)-4dfzv","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/first(oftype:)","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/firstandonly(byunwrapping:)-19n0p","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/firstandonly(byunwrapping:)-1wl2k","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/firstandonly(oftype:)","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/flatmap(_:)-3nzp4","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/flatmap(_:)-6n9h2","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/flatmap(_:)-7my52","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/hasprefix(_:)-5xjbv","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/hasprefix(_:)-9sl7g","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/joined(separator:)","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/longestconsecutivesequences(by:relativeto:)-1fw8x","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/longestconsecutivesequences(by:relativeto:)-2sgx8","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/map(_:)-819uz","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/map(_:)-g0j","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/minormax(_:by:)-1kj8y","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/minormax(_:by:)-74g94","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/reduce(_:_:)-37bai","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/reduce(_:_:)-9wqdh","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/removefirst(byunwrapping:)-36r1u","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/removefirst(byunwrapping:)-8bx4x","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/sorted(by:order:)-6fq6","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/sorted(by:order:)-7wkni","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/sorted(using:)-3n8u6","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/sorted(using:)-58azd","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/chunksequence\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/chunksequence\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/chunksequence\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/chunksequence\/map(_:)-4dx2k","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/chunksequence\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/chunksequence","title":"ChunkSequence","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpath\/init(_:)","title":"init([any CodingKey])","type":"init"},{"path":"\/documentation\/diagnostics\/codingpath\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpath\/description","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpath\/append(_:)-1pfl1","title":"func append(any CodingKey)","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/append(_:)-83aru","title":"func append(CodingPathElement)","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/makeiterator()","title":"func makeIterator() -> Array<CodingPathElement>.Iterator","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpath\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/decodeifpresent(from:)-atbj","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/decodeifpresent(from:)-qhjj","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/codingpath\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpath\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/codingpath\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpath\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/codingpath\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpath\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/codingpath\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpath\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/codingpath\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpath\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/codingpath\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpath\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpath\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/memoize(with:_:)-654lt","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/memoize(with:_:)-6kllj","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/codingpath\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpath\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/codingpath\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/codingpath\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/codingpath\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/codingpath\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpath\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/allsatisfy(_:)-7uu00","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/allsatisfy(_:)-8lbe6","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/compactmap(_:)-9ix8g","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/compactmap(_:)-9mmcj","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/distinct()","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/distinct(by:)-30fxk","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/distinct(by:)-4remn","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/filter(_:)-5ysfo","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/filter(_:)-69q2z","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/find(_:)-51gsd","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/find(_:)-75h2k","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/find(_:mutate:)-7pk0d","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/find(_:mutate:)-8daw2","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/first(byunwrapping:)-1iifk","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/first(byunwrapping:)-2nvxq","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/first(oftype:)","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/firstandonly(byunwrapping:)-68gpv","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/firstandonly(byunwrapping:)-8dtjh","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/firstandonly(oftype:)","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/flatmap(_:)-2be7w","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/flatmap(_:)-5zlz4","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/flatmap(_:)-9vok0","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/hasprefix(_:)","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/longestconsecutivesequences(by:relativeto:)-38966","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/longestconsecutivesequences(by:relativeto:)-5f7a4","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/map(_:)-1es93","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/map(_:)-3clqi","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/minormax(_:by:)-47ev9","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/minormax(_:by:)-8s9qs","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/reduce(_:_:)-5a8vl","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/reduce(_:_:)-69579","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/removefirst(byunwrapping:)-2x0dx","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/removefirst(byunwrapping:)-6c5eg","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/sorted(by:order:)-5zth4","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/sorted(by:order:)-7asqy","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/sorted(using:)-32az4","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/sorted(using:)-41aal","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpath\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/codingpath\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpath\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/codingpath\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/codingpath\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/codingpath\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/codingpath\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpath\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/allsatisfy(_:)-7uu00","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/allsatisfy(_:)-8lbe6","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/compactmap(_:)-9ix8g","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/compactmap(_:)-9mmcj","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/distinct()","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/distinct(by:)-30fxk","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/distinct(by:)-4remn","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/filter(_:)-5ysfo","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/filter(_:)-69q2z","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/find(_:)-51gsd","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/find(_:)-75h2k","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/find(_:mutate:)-7pk0d","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/find(_:mutate:)-8daw2","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/first(byunwrapping:)-1iifk","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/first(byunwrapping:)-2nvxq","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/first(oftype:)","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/firstandonly(byunwrapping:)-68gpv","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/firstandonly(byunwrapping:)-8dtjh","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/firstandonly(oftype:)","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/flatmap(_:)-2be7w","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/flatmap(_:)-5zlz4","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/flatmap(_:)-9vok0","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/hasprefix(_:)","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/longestconsecutivesequences(by:relativeto:)-38966","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/longestconsecutivesequences(by:relativeto:)-5f7a4","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/map(_:)-1es93","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/map(_:)-3clqi","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/minormax(_:by:)-47ev9","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/minormax(_:by:)-8s9qs","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/reduce(_:_:)-5a8vl","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/reduce(_:_:)-69579","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/removefirst(byunwrapping:)-2x0dx","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/removefirst(byunwrapping:)-6c5eg","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/sorted(by:order:)-5zth4","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/sorted(by:order:)-7asqy","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/sorted(using:)-32az4","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/sorted(using:)-41aal","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpath\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpath\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/codingpath\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/codingpath","title":"CodingPath","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/compactsequence\/init(_:)","title":"init(CompactSequence<S>.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/compactsequence\/value-swift.property","title":"var value: CompactSequence<S>.Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/compactsequence\/makeiterator()","title":"func makeIterator() -> CompactSequenceIterator<S.Iterator>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/compactsequence\/value-swift.typealias","title":"CompactSequence.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/compactsequence\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/compactsequence\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/compactsequence\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/compactsequence\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/compactsequence\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/compactsequence\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/compactsequence\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/compactsequence\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/compactsequence\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/compactsequence\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/allsatisfy(_:)-1jk3","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/allsatisfy(_:)-1ox6t","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/compactmap(_:)-38cv1","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/compactmap(_:)-42tcy","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/contains(_:)-2hv0s","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/contains(_:)-63tvy","title":"func contains<Value>(CasePath<Self.Element, Value>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/distinct()-8dzce","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/distinct()-8p3gl","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/distinct(by:)-29oic","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/distinct(by:)-47zxa","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/fill(using:)-4rfw0","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/fill(using:)-5ab1b","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/fill(using:)-9e51m","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/filter(_:)-22zjm","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/filter(_:)-8bmpz","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/find(_:)-2b206","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/find(_:)-4yx5q","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/find(_:mutate:)-697lg","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/find(_:mutate:)-afof","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/first(byunwrapping:)-6j3sm","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/first(byunwrapping:)-7khwq","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/first(oftype:)-17kq5","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/first(oftype:)-8dfkm","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/firstandonly(byunwrapping:)-7imnw","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/firstandonly(byunwrapping:)-91upp","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/firstandonly(oftype:)-68uk","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/firstandonly(oftype:)-6amtt","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/flatmap(_:)-3fa6","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/flatmap(_:)-3m5hd","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/flatmap(_:)-4b5en","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/hasprefix(_:)-357e","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/hasprefix(_:)-9zg3u","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/joined(separator:)-4t8q8","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/joined(separator:)-4xyqe","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/longestconsecutivesequences(by:relativeto:)-4v0v5","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/longestconsecutivesequences(by:relativeto:)-5qi88","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/map(_:)-4tp3r","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/map(_:)-6luct","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/minormax(_:by:)-94ira","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/minormax(_:by:)-huko","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/reduce(_:_:)-2qrum","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/reduce(_:_:)-55l6h","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/removefirst(_:)-2opwv","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/removefirst(_:)-36ypz","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/removefirst(byunwrapping:)-35ykm","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/removefirst(byunwrapping:)-7bms4","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/sorted(by:order:)-59mqg","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/sorted(by:order:)-7d5bm","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/sorted(using:)-14nau","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/sorted(using:)-3cqpi","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/compactsequence\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/compactsequence\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/compactsequence\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/compactsequence\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/compactsequence\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/compactsequence\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/compactsequence\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/compactsequence\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/compactsequence\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/compactsequence\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/allsatisfy(_:)-1jk3","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/allsatisfy(_:)-1ox6t","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/compactmap(_:)-38cv1","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/compactmap(_:)-42tcy","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/contains(_:)-2hv0s","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/contains(_:)-63tvy","title":"func contains<Value>(CasePath<Self.Element, Value>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/distinct()-8dzce","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/distinct()-8p3gl","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/distinct(by:)-29oic","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/distinct(by:)-47zxa","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/fill(using:)-4rfw0","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/fill(using:)-5ab1b","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/fill(using:)-9e51m","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/filter(_:)-22zjm","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/filter(_:)-8bmpz","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/find(_:)-2b206","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/find(_:)-4yx5q","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/find(_:mutate:)-697lg","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/find(_:mutate:)-afof","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/first(byunwrapping:)-6j3sm","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/first(byunwrapping:)-7khwq","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/first(oftype:)-17kq5","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/first(oftype:)-8dfkm","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/firstandonly(byunwrapping:)-7imnw","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/firstandonly(byunwrapping:)-91upp","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/firstandonly(oftype:)-68uk","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/firstandonly(oftype:)-6amtt","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/flatmap(_:)-3fa6","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/flatmap(_:)-3m5hd","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/flatmap(_:)-4b5en","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/hasprefix(_:)-357e","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/hasprefix(_:)-9zg3u","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/joined(separator:)-4t8q8","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/joined(separator:)-4xyqe","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/longestconsecutivesequences(by:relativeto:)-4v0v5","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/longestconsecutivesequences(by:relativeto:)-5qi88","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/map(_:)-4tp3r","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/map(_:)-6luct","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/minormax(_:by:)-94ira","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/minormax(_:by:)-huko","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/reduce(_:_:)-2qrum","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/reduce(_:_:)-55l6h","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/removefirst(_:)-2opwv","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/removefirst(_:)-36ypz","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/removefirst(byunwrapping:)-35ykm","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/removefirst(byunwrapping:)-7bms4","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/sorted(by:order:)-59mqg","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/sorted(by:order:)-7d5bm","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/sorted(using:)-14nau","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/sorted(using:)-3cqpi","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequence\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/compactsequence\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/compactsequence\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/compactsequence\/map(_:)-4qr2","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/compactsequence\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/compactsequence","title":"CompactSequence","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/compactsequenceiterator\/init(_:)","title":"init(CompactSequenceIterator<G>.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/compactsequenceiterator\/value-swift.property","title":"var value: CompactSequenceIterator<G>.Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/compactsequenceiterator\/next()","title":"func next() -> G.Element.Wrapped?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/compactsequenceiterator\/value-swift.typealias","title":"CompactSequenceIterator.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/compactsequenceiterator\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/compactsequenceiterator\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/compactsequenceiterator\/erasetoanyiterator()","title":"func eraseToAnyIterator() -> AnyIterator<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequenceiterator\/exhaust()","title":"func exhaust()","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequenceiterator\/exhaust(count:)","title":"func exhaust<N>(count: N) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequenceiterator\/exhausting()","title":"func exhausting() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequenceiterator\/join(_:)","title":"func join<G>(G) -> Join2Iterator<Self, G>","type":"method"},{"path":"\/documentation\/diagnostics\/compactsequenceiterator\/makesequence()","title":"func makeSequence() -> IteratorSequence<Self>","type":"method"}],"path":"\/documentation\/diagnostics\/compactsequenceiterator\/iteratorprotocol-implementations","title":"IteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/compactsequenceiterator\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/compactsequenceiterator\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/compactsequenceiterator","title":"CompactSequenceIterator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/consecutiveiterator\/init(_:)","title":"init(Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/consecutiveiterator\/value","title":"var value: Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/consecutiveiterator\/next()","title":"func next() -> ConsecutiveIterator<Value>.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/consecutiveiterator\/element","title":"ConsecutiveIterator.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/consecutiveiterator\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/consecutiveiterator\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/consecutiveiterator\/erasetoanyiterator()","title":"func eraseToAnyIterator() -> AnyIterator<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/consecutiveiterator\/exhaust()","title":"func exhaust()","type":"method"},{"path":"\/documentation\/diagnostics\/consecutiveiterator\/exhaust(count:)","title":"func exhaust<N>(count: N) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/consecutiveiterator\/exhausting()","title":"func exhausting() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/consecutiveiterator\/join(_:)","title":"func join<G>(G) -> Join2Iterator<Self, G>","type":"method"},{"path":"\/documentation\/diagnostics\/consecutiveiterator\/makesequence()","title":"func makeSequence() -> IteratorSequence<Self>","type":"method"}],"path":"\/documentation\/diagnostics\/consecutiveiterator\/iteratorprotocol-implementations","title":"IteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/consecutiveiterator\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/consecutiveiterator\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/consecutiveiterator","title":"ConsecutiveIterator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/contiguouscollectiondifference\/init(changes:)","title":"init(changes: [ContiguousCollectionDifference<ChangeElements>.ContiguousChange])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/contiguouscollectiondifference\/insertions","title":"var insertions: [ContiguousCollectionDifference<ChangeElements>.ContiguousChange]","type":"property"},{"path":"\/documentation\/diagnostics\/contiguouscollectiondifference\/removals","title":"var removals: [ContiguousCollectionDifference<ChangeElements>.ContiguousChange]","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/contiguouscollectiondifference\/contiguouschange\/insert(offsetrange:elements:)","title":"case insert(offsetRange: Range<Int>, elements: ChangeElements)","type":"case"},{"path":"\/documentation\/diagnostics\/contiguouscollectiondifference\/contiguouschange\/remove(offsetrange:elements:)","title":"case remove(offsetRange: Range<Int>, elements: ChangeElements)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/contiguouscollectiondifference\/contiguouschange\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/contiguouscollectiondifference\/contiguouschange\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/contiguouscollectiondifference\/contiguouschange\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/contiguouscollectiondifference\/contiguouschange\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/contiguouscollectiondifference\/contiguouschange\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/contiguouscollectiondifference\/contiguouschange\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/contiguouscollectiondifference\/contiguouschange\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/contiguouscollectiondifference\/contiguouschange\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/contiguouscollectiondifference\/contiguouschange","title":"ContiguousCollectionDifference.ContiguousChange","type":"enum"}],"path":"\/documentation\/diagnostics\/contiguouscollectiondifference","title":"ContiguousCollectionDifference","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customstringconvertibleonly\/init(_:)","title":"init<T>(T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customstringconvertibleonly\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/diagnostics\/customstringconvertibleonly\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/diagnostics\/customstringconvertibleonly\/value-swift.property","title":"let value: CustomStringConvertibleOnly.Value","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customstringconvertibleonly\/value-swift.typealias","title":"CustomStringConvertibleOnly.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customstringconvertibleonly\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/customstringconvertibleonly\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customstringconvertibleonly\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/customstringconvertibleonly\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/customstringconvertibleonly","title":"CustomStringConvertibleOnly","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customstringerror\/init(_:)-8apf6","title":"init(String)","type":"init"},{"path":"\/documentation\/diagnostics\/customstringerror\/init(_:)-8pgb9","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/diagnostics\/customstringerror\/init(describing:)","title":"init<T>(describing: T)","type":"init"},{"path":"\/documentation\/diagnostics\/customstringerror\/init(description:)","title":"init(description: String)","type":"init"},{"path":"\/documentation\/diagnostics\/customstringerror\/init(from:)-1jkkf","title":"init(from: any Error)","type":"init"},{"path":"\/documentation\/diagnostics\/customstringerror\/init(from:)-91lpq","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/diagnostics\/customstringerror\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customstringerror\/description","title":"let description: String","type":"property"},{"path":"\/documentation\/diagnostics\/customstringerror\/localizeddescription","title":"var localizedDescription: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customstringerror\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/customstringerror\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/customstringerror\/decodeifpresent(from:)-4jmo9","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/customstringerror\/decodeifpresent(from:)-6ljji","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/customstringerror\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/customstringerror\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customstringerror\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/customstringerror\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/customstringerror\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customstringerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/customstringerror\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customstringerror\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/customstringerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customstringerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/customstringerror\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customstringerror\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/customstringerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customstringerror\/throw()","title":"func `throw`() throws -> Never","type":"method"}],"path":"\/documentation\/diagnostics\/customstringerror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customstringerror\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/diagnostics\/customstringerror\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customstringerror\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/diagnostics\/customstringerror\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customstringerror\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/customstringerror\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/customstringerror\/memoize(with:_:)-17yjd","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/customstringerror\/memoize(with:_:)-3jg07","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/customstringerror\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/customstringerror","title":"CustomStringError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/cycliciterator\/init(_:)","title":"init<G>(G)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/cycliciterator\/cache","title":"var cache: [Element]","type":"property"},{"path":"\/documentation\/diagnostics\/cycliciterator\/iscachecomplete","title":"var isCacheComplete: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/cycliciterator\/value","title":"var value: AnyIterator<Element>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/cycliciterator\/next()","title":"func next() -> Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/cycliciterator\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/cycliciterator\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/cycliciterator\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/cycliciterator\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/cycliciterator\/erasetoanyiterator()","title":"func eraseToAnyIterator() -> AnyIterator<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/cycliciterator\/exhaust()","title":"func exhaust()","type":"method"},{"path":"\/documentation\/diagnostics\/cycliciterator\/exhaust(count:)","title":"func exhaust<N>(count: N) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cycliciterator\/exhausting()","title":"func exhausting() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/cycliciterator\/join(_:)","title":"func join<G>(G) -> Join2Iterator<Self, G>","type":"method"},{"path":"\/documentation\/diagnostics\/cycliciterator\/makesequence()","title":"func makeSequence() -> IteratorSequence<Self>","type":"method"}],"path":"\/documentation\/diagnostics\/cycliciterator\/iteratorprotocol-implementations","title":"IteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/cycliciterator\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/cycliciterator\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/cycliciterator","title":"CyclicIterator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/init(_:)","title":"init(CyclicSequence<S>.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/value-swift.property","title":"var value: CyclicSequence<S>.Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/makeiterator()","title":"func makeIterator() -> CyclicIterator<S.Element>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/value-swift.typealias","title":"CyclicSequence.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/cyclicsequence\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/cyclicsequence\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/allsatisfy(_:)-14jt3","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/allsatisfy(_:)-36sz","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/compactmap(_:)-6ubqe","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/compactmap(_:)-6zfcz","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/contains(_:)-144vt","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/contains(_:)-4z75y","title":"func contains<Value>(CasePath<Self.Element, Value>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/distinct()-5zzvt","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/distinct()-995jy","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/distinct(by:)-8uqp","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/distinct(by:)-lwp","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/fill(using:)-1oolo","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/fill(using:)-34yme","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/fill(using:)-6fi93","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/filter(_:)-2el58","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/filter(_:)-8ku76","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/find(_:)-2jel2","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/find(_:)-2my1h","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/find(_:mutate:)-4wiv2","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/find(_:mutate:)-9p712","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/first(byunwrapping:)-3l5ox","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/first(byunwrapping:)-3y1gg","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/first(oftype:)-3cywi","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/first(oftype:)-43brn","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/firstandonly(byunwrapping:)-3u4pz","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/firstandonly(byunwrapping:)-7mscl","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/firstandonly(oftype:)-3mtra","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/firstandonly(oftype:)-7y0tg","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/flatmap(_:)-4ceqz","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/flatmap(_:)-5m5zw","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/flatmap(_:)-9n42l","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/hasprefix(_:)-16x71","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/hasprefix(_:)-1q1f4","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/joined(separator:)-1uv26","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/joined(separator:)-28vfi","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/longestconsecutivesequences(by:relativeto:)-4c4oh","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/longestconsecutivesequences(by:relativeto:)-9rmd1","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/map(_:)-5d94y","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/map(_:)-9a52c","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/minormax(_:by:)-12bbq","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/minormax(_:by:)-52dqh","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/reduce(_:_:)-1fqau","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/reduce(_:_:)-4tvoe","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/removefirst(_:)-3d7te","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/removefirst(_:)-7e798","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/removefirst(byunwrapping:)-3bsa4","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/removefirst(byunwrapping:)-6bvgw","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/sorted(by:order:)-2u5bs","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/sorted(by:order:)-3l36o","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/sorted(using:)-1rmki","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/sorted(using:)-2hywi","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/cyclicsequence\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/allsatisfy(_:)-14jt3","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/allsatisfy(_:)-36sz","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/compactmap(_:)-6ubqe","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/compactmap(_:)-6zfcz","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/contains(_:)-144vt","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/contains(_:)-4z75y","title":"func contains<Value>(CasePath<Self.Element, Value>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/distinct()-5zzvt","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/distinct()-995jy","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/distinct(by:)-8uqp","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/distinct(by:)-lwp","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/fill(using:)-1oolo","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/fill(using:)-34yme","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/fill(using:)-6fi93","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/filter(_:)-2el58","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/filter(_:)-8ku76","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/find(_:)-2jel2","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/find(_:)-2my1h","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/find(_:mutate:)-4wiv2","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/find(_:mutate:)-9p712","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/first(byunwrapping:)-3l5ox","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/first(byunwrapping:)-3y1gg","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/first(oftype:)-3cywi","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/first(oftype:)-43brn","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/firstandonly(byunwrapping:)-3u4pz","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/firstandonly(byunwrapping:)-7mscl","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/firstandonly(oftype:)-3mtra","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/firstandonly(oftype:)-7y0tg","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/flatmap(_:)-4ceqz","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/flatmap(_:)-5m5zw","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/flatmap(_:)-9n42l","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/hasprefix(_:)-16x71","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/hasprefix(_:)-1q1f4","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/joined(separator:)-1uv26","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/joined(separator:)-28vfi","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/longestconsecutivesequences(by:relativeto:)-4c4oh","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/longestconsecutivesequences(by:relativeto:)-9rmd1","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/map(_:)-5d94y","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/map(_:)-9a52c","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/minormax(_:by:)-12bbq","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/minormax(_:by:)-52dqh","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/reduce(_:_:)-1fqau","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/reduce(_:_:)-4tvoe","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/removefirst(_:)-3d7te","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/removefirst(_:)-7e798","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/removefirst(byunwrapping:)-3bsa4","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/removefirst(byunwrapping:)-6bvgw","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/sorted(by:order:)-2u5bs","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/sorted(by:order:)-3l36o","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/sorted(using:)-1rmki","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/sorted(using:)-2hywi","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/cyclicsequence\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/cyclicsequence\/map(_:)-2ben3","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/cyclicsequence\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/cyclicsequence","title":"CyclicSequence","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/datevalue\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/diagnostics\/datevalue\/init(rawvalue:)","title":"init?(rawValue: Formatter.RawValue)","type":"init"},{"path":"\/documentation\/diagnostics\/datevalue\/init(wrappedvalue:)","title":"init(wrappedValue: Date)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/datevalue\/projectedvalue","title":"var projectedValue: DateValue<Formatter>","type":"property"},{"path":"\/documentation\/diagnostics\/datevalue\/wrappedvalue","title":"var wrappedValue: Date","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/datevalue\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/datevalue\/formatted(with:in:)","title":"func formatted(with: String, in: Calendar) -> String","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/datevalue\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/datevalue\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/datevalue\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/datevalue\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/datevalue\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/datevalue\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/datevalue\/decodeifpresent(from:)-3o8rx","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/datevalue\/decodeifpresent(from:)-40zxn","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/datevalue\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/datevalue\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/datevalue\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/datevalue\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/datevalue\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/datevalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/datevalue\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/datevalue\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/datevalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/datevalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/datevalue\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/datevalue\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/datevalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/datevalue\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/datevalue\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/datevalue\/memoize(with:_:)-38jxx","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/datevalue\/memoize(with:_:)-8cw2j","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/datevalue\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/datevalue","title":"DateValue","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/decoderunwrapper\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/decoderunwrapper\/value","title":"let value: any Decoder","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/decoderunwrapper\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/decoderunwrapper\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/decoderunwrapper\/decodeifpresent(from:)-1uzi1","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/decoderunwrapper\/decodeifpresent(from:)-4r3m2","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/decoderunwrapper\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/decoderunwrapper\/decodable-implementations","title":"Decodable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/decoderunwrapper","title":"DecoderUnwrapper","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/init(wrappedvalue:)","title":"init(wrappedValue: Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/wrappedvalue","title":"var wrappedValue: Value","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/init(from:)-9eaa0","title":"init(from: any Decoder) throws","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/decodeifpresent(from:)-17un3","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/decodeifpresent(from:)-18z8i","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/defaultemptycollection\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/encode(to:)-9f5d4","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/defaultemptycollection\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/encode(to:)-9f5d4","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/defaultemptycollection\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/defaultemptycollection\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/defaultemptycollection\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/memoize(with:_:)-2v8is","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/memoize(with:_:)-9fez9","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/defaultemptycollection\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/init(from:)-56tir","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/encode(to:)-4b65i","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/defaultemptycollection\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/diagnostics\/defaultemptycollection\/parameterlesspropertywrapper-implementations","title":"ParameterlessPropertyWrapper Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/defaultemptycollection","title":"DefaultEmptyCollection","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/init(insertions:updates:removals:)","title":"init(insertions: [DictionaryDifference<Key, Value>.Change], updates: [DictionaryDifference<Key, Value>.Change], removals: [DictionaryDifference<Key, Value>.Change])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/insertedorupdatedvalues","title":"var insertedOrUpdatedValues: [Value]","type":"property"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/insertions","title":"var insertions: [DictionaryDifference<Key, Value>.Change]","type":"property"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/removals","title":"var removals: [DictionaryDifference<Key, Value>.Change]","type":"property"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/updates","title":"var updates: [DictionaryDifference<Key, Value>.Change]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/makeiterator()","title":"func makeIterator() -> AnyIterator<DictionaryDifference<Key, Value>.Change>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/merge(_:)","title":"func merge(DictionaryDifference<Key, Value>.Change)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/subscript(_:)","title":"subscript(Key) -> Value?","type":"subscript"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/change\/insert(key:value:)","title":"case insert(key: Key, value: Value)","type":"case"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/change\/remove(key:)","title":"case remove(key: Key)","type":"case"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/change\/update(key:value:)","title":"case update(key: Key, value: Value)","type":"case"}],"path":"\/documentation\/diagnostics\/dictionarydifference\/change","title":"DictionaryDifference.Change","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/allsatisfy(_:)-2e8aq","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/allsatisfy(_:)-bvi8","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/compactmap(_:)-135qe","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/compactmap(_:)-7z3be","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/distinct()-4iyd3","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/distinct()-7ggv3","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/distinct(by:)-1t2ey","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/distinct(by:)-5noqq","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/filter(_:)-62cqz","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/filter(_:)-9hb48","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/find(_:)-4n9jj","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/find(_:)-9yva4","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/find(_:mutate:)-30o4a","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/find(_:mutate:)-9sa2m","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/first(byunwrapping:)-5fqlp","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/first(byunwrapping:)-9cgyr","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/first(oftype:)","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/firstandonly(byunwrapping:)-93cg2","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/firstandonly(byunwrapping:)-9w817","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/firstandonly(oftype:)","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/flatmap(_:)-3q7hl","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/flatmap(_:)-3ssab","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/flatmap(_:)-9glkx","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/longestconsecutivesequences(by:relativeto:)-3634e","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/longestconsecutivesequences(by:relativeto:)-3916m","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/map(_:)-15wzj","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/map(_:)-9v9vo","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/minormax(_:by:)-3i8j7","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/minormax(_:by:)-4joce","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/reduce(_:_:)-19hb5","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/reduce(_:_:)-288oe","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/removefirst(byunwrapping:)-75gjn","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/removefirst(byunwrapping:)-8vgv1","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/sorted(by:order:)-1exr9","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/sorted(by:order:)-43yxj","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/sorted(using:)-7mq8s","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/sorted(using:)-9a0g6","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/dictionarydifference\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/allsatisfy(_:)-2e8aq","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/allsatisfy(_:)-bvi8","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/compactmap(_:)-135qe","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/compactmap(_:)-7z3be","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/distinct()-4iyd3","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/distinct()-7ggv3","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/distinct(by:)-1t2ey","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/distinct(by:)-5noqq","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/filter(_:)-62cqz","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/filter(_:)-9hb48","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/find(_:)-4n9jj","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/find(_:)-9yva4","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/find(_:mutate:)-30o4a","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/find(_:mutate:)-9sa2m","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/first(byunwrapping:)-5fqlp","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/first(byunwrapping:)-9cgyr","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/first(oftype:)","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/firstandonly(byunwrapping:)-93cg2","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/firstandonly(byunwrapping:)-9w817","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/firstandonly(oftype:)","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/flatmap(_:)-3q7hl","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/flatmap(_:)-3ssab","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/flatmap(_:)-9glkx","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/longestconsecutivesequences(by:relativeto:)-3634e","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/longestconsecutivesequences(by:relativeto:)-3916m","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/map(_:)-15wzj","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/map(_:)-9v9vo","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/minormax(_:by:)-3i8j7","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/minormax(_:by:)-4joce","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/reduce(_:_:)-19hb5","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/reduce(_:_:)-288oe","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/removefirst(byunwrapping:)-75gjn","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/removefirst(byunwrapping:)-8vgv1","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/sorted(by:order:)-1exr9","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/sorted(by:order:)-43yxj","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/sorted(using:)-7mq8s","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/sorted(using:)-9a0g6","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/dictionarydifference\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/dictionarydifference\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/dictionarydifference","title":"DictionaryDifference","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/init(_:)","title":"init(DistanceIndexedCollection<C>.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/value-swift.property","title":"let value: DistanceIndexedCollection<C>.Value","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/value-swift.typealias","title":"DistanceIndexedCollection.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/bounds","title":"var bounds: Range<Self.Index>","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/last","title":"var last: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/lastindex","title":"var lastIndex: Self.Index?","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/second","title":"var second: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/startindex","title":"var startIndex: Int","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/allsubrangeschunked(by:)","title":"func allSubrangesChunked<C>(by: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/chunked(by:)","title":"func chunked(by: Int) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/consecutives()","title":"func consecutives() -> AnySequence<(Self.Element, Self.Element)>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/consecutivesallowinghalfemptypairs()","title":"func consecutivesAllowingHalfEmptyPairs() -> LazyMapSequence<Self._EnumeratedSequence, (Self.Element, Self.Element?)>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/contains(_:)","title":"func contains(Range<Self.Index>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/contains(after:)","title":"func contains(after: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/containsindex(_:)","title":"func containsIndex(Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/cycle(index:)","title":"func cycle(index: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/distancefromstartindex(to:)","title":"func distanceFromStartIndex(to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/enumeratelazysubsequences(matching:)","title":"func enumerateLazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<(Range<Self.Index>, Self.SubSequence), Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/erasetoanycollection()","title":"func eraseToAnyCollection() -> AnyCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/index(_:insetby:)","title":"func index(Self.Index, insetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/index(_:offsetbydistancefromstartindexfor:)","title":"func index(Self.Index, offsetByDistanceFromStartIndexFor: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/index(after:)","title":"func index(after: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/index(atdistance:)","title":"func index(atDistance: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/index(before:)","title":"func index(before: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/indices(of:)-4begf","title":"func indices(of: Self.Element) -> [Self.Index]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/indices(of:)-97e5t","title":"func indices(of: Self.Element) -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/indices(where:)","title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/join(_:_:)","title":"func join<C0, C1>(C0, C1) -> Join3Collection<Self, C0, C1>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/lazysubsequences(matching:)","title":"func lazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<Self.SubSequence, Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/map(_:)-78r66","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/nilifempty()","title":"func nilIfEmpty() -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/popfirst()","title":"func popFirst() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/prefix(till:)","title":"func prefix(till: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/range(from:)","title":"func range(from: Range<Int>) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/removefirst()","title":"func removeFirst() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/removefirst(_:)-4zhsa","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/removingsubranges(_:)","title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/sharedkeysbyequalvalue(where:)","title":"func sharedKeysByEqualValue<T, U>(where: (U, U) throws -> Bool) rethrows -> [T : U]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/split(separator:maxsplits:omittingemptysubsequences:)-2cj8v","title":"func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/split(separator:maxsplits:omittingemptysubsequences:)-2lxrv","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-5fmw8","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: (Self.Element) throws -> Separator?) rethrows -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-gw2k","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: CasePath<Self.Element, Separator>) -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/splitincludingseparators(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func splitIncludingSeparators(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/splittingfirst()","title":"func splittingFirst() -> (head: Self.Element, tail: Self.SubSequence)?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/tocollectionofone()","title":"func toCollectionOfOne() throws -> CollectionOfOne<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/tocollectionofzeroorone()","title":"func toCollectionOfZeroOrOne() throws -> CollectionOfOne<Self.Element>?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/trimprefix(_:)","title":"func trimPrefix<Prefix>(Prefix)","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/trimprefix(while:)","title":"func trimPrefix(while: (Self.Element) throws -> Bool) throws","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/unfoldingforward()","title":"func unfoldingForward() -> UnfoldSequence<(Self.Element, Self.SubSequence), Self.SubSequence>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(_:)-12p81","title":"subscript(FirstOrLastCollectionIndex) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(_:)-2l6i9","title":"subscript(RelativeIndex) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(_:)-37e2i","title":"subscript(Int) -> DistanceIndexedCollection<C>.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(_:)-4kjig","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(_:)-6y9j4","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(_:)-94h3z","title":"subscript(Range<Int>) -> DistanceIndexedCollection<C>.SubSequence","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(_:)-98lji","title":"subscript(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(after:)","title":"subscript(after _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(atdistance:)","title":"subscript(atDistance _: Int) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(cycling:)","title":"subscript(cycling _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(try:)-3w0mj","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(try:)-8mlj1","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(try:)-91w6l","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subsequence","title":"DistanceIndexedCollection.SubSequence","type":"typealias"}],"path":"\/documentation\/diagnostics\/distanceindexedcollection\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/bounds","title":"var bounds: Range<Self.Index>","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/last","title":"var last: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/lastindex","title":"var lastIndex: Self.Index?","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/second","title":"var second: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/startindex","title":"var startIndex: Int","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/allsubrangeschunked(by:)","title":"func allSubrangesChunked<C>(by: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/chunked(by:)","title":"func chunked(by: Int) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/consecutives()","title":"func consecutives() -> AnySequence<(Self.Element, Self.Element)>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/consecutivesallowinghalfemptypairs()","title":"func consecutivesAllowingHalfEmptyPairs() -> LazyMapSequence<Self._EnumeratedSequence, (Self.Element, Self.Element?)>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/contains(_:)","title":"func contains(Range<Self.Index>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/contains(after:)","title":"func contains(after: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/containsindex(_:)","title":"func containsIndex(Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/cycle(index:)","title":"func cycle(index: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/distancefromstartindex(to:)","title":"func distanceFromStartIndex(to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/enumeratelazysubsequences(matching:)","title":"func enumerateLazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<(Range<Self.Index>, Self.SubSequence), Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/erasetoanycollection()","title":"func eraseToAnyCollection() -> AnyCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/index(_:insetby:)","title":"func index(Self.Index, insetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/index(_:offsetbydistancefromstartindexfor:)","title":"func index(Self.Index, offsetByDistanceFromStartIndexFor: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/index(after:)","title":"func index(after: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/index(atdistance:)","title":"func index(atDistance: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/index(before:)","title":"func index(before: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/indices(of:)-4begf","title":"func indices(of: Self.Element) -> [Self.Index]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/indices(of:)-97e5t","title":"func indices(of: Self.Element) -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/indices(where:)","title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/join(_:_:)","title":"func join<C0, C1>(C0, C1) -> Join3Collection<Self, C0, C1>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/lazysubsequences(matching:)","title":"func lazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<Self.SubSequence, Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/map(_:)-78r66","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/nilifempty()","title":"func nilIfEmpty() -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/popfirst()","title":"func popFirst() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/prefix(till:)","title":"func prefix(till: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/range(from:)","title":"func range(from: Range<Int>) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/removefirst()","title":"func removeFirst() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/removefirst(_:)-4zhsa","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/removingsubranges(_:)","title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/sharedkeysbyequalvalue(where:)","title":"func sharedKeysByEqualValue<T, U>(where: (U, U) throws -> Bool) rethrows -> [T : U]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/split(separator:maxsplits:omittingemptysubsequences:)-2cj8v","title":"func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/split(separator:maxsplits:omittingemptysubsequences:)-2lxrv","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-5fmw8","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: (Self.Element) throws -> Separator?) rethrows -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-gw2k","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: CasePath<Self.Element, Separator>) -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/splitincludingseparators(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func splitIncludingSeparators(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/splittingfirst()","title":"func splittingFirst() -> (head: Self.Element, tail: Self.SubSequence)?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/tocollectionofone()","title":"func toCollectionOfOne() throws -> CollectionOfOne<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/tocollectionofzeroorone()","title":"func toCollectionOfZeroOrOne() throws -> CollectionOfOne<Self.Element>?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/trimprefix(_:)","title":"func trimPrefix<Prefix>(Prefix)","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/trimprefix(while:)","title":"func trimPrefix(while: (Self.Element) throws -> Bool) throws","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/unfoldingforward()","title":"func unfoldingForward() -> UnfoldSequence<(Self.Element, Self.SubSequence), Self.SubSequence>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(_:)-12p81","title":"subscript(FirstOrLastCollectionIndex) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(_:)-2l6i9","title":"subscript(RelativeIndex) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(_:)-37e2i","title":"subscript(Int) -> DistanceIndexedCollection<C>.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(_:)-4kjig","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(_:)-6y9j4","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(_:)-94h3z","title":"subscript(Range<Int>) -> DistanceIndexedCollection<C>.SubSequence","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(_:)-98lji","title":"subscript(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(after:)","title":"subscript(after _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(atdistance:)","title":"subscript(atDistance _: Int) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(cycling:)","title":"subscript(cycling _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(try:)-3w0mj","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(try:)-8mlj1","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(try:)-91w6l","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subsequence","title":"DistanceIndexedCollection.SubSequence","type":"typealias"}],"path":"\/documentation\/diagnostics\/distanceindexedcollection\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/distanceindexedcollection\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/distanceindexedcollection\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/allsatisfy(_:)-6x3qq","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/allsatisfy(_:)-tqhu","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/compactmap(_:)-5j3iz","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/compactmap(_:)-96as3","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/distinct()-1l1gf","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/distinct()-78cod","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/distinct(by:)-2fk9y","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/distinct(by:)-tfwh","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/fill(using:)-1hz01","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/fill(using:)-4mosp","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/fill(using:)-7bd81","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/filter(_:)-4ltih","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/filter(_:)-6r2oi","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/find(_:)-639zj","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/find(_:)-9z1an","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/find(_:mutate:)-4fubt","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/find(_:mutate:)-86lbo","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/first(byunwrapping:)-76x5s","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/first(byunwrapping:)-7lyhv","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/first(oftype:)-80ocy","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/first(oftype:)-8ojrr","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/firstandonly(byunwrapping:)-4yc0v","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/firstandonly(byunwrapping:)-96rr0","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/firstandonly(oftype:)-255me","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/firstandonly(oftype:)-6aum0","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/flatmap(_:)-68pz9","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/flatmap(_:)-8m06n","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/flatmap(_:)-97dj9","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/hasprefix(_:)-6c9e","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/hasprefix(_:)-7xttt","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/joined(separator:)-1zkwd","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/joined(separator:)-3ozsj","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/longestconsecutivesequences(by:relativeto:)-2ffep","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/longestconsecutivesequences(by:relativeto:)-2rb18","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/makeiterator()","title":"func makeIterator() -> DistanceIndexedCollection<C>.Iterator","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/map(_:)-2xd0d","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/map(_:)-64fgn","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/minormax(_:by:)-355wo","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/minormax(_:by:)-41isj","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/reduce(_:_:)-63hgf","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/reduce(_:_:)-7nglo","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/removefirst(_:)-28uj7","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/removefirst(_:)-75nys","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/removefirst(byunwrapping:)-1dwig","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/removefirst(byunwrapping:)-6omkv","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/sorted(by:order:)-9203f","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/sorted(by:order:)-9uyu","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/sorted(using:)-2rfo1","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/sorted(using:)-4xs06","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/split(separator:maxsplits:omittingemptysubsequences:)-5xg0r","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/element","title":"DistanceIndexedCollection.Element","type":"typealias"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/iterator","title":"DistanceIndexedCollection.Iterator","type":"typealias"}],"path":"\/documentation\/diagnostics\/distanceindexedcollection\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/allsatisfy(_:)-6x3qq","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/allsatisfy(_:)-tqhu","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/compactmap(_:)-5j3iz","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/compactmap(_:)-96as3","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/distinct()-1l1gf","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/distinct()-78cod","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/distinct(by:)-2fk9y","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/distinct(by:)-tfwh","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/fill(using:)-1hz01","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/fill(using:)-4mosp","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/fill(using:)-7bd81","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/filter(_:)-4ltih","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/filter(_:)-6r2oi","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/find(_:)-639zj","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/find(_:)-9z1an","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/find(_:mutate:)-4fubt","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/find(_:mutate:)-86lbo","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/first(byunwrapping:)-76x5s","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/first(byunwrapping:)-7lyhv","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/first(oftype:)-80ocy","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/first(oftype:)-8ojrr","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/firstandonly(byunwrapping:)-4yc0v","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/firstandonly(byunwrapping:)-96rr0","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/firstandonly(oftype:)-255me","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/firstandonly(oftype:)-6aum0","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/flatmap(_:)-68pz9","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/flatmap(_:)-8m06n","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/flatmap(_:)-97dj9","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/hasprefix(_:)-6c9e","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/hasprefix(_:)-7xttt","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/joined(separator:)-1zkwd","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/joined(separator:)-3ozsj","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/longestconsecutivesequences(by:relativeto:)-2ffep","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/longestconsecutivesequences(by:relativeto:)-2rb18","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/makeiterator()","title":"func makeIterator() -> DistanceIndexedCollection<C>.Iterator","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/map(_:)-2xd0d","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/map(_:)-64fgn","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/minormax(_:by:)-355wo","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/minormax(_:by:)-41isj","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/reduce(_:_:)-63hgf","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/reduce(_:_:)-7nglo","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/removefirst(_:)-28uj7","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/removefirst(_:)-75nys","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/removefirst(byunwrapping:)-1dwig","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/removefirst(byunwrapping:)-6omkv","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/sorted(by:order:)-9203f","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/sorted(by:order:)-9uyu","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/sorted(using:)-2rfo1","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/sorted(using:)-4xs06","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/split(separator:maxsplits:omittingemptysubsequences:)-5xg0r","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/element","title":"DistanceIndexedCollection.Element","type":"typealias"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/iterator","title":"DistanceIndexedCollection.Iterator","type":"typealias"}],"path":"\/documentation\/diagnostics\/distanceindexedcollection\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/distanceindexedcollection\/map(_:)-8qkjz","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/distanceindexedcollection\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/distanceindexedcollection","title":"DistanceIndexedCollection","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/emptyvalue\/init()","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/emptyvalue\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/emptyvalue\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/emptyvalue\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/emptyvalue\/decodeifpresent(from:)-4rudu","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/emptyvalue\/decodeifpresent(from:)-8xkqr","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/emptyvalue\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/emptyvalue\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/emptyvalue\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/emptyvalue\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/emptyvalue\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/emptyvalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/emptyvalue\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/emptyvalue\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/emptyvalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/emptyvalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/emptyvalue\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/emptyvalue\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/emptyvalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/emptyvalue\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/emptyvalue\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/emptyvalue\/memoize(with:_:)-1qn7n","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/emptyvalue\/memoize(with:_:)-6lyh4","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/emptyvalue\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/emptyvalue","title":"EmptyValue","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/encodablesequence\/init(base:)","title":"init(base: Base)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/encodablesequence\/base","title":"let base: Base","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/encodablesequence\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/encodablesequence\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/encodablesequence\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/encodablesequence\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/encodablesequence","title":"EncodableSequence","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/erroneous\/init(_:)","title":"init(Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/erroneous\/value","title":"let value: Value","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/erroneous\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/erroneous\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/erroneous\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/erroneous\/decodeifpresent(from:)-93w4t","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/erroneous\/decodeifpresent(from:)-hayx","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/erroneous\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/erroneous\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/erroneous\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/erroneous\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/erroneous\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/erroneous\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/erroneous\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/erroneous\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/erroneous\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/erroneous\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/erroneous\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/erroneous\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/erroneous\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/erroneous\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/erroneous\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/erroneous\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/erroneous\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/erroneous\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/erroneous\/localizeddescription","title":"var localizedDescription: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/erroneous\/throw()","title":"func `throw`() throws -> Never","type":"method"}],"path":"\/documentation\/diagnostics\/erroneous\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/erroneous\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/erroneous\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/erroneous\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/erroneous\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/erroneous\/memoize(with:_:)-3w4g4","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/erroneous\/memoize(with:_:)-82e75","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/erroneous\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/erroneous\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/erroneous\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/erroneous","title":"Erroneous","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/errorpair\/init(_:)","title":"init(ErrorPair<T, U>.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/errorpair\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/diagnostics\/errorpair\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/diagnostics\/errorpair\/localizeddescription","title":"var localizedDescription: String","type":"property"},{"path":"\/documentation\/diagnostics\/errorpair\/value-swift.property","title":"let value: ErrorPair<T, U>.Value","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/errorpair\/value-swift.typealias","title":"ErrorPair.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/errorpair\/throw()","title":"func `throw`() throws -> Never","type":"method"}],"path":"\/documentation\/diagnostics\/errorpair\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/errorpair\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/errorpair\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/errorpair\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/errorpair\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/errorpair","title":"ErrorPair","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/errortraits\/+(_:_:)","title":"static func + (`Self`, `Self`) -> ErrorTraits","type":"op"},{"path":"\/documentation\/diagnostics\/errortraits\/+=(_:_:)","title":"static func += (inout `Self`, `Self`)","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/errortraits\/domains","title":"var domains: _ExistentialSet<any _SubsystemDomain>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/errortraits\/element","title":"ErrorTraits.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/errortraits\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/errortraits\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/errortraits\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/errortraits\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/errortraits\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/errortraits\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/errortraits\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/errortraits\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/errortraits\/init(arrayliteral:)","title":"init(arrayLiteral: Element...)","type":"init"}],"path":"\/documentation\/diagnostics\/errortraits\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/errortraits\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/errortraits\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/errortraits\/memoize(with:_:)-35eud","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/errortraits\/memoize(with:_:)-3qzoy","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/errortraits\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/errortraits","title":"ErrorTraits","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/errortraitsbuilder\/buildblock(_:)","title":"static func buildBlock(ErrorTraits) -> ErrorTraits","type":"method"},{"path":"\/documentation\/diagnostics\/errortraitsbuilder\/buildeither(first:)","title":"static func buildEither(first: ErrorTraits) -> ErrorTraits","type":"method"},{"path":"\/documentation\/diagnostics\/errortraitsbuilder\/buildeither(second:)","title":"static func buildEither(second: ErrorTraits) -> ErrorTraits","type":"method"},{"path":"\/documentation\/diagnostics\/errortraitsbuilder\/buildif(_:)","title":"static func buildIf(ErrorTraits?) -> ErrorTraits","type":"method"},{"path":"\/documentation\/diagnostics\/errortraitsbuilder\/buildpartialblock(accumulated:next:)","title":"static func buildPartialBlock(accumulated: ErrorTraits, next: ErrorTraits) -> ErrorTraits","type":"method"},{"path":"\/documentation\/diagnostics\/errortraitsbuilder\/buildpartialblock(first:)","title":"static func buildPartialBlock(first: ErrorTraits) -> ErrorTraits","type":"method"}],"path":"\/documentation\/diagnostics\/errortraitsbuilder","title":"ErrorTraitsBuilder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/failablecoding\/init()-34dn1","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/failablecoding\/init()-7qzcr","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/failablecoding\/init(wrappedvalue:)","title":"init(wrappedValue: Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/failablecoding\/projectedvalue","title":"var projectedValue: FailableCoding<Value>","type":"property"},{"path":"\/documentation\/diagnostics\/failablecoding\/unsafelyaccesedvalue","title":"var unsafelyAccesedValue: Value","type":"property"},{"path":"\/documentation\/diagnostics\/failablecoding\/wrappedvalue","title":"var wrappedValue: Value","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/failablecoding\/init(from:)-8kf3s","title":"init(from: any Decoder) throws","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/failablecoding\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/failablecoding\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/failablecoding\/decodeifpresent(from:)-30dbg","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/failablecoding\/decodeifpresent(from:)-6pbur","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/failablecoding\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/failablecoding\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/failablecoding\/encode(to:)-63bs0","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/failablecoding\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/failablecoding\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/failablecoding\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/failablecoding\/encode(to:)-63bs0","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/failablecoding\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/failablecoding\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/failablecoding\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/failablecoding\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/failablecoding\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/failablecoding\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/failablecoding\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/failablecoding\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/failablecoding\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/failablecoding\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/failablecoding\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/failablecoding\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/failablecoding\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/failablecoding\/memoize(with:_:)-1yeg9","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/failablecoding\/memoize(with:_:)-92wgo","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/failablecoding\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/failablecoding\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/failablecoding\/init(from:)-4kovf","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/failablecoding\/encode(to:)-tvn6","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/failablecoding\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/diagnostics\/failablecoding\/parameterlesspropertywrapper-implementations","title":"ParameterlessPropertyWrapper Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/failablecoding","title":"FailableCoding","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fixedcountiterator\/init(_:)","title":"init(Value)","type":"init"},{"path":"\/documentation\/diagnostics\/fixedcountiterator\/init(_:limit:)","title":"init(Value, limit: Int?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fixedcountiterator\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/diagnostics\/fixedcountiterator\/hasreachedlimit","title":"var hasReachedLimit: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/fixedcountiterator\/limit","title":"let limit: Int?","type":"property"},{"path":"\/documentation\/diagnostics\/fixedcountiterator\/value","title":"var value: Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fixedcountiterator\/next()","title":"func next() -> Value.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fixedcountiterator\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/fixedcountiterator\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fixedcountiterator\/erasetoanyiterator()","title":"func eraseToAnyIterator() -> AnyIterator<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountiterator\/exhaust()","title":"func exhaust()","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountiterator\/exhaust(count:)","title":"func exhaust<N>(count: N) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountiterator\/exhausting()","title":"func exhausting() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountiterator\/join(_:)","title":"func join<G>(G) -> Join2Iterator<Self, G>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountiterator\/makesequence()","title":"func makeSequence() -> IteratorSequence<Self>","type":"method"}],"path":"\/documentation\/diagnostics\/fixedcountiterator\/iteratorprotocol-implementations","title":"IteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fixedcountiterator\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/fixedcountiterator\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/fixedcountiterator","title":"FixedCountIterator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/init(_:)","title":"init(S)","type":"init"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/init(_:limit:)","title":"init(S, limit: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/limit","title":"var limit: Int","type":"property"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/value","title":"var value: S","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/makeiterator()","title":"func makeIterator() -> FixedCountIterator<S.Iterator>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/fixedcountsequence\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/allsatisfy(_:)-3b9om","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/allsatisfy(_:)-58cie","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/compactmap(_:)-2gzxa","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/compactmap(_:)-8lb9t","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/contains(_:)-5ievl","title":"func contains<Value>(CasePath<Self.Element, Value>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/contains(_:)-77y9m","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/distinct()-53nkg","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/distinct()-9gkij","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/distinct(by:)-9ig9y","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/distinct(by:)-pb2s","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/fill(using:)-2oggn","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/fill(using:)-5hbju","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/fill(using:)-5z2pw","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/filter(_:)-70ooi","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/filter(_:)-9c06l","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/find(_:)-8xjmy","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/find(_:)-9q8mz","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/find(_:mutate:)-6gc7h","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/find(_:mutate:)-92to5","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/first(byunwrapping:)-27ay1","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/first(byunwrapping:)-thqt","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/first(oftype:)-8crwd","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/first(oftype:)-8sm36","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/firstandonly(byunwrapping:)-5333z","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/firstandonly(byunwrapping:)-8589p","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/firstandonly(oftype:)-7q5o1","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/firstandonly(oftype:)-yptp","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/flatmap(_:)-52guz","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/flatmap(_:)-7228g","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/flatmap(_:)-8ty8a","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/hasprefix(_:)-1ot12","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/hasprefix(_:)-6zzlh","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/joined(separator:)-406hh","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/joined(separator:)-9deyx","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/longestconsecutivesequences(by:relativeto:)-2hfqb","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/longestconsecutivesequences(by:relativeto:)-5u8wd","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/map(_:)-3fc2d","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/map(_:)-5z93r","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/minormax(_:by:)-4dm9v","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/minormax(_:by:)-4hdqb","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/reduce(_:_:)-17l4k","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/reduce(_:_:)-8v8r1","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/removefirst(_:)-5yqhi","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/removefirst(_:)-vkn7","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/removefirst(byunwrapping:)-6tac3","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/removefirst(byunwrapping:)-y9q8","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/sorted(by:order:)-383z2","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/sorted(by:order:)-56grd","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/sorted(using:)-5m1zs","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/sorted(using:)-88ddu","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/fixedcountsequence\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/allsatisfy(_:)-3b9om","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/allsatisfy(_:)-58cie","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/compactmap(_:)-2gzxa","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/compactmap(_:)-8lb9t","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/contains(_:)-5ievl","title":"func contains<Value>(CasePath<Self.Element, Value>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/contains(_:)-77y9m","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/distinct()-53nkg","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/distinct()-9gkij","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/distinct(by:)-9ig9y","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/distinct(by:)-pb2s","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/fill(using:)-2oggn","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/fill(using:)-5hbju","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/fill(using:)-5z2pw","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/filter(_:)-70ooi","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/filter(_:)-9c06l","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/find(_:)-8xjmy","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/find(_:)-9q8mz","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/find(_:mutate:)-6gc7h","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/find(_:mutate:)-92to5","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/first(byunwrapping:)-27ay1","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/first(byunwrapping:)-thqt","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/first(oftype:)-8crwd","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/first(oftype:)-8sm36","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/firstandonly(byunwrapping:)-5333z","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/firstandonly(byunwrapping:)-8589p","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/firstandonly(oftype:)-7q5o1","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/firstandonly(oftype:)-yptp","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/flatmap(_:)-52guz","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/flatmap(_:)-7228g","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/flatmap(_:)-8ty8a","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/hasprefix(_:)-1ot12","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/hasprefix(_:)-6zzlh","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/joined(separator:)-406hh","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/joined(separator:)-9deyx","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/longestconsecutivesequences(by:relativeto:)-2hfqb","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/longestconsecutivesequences(by:relativeto:)-5u8wd","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/map(_:)-3fc2d","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/map(_:)-5z93r","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/minormax(_:by:)-4dm9v","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/minormax(_:by:)-4hdqb","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/reduce(_:_:)-17l4k","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/reduce(_:_:)-8v8r1","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/removefirst(_:)-5yqhi","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/removefirst(_:)-vkn7","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/removefirst(byunwrapping:)-6tac3","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/removefirst(byunwrapping:)-y9q8","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/sorted(by:order:)-383z2","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/sorted(by:order:)-56grd","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/sorted(using:)-5m1zs","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/sorted(using:)-88ddu","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/fixedcountsequence\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fixedcountsequence\/map(_:)-87dc3","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/fixedcountsequence\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/fixedcountsequence","title":"FixedCountSequence","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/functionlogscope\/init(function:)-593ec","title":"init(function: String)","type":"init"},{"path":"\/documentation\/diagnostics\/functionlogscope\/init(function:)-wkby","title":"init(function: StaticString)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/functionlogscope\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/diagnostics\/functionlogscope\/function","title":"let function: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/functionlogscope\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/functionlogscope\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/functionlogscope\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/functionlogscope\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/functionlogscope\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/functionlogscope\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/functionlogscope\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/functionlogscope\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/functionlogscope\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/functionlogscope\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/functionlogscope\/memoize(with:_:)-2ay65","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/functionlogscope\/memoize(with:_:)-3z305","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/functionlogscope\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/functionlogscope","title":"FunctionLogScope","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashidentifiedvalue\/init(_:)","title":"init(Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashidentifiedvalue\/id","title":"var id: Int","type":"property"},{"path":"\/documentation\/diagnostics\/hashidentifiedvalue\/value","title":"let value: Value","type":"property"}],"path":"\/documentation\/diagnostics\/hashidentifiedvalue","title":"HashIdentifiedValue","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashignored\/init(wrappedvalue:)","title":"init(wrappedValue: Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashignored\/wrappedvalue","title":"var wrappedValue: Value","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashignored\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashignored\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/hashignored\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/hashignored\/decodeifpresent(from:)-6fkh3","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/hashignored\/decodeifpresent(from:)-mcix","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/hashignored\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/hashignored\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashignored\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/hashignored\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/hashignored\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashignored\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/hashignored\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/hashignored\/==(_:_:)","title":"static func == (HashIgnored<Value>, HashIgnored<Value>) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashignored\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/hashignored\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashignored\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/hashignored\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/hashignored\/==(_:_:)","title":"static func == (HashIgnored<Value>, HashIgnored<Value>) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashignored\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/hashignored\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashignored\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashignored\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/hashignored\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/hashignored\/memoize(with:_:)-8ng68","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/hashignored\/memoize(with:_:)-8zzej","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/hashignored\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashignored\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashignored\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/hashignored\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/hashignored\/memoize(with:_:)-8ng68","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/hashignored\/memoize(with:_:)-8zzej","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/hashignored\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/hashignored","title":"HashIgnored","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashable2ple\/==(_:_:)","title":"static func == (Hashable2ple<T0, T1>, Hashable2ple<T0, T1>) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashable2ple\/init(_:)-139sx","title":"init((T0, T1))","type":"init"},{"path":"\/documentation\/diagnostics\/hashable2ple\/init(_:)-7ntjk","title":"init<A, B>((T0, A, B))","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashable2ple\/value","title":"let value: (T0, T1)","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashable2ple\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashable2ple\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/hashable2ple\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashable2ple\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/hashable2ple\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashable2ple\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/hashable2ple\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashable2ple\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/hashable2ple\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashable2ple\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/hashable2ple\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashable2ple\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashable2ple\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/hashable2ple\/memoize(with:_:)-8crrv","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/hashable2ple\/memoize(with:_:)-jh38","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/hashable2ple\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashable2ple\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/hashable2ple\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/hashable2ple","title":"Hashable2ple","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashableimplonly\/init(_:)","title":"init(Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashableimplonly\/value","title":"let value: Value","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashableimplonly\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/hashableimplonly\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashableimplonly\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/hashableimplonly\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashableimplonly\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/hashableimplonly\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashableimplonly\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/hashableimplonly\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashableimplonly\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashableimplonly\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/hashableimplonly\/memoize(with:_:)-gpsq","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/hashableimplonly\/memoize(with:_:)-wdtu","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/hashableimplonly\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/hashableimplonly","title":"HashableImplOnly","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashablesequence\/==(_:_:)","title":"static func == (HashableSequence<S>, HashableSequence<S>) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashablesequence\/init(_:)","title":"init(HashableSequence<S>.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashablesequence\/value-swift.property","title":"let value: HashableSequence<S>.Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashablesequence\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/makeiterator()","title":"func makeIterator() -> HashableSequence<S>.Value.Iterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashablesequence\/iterator","title":"HashableSequence.Iterator","type":"typealias"},{"path":"\/documentation\/diagnostics\/hashablesequence\/value-swift.typealias","title":"HashableSequence.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashablesequence\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/hashablesequence\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashablesequence\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/hashablesequence\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashablesequence\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/hashablesequence\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashablesequence\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/hashablesequence\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashablesequence\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashablesequence\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/memoize(with:_:)-8h4l5","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/memoize(with:_:)-99pb8","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/hashablesequence\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashablesequence\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/hashablesequence\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/hashablesequence\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/hashablesequence\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/hashablesequence\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/hashablesequence\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/hashablesequence\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashablesequence\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/allsatisfy(_:)-54vpp","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/allsatisfy(_:)-8l90i","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/compactmap(_:)-1bkjx","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/compactmap(_:)-52wot","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/distinct()","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/distinct(by:)-2on9t","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/distinct(by:)-7rzd9","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/fill(using:)-23r6","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/fill(using:)-5h03v","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/fill(using:)-uxr7","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/filter(_:)-26y5l","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/filter(_:)-52kxy","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/find(_:)-34kt2","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/find(_:)-3y591","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/find(_:mutate:)-3nfhe","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/find(_:mutate:)-85ogw","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/first(byunwrapping:)-4arvd","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/first(byunwrapping:)-4ouy9","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/first(oftype:)-5bqo3","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/first(oftype:)-8ptyx","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/firstandonly(byunwrapping:)-4m09b","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/firstandonly(byunwrapping:)-5bksi","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/firstandonly(oftype:)-9vjyq","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/firstandonly(oftype:)-bcjf","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/flatmap(_:)-4ycz0","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/flatmap(_:)-7yudq","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/flatmap(_:)-l8br","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/hasprefix(_:)","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/joined(separator:)-2zduh","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/joined(separator:)-6odlf","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/longestconsecutivesequences(by:relativeto:)-93apy","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/longestconsecutivesequences(by:relativeto:)-9jn59","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/map(_:)-6g3bq","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/map(_:)-71ys9","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/minormax(_:by:)-4mmz1","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/minormax(_:by:)-526f1","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/reduce(_:_:)-3hfck","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/reduce(_:_:)-4derr","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/removefirst(_:)-1c33x","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/removefirst(_:)-7ivfz","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/removefirst(byunwrapping:)-59the","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/removefirst(byunwrapping:)-ir2b","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/sorted(by:order:)-41dmz","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/sorted(by:order:)-66mp9","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/sorted(using:)-1jqa6","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/sorted(using:)-87z2u","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashablesequence\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/hashablesequence\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashablesequence\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/hashablesequence\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/hashablesequence\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/hashablesequence\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/hashablesequence\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/hashablesequence\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/hashablesequence\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashablesequence\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/allsatisfy(_:)-54vpp","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/allsatisfy(_:)-8l90i","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/compactmap(_:)-1bkjx","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/compactmap(_:)-52wot","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/distinct()","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/distinct(by:)-2on9t","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/distinct(by:)-7rzd9","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/fill(using:)-23r6","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/fill(using:)-5h03v","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/fill(using:)-uxr7","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/filter(_:)-26y5l","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/filter(_:)-52kxy","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/find(_:)-34kt2","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/find(_:)-3y591","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/find(_:mutate:)-3nfhe","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/find(_:mutate:)-85ogw","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/first(byunwrapping:)-4arvd","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/first(byunwrapping:)-4ouy9","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/first(oftype:)-5bqo3","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/first(oftype:)-8ptyx","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/firstandonly(byunwrapping:)-4m09b","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/firstandonly(byunwrapping:)-5bksi","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/firstandonly(oftype:)-9vjyq","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/firstandonly(oftype:)-bcjf","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/flatmap(_:)-4ycz0","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/flatmap(_:)-7yudq","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/flatmap(_:)-l8br","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/hasprefix(_:)","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/joined(separator:)-2zduh","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/joined(separator:)-6odlf","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/longestconsecutivesequences(by:relativeto:)-93apy","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/longestconsecutivesequences(by:relativeto:)-9jn59","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/map(_:)-6g3bq","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/map(_:)-71ys9","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/minormax(_:by:)-4mmz1","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/minormax(_:by:)-526f1","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/reduce(_:_:)-3hfck","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/reduce(_:_:)-4derr","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/removefirst(_:)-1c33x","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/removefirst(_:)-7ivfz","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/removefirst(byunwrapping:)-59the","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/removefirst(byunwrapping:)-ir2b","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/sorted(by:order:)-41dmz","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/sorted(by:order:)-66mp9","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/sorted(using:)-1jqa6","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/sorted(using:)-87z2u","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/hashablesequence\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/hashablesequence\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/hashablesequence\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/hashablesequence","title":"HashableSequence","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/keys","title":"var keys: [AnyHeterogeneousDictionaryKey]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/merge(_:uniquingkeyswith:)","title":"func merge(HeterogeneousDictionary<Domain>, uniquingKeysWith: (HeterogeneousDictionary<Domain>.DictionaryValue, HeterogeneousDictionary<Domain>.DictionaryValue) throws -> HeterogeneousDictionary<Domain>.DictionaryValue) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/merging(_:uniquingkeyswith:)","title":"func merging(HeterogeneousDictionary<Domain>, uniquingKeysWith: (HeterogeneousDictionary<Domain>.DictionaryValue, HeterogeneousDictionary<Domain>.DictionaryValue) throws -> HeterogeneousDictionary<Domain>.DictionaryValue) rethrows -> HeterogeneousDictionary<Domain>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/removingvalues(forkeys:)","title":"func removingValues(forKeys: some Sequence<any Any.Type>) -> HeterogeneousDictionary<Domain>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/subscript(_:)-2svum","title":"subscript<Key>(Key.Type) -> Key.Value?","type":"subscript"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/subscript(_:)-82v24","title":"subscript<T>(any HeterogeneousDictionaryKey<Domain, T>.Type) -> T?","type":"subscript"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/subscript(_:)-muai","title":"subscript<Key>(KeyPath<HeterogeneousDictionaryValues<Domain>, Key.Type>) -> Key.Value?","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/dictionaryvalue","title":"HeterogeneousDictionary.DictionaryValue","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/allsatisfy(_:)-7vghe","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/allsatisfy(_:)-7yr8q","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/compactmap(_:)-1ijbs","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/compactmap(_:)-4dcch","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/distinct()-1sqaw","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/distinct()-5h0gj","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/distinct(by:)-4nvn8","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/distinct(by:)-6k6ec","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/filter(_:)-3l6da","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/filter(_:)-4v4zs","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/find(_:)-4w36f","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/find(_:)-7l9kt","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/find(_:mutate:)-54h64","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/find(_:mutate:)-6xkz3","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/first(byunwrapping:)-7741r","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/first(byunwrapping:)-7sptd","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/first(oftype:)","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/firstandonly(byunwrapping:)-8vb1i","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/firstandonly(byunwrapping:)-94wl0","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/firstandonly(oftype:)","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/flatmap(_:)-25eaq","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/flatmap(_:)-2roma","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/flatmap(_:)-5jhv9","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/longestconsecutivesequences(by:relativeto:)-3izi8","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/longestconsecutivesequences(by:relativeto:)-y4dc","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/makeiterator()","title":"func makeIterator() -> AnyIterator<HeterogeneousDictionary<Domain>.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/map(_:)-49w9q","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/map(_:)-7e0o3","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/minormax(_:by:)-53jlr","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/minormax(_:by:)-9dg1k","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/reduce(_:_:)-49kwf","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/reduce(_:_:)-5h6zo","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/removefirst(byunwrapping:)-13d7t","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/removefirst(byunwrapping:)-9987u","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/sorted(by:order:)-4vkjn","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/sorted(by:order:)-hrzc","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/sorted(using:)-3r3t2","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/sorted(using:)-9xt06","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/element","title":"HeterogeneousDictionary.Element","type":"typealias"}],"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/allsatisfy(_:)-7vghe","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/allsatisfy(_:)-7yr8q","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/compactmap(_:)-1ijbs","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/compactmap(_:)-4dcch","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/distinct()-1sqaw","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/distinct()-5h0gj","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/distinct(by:)-4nvn8","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/distinct(by:)-6k6ec","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/filter(_:)-3l6da","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/filter(_:)-4v4zs","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/find(_:)-4w36f","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/find(_:)-7l9kt","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/find(_:mutate:)-54h64","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/find(_:mutate:)-6xkz3","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/first(byunwrapping:)-7741r","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/first(byunwrapping:)-7sptd","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/first(oftype:)","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/firstandonly(byunwrapping:)-8vb1i","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/firstandonly(byunwrapping:)-94wl0","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/firstandonly(oftype:)","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/flatmap(_:)-25eaq","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/flatmap(_:)-2roma","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/flatmap(_:)-5jhv9","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/longestconsecutivesequences(by:relativeto:)-3izi8","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/longestconsecutivesequences(by:relativeto:)-y4dc","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/makeiterator()","title":"func makeIterator() -> AnyIterator<HeterogeneousDictionary<Domain>.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/map(_:)-49w9q","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/map(_:)-7e0o3","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/minormax(_:by:)-53jlr","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/minormax(_:by:)-9dg1k","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/reduce(_:_:)-49kwf","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/reduce(_:_:)-5h6zo","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/removefirst(byunwrapping:)-13d7t","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/removefirst(byunwrapping:)-9987u","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/sorted(by:order:)-4vkjn","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/sorted(by:order:)-hrzc","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/sorted(using:)-3r3t2","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/sorted(using:)-9xt06","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/element","title":"HeterogeneousDictionary.Element","type":"typealias"}],"path":"\/documentation\/diagnostics\/heterogeneousdictionary\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/heterogeneousdictionary","title":"HeterogeneousDictionary","type":"struct"},{"path":"\/documentation\/diagnostics\/heterogeneousdictionaryvalues","title":"HeterogeneousDictionaryValues","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/iso8601\/decode(_:)","title":"static func decode(String) throws -> Date","type":"method"},{"path":"\/documentation\/diagnostics\/iso8601\/encode(_:)","title":"static func encode(Date) throws -> String","type":"method"}],"path":"\/documentation\/diagnostics\/iso8601","title":"ISO8601","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/init(_:)-2ju3c","title":"init(some Sequence<Element>)","type":"init"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/init(_:)-2s3m9","title":"init(some Sequence<Element>)","type":"init"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/init(_:id:)-3jlyo","title":"init(some Sequence<Element>, id: (Element) -> ID)","type":"init"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/init(_:id:)-502mv","title":"init(some Sequence<Element>, id: KeyPath<Element, ID>)","type":"init"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/init(_:id:)-9a5gw","title":"init(some Sequence<Element>, id: KeyPath<Element, ID>)","type":"init"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/init(_:id:)-9ziub","title":"init(some Sequence<Element>, id: (Element) -> ID)","type":"init"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/init(id:)-52ljh","title":"init(id: KeyPath<Element, ID>)","type":"init"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/init(id:)-7paq3","title":"init(id: (Element) -> ID)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/id","title":"let id: (Element) -> ID","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/identifiers","title":"var identifiers: AnyRandomAccessCollection<ID>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/appending(_:)","title":"func appending(Element) -> IdentifierIndexingArray<Element, ID>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/contains(elementidentifiedby:)","title":"func contains(elementIdentifiedBy: ID) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/element(after:)-61993","title":"func element(after: ID) -> Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/element(after:)-658tq","title":"func element(after: Element) -> Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/element(before:)-160x2","title":"func element(before: ID) -> Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/element(before:)-69zge","title":"func element(before: Element) -> Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/index(of:)","title":"func index(of: ID) -> Int?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/index(ofelementidentifiedby:)","title":"func index(ofElementIdentifiedBy: ID) -> Int?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/insert(_:)","title":"func insert(Element)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/map(_:)-4vh6f","title":"func map<T>((Element) throws -> T) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/map(id:_:)","title":"func map<T, U>(id: KeyPath<T, U>, (Element) throws -> T) rethrows -> IdentifierIndexingArray<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/move(fromoffsets:tooffset:)-6cwgl","title":"func move(fromOffsets: IndexSet, toOffset: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/remove(_:)","title":"func remove(Element)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/remove(atoffsets:)","title":"func remove(atOffsets: IndexSet)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/remove(elementidentifiedby:)","title":"func remove(elementIdentifiedBy: ID) -> Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removeall(after:)","title":"func removeAll(after: IdentifierIndexingArray<Element, ID>.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removeall(identifiedby:)-30oke","title":"func removeAll(identifiedBy: ID) -> Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removeall(identifiedby:)-6a5zb","title":"func removeAll(identifiedBy: some Sequence<ID>)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sorted(by:)","title":"func sorted(by: (IdentifierIndexingArray<Element, ID>.Element, IdentifierIndexingArray<Element, ID>.Element) throws -> Bool) rethrows -> IdentifierIndexingArray<Element, ID>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/update(_:)","title":"func update(Element) -> Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/updateorappend(_:)","title":"func updateOrAppend(Element)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/upsert(_:)","title":"func upsert(Element)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/upsert(_:uniquingvalueswith:)","title":"func upsert(Element, uniquingValuesWith: (Element, Element) throws -> Element) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/upsert(contentsof:)-1aljm","title":"func upsert<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/upsert(contentsof:)-48x4a","title":"func upsert<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/upsert(contentsof:)-6ew3a","title":"func upsert<S>(contentsOf: S) throws","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/upsert(contentsof:uniquingvalueswith:)","title":"func upsert<S>(contentsOf: S, uniquingValuesWith: (Element, Element) throws -> Element) rethrows","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(id:)-1c4ew","title":"subscript(id _: any Hashable) -> Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(id:)-9qo02","title":"subscript(id _: ID) -> Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(id:default:)","title":"subscript(id _: ID, default _: @autoclosure () -> Element) -> Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(id:defaultinplace:)","title":"subscript(id _: ID, defaultInPlace _: @autoclosure () -> Element) -> Element","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/last","title":"var last: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/lastindex","title":"var lastIndex: Self.Index?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/erasetoanybidirectionalcollection()","title":"func eraseToAnyBidirectionalCollection() -> AnyBidirectionalCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/firstrange(of:)-5cpvt","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/hasapproximatesuffix(_:)","title":"func hasApproximateSuffix<Suffix>(Suffix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/hassuffix(_:)-6ak3n","title":"func hasSuffix<Suffix>(Suffix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/hassuffix(_:)-978l7","title":"func hasSuffix<Suffix>(Suffix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/index(ifpresentafter:)","title":"func index(ifPresentAfter: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/index(ifpresentbefore:)","title":"func index(ifPresentBefore: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/joined(separator:)-8w75p","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reverse(index:)","title":"func reverse(index: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reverseinplace()","title":"func reverseInPlace()","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/splittinglast()","title":"func splittingLast() -> (head: Self.SubSequence, tail: Self.Element)?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/unfoldingbackward()","title":"func unfoldingBackward() -> UnfoldSequence<(Self.SubSequence, Self.Element), Self.SubSequence>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(reverse:)","title":"subscript(reverse _: Self.Index) -> Self.Element","type":"subscript"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/last","title":"var last: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/lastindex","title":"var lastIndex: Self.Index?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/erasetoanybidirectionalcollection()","title":"func eraseToAnyBidirectionalCollection() -> AnyBidirectionalCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/firstrange(of:)-5cpvt","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/hasapproximatesuffix(_:)","title":"func hasApproximateSuffix<Suffix>(Suffix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/hassuffix(_:)-6ak3n","title":"func hasSuffix<Suffix>(Suffix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/hassuffix(_:)-978l7","title":"func hasSuffix<Suffix>(Suffix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/index(ifpresentafter:)","title":"func index(ifPresentAfter: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/index(ifpresentbefore:)","title":"func index(ifPresentBefore: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/joined(separator:)-8w75p","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reverse(index:)","title":"func reverse(index: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reverseinplace()","title":"func reverseInPlace()","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/splittinglast()","title":"func splittingLast() -> (head: Self.SubSequence, tail: Self.Element)?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/unfoldingbackward()","title":"func unfoldingBackward() -> UnfoldSequence<(Self.SubSequence, Self.Element), Self.SubSequence>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(reverse:)","title":"subscript(reverse _: Self.Index) -> Self.Element","type":"subscript"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/bounds","title":"var bounds: Range<Self.Index>","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/second","title":"var second: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/startindex","title":"var startIndex: Int","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/allsubrangeschunked(by:)","title":"func allSubrangesChunked<C>(by: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/chunked(by:)","title":"func chunked(by: Int) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/consecutives()","title":"func consecutives() -> AnySequence<(Self.Element, Self.Element)>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/consecutivesallowinghalfemptypairs()","title":"func consecutivesAllowingHalfEmptyPairs() -> LazyMapSequence<Self._EnumeratedSequence, (Self.Element, Self.Element?)>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/contains(_:)","title":"func contains(Range<Self.Index>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/contains(after:)","title":"func contains(after: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/containsindex(_:)","title":"func containsIndex(Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/cycle(index:)","title":"func cycle(index: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/distancefromstartindex(to:)","title":"func distanceFromStartIndex(to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/enumeratelazysubsequences(matching:)","title":"func enumerateLazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<(Range<Self.Index>, Self.SubSequence), Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/erasetoanycollection()","title":"func eraseToAnyCollection() -> AnyCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/firstrange(of:)-3smrm","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/index(_:insetby:)","title":"func index(Self.Index, insetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/index(_:offsetbydistancefromstartindexfor:)","title":"func index(Self.Index, offsetByDistanceFromStartIndexFor: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/index(atdistance:)","title":"func index(atDistance: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/indices(of:)-3zzuz","title":"func indices(of: Self.Element) -> [Self.Index]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/indices(of:)-7onyd","title":"func indices(of: Self.Element) -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/indices(where:)","title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/join(_:_:)","title":"func join<C0, C1>(C0, C1) -> Join3Collection<Self, C0, C1>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/lazysubsequences(matching:)","title":"func lazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<Self.SubSequence, Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/makeiterator()","title":"func makeIterator() -> AnyIterator<Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/map(_:)-98vuw","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/nilifempty()","title":"func nilIfEmpty() -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/prefix(till:)","title":"func prefix(till: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/range(from:)","title":"func range(from: Range<Int>) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removingsubranges(_:)","title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sharedkeysbyequalvalue(where:)","title":"func sharedKeysByEqualValue<T, U>(where: (U, U) throws -> Bool) rethrows -> [T : U]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/split(separator:maxsplits:omittingemptysubsequences:)-5h9w","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/split(separator:maxsplits:omittingemptysubsequences:)-6ipxd","title":"func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-4o7kk","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: CasePath<Self.Element, Separator>) -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-7qnm7","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: (Self.Element) throws -> Separator?) rethrows -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/splitincludingseparators(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func splitIncludingSeparators(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/splittingfirst()","title":"func splittingFirst() -> (head: Self.Element, tail: Self.SubSequence)?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/tocollectionofone()","title":"func toCollectionOfOne() throws -> CollectionOfOne<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/tocollectionofzeroorone()","title":"func toCollectionOfZeroOrOne() throws -> CollectionOfOne<Self.Element>?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/unfoldingforward()","title":"func unfoldingForward() -> UnfoldSequence<(Self.Element, Self.SubSequence), Self.SubSequence>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(_:)","title":"subscript(Int) -> Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(after:)","title":"subscript(after _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(try:)-1ny8c","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(try:)-4aiwv","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(try:)-6ok65","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/bounds","title":"var bounds: Range<Self.Index>","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/second","title":"var second: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/startindex","title":"var startIndex: Int","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/allsubrangeschunked(by:)","title":"func allSubrangesChunked<C>(by: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/chunked(by:)","title":"func chunked(by: Int) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/consecutives()","title":"func consecutives() -> AnySequence<(Self.Element, Self.Element)>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/consecutivesallowinghalfemptypairs()","title":"func consecutivesAllowingHalfEmptyPairs() -> LazyMapSequence<Self._EnumeratedSequence, (Self.Element, Self.Element?)>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/contains(_:)","title":"func contains(Range<Self.Index>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/contains(after:)","title":"func contains(after: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/containsindex(_:)","title":"func containsIndex(Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/cycle(index:)","title":"func cycle(index: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/distancefromstartindex(to:)","title":"func distanceFromStartIndex(to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/enumeratelazysubsequences(matching:)","title":"func enumerateLazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<(Range<Self.Index>, Self.SubSequence), Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/erasetoanycollection()","title":"func eraseToAnyCollection() -> AnyCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/firstrange(of:)-3smrm","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/index(_:insetby:)","title":"func index(Self.Index, insetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/index(_:offsetbydistancefromstartindexfor:)","title":"func index(Self.Index, offsetByDistanceFromStartIndexFor: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/index(atdistance:)","title":"func index(atDistance: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/indices(of:)-3zzuz","title":"func indices(of: Self.Element) -> [Self.Index]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/indices(of:)-7onyd","title":"func indices(of: Self.Element) -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/indices(where:)","title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/join(_:_:)","title":"func join<C0, C1>(C0, C1) -> Join3Collection<Self, C0, C1>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/lazysubsequences(matching:)","title":"func lazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<Self.SubSequence, Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/makeiterator()","title":"func makeIterator() -> AnyIterator<Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/map(_:)-98vuw","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/nilifempty()","title":"func nilIfEmpty() -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/prefix(till:)","title":"func prefix(till: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/range(from:)","title":"func range(from: Range<Int>) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removingsubranges(_:)","title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sharedkeysbyequalvalue(where:)","title":"func sharedKeysByEqualValue<T, U>(where: (U, U) throws -> Bool) rethrows -> [T : U]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/split(separator:maxsplits:omittingemptysubsequences:)-5h9w","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/split(separator:maxsplits:omittingemptysubsequences:)-6ipxd","title":"func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-4o7kk","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: CasePath<Self.Element, Separator>) -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-7qnm7","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: (Self.Element) throws -> Separator?) rethrows -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/splitincludingseparators(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func splitIncludingSeparators(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/splittingfirst()","title":"func splittingFirst() -> (head: Self.Element, tail: Self.SubSequence)?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/tocollectionofone()","title":"func toCollectionOfOne() throws -> CollectionOfOne<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/tocollectionofzeroorone()","title":"func toCollectionOfZeroOrOne() throws -> CollectionOfOne<Self.Element>?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/unfoldingforward()","title":"func unfoldingForward() -> UnfoldSequence<(Self.Element, Self.SubSequence), Self.SubSequence>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(_:)","title":"subscript(Int) -> Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(after:)","title":"subscript(after _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(try:)-1ny8c","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(try:)-4aiwv","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(try:)-6ok65","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/init(from:)","title":"init(from: any Decoder) throws","type":"init"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/==(_:_:)","title":"static func == (IdentifierIndexingArray<Element, ID>, IdentifierIndexingArray<Element, ID>) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/==(_:_:)","title":"static func == (IdentifierIndexingArray<Element, ID>, IdentifierIndexingArray<Element, ID>) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/init(arrayliteral:)","title":"init(arrayLiteral: Element...)","type":"init"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/memoize(with:_:)-16d04","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/memoize(with:_:)-9ag93","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/memoize(with:_:)-16d04","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/memoize(with:_:)-9ag93","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/move(fromoffsets:tooffset:)-1sljq","title":"func move(fromOffsets: IndexSet, toOffset: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/movesubranges(_:to:)","title":"func moveSubranges(RangeSet<Self.Index>, to: Self.Index) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/partition(by:)-2tmx2","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/partition(by:)-5nwlv","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reindexwith(_:)-8rlzm","title":"func reindexWith<C>(C)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reindexwith(_:)-9mtjj","title":"func reindexWith<S>(S)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reindexwith(_:count:)-3m7hi","title":"func reindexWith<S>(S, count: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reindexwith(_:count:)-8y0m9","title":"func reindexWith<C>(C, count: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/remove(elementsatindices:)","title":"func remove<C>(elementsAtIndices: C)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removesubranges(_:)","title":"func removeSubranges(RangeSet<Self.Index>)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removing(elementsatindices:)","title":"func removing<C>(elementsAtIndices: C) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reverse()","title":"func reverse()","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/shuffle()","title":"func shuffle()","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/shuffle(using:)","title":"func shuffle<T>(using: inout T)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sort()","title":"func sort()","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sort(by:)","title":"func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sort(using:)-10wih","title":"func sort<Comparator>(using: Comparator)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sort(using:)-3d53s","title":"func sort<S, Comparator>(using: S)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/swapat(_:_:)","title":"func swapAt(Self.Index, Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/withcontiguousmutablestorageifavailable(_:)","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(atdistance:)","title":"subscript(atDistance _: Int) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(cycling:)","title":"subscript(cycling _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(try:)-2b64w","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(try:)-2qqz2","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(try:)-58hba","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(try:)-93ljj","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/mutablecollection-implementations","title":"MutableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/move(fromoffsets:tooffset:)-1sljq","title":"func move(fromOffsets: IndexSet, toOffset: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/movesubranges(_:to:)","title":"func moveSubranges(RangeSet<Self.Index>, to: Self.Index) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/partition(by:)-2tmx2","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/partition(by:)-5nwlv","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reindexwith(_:)-8rlzm","title":"func reindexWith<C>(C)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reindexwith(_:)-9mtjj","title":"func reindexWith<S>(S)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reindexwith(_:count:)-3m7hi","title":"func reindexWith<S>(S, count: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reindexwith(_:count:)-8y0m9","title":"func reindexWith<C>(C, count: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/remove(elementsatindices:)","title":"func remove<C>(elementsAtIndices: C)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removesubranges(_:)","title":"func removeSubranges(RangeSet<Self.Index>)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removing(elementsatindices:)","title":"func removing<C>(elementsAtIndices: C) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reverse()","title":"func reverse()","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/shuffle()","title":"func shuffle()","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/shuffle(using:)","title":"func shuffle<T>(using: inout T)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sort()","title":"func sort()","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sort(by:)","title":"func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sort(using:)-10wih","title":"func sort<Comparator>(using: Comparator)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sort(using:)-3d53s","title":"func sort<S, Comparator>(using: S)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/swapat(_:_:)","title":"func swapAt(Self.Index, Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/withcontiguousmutablestorageifavailable(_:)","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(atdistance:)","title":"subscript(atDistance _: Int) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(cycling:)","title":"subscript(cycling _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(try:)-2b64w","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(try:)-2qqz2","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(try:)-58hba","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(try:)-93ljj","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/mutablecollection-implementations","title":"MutableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/replace(allof:with:)","title":"func replace(allOf: Self.Element, with: Self.Element)","type":"method"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/mutablesequence-implementations","title":"MutableSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/erasetoanyrandomaccesscollection()","title":"func eraseToAnyRandomAccessCollection() -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/erasetoanyrandomaccesscollection()","title":"func eraseToAnyRandomAccessCollection() -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/append(_:)","title":"func append(Element)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/append(contentsof:)","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removeall(where:)","title":"func removeAll(where: (Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removesubrange(_:)","title":"func removeSubrange(Range<IdentifierIndexingArray<Element, ID>.Index>)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/replacesubrange(_:with:)","title":"func replaceSubrange<C>(Range<IdentifierIndexingArray<Element, ID>.Index>, with: C)","type":"method"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/rangereplaceablecollection-implementations","title":"RangeReplaceableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/allsatisfy(_:)-5c961","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/allsatisfy(_:)-7q3ik","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/compactmap(_:)-50q0t","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/compactmap(_:)-9ojxu","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/distinct()-45mml","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/distinct()-8siab","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/distinct(by:)-40yn9","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/distinct(by:)-4qlmf","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/element(after:)-1ychw","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/element(before:)-91ehh","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/fill(using:)-2fivw","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/fill(using:)-7frl6","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/fill(using:)-8nb3m","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/filter(_:)-9r8we","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/filter(_:)-ccdc","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/find(_:)-2p4wz","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/find(_:)-no59","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/find(_:mutate:)-6v9re","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/find(_:mutate:)-lock","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/first(byunwrapping:)-2er8v","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/first(byunwrapping:)-4sw8p","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/first(oftype:)-1g4a5","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/first(oftype:)-8km9n","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/firstandonly(byunwrapping:)-6s3f","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/firstandonly(byunwrapping:)-6xy6a","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/firstandonly(oftype:)-5adrv","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/firstandonly(oftype:)-7g0g1","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/flatmap(_:)-1e2jt","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/flatmap(_:)-24ssx","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/flatmap(_:)-xfw2","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/hasprefix(_:)-4b80a","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/hasprefix(_:)-8f7y9","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/joined(separator:)-77trr","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/joined(separator:)-7ot3y","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/longestconsecutivesequences(by:relativeto:)-74pek","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/longestconsecutivesequences(by:relativeto:)-7v2bq","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/map(_:)-2lnpf","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/map(_:)-8433e","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/minormax(_:by:)-8s7np","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/minormax(_:by:)-x50v","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reduce(_:_:)-1u29u","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reduce(_:_:)-8dvrx","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removefirst(_:)-1pkcn","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removefirst(_:)-6y60u","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removefirst(byunwrapping:)-2srup","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removefirst(byunwrapping:)-99c6","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sorted(by:order:)-27hvb","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sorted(by:order:)-6mc0g","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sorted(using:)-53ak2","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sorted(using:)-7d4c3","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/split(separator:maxsplits:omittingemptysubsequences:)-31yz5","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/allsatisfy(_:)-5c961","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/allsatisfy(_:)-7q3ik","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/compactmap(_:)-50q0t","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/compactmap(_:)-9ojxu","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/distinct()-45mml","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/distinct()-8siab","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/distinct(by:)-40yn9","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/distinct(by:)-4qlmf","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/element(after:)-1ychw","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/element(before:)-91ehh","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/fill(using:)-2fivw","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/fill(using:)-7frl6","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/fill(using:)-8nb3m","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/filter(_:)-9r8we","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/filter(_:)-ccdc","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/find(_:)-2p4wz","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/find(_:)-no59","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/find(_:mutate:)-6v9re","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/find(_:mutate:)-lock","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/first(byunwrapping:)-2er8v","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/first(byunwrapping:)-4sw8p","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/first(oftype:)-1g4a5","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/first(oftype:)-8km9n","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/firstandonly(byunwrapping:)-6s3f","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/firstandonly(byunwrapping:)-6xy6a","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/firstandonly(oftype:)-5adrv","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/firstandonly(oftype:)-7g0g1","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/flatmap(_:)-1e2jt","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/flatmap(_:)-24ssx","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/flatmap(_:)-xfw2","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/hasprefix(_:)-4b80a","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/hasprefix(_:)-8f7y9","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/joined(separator:)-77trr","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/joined(separator:)-7ot3y","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/longestconsecutivesequences(by:relativeto:)-74pek","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/longestconsecutivesequences(by:relativeto:)-7v2bq","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/map(_:)-2lnpf","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/map(_:)-8433e","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/minormax(_:by:)-8s7np","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/minormax(_:by:)-x50v","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reduce(_:_:)-1u29u","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reduce(_:_:)-8dvrx","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removefirst(_:)-1pkcn","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removefirst(_:)-6y60u","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removefirst(byunwrapping:)-2srup","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removefirst(byunwrapping:)-99c6","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sorted(by:order:)-27hvb","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sorted(by:order:)-6mc0g","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sorted(using:)-53ak2","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sorted(using:)-7d4c3","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/split(separator:maxsplits:omittingemptysubsequences:)-31yz5","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/identifierindexingarray\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/identifierindexingarray\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/identifierindexingarray","title":"IdentifierIndexingArray","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/indirect\/init(wrappedvalue:)","title":"init(wrappedValue: Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/indirect\/projectedvalue","title":"var projectedValue: Indirect<Value>","type":"property"},{"path":"\/documentation\/diagnostics\/indirect\/unsafelyunwrapped","title":"var unsafelyUnwrapped: Value","type":"property"},{"path":"\/documentation\/diagnostics\/indirect\/wrappedvalue","title":"var wrappedValue: Value","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/indirect\/description-6mxjy","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/indirect\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/indirect\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/indirect\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/indirect\/decodeifpresent(from:)-3snpc","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/indirect\/decodeifpresent(from:)-5oljp","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/indirect\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/indirect\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/indirect\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/indirect\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/indirect\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/indirect\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/indirect\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/indirect\/==(_:_:)-9yj9e","title":"static func == (Indirect<Value>, Indirect<Value>) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/indirect\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/indirect\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/indirect\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/indirect\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/indirect\/==(_:_:)-9yj9e","title":"static func == (Indirect<Value>, Indirect<Value>) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/indirect\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/indirect\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/indirect\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/indirect\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/indirect\/hash(into:)-7h3ml","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/indirect\/memoize(with:_:)-3g1lc","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/indirect\/memoize(with:_:)-532x0","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/indirect\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/indirect\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/indirect\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/indirect\/hash(into:)-7h3ml","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/indirect\/memoize(with:_:)-3g1lc","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/indirect\/memoize(with:_:)-532x0","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/indirect\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/indirect\/==(_:_:)-7vnzx","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/indirect\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/indirect\/description-7zk83","title":"var description: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/indirect\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/indirect\/hash(into:)-4tvxh","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/diagnostics\/indirect\/parameterlesspropertywrapper-implementations","title":"ParameterlessPropertyWrapper Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/indirect","title":"Indirect","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/inout\/init(_:_:)","title":"init(@autoclosure () -> Value, (Value) -> Void)","type":"init"},{"path":"\/documentation\/diagnostics\/inout\/init(get:set:)","title":"init(get: () -> Value, set: (Value) -> Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/inout\/get","title":"let get: () -> Value","type":"property"},{"path":"\/documentation\/diagnostics\/inout\/projectedvalue","title":"var projectedValue: Inout<Value>","type":"property"},{"path":"\/documentation\/diagnostics\/inout\/set","title":"let set: (Value) -> Void","type":"property"},{"path":"\/documentation\/diagnostics\/inout\/wrappedvalue","title":"var wrappedValue: Value","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/inout\/subscript(dynamicmember:)","title":"subscript<Subject>(dynamicMember _: WritableKeyPath<Value, Subject>) -> Inout<Subject>","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/inout\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/inout\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/inout","title":"Inout","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/init(_:)","title":"init(Join2Collection<C0, C1>.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/value-swift.property","title":"var value: Join2Collection<C0, C1>.Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/makeiterator()","title":"func makeIterator() -> Join2Collection<C0, C1>.Iterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/element","title":"Join2Collection.Element","type":"typealias"},{"path":"\/documentation\/diagnostics\/join2collection\/index","title":"Join2Collection.Index","type":"typealias"},{"path":"\/documentation\/diagnostics\/join2collection\/iterator","title":"Join2Collection.Iterator","type":"typealias"},{"path":"\/documentation\/diagnostics\/join2collection\/value-swift.typealias","title":"Join2Collection.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/erasetoanybidirectionalcollection()","title":"func eraseToAnyBidirectionalCollection() -> AnyBidirectionalCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/firstrange(of:)-7couc","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/hasapproximatesuffix(_:)","title":"func hasApproximateSuffix<Suffix>(Suffix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/hassuffix(_:)-1bzs2","title":"func hasSuffix<Suffix>(Suffix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/hassuffix(_:)-5lw5z","title":"func hasSuffix<Suffix>(Suffix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/index(ifpresentafter:)","title":"func index(ifPresentAfter: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/index(ifpresentbefore:)","title":"func index(ifPresentBefore: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/joined(separator:)-8sj5t","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reverse(index:)","title":"func reverse(index: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reverseinplace()","title":"func reverseInPlace()","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/splittinglast()","title":"func splittingLast() -> (head: Self.SubSequence, tail: Self.Element)?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/unfoldingbackward()","title":"func unfoldingBackward() -> UnfoldSequence<(Self.SubSequence, Self.Element), Self.SubSequence>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(reverse:)-6i24t","title":"subscript(reverse _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(reverse:)-l9y3","title":"subscript(reverse _: Self.Index) -> Self.Element","type":"subscript"}],"path":"\/documentation\/diagnostics\/join2collection\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/erasetoanybidirectionalcollection()","title":"func eraseToAnyBidirectionalCollection() -> AnyBidirectionalCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/firstrange(of:)-7couc","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/hasapproximatesuffix(_:)","title":"func hasApproximateSuffix<Suffix>(Suffix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/hassuffix(_:)-1bzs2","title":"func hasSuffix<Suffix>(Suffix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/hassuffix(_:)-5lw5z","title":"func hasSuffix<Suffix>(Suffix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/index(ifpresentafter:)","title":"func index(ifPresentAfter: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/index(ifpresentbefore:)","title":"func index(ifPresentBefore: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/joined(separator:)-8sj5t","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reverse(index:)","title":"func reverse(index: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reverseinplace()","title":"func reverseInPlace()","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/splittinglast()","title":"func splittingLast() -> (head: Self.SubSequence, tail: Self.Element)?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/unfoldingbackward()","title":"func unfoldingBackward() -> UnfoldSequence<(Self.SubSequence, Self.Element), Self.SubSequence>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(reverse:)-6i24t","title":"subscript(reverse _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(reverse:)-l9y3","title":"subscript(reverse _: Self.Index) -> Self.Element","type":"subscript"}],"path":"\/documentation\/diagnostics\/join2collection\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/bounds","title":"var bounds: Range<Self.Index>","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/endindex","title":"var endIndex: Join2Collection<C0, C1>.Index","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/first-9lpri","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/last-9xtyt","title":"var last: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/lastindex","title":"var lastIndex: Self.Index?","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/second","title":"var second: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/startindex","title":"var startIndex: Join2Collection<C0, C1>.Index","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/allsubrangeschunked(by:)","title":"func allSubrangesChunked<C>(by: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/chunked(by:)","title":"func chunked(by: Int) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/consecutives()","title":"func consecutives() -> AnySequence<(Self.Element, Self.Element)>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/consecutivesallowinghalfemptypairs()","title":"func consecutivesAllowingHalfEmptyPairs() -> LazyMapSequence<Self._EnumeratedSequence, (Self.Element, Self.Element?)>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/contains(_:)","title":"func contains(Range<Self.Index>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/contains(after:)","title":"func contains(after: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/containsindex(_:)","title":"func containsIndex(Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/cycle(index:)","title":"func cycle(index: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/distancefromstartindex(to:)","title":"func distanceFromStartIndex(to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/enumeratelazysubsequences(matching:)","title":"func enumerateLazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<(Range<Self.Index>, Self.SubSequence), Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/erasetoanycollection()","title":"func eraseToAnyCollection() -> AnyCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/firstrange(of:)-3n62h","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/index(_:insetby:)","title":"func index(Self.Index, insetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/index(_:offsetbydistancefromstartindexfor:)","title":"func index(Self.Index, offsetByDistanceFromStartIndexFor: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/index(after:)","title":"func index(after: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/index(atdistance:)","title":"func index(atDistance: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/index(before:)","title":"func index(before: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/indices(of:)-3higs","title":"func indices(of: Self.Element) -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/indices(of:)-7qcha","title":"func indices(of: Self.Element) -> [Self.Index]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/indices(where:)","title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/join(_:_:)","title":"func join<C0, C1>(C0, C1) -> Join3Collection<Self, C0, C1>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/lazysubsequences(matching:)","title":"func lazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<Self.SubSequence, Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/map(_:)-6ugyc","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/nilifempty()","title":"func nilIfEmpty() -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/prefix(till:)","title":"func prefix(till: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/range(from:)","title":"func range(from: Range<Int>) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/removingsubranges(_:)","title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sharedkeysbyequalvalue(where:)","title":"func sharedKeysByEqualValue<T, U>(where: (U, U) throws -> Bool) rethrows -> [T : U]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/split(separator:maxsplits:omittingemptysubsequences:)-6icx4","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/split(separator:maxsplits:omittingemptysubsequences:)-8mk1g","title":"func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-1gona","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: (Self.Element) throws -> Separator?) rethrows -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-23h28","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: CasePath<Self.Element, Separator>) -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/splitincludingseparators(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func splitIncludingSeparators(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/splittingfirst()","title":"func splittingFirst() -> (head: Self.Element, tail: Self.SubSequence)?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/tocollectionofone()","title":"func toCollectionOfOne() throws -> CollectionOfOne<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/tocollectionofzeroorone()","title":"func toCollectionOfZeroOrOne() throws -> CollectionOfOne<Self.Element>?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/unfoldingforward()","title":"func unfoldingForward() -> UnfoldSequence<(Self.Element, Self.SubSequence), Self.SubSequence>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(_:)-9mef3","title":"subscript(Join2Collection<C0, C1>.Index) -> Join2Collection<C0, C1>.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(after:)","title":"subscript(after _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(atdistance:)","title":"subscript(atDistance _: Int) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(cycling:)","title":"subscript(cycling _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(try:)-36lb9","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(try:)-7j4wm","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(try:)-9diyd","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"}],"path":"\/documentation\/diagnostics\/join2collection\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/bounds","title":"var bounds: Range<Self.Index>","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/endindex","title":"var endIndex: Join2Collection<C0, C1>.Index","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/first-9lpri","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/last-9xtyt","title":"var last: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/lastindex","title":"var lastIndex: Self.Index?","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/second","title":"var second: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/startindex","title":"var startIndex: Join2Collection<C0, C1>.Index","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/allsubrangeschunked(by:)","title":"func allSubrangesChunked<C>(by: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/chunked(by:)","title":"func chunked(by: Int) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/consecutives()","title":"func consecutives() -> AnySequence<(Self.Element, Self.Element)>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/consecutivesallowinghalfemptypairs()","title":"func consecutivesAllowingHalfEmptyPairs() -> LazyMapSequence<Self._EnumeratedSequence, (Self.Element, Self.Element?)>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/contains(_:)","title":"func contains(Range<Self.Index>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/contains(after:)","title":"func contains(after: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/containsindex(_:)","title":"func containsIndex(Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/cycle(index:)","title":"func cycle(index: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/distancefromstartindex(to:)","title":"func distanceFromStartIndex(to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/enumeratelazysubsequences(matching:)","title":"func enumerateLazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<(Range<Self.Index>, Self.SubSequence), Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/erasetoanycollection()","title":"func eraseToAnyCollection() -> AnyCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/firstrange(of:)-3n62h","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/index(_:insetby:)","title":"func index(Self.Index, insetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/index(_:offsetbydistancefromstartindexfor:)","title":"func index(Self.Index, offsetByDistanceFromStartIndexFor: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/index(after:)","title":"func index(after: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/index(atdistance:)","title":"func index(atDistance: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/index(before:)","title":"func index(before: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/indices(of:)-3higs","title":"func indices(of: Self.Element) -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/indices(of:)-7qcha","title":"func indices(of: Self.Element) -> [Self.Index]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/indices(where:)","title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/join(_:_:)","title":"func join<C0, C1>(C0, C1) -> Join3Collection<Self, C0, C1>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/lazysubsequences(matching:)","title":"func lazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<Self.SubSequence, Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/map(_:)-6ugyc","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/nilifempty()","title":"func nilIfEmpty() -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/prefix(till:)","title":"func prefix(till: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/range(from:)","title":"func range(from: Range<Int>) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/removingsubranges(_:)","title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sharedkeysbyequalvalue(where:)","title":"func sharedKeysByEqualValue<T, U>(where: (U, U) throws -> Bool) rethrows -> [T : U]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/split(separator:maxsplits:omittingemptysubsequences:)-6icx4","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/split(separator:maxsplits:omittingemptysubsequences:)-8mk1g","title":"func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-1gona","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: (Self.Element) throws -> Separator?) rethrows -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-23h28","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: CasePath<Self.Element, Separator>) -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/splitincludingseparators(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func splitIncludingSeparators(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/splittingfirst()","title":"func splittingFirst() -> (head: Self.Element, tail: Self.SubSequence)?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/tocollectionofone()","title":"func toCollectionOfOne() throws -> CollectionOfOne<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/tocollectionofzeroorone()","title":"func toCollectionOfZeroOrOne() throws -> CollectionOfOne<Self.Element>?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/unfoldingforward()","title":"func unfoldingForward() -> UnfoldSequence<(Self.Element, Self.SubSequence), Self.SubSequence>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(_:)-9mef3","title":"subscript(Join2Collection<C0, C1>.Index) -> Join2Collection<C0, C1>.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(after:)","title":"subscript(after _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(atdistance:)","title":"subscript(atDistance _: Int) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(cycling:)","title":"subscript(cycling _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(try:)-36lb9","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(try:)-7j4wm","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(try:)-9diyd","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"}],"path":"\/documentation\/diagnostics\/join2collection\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/join2collection\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/move(fromoffsets:tooffset:)","title":"func move(fromOffsets: IndexSet, toOffset: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/movesubranges(_:to:)","title":"func moveSubranges(RangeSet<Self.Index>, to: Self.Index) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/partition(by:)-4u4z7","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/partition(by:)-9e635","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reindexwith(_:)-8z3n5","title":"func reindexWith<S>(S)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reindexwith(_:)-9twux","title":"func reindexWith<C>(C)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reindexwith(_:count:)-5agzl","title":"func reindexWith<C>(C, count: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reindexwith(_:count:)-8m2lw","title":"func reindexWith<S>(S, count: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reverse()","title":"func reverse()","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/shuffle()","title":"func shuffle()","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/shuffle(using:)","title":"func shuffle<T>(using: inout T)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sort()","title":"func sort()","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sort(by:)","title":"func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sort(using:)-1ohu6","title":"func sort<Comparator>(using: Comparator)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sort(using:)-5no17","title":"func sort<S, Comparator>(using: S)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/swapat(_:_:)","title":"func swapAt(Self.Index, Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/withcontiguousmutablestorageifavailable(_:)","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(_:)-1diao","title":"subscript(Join2Collection<C0, C1>.Index) -> Join2Collection<C0, C1>.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(try:)-33s4p","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(try:)-8aii","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"}],"path":"\/documentation\/diagnostics\/join2collection\/mutablecollection-implementations","title":"MutableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/move(fromoffsets:tooffset:)","title":"func move(fromOffsets: IndexSet, toOffset: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/movesubranges(_:to:)","title":"func moveSubranges(RangeSet<Self.Index>, to: Self.Index) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/partition(by:)-4u4z7","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/partition(by:)-9e635","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reindexwith(_:)-8z3n5","title":"func reindexWith<S>(S)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reindexwith(_:)-9twux","title":"func reindexWith<C>(C)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reindexwith(_:count:)-5agzl","title":"func reindexWith<C>(C, count: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reindexwith(_:count:)-8m2lw","title":"func reindexWith<S>(S, count: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reverse()","title":"func reverse()","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/shuffle()","title":"func shuffle()","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/shuffle(using:)","title":"func shuffle<T>(using: inout T)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sort()","title":"func sort()","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sort(by:)","title":"func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sort(using:)-1ohu6","title":"func sort<Comparator>(using: Comparator)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sort(using:)-5no17","title":"func sort<S, Comparator>(using: S)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/swapat(_:_:)","title":"func swapAt(Self.Index, Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/withcontiguousmutablestorageifavailable(_:)","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(_:)-1diao","title":"subscript(Join2Collection<C0, C1>.Index) -> Join2Collection<C0, C1>.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(try:)-33s4p","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(try:)-8aii","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"}],"path":"\/documentation\/diagnostics\/join2collection\/mutablecollection-implementations","title":"MutableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/first-79evc","title":"var first: Join2Collection<C0, C1>.Element","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/last-6lg3f","title":"var last: Join2Collection<C0, C1>.Element","type":"property"}],"path":"\/documentation\/diagnostics\/join2collection\/nonemptysequence-implementations","title":"NonEmptySequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/erasetoanyrandomaccesscollection()","title":"func eraseToAnyRandomAccessCollection() -> AnyRandomAccessCollection<Self.Element>","type":"method"}],"path":"\/documentation\/diagnostics\/join2collection\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/allsatisfy(_:)-2pyog","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/allsatisfy(_:)-7ue1s","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/compactmap(_:)-31wns","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/compactmap(_:)-9bznb","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/distinct()-9sktz","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/distinct()-k1w2","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/distinct(by:)-72jor","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/distinct(by:)-8dbb2","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/fill(using:)-5qo0f","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/fill(using:)-6ahgc","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/fill(using:)-7t3fm","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/filter(_:)-306mu","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/filter(_:)-uxbt","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/find(_:)-16lc9","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/find(_:)-9kws3","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/find(_:mutate:)-5nr9m","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/find(_:mutate:)-xrjb","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/first(byunwrapping:)-6g2al","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/first(byunwrapping:)-7xp6n","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/first(oftype:)-2nlxt","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/first(oftype:)-34wo","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/firstandonly(byunwrapping:)-5tohi","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/firstandonly(byunwrapping:)-6e66b","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/firstandonly(oftype:)-1ku95","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/firstandonly(oftype:)-5675w","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/flatmap(_:)-4amyd","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/flatmap(_:)-6ej6z","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/flatmap(_:)-8sczp","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/hasprefix(_:)-21wmd","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/hasprefix(_:)-9u9hb","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/joined(separator:)-1rahd","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/joined(separator:)-7xlb3","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/longestconsecutivesequences(by:relativeto:)-3agn","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/longestconsecutivesequences(by:relativeto:)-63red","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/map(_:)-3p9ja","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/map(_:)-9258w","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/minormax(_:by:)-3zohc","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/minormax(_:by:)-87ic0","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reduce(_:_:)-1l7pu","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reduce(_:_:)-29si2","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/removefirst(_:)-590mx","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/removefirst(_:)-7p5kq","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/removefirst(byunwrapping:)-4656v","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/removefirst(byunwrapping:)-50b7u","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sorted(by:order:)-7r6fu","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sorted(by:order:)-83s4r","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sorted(using:)-3wu0v","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sorted(using:)-77gjs","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/split(separator:maxsplits:omittingemptysubsequences:)-929n2","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/join2collection\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/join2collection\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/allsatisfy(_:)-2pyog","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/allsatisfy(_:)-7ue1s","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/compactmap(_:)-31wns","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/compactmap(_:)-9bznb","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/distinct()-9sktz","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/distinct()-k1w2","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/distinct(by:)-72jor","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/distinct(by:)-8dbb2","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/fill(using:)-5qo0f","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/fill(using:)-6ahgc","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/fill(using:)-7t3fm","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/filter(_:)-306mu","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/filter(_:)-uxbt","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/find(_:)-16lc9","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/find(_:)-9kws3","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/find(_:mutate:)-5nr9m","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/find(_:mutate:)-xrjb","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/first(byunwrapping:)-6g2al","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/first(byunwrapping:)-7xp6n","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/first(oftype:)-2nlxt","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/first(oftype:)-34wo","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/firstandonly(byunwrapping:)-5tohi","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/firstandonly(byunwrapping:)-6e66b","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/firstandonly(oftype:)-1ku95","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/firstandonly(oftype:)-5675w","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/flatmap(_:)-4amyd","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/flatmap(_:)-6ej6z","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/flatmap(_:)-8sczp","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/hasprefix(_:)-21wmd","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/hasprefix(_:)-9u9hb","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/joined(separator:)-1rahd","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/joined(separator:)-7xlb3","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/longestconsecutivesequences(by:relativeto:)-3agn","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/longestconsecutivesequences(by:relativeto:)-63red","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/map(_:)-3p9ja","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/map(_:)-9258w","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/minormax(_:by:)-3zohc","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/minormax(_:by:)-87ic0","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reduce(_:_:)-1l7pu","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reduce(_:_:)-29si2","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/removefirst(_:)-590mx","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/removefirst(_:)-7p5kq","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/removefirst(byunwrapping:)-4656v","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/removefirst(byunwrapping:)-50b7u","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sorted(by:order:)-7r6fu","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sorted(by:order:)-83s4r","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sorted(using:)-3wu0v","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sorted(using:)-77gjs","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/split(separator:maxsplits:omittingemptysubsequences:)-929n2","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/join2collection\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/join2collection\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2collection\/map(_:)-5gb4m","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/join2collection\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/join2collection","title":"Join2Collection","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2iterator\/init(_:)","title":"init(Join2Iterator<G0, G1>.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2iterator\/value-swift.property","title":"var value: Join2Iterator<G0, G1>.Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2iterator\/next()","title":"func next() -> G0.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2iterator\/value-swift.typealias","title":"Join2Iterator.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2iterator\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/join2iterator\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2iterator\/erasetoanyiterator()","title":"func eraseToAnyIterator() -> AnyIterator<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2iterator\/exhaust()","title":"func exhaust()","type":"method"},{"path":"\/documentation\/diagnostics\/join2iterator\/exhaust(count:)","title":"func exhaust<N>(count: N) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2iterator\/exhausting()","title":"func exhausting() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/join2iterator\/join(_:)","title":"func join<G>(G) -> Join2Iterator<Self, G>","type":"method"},{"path":"\/documentation\/diagnostics\/join2iterator\/makesequence()","title":"func makeSequence() -> IteratorSequence<Self>","type":"method"}],"path":"\/documentation\/diagnostics\/join2iterator\/iteratorprotocol-implementations","title":"IteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2iterator\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/join2iterator\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/join2iterator","title":"Join2Iterator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2sequence\/init(_:)","title":"init(Join2Sequence<S0, S1>.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2sequence\/value-swift.property","title":"var value: Join2Sequence<S0, S1>.Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2sequence\/makeiterator()","title":"func makeIterator() -> Join2Iterator<S0.Iterator, S1.Iterator>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2sequence\/element","title":"Join2Sequence.Element","type":"typealias"},{"path":"\/documentation\/diagnostics\/join2sequence\/value-swift.typealias","title":"Join2Sequence.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2sequence\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/join2sequence\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2sequence\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/join2sequence\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/join2sequence\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/join2sequence\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/join2sequence\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/join2sequence\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/join2sequence\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2sequence\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/allsatisfy(_:)-2yy24","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/allsatisfy(_:)-xiwx","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/compactmap(_:)-76fld","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/compactmap(_:)-97ubx","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/contains(_:)-6mzaq","title":"func contains<Value>(CasePath<Self.Element, Value>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/contains(_:)-9mu0g","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/distinct()-2sp8u","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/distinct()-4hhmt","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/distinct(by:)-3jje1","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/distinct(by:)-4jsx9","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/fill(using:)-252xe","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/fill(using:)-50j1b","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/fill(using:)-5brwi","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/filter(_:)-8rusy","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/filter(_:)-8vic3","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/find(_:)-3til0","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/find(_:)-9d5bt","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/find(_:mutate:)-51c8p","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/find(_:mutate:)-8fbw9","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/first(byunwrapping:)-3e6dq","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/first(byunwrapping:)-95jn7","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/first(oftype:)-6n9dz","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/first(oftype:)-7vq5r","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/firstandonly(byunwrapping:)-1jkn3","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/firstandonly(byunwrapping:)-70u5j","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/firstandonly(oftype:)-2g39m","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/firstandonly(oftype:)-9f09e","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/flatmap(_:)-1sezm","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/flatmap(_:)-505tt","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/flatmap(_:)-5634h","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/hasprefix(_:)-41fkm","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/hasprefix(_:)-84n2b","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/joined(separator:)-jjdt","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/joined(separator:)-qbe8","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/longestconsecutivesequences(by:relativeto:)-1467b","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/longestconsecutivesequences(by:relativeto:)-61mjt","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/map(_:)-1t30a","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/map(_:)-94syo","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/minormax(_:by:)-3o60u","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/minormax(_:by:)-v4af","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/reduce(_:_:)-65wxz","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/reduce(_:_:)-y5ew","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/removefirst(_:)-4ny9j","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/removefirst(_:)-6rqbq","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/removefirst(byunwrapping:)-8n5hy","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/removefirst(byunwrapping:)-x9f4","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/sorted(by:order:)-5xe1c","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/sorted(by:order:)-9fs2a","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/sorted(using:)-1qi9","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/sorted(using:)-8k4zx","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2sequence\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/join2sequence\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2sequence\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/join2sequence\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/join2sequence\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/join2sequence\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/join2sequence\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/join2sequence\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/join2sequence\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2sequence\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/allsatisfy(_:)-2yy24","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/allsatisfy(_:)-xiwx","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/compactmap(_:)-76fld","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/compactmap(_:)-97ubx","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/contains(_:)-6mzaq","title":"func contains<Value>(CasePath<Self.Element, Value>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/contains(_:)-9mu0g","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/distinct()-2sp8u","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/distinct()-4hhmt","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/distinct(by:)-3jje1","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/distinct(by:)-4jsx9","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/fill(using:)-252xe","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/fill(using:)-50j1b","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/fill(using:)-5brwi","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/filter(_:)-8rusy","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/filter(_:)-8vic3","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/find(_:)-3til0","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/find(_:)-9d5bt","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/find(_:mutate:)-51c8p","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/find(_:mutate:)-8fbw9","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/first(byunwrapping:)-3e6dq","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/first(byunwrapping:)-95jn7","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/first(oftype:)-6n9dz","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/first(oftype:)-7vq5r","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/firstandonly(byunwrapping:)-1jkn3","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/firstandonly(byunwrapping:)-70u5j","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/firstandonly(oftype:)-2g39m","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/firstandonly(oftype:)-9f09e","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/flatmap(_:)-1sezm","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/flatmap(_:)-505tt","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/flatmap(_:)-5634h","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/hasprefix(_:)-41fkm","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/hasprefix(_:)-84n2b","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/joined(separator:)-jjdt","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/joined(separator:)-qbe8","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/longestconsecutivesequences(by:relativeto:)-1467b","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/longestconsecutivesequences(by:relativeto:)-61mjt","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/map(_:)-1t30a","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/map(_:)-94syo","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/minormax(_:by:)-3o60u","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/minormax(_:by:)-v4af","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/reduce(_:_:)-65wxz","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/reduce(_:_:)-y5ew","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/removefirst(_:)-4ny9j","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/removefirst(_:)-6rqbq","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/removefirst(byunwrapping:)-8n5hy","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/removefirst(byunwrapping:)-x9f4","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/sorted(by:order:)-5xe1c","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/sorted(by:order:)-9fs2a","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/sorted(using:)-1qi9","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/sorted(using:)-8k4zx","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/join2sequence\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2sequence\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/join2sequence\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/join2sequence\/map(_:)-7hchq","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/join2sequence\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/join2sequence","title":"Join2Sequence","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/keyedvaluesof\/init()","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/keyedvaluesof\/init(from:)","title":"init(from: Wrapped?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/keyedvaluesof\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/keyedvaluesof\/apply(to:)","title":"func apply(to: inout Wrapped) throws","type":"method"},{"path":"\/documentation\/diagnostics\/keyedvaluesof\/removevalue(for:)","title":"func removeValue<Value>(for: WritableKeyPath<Wrapped, Value>)","type":"method"},{"path":"\/documentation\/diagnostics\/keyedvaluesof\/setvalue(_:for:)","title":"func setValue<Value>(Value, for: WritableKeyPath<Wrapped, Value>)","type":"method"},{"path":"\/documentation\/diagnostics\/keyedvaluesof\/value(for:)","title":"func value<Value>(for: KeyPath<Wrapped, Value>) throws -> Value","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/keyedvaluesof\/subscript(_:)","title":"subscript<Value>(WritableKeyPath<Wrapped, Value>) -> Value?","type":"subscript"},{"path":"\/documentation\/diagnostics\/keyedvaluesof\/subscript(dynamicmember:)-3qpca","title":"subscript<Value>(dynamicMember _: WritableKeyPath<Wrapped, Value?>) -> Value??","type":"subscript"},{"path":"\/documentation\/diagnostics\/keyedvaluesof\/subscript(dynamicmember:)-5tgwe","title":"subscript<Value>(dynamicMember _: WritableKeyPath<Wrapped, Value>) -> Value?","type":"subscript"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/keyedvaluesof\/diff(_:_:)","title":"static func diff(Wrapped, Wrapped) -> KeyedValuesOf<Wrapped>.Difference","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/keyedvaluesof\/error\/keypathnotset(_:)","title":"case keyPathNotSet(KeyPath<Wrapped, Value>)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/keyedvaluesof\/error\/localizeddescription","title":"var localizedDescription: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/keyedvaluesof\/error\/throw()","title":"func `throw`() throws -> Never","type":"method"}],"path":"\/documentation\/diagnostics\/keyedvaluesof\/error\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/keyedvaluesof\/error","title":"KeyedValuesOf.Error","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/keyedvaluesof\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/keyedvaluesof\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/keyedvaluesof\/difference\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/keyedvaluesof\/difference\/contains(_:)","title":"func contains<T>(WritableKeyPath<Wrapped, T>) -> Bool","type":"method"}],"path":"\/documentation\/diagnostics\/keyedvaluesof\/difference","title":"KeyedValuesOf.Difference","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/keyedvaluesof\/applyunconditionally(_:)","title":"func applyUnconditionally(Self.Difference) throws","type":"method"},{"path":"\/documentation\/diagnostics\/keyedvaluesof\/applying(_:)","title":"func applying(KeyedValuesOf<Wrapped>.Difference) -> KeyedValuesOf<Wrapped>?","type":"method"},{"path":"\/documentation\/diagnostics\/keyedvaluesof\/difference(from:)","title":"func difference(from: KeyedValuesOf<Wrapped>) -> KeyedValuesOf<Wrapped>.Difference","type":"method"}],"path":"\/documentation\/diagnostics\/keyedvaluesof\/diffable-implementations","title":"Diffable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/keyedvaluesof","title":"KeyedValuesOf","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lazymapiteratorwithmemoryrecall\/init(base:initial:transform:)","title":"init(base: S.Iterator, initial: Memory, transform: ((inout Memory, S.Element) -> Element))","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lazymapiteratorwithmemoryrecall\/next()","title":"func next() -> Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lazymapiteratorwithmemoryrecall\/erasetoanyiterator()","title":"func eraseToAnyIterator() -> AnyIterator<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapiteratorwithmemoryrecall\/exhaust()","title":"func exhaust()","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapiteratorwithmemoryrecall\/exhaust(count:)","title":"func exhaust<N>(count: N) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapiteratorwithmemoryrecall\/exhausting()","title":"func exhausting() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapiteratorwithmemoryrecall\/join(_:)","title":"func join<G>(G) -> Join2Iterator<Self, G>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapiteratorwithmemoryrecall\/makesequence()","title":"func makeSequence() -> IteratorSequence<Self>","type":"method"}],"path":"\/documentation\/diagnostics\/lazymapiteratorwithmemoryrecall\/iteratorprotocol-implementations","title":"IteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/lazymapiteratorwithmemoryrecall","title":"LazyMapIteratorWithMemoryRecall","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/init(base:initial:transform:)-18kcb","title":"init(base: S, initial: () -> Memory, transform: (inout Memory, S.Element) -> Element)","type":"init"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/init(base:initial:transform:)-bwcv","title":"init(base: S, initial: @autoclosure () -> Memory, transform: (inout Memory, S.Element) -> Element)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/makeiterator()","title":"func makeIterator() -> LazyMapIteratorWithMemoryRecall<S, Memory, Element>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/allsatisfy(_:)-3jwkh","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/allsatisfy(_:)-j619","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/compactmap(_:)-3nrh2","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/compactmap(_:)-7tzss","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/contains(_:)-4mbsu","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/contains(_:)-7pe0u","title":"func contains<Value>(CasePath<Self.Element, Value>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/distinct()-1oqxm","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/distinct()-7gh86","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/distinct(by:)-53vka","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/distinct(by:)-780u7","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/fill(using:)-25s8s","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/fill(using:)-2kkhg","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/fill(using:)-7ut56","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/filter(_:)-7new1","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/filter(_:)-8upy5","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/find(_:)-37ja1","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/find(_:)-4ra0e","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/find(_:mutate:)-90p0u","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/find(_:mutate:)-9pzy6","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/first(byunwrapping:)-287gq","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/first(byunwrapping:)-9aovr","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/first(oftype:)-4ehgm","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/first(oftype:)-6ff1k","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/firstandonly(byunwrapping:)-4lpno","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/firstandonly(byunwrapping:)-5bma4","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/firstandonly(oftype:)-23zi9","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/firstandonly(oftype:)-8t7c4","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/flatmap(_:)-1m1vq","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/flatmap(_:)-65stb","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/flatmap(_:)-6p80","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/hasprefix(_:)-83u1t","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/hasprefix(_:)-8heo3","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/joined(separator:)-1r772","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/joined(separator:)-5jq39","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/longestconsecutivesequences(by:relativeto:)-315au","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/longestconsecutivesequences(by:relativeto:)-4nq7w","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/map(_:)-34e73","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/map(_:)-6wzrp","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/minormax(_:by:)-4dg63","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/minormax(_:by:)-8gopv","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/reduce(_:_:)-2ybfr","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/reduce(_:_:)-8iozb","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/removefirst(_:)-8ogbc","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/removefirst(_:)-ju6r","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/removefirst(byunwrapping:)-3v7e5","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/removefirst(byunwrapping:)-diay","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/sorted(by:order:)-2o5vf","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/sorted(by:order:)-6x5cq","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/sorted(using:)-3dkea","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/sorted(using:)-850kf","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/allsatisfy(_:)-3jwkh","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/allsatisfy(_:)-j619","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/compactmap(_:)-3nrh2","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/compactmap(_:)-7tzss","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/contains(_:)-4mbsu","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/contains(_:)-7pe0u","title":"func contains<Value>(CasePath<Self.Element, Value>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/distinct()-1oqxm","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/distinct()-7gh86","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/distinct(by:)-53vka","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/distinct(by:)-780u7","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/fill(using:)-25s8s","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/fill(using:)-2kkhg","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/fill(using:)-7ut56","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/filter(_:)-7new1","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/filter(_:)-8upy5","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/find(_:)-37ja1","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/find(_:)-4ra0e","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/find(_:mutate:)-90p0u","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/find(_:mutate:)-9pzy6","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/first(byunwrapping:)-287gq","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/first(byunwrapping:)-9aovr","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/first(oftype:)-4ehgm","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/first(oftype:)-6ff1k","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/firstandonly(byunwrapping:)-4lpno","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/firstandonly(byunwrapping:)-5bma4","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/firstandonly(oftype:)-23zi9","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/firstandonly(oftype:)-8t7c4","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/flatmap(_:)-1m1vq","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/flatmap(_:)-65stb","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/flatmap(_:)-6p80","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/hasprefix(_:)-83u1t","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/hasprefix(_:)-8heo3","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/joined(separator:)-1r772","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/joined(separator:)-5jq39","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/longestconsecutivesequences(by:relativeto:)-315au","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/longestconsecutivesequences(by:relativeto:)-4nq7w","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/map(_:)-34e73","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/map(_:)-6wzrp","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/minormax(_:by:)-4dg63","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/minormax(_:by:)-8gopv","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/reduce(_:_:)-2ybfr","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/reduce(_:_:)-8iozb","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/removefirst(_:)-8ogbc","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/removefirst(_:)-ju6r","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/removefirst(byunwrapping:)-3v7e5","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/removefirst(byunwrapping:)-diay","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/sorted(by:order:)-2o5vf","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/sorted(by:order:)-6x5cq","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/sorted(using:)-3dkea","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/sorted(using:)-850kf","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/lazymapsequencewithmemoryrecall","title":"LazyMapSequenceWithMemoryRecall","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/losslessnumber\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/diagnostics\/losslessnumber\/init(wrappedvalue:)","title":"init(wrappedValue: N)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/losslessnumber\/wrappedvalue","title":"let wrappedValue: N","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/losslessnumber\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/losslessnumber\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/losslessnumber\/decodeifpresent(from:)-24h7b","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/losslessnumber\/decodeifpresent(from:)-7whww","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/losslessnumber\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/losslessnumber\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/losslessnumber\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/losslessnumber\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/losslessnumber\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/losslessnumber\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/losslessnumber\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/losslessnumber\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/losslessnumber\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/losslessnumber\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/losslessnumber\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/losslessnumber\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/losslessnumber\/memoize(with:_:)-1yggd","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/losslessnumber\/memoize(with:_:)-8p5nq","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/losslessnumber\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/losslessnumber","title":"LosslessNumber","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/init(wrappedvalue:)","title":"init(wrappedValue: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/wrappedvalue","title":"let wrappedValue: T","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/decodeifpresent(from:)-30tjk","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/decodeifpresent(from:)-4pslo","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/memoize(with:_:)-67yvw","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/memoize(with:_:)-9up8r","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/losslessnumberrepresentable\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/losslessnumberrepresentable","title":"LosslessNumberRepresentable","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lossycoding\/init()","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/lossycoding\/init(initialvalue:)","title":"init(initialValue: Value)","type":"init"},{"path":"\/documentation\/diagnostics\/lossycoding\/init(wrappedvalue:)","title":"init(wrappedValue: Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lossycoding\/wrappedvalue","title":"var wrappedValue: Value","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lossycoding\/init(from:)-22pvk","title":"init(from: any Decoder) throws","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lossycoding\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/lossycoding\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/lossycoding\/decodeifpresent(from:)-1atdl","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/lossycoding\/decodeifpresent(from:)-3a7bo","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/lossycoding\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/lossycoding\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lossycoding\/encode(to:)-65ydw","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/lossycoding\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/lossycoding\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/lossycoding\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lossycoding\/encode(to:)-65ydw","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/lossycoding\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/lossycoding\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/lossycoding\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lossycoding\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/lossycoding\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lossycoding\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/lossycoding\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lossycoding\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/lossycoding\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lossycoding\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/lossycoding\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lossycoding\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lossycoding\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/lossycoding\/memoize(with:_:)-1tm6s","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/lossycoding\/memoize(with:_:)-9jb2o","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/lossycoding\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lossycoding\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lossycoding\/init(from:)-4lrp4","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/lossycoding\/encode(to:)-44rut","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/lossycoding\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/diagnostics\/lossycoding\/parameterlesspropertywrapper-implementations","title":"ParameterlessPropertyWrapper Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/lossycoding","title":"LossyCoding","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/manyhashable\/==(_:_:)","title":"static func == (ManyHashable, ManyHashable) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/manyhashable\/init(_:_:)","title":"init<H0, H1>(H0, H1)","type":"init"},{"path":"\/documentation\/diagnostics\/manyhashable\/init(_:_:_:)","title":"init<H0, H1, H2>(H0, H1, H2)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/manyhashable\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/manyhashable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/manyhashable\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/manyhashable\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/manyhashable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/manyhashable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/manyhashable\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/manyhashable\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/manyhashable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/manyhashable\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/manyhashable\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/manyhashable\/memoize(with:_:)-6b3oi","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/manyhashable\/memoize(with:_:)-72uts","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/manyhashable\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/manyhashable","title":"ManyHashable","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/memoizationcachekey\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/memoizationcachekey\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/memoizationcachekey\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/memoizationcachekey\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/memoizationcachekey\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/memoizationcachekey\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/memoizationcachekey\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/memoizationcachekey\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/memoizationcachekey\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/memoizationcachekey\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/memoizationcachekey\/memoize(with:_:)-36mvc","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/memoizationcachekey\/memoize(with:_:)-6uqzx","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/memoizationcachekey\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/memoizationcachekey","title":"MemoizationCacheKey","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/metatype\/init(_:)","title":"init(T)","type":"init"},{"path":"\/documentation\/diagnostics\/metatype\/init(wrappedvalue:)","title":"init(wrappedValue: T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/metatype\/value","title":"let value: T","type":"property"},{"path":"\/documentation\/diagnostics\/metatype\/wrappedvalue","title":"var wrappedValue: T","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/metatype\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/metatype\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/metatype\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/metatype\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/metatype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/metatype\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/metatype\/==(_:_:)","title":"static func == (Metatype<T>, Metatype<T>) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/metatype\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/metatype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/metatype\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/metatype\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/metatype\/==(_:_:)","title":"static func == (Metatype<T>, Metatype<T>) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/metatype\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/metatype\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/metatype\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/metatype\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/metatype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/metatype\/memoize(with:_:)-9u7f5","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/metatype\/memoize(with:_:)-f1s5","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/metatype\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/metatype\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/metatype\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/metatype\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/metatype\/memoize(with:_:)-9u7f5","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/metatype\/memoize(with:_:)-f1s5","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/metatype\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/metatype\/name","title":"var name: String","type":"property"}],"path":"\/documentation\/diagnostics\/metatype\/named-implementations","title":"Named Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/metatype","title":"Metatype","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/init(_:)","title":"init<Wrapper>(Wrapper)","type":"init"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/init(initial:get:set:)","title":"init<T>(initial: T, get: (T) -> WrappedValue, set: (inout T, WrappedValue) -> ())","type":"init"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/init(wrappedvalue:)","title":"init(wrappedValue: WrappedValue)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/wrappedvalue","title":"var wrappedValue: WrappedValue","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/==(_:_:)","title":"static func == (MutableValueBox<WrappedValue>, MutableValueBox<WrappedValue>) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/mutablevaluebox\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/==(_:_:)","title":"static func == (MutableValueBox<WrappedValue>, MutableValueBox<WrappedValue>) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/mutablevaluebox\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/memoize(with:_:)-8skmg","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/memoize(with:_:)-wu8u","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/mutablevaluebox\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/memoize(with:_:)-8skmg","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/mutablevaluebox\/memoize(with:_:)-wu8u","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/mutablevaluebox\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/mutablevaluebox","title":"MutableValueBox","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/naivecountiterator\/init(_:)","title":"init(Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/naivecountiterator\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/diagnostics\/naivecountiterator\/value","title":"var value: Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/naivecountiterator\/next()","title":"func next() -> Value.Element?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/naivecountiterator\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/naivecountiterator\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/naivecountiterator\/erasetoanyiterator()","title":"func eraseToAnyIterator() -> AnyIterator<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/naivecountiterator\/exhaust()","title":"func exhaust()","type":"method"},{"path":"\/documentation\/diagnostics\/naivecountiterator\/exhaust(count:)","title":"func exhaust<N>(count: N) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/naivecountiterator\/exhausting()","title":"func exhausting() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/naivecountiterator\/join(_:)","title":"func join<G>(G) -> Join2Iterator<Self, G>","type":"method"},{"path":"\/documentation\/diagnostics\/naivecountiterator\/makesequence()","title":"func makeSequence() -> IteratorSequence<Self>","type":"method"}],"path":"\/documentation\/diagnostics\/naivecountiterator\/iteratorprotocol-implementations","title":"IteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/naivecountiterator\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/naivecountiterator\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/naivecountiterator","title":"NaiveCountIterator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/init(wrappedvalue:)","title":"init(wrappedValue: Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/wrappedvalue","title":"var wrappedValue: Value","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/decodeifpresent(from:)-15lnx","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/decodeifpresent(from:)-15nu3","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/noncodingproperty\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/noncodingproperty\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/noncodingproperty\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/==(_:_:)","title":"static func == (NonCodingProperty<Value>, NonCodingProperty<Value>) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/noncodingproperty\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/==(_:_:)","title":"static func == (NonCodingProperty<Value>, NonCodingProperty<Value>) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/noncodingproperty\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/memoize(with:_:)-29aq5","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/memoize(with:_:)-i3lw","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/noncodingproperty\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/memoize(with:_:)-29aq5","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/noncodingproperty\/memoize(with:_:)-i3lw","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/noncodingproperty\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/noncodingproperty","title":"NonCodingProperty","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/none\/init()","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/none\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/none\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/none\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/none\/decodeifpresent(from:)-2lp6u","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/none\/decodeifpresent(from:)-6af9h","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/none\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/none\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/none\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/none\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/none\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/none\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/none\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/none\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/none\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/none\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/none\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/none\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/none\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/none\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/none\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/none\/memoize(with:_:)-2bxe6","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/none\/memoize(with:_:)-75lw4","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/none\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/none","title":"None","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/init(_:)-kqor","title":"init(NullTerminatedUTF8String.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/stringvalue","title":"var stringValue: String","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/value-swift.property","title":"var value: NullTerminatedUTF8String.Value","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/value-swift.typealias","title":"NullTerminatedUTF8String.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/init(base:)","title":"init(base: NullTerminatedUTF8String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/base","title":"var base: NullTerminatedUTF8String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/erasetoanyiterator()","title":"func eraseToAnyIterator() -> AnyIterator<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/exhaust()","title":"func exhaust()","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/exhaust(count:)","title":"func exhaust<N>(count: N) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/exhausting()","title":"func exhausting() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/join(_:)","title":"func join<G>(G) -> Join2Iterator<Self, G>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/makesequence()","title":"func makeSequence() -> IteratorSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/next()","title":"func next() -> NullTerminatedUTF8String.Iterator.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/element","title":"NullTerminatedUTF8String.Iterator.Element","type":"typealias"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/iteratorprotocol-implementations","title":"IteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/erasetoanyiterator()","title":"func eraseToAnyIterator() -> AnyIterator<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/exhaust()","title":"func exhaust()","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/exhaust(count:)","title":"func exhaust<N>(count: N) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/exhausting()","title":"func exhausting() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/join(_:)","title":"func join<G>(G) -> Join2Iterator<Self, G>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/makesequence()","title":"func makeSequence() -> IteratorSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/next()","title":"func next() -> NullTerminatedUTF8String.Iterator.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/element","title":"NullTerminatedUTF8String.Iterator.Element","type":"typealias"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/iteratorprotocol-implementations","title":"IteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator","title":"NullTerminatedUTF8String.Iterator","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/bounds","title":"var bounds: Range<Self.Index>","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/endindex","title":"var endIndex: NullTerminatedUTF8String.Index","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/last","title":"var last: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/lastindex","title":"var lastIndex: Self.Index?","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/second","title":"var second: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/startindex","title":"var startIndex: NullTerminatedUTF8String.Index","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/allsubrangeschunked(by:)","title":"func allSubrangesChunked<C>(by: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/chunked(by:)","title":"func chunked(by: Int) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/consecutives()","title":"func consecutives() -> AnySequence<(Self.Element, Self.Element)>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/consecutivesallowinghalfemptypairs()","title":"func consecutivesAllowingHalfEmptyPairs() -> LazyMapSequence<Self._EnumeratedSequence, (Self.Element, Self.Element?)>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/contains(_:)","title":"func contains(Range<Self.Index>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/contains(after:)","title":"func contains(after: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/containsindex(_:)","title":"func containsIndex(Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/cycle(index:)","title":"func cycle(index: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/distancefromstartindex(to:)","title":"func distanceFromStartIndex(to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/enumeratelazysubsequences(matching:)","title":"func enumerateLazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<(Range<Self.Index>, Self.SubSequence), Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/erasetoanycollection()","title":"func eraseToAnyCollection() -> AnyCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/index(_:insetby:)","title":"func index(Self.Index, insetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/index(_:offsetbydistancefromstartindexfor:)","title":"func index(Self.Index, offsetByDistanceFromStartIndexFor: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/index(after:)","title":"func index(after: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/index(atdistance:)","title":"func index(atDistance: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/index(before:)","title":"func index(before: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/indices(of:)","title":"func indices(of: Self.Element) -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/indices(where:)","title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/join(_:_:)","title":"func join<C0, C1>(C0, C1) -> Join3Collection<Self, C0, C1>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/lazysubsequences(matching:)","title":"func lazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<Self.SubSequence, Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/makeiterator()","title":"func makeIterator() -> NullTerminatedUTF8String.Iterator","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/map(_:)-7vn66","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/nilifempty()","title":"func nilIfEmpty() -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/prefix(till:)-522p4","title":"func prefix(till: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/prefix(till:)-8iy21","title":"func prefix(till: Self.Element) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/range(from:)","title":"func range(from: Range<Int>) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/removingsubranges(_:)","title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/sharedkeysbyequalvalue(where:)","title":"func sharedKeysByEqualValue<T, U>(where: (U, U) throws -> Bool) rethrows -> [T : U]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-2cy82","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: CasePath<Self.Element, Separator>) -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-92q4b","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: (Self.Element) throws -> Separator?) rethrows -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/splitincludingseparators(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func splitIncludingSeparators(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/splittingfirst()","title":"func splittingFirst() -> (head: Self.Element, tail: Self.SubSequence)?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/tocollectionofone()","title":"func toCollectionOfOne() throws -> CollectionOfOne<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/tocollectionofzeroorone()","title":"func toCollectionOfZeroOrOne() throws -> CollectionOfOne<Self.Element>?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/unfoldingforward()","title":"func unfoldingForward() -> UnfoldSequence<(Self.Element, Self.SubSequence), Self.SubSequence>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subscript(after:)","title":"subscript(after _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subscript(try:)-275mv","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subscript(try:)-576jc","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subscript(try:)-5ikcy","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/index","title":"NullTerminatedUTF8String.Index","type":"typealias"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/init(base:)","title":"init(base: NullTerminatedUTF8String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/base","title":"var base: NullTerminatedUTF8String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/erasetoanyiterator()","title":"func eraseToAnyIterator() -> AnyIterator<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/exhaust()","title":"func exhaust()","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/exhaust(count:)","title":"func exhaust<N>(count: N) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/exhausting()","title":"func exhausting() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/join(_:)","title":"func join<G>(G) -> Join2Iterator<Self, G>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/makesequence()","title":"func makeSequence() -> IteratorSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/next()","title":"func next() -> NullTerminatedUTF8String.Iterator.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/element","title":"NullTerminatedUTF8String.Iterator.Element","type":"typealias"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/iteratorprotocol-implementations","title":"IteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/erasetoanyiterator()","title":"func eraseToAnyIterator() -> AnyIterator<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/exhaust()","title":"func exhaust()","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/exhaust(count:)","title":"func exhaust<N>(count: N) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/exhausting()","title":"func exhausting() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/join(_:)","title":"func join<G>(G) -> Join2Iterator<Self, G>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/makesequence()","title":"func makeSequence() -> IteratorSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/next()","title":"func next() -> NullTerminatedUTF8String.Iterator.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/element","title":"NullTerminatedUTF8String.Iterator.Element","type":"typealias"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator\/iteratorprotocol-implementations","title":"IteratorProtocol Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/iterator","title":"NullTerminatedUTF8String.Iterator","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/bounds","title":"var bounds: Range<Self.Index>","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/endindex","title":"var endIndex: NullTerminatedUTF8String.Index","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/last","title":"var last: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/lastindex","title":"var lastIndex: Self.Index?","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/second","title":"var second: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/startindex","title":"var startIndex: NullTerminatedUTF8String.Index","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/allsubrangeschunked(by:)","title":"func allSubrangesChunked<C>(by: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/chunked(by:)","title":"func chunked(by: Int) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/consecutives()","title":"func consecutives() -> AnySequence<(Self.Element, Self.Element)>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/consecutivesallowinghalfemptypairs()","title":"func consecutivesAllowingHalfEmptyPairs() -> LazyMapSequence<Self._EnumeratedSequence, (Self.Element, Self.Element?)>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/contains(_:)","title":"func contains(Range<Self.Index>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/contains(after:)","title":"func contains(after: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/containsindex(_:)","title":"func containsIndex(Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/cycle(index:)","title":"func cycle(index: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/distancefromstartindex(to:)","title":"func distanceFromStartIndex(to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/enumeratelazysubsequences(matching:)","title":"func enumerateLazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<(Range<Self.Index>, Self.SubSequence), Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/erasetoanycollection()","title":"func eraseToAnyCollection() -> AnyCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/index(_:insetby:)","title":"func index(Self.Index, insetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/index(_:offsetbydistancefromstartindexfor:)","title":"func index(Self.Index, offsetByDistanceFromStartIndexFor: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/index(after:)","title":"func index(after: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/index(atdistance:)","title":"func index(atDistance: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/index(before:)","title":"func index(before: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/indices(of:)","title":"func indices(of: Self.Element) -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/indices(where:)","title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/join(_:_:)","title":"func join<C0, C1>(C0, C1) -> Join3Collection<Self, C0, C1>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/lazysubsequences(matching:)","title":"func lazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<Self.SubSequence, Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/makeiterator()","title":"func makeIterator() -> NullTerminatedUTF8String.Iterator","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/map(_:)-7vn66","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/nilifempty()","title":"func nilIfEmpty() -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/prefix(till:)-522p4","title":"func prefix(till: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/prefix(till:)-8iy21","title":"func prefix(till: Self.Element) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/range(from:)","title":"func range(from: Range<Int>) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/removingsubranges(_:)","title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/sharedkeysbyequalvalue(where:)","title":"func sharedKeysByEqualValue<T, U>(where: (U, U) throws -> Bool) rethrows -> [T : U]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-2cy82","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: CasePath<Self.Element, Separator>) -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-92q4b","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: (Self.Element) throws -> Separator?) rethrows -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/splitincludingseparators(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func splitIncludingSeparators(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/splittingfirst()","title":"func splittingFirst() -> (head: Self.Element, tail: Self.SubSequence)?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/tocollectionofone()","title":"func toCollectionOfOne() throws -> CollectionOfOne<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/tocollectionofzeroorone()","title":"func toCollectionOfZeroOrOne() throws -> CollectionOfOne<Self.Element>?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/unfoldingforward()","title":"func unfoldingForward() -> UnfoldSequence<(Self.Element, Self.SubSequence), Self.SubSequence>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subscript(after:)","title":"subscript(after _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subscript(try:)-275mv","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subscript(try:)-576jc","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subscript(try:)-5ikcy","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/index","title":"NullTerminatedUTF8String.Index","type":"typealias"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/'...(_:)-5u5xf","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/'...(_:)-8ytls","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/_(_:_:)-2e1ao","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/_(_:_:)-5ghaf","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/_=(_:_:)-7sd8c","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/_=(_:_:)-9ubmb","title":"static func >= (Self, Self) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/erasedasanycomparable","title":"var erasedAsAnyComparable: AnyComparable","type":"property"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/'...(_:)-5u5xf","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/'...(_:)-8ytls","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/_(_:_:)-2e1ao","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/_(_:_:)-5ghaf","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/_=(_:_:)-7sd8c","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/_=(_:_:)-9ubmb","title":"static func >= (Self, Self) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/erasedasanycomparable","title":"var erasedAsAnyComparable: AnyComparable","type":"property"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/dataencodingstrategy\/init(allowlossyconversion:)","title":"init(allowLossyConversion: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/dataencodingstrategy\/allowlossyconversion","title":"let allowLossyConversion: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/dataencodingstrategy","title":"NullTerminatedUTF8String.DataEncodingStrategy","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/data(using:)","title":"func data(using: NullTerminatedUTF8String.DataEncodingStrategy) throws -> Data","type":"method"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/dataencodable-implementations","title":"DataEncodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/==(_:_:)-377tb","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/==(_:_:)-9ppa7","title":"static func == (NullTerminatedUTF8String, NullTerminatedUTF8String) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/==(_:_:)-377tb","title":"static func == (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/==(_:_:)-9ppa7","title":"static func == (NullTerminatedUTF8String, NullTerminatedUTF8String) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/memoize(with:_:)-9lbtw","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/memoize(with:_:)-9yjxl","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/memoize(with:_:)-9lbtw","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/memoize(with:_:)-9yjxl","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/move(fromoffsets:tooffset:)","title":"func move(fromOffsets: IndexSet, toOffset: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/movesubranges(_:to:)","title":"func moveSubranges(RangeSet<Self.Index>, to: Self.Index) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/partition(by:)","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reindexwith(_:)-1uhki","title":"func reindexWith<S>(S)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reindexwith(_:)-2sbig","title":"func reindexWith<C>(C)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reindexwith(_:count:)-634zz","title":"func reindexWith<S>(S, count: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reindexwith(_:count:)-9m24u","title":"func reindexWith<C>(C, count: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/swapat(_:_:)","title":"func swapAt(Self.Index, Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/withcontiguousmutablestorageifavailable(_:)","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subscript(_:)","title":"subscript(NullTerminatedUTF8String.Index) -> NullTerminatedUTF8String.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subscript(atdistance:)","title":"subscript(atDistance _: Int) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subscript(cycling:)","title":"subscript(cycling _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subscript(try:)-3vkjb","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subscript(try:)-50n4x","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/mutablecollection-implementations","title":"MutableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/move(fromoffsets:tooffset:)","title":"func move(fromOffsets: IndexSet, toOffset: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/movesubranges(_:to:)","title":"func moveSubranges(RangeSet<Self.Index>, to: Self.Index) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/partition(by:)","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reindexwith(_:)-1uhki","title":"func reindexWith<S>(S)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reindexwith(_:)-2sbig","title":"func reindexWith<C>(C)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reindexwith(_:count:)-634zz","title":"func reindexWith<S>(S, count: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reindexwith(_:count:)-9m24u","title":"func reindexWith<C>(C, count: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/swapat(_:_:)","title":"func swapAt(Self.Index, Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/withcontiguousmutablestorageifavailable(_:)","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subscript(_:)","title":"subscript(NullTerminatedUTF8String.Index) -> NullTerminatedUTF8String.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subscript(atdistance:)","title":"subscript(atDistance _: Int) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subscript(cycling:)","title":"subscript(cycling _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subscript(try:)-3vkjb","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subscript(try:)-50n4x","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/mutablecollection-implementations","title":"MutableCollection Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/init(mutating:)-39t7x","title":"init(mutating: UnsafePointer<Self.Pointee>)","type":"init"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/init(mutating:)-5j6b7","title":"init?(mutating: UnsafePointer<Self.Pointee>?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/pointee-swift.property","title":"var pointee: Self.Pointee","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/assumingmemorybound(to:)","title":"func assumingMemoryBound<T>(to: T.Type) -> UnsafeMutablePointer<T>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/deallocate()","title":"func deallocate()","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/deinitialize(capacity:)","title":"func deinitialize<N>(capacity: N) -> UnsafeMutableRawPointer","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/deinitialize(count:)","title":"func deinitialize(count: Int) -> UnsafeMutableRawPointer","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/deinitializefirst()","title":"func deinitializeFirst() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/initialize(from:)-4u4k9","title":"func initialize<C>(from: C)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/initialize(from:)-5ahro","title":"func initialize<BP>(from: BP)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/initialize(from:)-q4sm","title":"func initialize<S>(from: S)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/initialize(from:count:)","title":"func initialize<P>(from: P, count: Self.Stride)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/initialize(repeating:count:)","title":"func initialize(repeating: Self.Pointee, count: Self.Stride)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/initialize(to:)","title":"func initialize(to: Self.Pointee)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/initializing(to:)","title":"func initializing(to: Self.Pointee) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/initializing(to:count:)","title":"func initializing<N>(to: Self.Pointee, count: N) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/move()","title":"func move() -> Self.Pointee","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reinitialize(to:)","title":"func reinitialize(to: Self.Pointee)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/remove()","title":"func remove() -> Self.Pointee","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/set(pointee:at:)","title":"func set(pointee: Self.Pointee, at: Self.Stride)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/update(from:)-12zkk","title":"func update<S>(from: S)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/update(from:)-3mqpf","title":"func update<C>(from: C)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/update(from:)-9kdjb","title":"func update<BP>(from: BP)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/update(from:count:)","title":"func update(from: UnsafePointer<Self.Pointee>, count: Self.Stride)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/update(repeating:count:)","title":"func update(repeating: Self.Pointee, count: Self.Stride)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/update(to:)","title":"func update(to: Self.Pointee)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/allocate(capacity:)","title":"static func allocate(capacity: NullTerminatedUTF8String.Stride) -> NullTerminatedUTF8String","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/initializing(from:)-1c51a","title":"static func initializing<S>(from: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/initializing(from:)-7z9c6","title":"static func initializing<C>(from: C) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/initializing(from:)-88m8g","title":"static func initializing<BP>(from: BP) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/initializing(from:count:)","title":"static func initializing<P>(from: P, count: Self.Stride) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/mutablepointer-implementations","title":"MutablePointer Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/init(_:)-6mz29","title":"init(OpaquePointer)","type":"init"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/init(_:)-9p6fu","title":"init?(OpaquePointer?)","type":"init"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/opaquepointerinitiable-implementations","title":"OpaquePointerInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/init(_:)-85hk4","title":"init<P>(P)","type":"init"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/init(_:)-9n63q","title":"init?<P>(P?)","type":"init"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/init(bitpattern:)","title":"init<P>(bitPattern: P)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/mutablerawrepresentation","title":"var mutableRawRepresentation: UnsafeMutableRawPointer","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/nativewordpointerrepresentation","title":"var nativeWordPointerRepresentation: UnsafePointer<NativeWord>","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/opaquepointerrepresentation","title":"var opaquePointerRepresentation: OpaquePointer","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/rawrepresentation","title":"var rawRepresentation: UnsafeRawPointer","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/unsafemutablepointerrepresentation","title":"var unsafeMutablePointerRepresentation: UnsafeMutablePointer<Self.Pointee>","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/unsafepointerrepresentation","title":"var unsafePointerRepresentation: UnsafePointer<Self.Pointee>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/pointee-swift.typealias","title":"NullTerminatedUTF8String.Pointee","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/allocate(initializingto:)","title":"static func allocate(initializingTo: Self.Pointee) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/allocate(initializingto:count:)","title":"static func allocate<N>(initializingTo: Self.Pointee, count: N) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/to(_:)","title":"static func to(inout Self.Pointee) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/to(assuminglayoutcompatible:)","title":"static func to<T>(assumingLayoutCompatible: inout T) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/pointer-implementations","title":"Pointer Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/allsatisfy(_:)-3sna","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/allsatisfy(_:)-81o5w","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/compactmap(_:)-3st4d","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/compactmap(_:)-5x4rf","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/distinct()","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/distinct(by:)-1l4nv","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/distinct(by:)-9iku7","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/filter(_:)-15k1k","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/filter(_:)-1rj7s","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/find(_:)-5r50p","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/find(_:)-5rst1","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/find(_:mutate:)-5dj10","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/find(_:mutate:)-6cxkm","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/first(byunwrapping:)-3d8gb","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/first(byunwrapping:)-4eo1x","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/first(oftype:)","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/firstandonly(byunwrapping:)-63k5l","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/firstandonly(byunwrapping:)-8chu5","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/firstandonly(oftype:)","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/flatmap(_:)-6zw1v","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/flatmap(_:)-74ajt","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/flatmap(_:)-856bd","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/hasprefix(_:)","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/longestconsecutivesequences(by:relativeto:)-4bwrp","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/longestconsecutivesequences(by:relativeto:)-8p5mm","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/map(_:)-1ro4h","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/map(_:)-9jqp1","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/minormax(_:by:)-44jhr","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/minormax(_:by:)-8ojop","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reduce(_:_:)-4wc94","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reduce(_:_:)-7q06d","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/removefirst(byunwrapping:)-5jsri","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/removefirst(byunwrapping:)-7iv7m","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/sorted(by:order:)-9jgqc","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/sorted(by:order:)-9vbid","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/sorted(using:)-121va","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/sorted(using:)-1nffr","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/element","title":"NullTerminatedUTF8String.Element","type":"typealias"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/allsatisfy(_:)-3sna","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/allsatisfy(_:)-81o5w","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/compactmap(_:)-3st4d","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/compactmap(_:)-5x4rf","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/distinct()","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/distinct(by:)-1l4nv","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/distinct(by:)-9iku7","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/filter(_:)-15k1k","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/filter(_:)-1rj7s","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/find(_:)-5r50p","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/find(_:)-5rst1","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/find(_:mutate:)-5dj10","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/find(_:mutate:)-6cxkm","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/first(byunwrapping:)-3d8gb","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/first(byunwrapping:)-4eo1x","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/first(oftype:)","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/firstandonly(byunwrapping:)-63k5l","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/firstandonly(byunwrapping:)-8chu5","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/firstandonly(oftype:)","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/flatmap(_:)-6zw1v","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/flatmap(_:)-74ajt","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/flatmap(_:)-856bd","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/hasprefix(_:)","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/longestconsecutivesequences(by:relativeto:)-4bwrp","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/longestconsecutivesequences(by:relativeto:)-8p5mm","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/map(_:)-1ro4h","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/map(_:)-9jqp1","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/minormax(_:by:)-44jhr","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/minormax(_:by:)-8ojop","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reduce(_:_:)-4wc94","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reduce(_:_:)-7q06d","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/removefirst(byunwrapping:)-5jsri","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/removefirst(byunwrapping:)-7iv7m","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/sorted(by:order:)-9jgqc","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/sorted(by:order:)-9vbid","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/sorted(using:)-121va","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/sorted(using:)-1nffr","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/element","title":"NullTerminatedUTF8String.Element","type":"typealias"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/advance()","title":"func advance()","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/advance(by:)","title":"func advance(by: Self.Stride)","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/advanced(by:)","title":"func advanced(by: NullTerminatedUTF8String.Value.Stride) -> NullTerminatedUTF8String","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/distance(to:)","title":"func distance(to: NullTerminatedUTF8String) -> NullTerminatedUTF8String.Value.Stride","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/predecessor()","title":"func predecessor() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/successor()","title":"func successor() -> Self","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/stride","title":"NullTerminatedUTF8String.Stride","type":"typealias"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/strideable-implementations","title":"Strideable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/map(_:)-syiz","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/nullterminatedutf8string","title":"NullTerminatedUTF8String","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/codingpath","title":"let codingPath: [any CodingKey]","type":"property"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/object","title":"let object: Any","type":"property"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/userinfo","title":"let userInfo: [CodingUserInfoKey : Any]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/container(keyedby:)","title":"func container<Key>(keyedBy: Key.Type) throws -> KeyedDecodingContainer<Key>","type":"method"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/decode(_:forkey:)","title":"func decode<T, Key>(T.Type, forKey: Key) throws -> T","type":"method"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/decode(first:)","title":"func decode<T>(first: T.Type) throws -> T","type":"method"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/decodeifpresent(_:forkey:)","title":"func decodeIfPresent<T, Key>(T.Type, forKey: Key) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/decodeifpresent(single:)","title":"func decodeIfPresent<T>(single: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/decodekeyednil()","title":"func decodeKeyedNil() throws -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/decodesinglevalue(_:)","title":"func decodeSingleValue<T>(T.Type) throws -> T","type":"method"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/decodesinglevaluenil()","title":"func decodeSingleValueNil() throws -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/decodeunkeyednil()","title":"func decodeUnkeyedNil() throws -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/singlevaluecontainer()","title":"func singleValueContainer() throws -> any SingleValueDecodingContainer","type":"method"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/unkeyedcontainer()","title":"func unkeyedContainer() throws -> any UnkeyedDecodingContainer","type":"method"}],"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/decoder-implementations","title":"Decoder Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/decode(_:)-1v9r4","title":"func decode(UInt128.Type) throws -> UInt128","type":"method"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/decode(_:)-2rvvy","title":"func decode<T>(T.Type) throws -> T","type":"method"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/decode(_:)-333kg","title":"func decode(String.Type) throws -> String","type":"method"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/decode(_:)-6tm4p","title":"func decode(Bool.Type) throws -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/decode(_:)-7cqy7","title":"func decode(Int128.Type) throws -> Int128","type":"method"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/decode(_:)-v42u","title":"func decode<T>(T.Type) throws -> T","type":"method"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/decodenil()","title":"func decodeNil() -> Bool","type":"method"}],"path":"\/documentation\/diagnostics\/objectdecoder\/decoder\/singlevaluedecodingcontainer-implementations","title":"SingleValueDecodingContainer Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/objectdecoder\/decoder","title":"ObjectDecoder.Decoder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategies-swift.struct\/init()","title":"init()","type":"init"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategies-swift.struct\/subscript(_:)","title":"subscript<T>(T.Type) -> ObjectDecoder.DecodingStrategy<T>?","type":"subscript"}],"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategies-swift.struct","title":"ObjectDecoder.DecodingStrategies","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategy\/init(closure:)","title":"init(closure: ObjectDecoder.DecodingStrategy<T>.Closure)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategy\/closure","title":"ObjectDecoder.DecodingStrategy.Closure","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategy\/base64","title":"static let base64: ObjectDecoder.DecodingStrategy<Data>","type":"property"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategy\/compatiblewithjsondecoder-3h9co","title":"static let compatibleWithJSONDecoder: ObjectDecoder.DecodingStrategy<Decimal>","type":"property"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategy\/compatiblewithjsondecoder-j4wt","title":"static let compatibleWithJSONDecoder: ObjectDecoder.DecodingStrategy<URL>","type":"property"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategy\/deferredtodata","title":"static let deferredToData: ObjectDecoder.DataDecodingStrategy?","type":"property"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategy\/deferredtodate","title":"static let deferredToDate: ObjectDecoder.DateDecodingStrategy?","type":"property"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategy\/deferredtodouble","title":"static let deferredToDouble: ObjectDecoder.DoubleDecodingStrategy?","type":"property"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategy\/deferredtofloat","title":"static let deferredToFloat: ObjectDecoder.FloatDecodingStrategy?","type":"property"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategy\/iso8601","title":"static let iso8601: ObjectDecoder.DecodingStrategy<Date>","type":"property"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategy\/millisecondssince1970","title":"static let millisecondsSince1970: ObjectDecoder.DecodingStrategy<Date>","type":"property"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategy\/secondssince1970","title":"static let secondsSince1970: ObjectDecoder.DecodingStrategy<Date>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategy\/convertnonconformingfloatfromstring(_:_:_:)-1fexh","title":"static func convertNonConformingFloatFromString(String, String, String) -> ObjectDecoder.FloatDecodingStrategy","type":"method"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategy\/convertnonconformingfloatfromstring(_:_:_:)-955xo","title":"static func convertNonConformingFloatFromString(String, String, String) -> ObjectDecoder.DoubleDecodingStrategy","type":"method"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategy\/custom(_:)","title":"static func custom(ObjectDecoder.DecodingStrategy<T>.Closure) -> ObjectDecoder.DecodingStrategy<T>","type":"method"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategy\/formatted(_:)","title":"static func formatted(DateFormatter) -> ObjectDecoder.DateDecodingStrategy","type":"method"}],"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategy","title":"ObjectDecoder.DecodingStrategy","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectdecoder\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decodingstrategies-swift.property","title":"var decodingStrategies: ObjectDecoder.DecodingStrategies","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectdecoder\/decode(_:from:userinfo:)","title":"func decode<T>(T.Type, from: Any, userInfo: [CodingUserInfoKey : Any]) throws -> T","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectdecoder\/datadecodingstrategy","title":"ObjectDecoder.DataDecodingStrategy","type":"typealias"},{"path":"\/documentation\/diagnostics\/objectdecoder\/datedecodingstrategy","title":"ObjectDecoder.DateDecodingStrategy","type":"typealias"},{"path":"\/documentation\/diagnostics\/objectdecoder\/doubledecodingstrategy","title":"ObjectDecoder.DoubleDecodingStrategy","type":"typealias"},{"path":"\/documentation\/diagnostics\/objectdecoder\/floatdecodingstrategy","title":"ObjectDecoder.FloatDecodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/objectdecoder","title":"ObjectDecoder","type":"struct"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/codingpath","title":"let codingPath: [any CodingKey]","type":"property"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/object","title":"var object: (any NSCoding)?","type":"property"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/userinfo","title":"let userInfo: [CodingUserInfoKey : Any]","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/container(keyedby:)","title":"func container<Key>(keyedBy: Key.Type) -> KeyedEncodingContainer<Key>","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/encode(_:)-6tnq","title":"func encode<T>(T) throws","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/encode(_:forkey:)","title":"func encode<T, Key>(T, forKey: Key) throws","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/encode(contentsof:)","title":"func encode<S>(contentsOf: S) throws","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/encode(contentsof:forkey:)","title":"func encode<S, Key>(contentsOf: S, forKey: Key) throws","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/encode(opaque:forkey:)","title":"func encode<Key>(opaque: any Encodable, forKey: Key) throws","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/singlevaluecontainer()","title":"func singleValueContainer() -> any SingleValueEncodingContainer","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/unkeyedcontainer()","title":"func unkeyedContainer() -> any UnkeyedEncodingContainer","type":"method"}],"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/encoder-implementations","title":"Encoder Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/container(keyedby:)","title":"func container<Key>(keyedBy: Key.Type) -> KeyedEncodingContainer<Key>","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/encode(_:)-6tnq","title":"func encode<T>(T) throws","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/encode(_:forkey:)","title":"func encode<T, Key>(T, forKey: Key) throws","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/encode(contentsof:)","title":"func encode<S>(contentsOf: S) throws","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/encode(contentsof:forkey:)","title":"func encode<S, Key>(contentsOf: S, forKey: Key) throws","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/encode(opaque:forkey:)","title":"func encode<Key>(opaque: any Encodable, forKey: Key) throws","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/singlevaluecontainer()","title":"func singleValueContainer() -> any SingleValueEncodingContainer","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/unkeyedcontainer()","title":"func unkeyedContainer() -> any UnkeyedEncodingContainer","type":"method"}],"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/encoder-implementations","title":"Encoder Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/encode(_:)-3di34","title":"func encode(UInt128) throws","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/encode(_:)-6osyj","title":"func encode<T>(T) throws","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/encode(_:)-6ysl4","title":"func encode<T>(T) throws","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/encode(_:)-a9by","title":"func encode(Int128) throws","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/encodenil()","title":"func encodeNil() throws","type":"method"}],"path":"\/documentation\/diagnostics\/objectencoder\/encoder\/singlevalueencodingcontainer-implementations","title":"SingleValueEncodingContainer Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/objectencoder\/encoder","title":"ObjectEncoder.Encoder","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategies-swift.struct\/init()","title":"init()","type":"init"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategies-swift.struct\/subscript(_:)","title":"subscript<T>(T.Type) -> ObjectEncoder.EncodingStrategy<T>?","type":"subscript"}],"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategies-swift.struct","title":"ObjectEncoder.EncodingStrategies","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategy\/init(closure:)","title":"init(closure: ObjectEncoder.EncodingStrategy<T>.Closure)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategy\/closure","title":"ObjectEncoder.EncodingStrategy.Closure","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategy\/base64","title":"static let base64: ObjectEncoder.EncodingStrategy<Data>","type":"property"},{"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategy\/compatiblewithjsonencoder-26xiu","title":"static let compatibleWithJSONEncoder: ObjectEncoder.EncodingStrategy<Decimal>","type":"property"},{"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategy\/compatiblewithjsonencoder-9xjnz","title":"static let compatibleWithJSONEncoder: ObjectEncoder.EncodingStrategy<URL>","type":"property"},{"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategy\/deferredtodata","title":"static let deferredToData: ObjectEncoder.DataEncodingStrategy?","type":"property"},{"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategy\/deferredtodate","title":"static let deferredToDate: ObjectEncoder.DateEncodingStrategy?","type":"property"},{"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategy\/iso8601","title":"static let iso8601: ObjectEncoder.EncodingStrategy<Date>","type":"property"},{"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategy\/millisecondssince1970","title":"static let millisecondsSince1970: ObjectEncoder.EncodingStrategy<Date>","type":"property"},{"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategy\/secondssince1970","title":"static let secondsSince1970: ObjectEncoder.EncodingStrategy<Date>","type":"property"},{"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategy\/throwonnonconformingfloat-2hv4a","title":"static let throwOnNonConformingFloat: ObjectEncoder.EncodingStrategy<Double>","type":"property"},{"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategy\/throwonnonconformingfloat-3v10o","title":"static let throwOnNonConformingFloat: ObjectEncoder.EncodingStrategy<Float>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategy\/convertnonconformingfloattostring(_:_:_:)-3aity","title":"static func convertNonConformingFloatToString(String, String, String) -> ObjectEncoder.DoubleEncodingStrategy","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategy\/convertnonconformingfloattostring(_:_:_:)-6ngp7","title":"static func convertNonConformingFloatToString(String, String, String) -> ObjectEncoder.FloatEncodingStrategy","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategy\/custom(_:)","title":"static func custom(ObjectEncoder.EncodingStrategy<T>.Closure) -> ObjectEncoder.EncodingStrategy<T>","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategy\/formatted(_:)","title":"static func formatted(DateFormatter) -> ObjectEncoder.DateEncodingStrategy","type":"method"}],"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategy","title":"ObjectEncoder.EncodingStrategy","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectencoder\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectencoder\/encodingstrategies-swift.property","title":"var encodingStrategies: ObjectEncoder.EncodingStrategies","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectencoder\/encode(_:as:userinfo:)","title":"func encode<T, U>(T, as: U.Type, userInfo: [CodingUserInfoKey : Any]) throws -> U","type":"method"},{"path":"\/documentation\/diagnostics\/objectencoder\/encode(_:userinfo:)","title":"func encode<T>(T, userInfo: [CodingUserInfoKey : Any]) throws -> any NSCoding","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectencoder\/dataencodingstrategy","title":"ObjectEncoder.DataEncodingStrategy","type":"typealias"},{"path":"\/documentation\/diagnostics\/objectencoder\/dateencodingstrategy","title":"ObjectEncoder.DateEncodingStrategy","type":"typealias"},{"path":"\/documentation\/diagnostics\/objectencoder\/doubleencodingstrategy","title":"ObjectEncoder.DoubleEncodingStrategy","type":"typealias"},{"path":"\/documentation\/diagnostics\/objectencoder\/floatencodingstrategy","title":"ObjectEncoder.FloatEncodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/objectencoder","title":"ObjectEncoder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/opaquetask\/init(erasing:)","title":"init<Success>(erasing: Task<Success, Never>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/opaquetask\/value","title":"var value: any Sendable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/opaquetask\/cancel()","title":"func cancel()","type":"method"}],"path":"\/documentation\/diagnostics\/opaquetask","title":"OpaqueTask","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/opaquethrowingtask\/init(erasing:)","title":"init<Success, Failure>(erasing: Task<Success, Failure>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/opaquethrowingtask\/value","title":"var value: any Sendable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/opaquethrowingtask\/cancel()","title":"func cancel()","type":"method"}],"path":"\/documentation\/diagnostics\/opaquethrowingtask","title":"OpaqueThrowingTask","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/init(wrappedvalue:)","title":"init(wrappedValue: Date?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/wrappedvalue","title":"var wrappedValue: Date?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/decodeifpresent(from:)-4p5mg","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/decodeifpresent(from:)-6lebn","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/optionaldatevalue\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/optionaldatevalue\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/optionaldatevalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/optionaldatevalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/memoize(with:_:)-6l4s6","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/optionaldatevalue\/memoize(with:_:)-85vtj","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/optionaldatevalue\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/optionaldatevalue","title":"OptionalDateValue","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionallosslessnumber\/init()","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/optionallosslessnumber\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"path":"\/documentation\/diagnostics\/optionallosslessnumber\/init(wrappedvalue:)","title":"init(wrappedValue: Optional<N>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionallosslessnumber\/wrappedvalue","title":"let wrappedValue: Optional<N>","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionallosslessnumber\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/optionallosslessnumber\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/optionallosslessnumber\/decodeifpresent(from:)-6vvys","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/optionallosslessnumber\/decodeifpresent(from:)-8v6u5","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/optionallosslessnumber\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/optionallosslessnumber\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionallosslessnumber\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/optionallosslessnumber\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionallosslessnumber\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/optionallosslessnumber\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionallosslessnumber\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/optionallosslessnumber\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionallosslessnumber\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/optionallosslessnumber\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionallosslessnumber\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/optionallosslessnumber\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/optionallosslessnumber\/memoize(with:_:)-1olir","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/optionallosslessnumber\/memoize(with:_:)-81d1p","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/optionallosslessnumber\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/optionallosslessnumber","title":"OptionalLosslessNumber","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pair\/init(_:)","title":"init(Pair<T, U>.Value)","type":"init"},{"path":"\/documentation\/diagnostics\/pair\/init(_:_:)","title":"init(T, U)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pair\/value-swift.property","title":"var value: Pair<T, U>.Value","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pair\/value-swift.typealias","title":"Pair.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pair\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pair\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/pair\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/pair\/decodeifpresent(from:)-1dma4","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/pair\/decodeifpresent(from:)-519lx","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/pair\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/pair\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pair\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/pair\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/pair\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/pair\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pair\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/pair\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/pair\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/pair\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pair\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/pair\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/pair\/==(_:_:)","title":"static func == (Pair<T, U>, Pair<T, U>) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pair\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/pair\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pair\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/pair\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/pair\/==(_:_:)","title":"static func == (Pair<T, U>, Pair<T, U>) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pair\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/pair\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pair\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/pair\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pair\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pair\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/pair\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/pair\/memoize(with:_:)-54nbq","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/pair\/memoize(with:_:)-6krj","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/pair\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pair\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pair\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/pair\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/pair\/memoize(with:_:)-54nbq","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/pair\/memoize(with:_:)-6krj","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/pair\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pair\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/pair\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/pair\/init()","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/pair\/_throwinginitiable-implementations","title":"_ThrowingInitiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/pair","title":"Pair","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/rfc3339\/decode(_:)","title":"static func decode(String) throws -> Date","type":"method"},{"path":"\/documentation\/diagnostics\/rfc3339\/encode(_:)","title":"static func encode(Date) -> String","type":"method"}],"path":"\/documentation\/diagnostics\/rfc3339","title":"RFC3339","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/relativeindex\/init(_:in:)","title":"init<C>(C.Index, in: C)","type":"init"},{"path":"\/documentation\/diagnostics\/relativeindex\/init(atdistance:)","title":"init(atDistance: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/relativeindex\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/relativeindex\/distancefromstartindex","title":"let distanceFromStartIndex: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/relativeindex\/absolute(in:)","title":"func absolute<C>(in: C) -> C.Index","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/relativeindex\/atdistance(_:)","title":"static func atDistance(Int) -> RelativeIndex","type":"method"}],"path":"\/documentation\/diagnostics\/relativeindex","title":"RelativeIndex","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/init(_:)","title":"init(SequenceToCollection<S>.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/endindex","title":"var endIndex: SequenceToCollection<S>.Index","type":"property"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/indices-swift.property","title":"var indices: SequenceToCollection<S>.Indices","type":"property"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/startindex","title":"var startIndex: SequenceToCollection<S>.Index","type":"property"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/value-swift.property","title":"let value: SequenceToCollection<S>.Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/makeiterator()","title":"func makeIterator() -> SequenceToCollection<S>.Iterator","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/subscript(_:)","title":"subscript(SequenceToCollection<S>.Index) -> SequenceToCollection<S>.Element","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/element","title":"SequenceToCollection.Element","type":"typealias"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/index","title":"SequenceToCollection.Index","type":"typealias"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/indices-swift.typealias","title":"SequenceToCollection.Indices","type":"typealias"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/iterator","title":"SequenceToCollection.Iterator","type":"typealias"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/value-swift.typealias","title":"SequenceToCollection.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/last","title":"var last: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/lastindex","title":"var lastIndex: Self.Index?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/erasetoanybidirectionalcollection()","title":"func eraseToAnyBidirectionalCollection() -> AnyBidirectionalCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/firstrange(of:)-54nnp","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/hasapproximatesuffix(_:)","title":"func hasApproximateSuffix<Suffix>(Suffix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/hassuffix(_:)-bwc4","title":"func hasSuffix<Suffix>(Suffix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/hassuffix(_:)-s7zs","title":"func hasSuffix<Suffix>(Suffix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/index(ifpresentafter:)","title":"func index(ifPresentAfter: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/index(ifpresentbefore:)","title":"func index(ifPresentBefore: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/joined(separator:)-8f9bk","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/reverse(index:)","title":"func reverse(index: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/splittinglast()","title":"func splittingLast() -> (head: Self.SubSequence, tail: Self.Element)?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/unfoldingbackward()","title":"func unfoldingBackward() -> UnfoldSequence<(Self.SubSequence, Self.Element), Self.SubSequence>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/subscript(reverse:)","title":"subscript(reverse _: Self.Index) -> Self.Element","type":"subscript"}],"path":"\/documentation\/diagnostics\/sequencetocollection\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/last","title":"var last: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/lastindex","title":"var lastIndex: Self.Index?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/erasetoanybidirectionalcollection()","title":"func eraseToAnyBidirectionalCollection() -> AnyBidirectionalCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/firstrange(of:)-54nnp","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/hasapproximatesuffix(_:)","title":"func hasApproximateSuffix<Suffix>(Suffix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/hassuffix(_:)-bwc4","title":"func hasSuffix<Suffix>(Suffix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/hassuffix(_:)-s7zs","title":"func hasSuffix<Suffix>(Suffix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/index(ifpresentafter:)","title":"func index(ifPresentAfter: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/index(ifpresentbefore:)","title":"func index(ifPresentBefore: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/joined(separator:)-8f9bk","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/reverse(index:)","title":"func reverse(index: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/splittinglast()","title":"func splittingLast() -> (head: Self.SubSequence, tail: Self.Element)?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/unfoldingbackward()","title":"func unfoldingBackward() -> UnfoldSequence<(Self.SubSequence, Self.Element), Self.SubSequence>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/subscript(reverse:)","title":"subscript(reverse _: Self.Index) -> Self.Element","type":"subscript"}],"path":"\/documentation\/diagnostics\/sequencetocollection\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/bounds","title":"var bounds: Range<Self.Index>","type":"property"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/second","title":"var second: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/allsubrangeschunked(by:)","title":"func allSubrangesChunked<C>(by: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/chunked(by:)","title":"func chunked(by: Int) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/consecutives()","title":"func consecutives() -> AnySequence<(Self.Element, Self.Element)>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/consecutivesallowinghalfemptypairs()","title":"func consecutivesAllowingHalfEmptyPairs() -> LazyMapSequence<Self._EnumeratedSequence, (Self.Element, Self.Element?)>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/contains(_:)","title":"func contains(Range<Self.Index>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/contains(after:)","title":"func contains(after: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/containsindex(_:)","title":"func containsIndex(Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/cycle(index:)","title":"func cycle(index: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/distancefromstartindex(to:)","title":"func distanceFromStartIndex(to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/enumeratelazysubsequences(matching:)","title":"func enumerateLazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<(Range<Self.Index>, Self.SubSequence), Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/erasetoanycollection()","title":"func eraseToAnyCollection() -> AnyCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/firstrange(of:)-7gh65","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/index(_:insetby:)","title":"func index(Self.Index, insetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/index(_:offsetbydistancefromstartindexfor:)","title":"func index(Self.Index, offsetByDistanceFromStartIndexFor: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/index(atdistance:)","title":"func index(atDistance: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/indices(of:)-3jeuo","title":"func indices(of: Self.Element) -> [Self.Index]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/indices(of:)-8aig","title":"func indices(of: Self.Element) -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/indices(where:)","title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/join(_:_:)","title":"func join<C0, C1>(C0, C1) -> Join3Collection<Self, C0, C1>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/lazysubsequences(matching:)","title":"func lazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<Self.SubSequence, Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/map(_:)-50ze3","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/nilifempty()","title":"func nilIfEmpty() -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/prefix(till:)","title":"func prefix(till: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/range(from:)","title":"func range(from: Range<Int>) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/removingsubranges(_:)","title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/sharedkeysbyequalvalue(where:)","title":"func sharedKeysByEqualValue<T, U>(where: (U, U) throws -> Bool) rethrows -> [T : U]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/split(separator:maxsplits:omittingemptysubsequences:)-22o8","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/split(separator:maxsplits:omittingemptysubsequences:)-w4h9","title":"func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-26fc6","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: (Self.Element) throws -> Separator?) rethrows -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-6cgi3","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: CasePath<Self.Element, Separator>) -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/splitincludingseparators(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func splitIncludingSeparators(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/splittingfirst()","title":"func splittingFirst() -> (head: Self.Element, tail: Self.SubSequence)?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/tocollectionofone()","title":"func toCollectionOfOne() throws -> CollectionOfOne<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/tocollectionofzeroorone()","title":"func toCollectionOfZeroOrOne() throws -> CollectionOfOne<Self.Element>?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/unfoldingforward()","title":"func unfoldingForward() -> UnfoldSequence<(Self.Element, Self.SubSequence), Self.SubSequence>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/subscript(after:)","title":"subscript(after _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/subscript(atdistance:)","title":"subscript(atDistance _: Int) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/subscript(cycling:)","title":"subscript(cycling _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/subscript(try:)-46dph","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/subscript(try:)-6ogjp","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/subscript(try:)-7cduw","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"}],"path":"\/documentation\/diagnostics\/sequencetocollection\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/bounds","title":"var bounds: Range<Self.Index>","type":"property"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/second","title":"var second: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/allsubrangeschunked(by:)","title":"func allSubrangesChunked<C>(by: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/chunked(by:)","title":"func chunked(by: Int) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/consecutives()","title":"func consecutives() -> AnySequence<(Self.Element, Self.Element)>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/consecutivesallowinghalfemptypairs()","title":"func consecutivesAllowingHalfEmptyPairs() -> LazyMapSequence<Self._EnumeratedSequence, (Self.Element, Self.Element?)>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/contains(_:)","title":"func contains(Range<Self.Index>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/contains(after:)","title":"func contains(after: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/containsindex(_:)","title":"func containsIndex(Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/cycle(index:)","title":"func cycle(index: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/distancefromstartindex(to:)","title":"func distanceFromStartIndex(to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/enumeratelazysubsequences(matching:)","title":"func enumerateLazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<(Range<Self.Index>, Self.SubSequence), Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/erasetoanycollection()","title":"func eraseToAnyCollection() -> AnyCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/firstrange(of:)-7gh65","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/index(_:insetby:)","title":"func index(Self.Index, insetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/index(_:offsetbydistancefromstartindexfor:)","title":"func index(Self.Index, offsetByDistanceFromStartIndexFor: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/index(atdistance:)","title":"func index(atDistance: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/indices(of:)-3jeuo","title":"func indices(of: Self.Element) -> [Self.Index]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/indices(of:)-8aig","title":"func indices(of: Self.Element) -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/indices(where:)","title":"func indices(where: (Self.Element) throws -> Bool) rethrows -> RangeSet<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/join(_:_:)","title":"func join<C0, C1>(C0, C1) -> Join3Collection<Self, C0, C1>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/lazysubsequences(matching:)","title":"func lazySubsequences(matching: (Self.Element) -> Bool) -> LazySequence<UnfoldSequence<Self.SubSequence, Self.Index>>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/map(_:)-50ze3","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/nilifempty()","title":"func nilIfEmpty() -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/prefix(till:)","title":"func prefix(till: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/range(from:)","title":"func range(from: Range<Int>) -> Range<Self.Index>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/removingsubranges(_:)","title":"func removingSubranges(RangeSet<Self.Index>) -> DiscontiguousSlice<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/sharedkeysbyequalvalue(where:)","title":"func sharedKeysByEqualValue<T, U>(where: (U, U) throws -> Bool) rethrows -> [T : U]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/split(separator:maxsplits:omittingemptysubsequences:)-22o8","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/split(separator:maxsplits:omittingemptysubsequences:)-w4h9","title":"func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-26fc6","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: (Self.Element) throws -> Separator?) rethrows -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-6cgi3","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: CasePath<Self.Element, Separator>) -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/splitincludingseparators(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func splitIncludingSeparators(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/splittingfirst()","title":"func splittingFirst() -> (head: Self.Element, tail: Self.SubSequence)?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/tocollectionofone()","title":"func toCollectionOfOne() throws -> CollectionOfOne<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/tocollectionofzeroorone()","title":"func toCollectionOfZeroOrOne() throws -> CollectionOfOne<Self.Element>?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/unfoldingforward()","title":"func unfoldingForward() -> UnfoldSequence<(Self.Element, Self.SubSequence), Self.SubSequence>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/subscript(after:)","title":"subscript(after _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/subscript(atdistance:)","title":"subscript(atDistance _: Int) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/subscript(cycling:)","title":"subscript(cycling _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/subscript(try:)-46dph","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/subscript(try:)-6ogjp","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/subscript(try:)-7cduw","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"}],"path":"\/documentation\/diagnostics\/sequencetocollection\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/sequencetocollection\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/erasetoanyrandomaccesscollection()","title":"func eraseToAnyRandomAccessCollection() -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"}],"path":"\/documentation\/diagnostics\/sequencetocollection\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/erasetoanyrandomaccesscollection()","title":"func eraseToAnyRandomAccessCollection() -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"}],"path":"\/documentation\/diagnostics\/sequencetocollection\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/allsatisfy(_:)-5dzhw","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/allsatisfy(_:)-5fzq5","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/compactmap(_:)-1cqch","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/compactmap(_:)-3t4mj","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/distinct()-22t7x","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/distinct()-67ldv","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/distinct(by:)-56aty","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/distinct(by:)-79c90","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/fill(using:)-1791c","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/fill(using:)-7g8xx","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/fill(using:)-7yafl","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/filter(_:)-4o10h","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/filter(_:)-4vjbg","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/find(_:)-8fnye","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/find(_:)-agq8","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/find(_:mutate:)-56i7a","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/find(_:mutate:)-5wgwa","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/first(byunwrapping:)-11zvf","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/first(byunwrapping:)-3yt8h","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/first(oftype:)-19hr2","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/first(oftype:)-2o7x6","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/firstandonly(byunwrapping:)-2848z","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/firstandonly(byunwrapping:)-8d0xb","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/firstandonly(oftype:)-5kh8b","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/firstandonly(oftype:)-5mh0c","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/flatmap(_:)-1t2t9","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/flatmap(_:)-7rvzo","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/flatmap(_:)-7y8r","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/hasprefix(_:)-2z12h","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/hasprefix(_:)-6ifp1","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/joined(separator:)-38xxy","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/joined(separator:)-k3xg","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/longestconsecutivesequences(by:relativeto:)-1dti","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/longestconsecutivesequences(by:relativeto:)-4biy9","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/map(_:)-6rrig","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/map(_:)-h1ok","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/minormax(_:by:)-5f3r4","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/minormax(_:by:)-5r5ai","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/reduce(_:_:)-5akn3","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/reduce(_:_:)-6py5h","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/removefirst(_:)-155ev","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/removefirst(_:)-96bzg","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/removefirst(byunwrapping:)-8ud8","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/removefirst(byunwrapping:)-thfx","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/sorted(by:order:)-40h87","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/sorted(by:order:)-92of4","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/sorted(using:)-3yxtz","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/sorted(using:)-iflh","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/split(separator:maxsplits:omittingemptysubsequences:)-6x4w","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/sequencetocollection\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/allsatisfy(_:)-5dzhw","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/allsatisfy(_:)-5fzq5","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/compactmap(_:)-1cqch","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/compactmap(_:)-3t4mj","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/distinct()-22t7x","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/distinct()-67ldv","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/distinct(by:)-56aty","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/distinct(by:)-79c90","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/fill(using:)-1791c","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/fill(using:)-7g8xx","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/fill(using:)-7yafl","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/filter(_:)-4o10h","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/filter(_:)-4vjbg","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/find(_:)-8fnye","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/find(_:)-agq8","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/find(_:mutate:)-56i7a","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/find(_:mutate:)-5wgwa","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/first(byunwrapping:)-11zvf","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/first(byunwrapping:)-3yt8h","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/first(oftype:)-19hr2","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/first(oftype:)-2o7x6","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/firstandonly(byunwrapping:)-2848z","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/firstandonly(byunwrapping:)-8d0xb","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/firstandonly(oftype:)-5kh8b","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/firstandonly(oftype:)-5mh0c","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/flatmap(_:)-1t2t9","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/flatmap(_:)-7rvzo","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/flatmap(_:)-7y8r","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/hasprefix(_:)-2z12h","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/hasprefix(_:)-6ifp1","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/joined(separator:)-38xxy","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/joined(separator:)-k3xg","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/longestconsecutivesequences(by:relativeto:)-1dti","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/longestconsecutivesequences(by:relativeto:)-4biy9","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/map(_:)-6rrig","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/map(_:)-h1ok","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/minormax(_:by:)-5f3r4","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/minormax(_:by:)-5r5ai","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/reduce(_:_:)-5akn3","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/reduce(_:_:)-6py5h","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/removefirst(_:)-155ev","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/removefirst(_:)-96bzg","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/removefirst(byunwrapping:)-8ud8","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/removefirst(byunwrapping:)-thfx","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/sorted(by:order:)-40h87","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/sorted(by:order:)-92of4","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/sorted(using:)-3yxtz","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/sorted(using:)-iflh","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/split(separator:maxsplits:omittingemptysubsequences:)-6x4w","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/sequencetocollection\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencetocollection\/map(_:)-1n4lq","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/sequencetocollection\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/sequencetocollection","title":"SequenceToCollection","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/init(_:)","title":"init(SequenceWrapperMap<S, I>.Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/value-swift.property","title":"var value: SequenceWrapperMap<S, I>.Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/makeiterator()","title":"func makeIterator() -> SequenceWrapperMap<S, I>.Iterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/iterator","title":"SequenceWrapperMap.Iterator","type":"typealias"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/value-swift.typealias","title":"SequenceWrapperMap.Value","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/allsatisfy(_:)-29ah8","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/allsatisfy(_:)-5v0ae","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/compactmap(_:)-4hpz2","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/compactmap(_:)-7ii1v","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/contains(_:)-3ufrn","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/contains(_:)-612t7","title":"func contains<Value>(CasePath<Self.Element, Value>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/distinct()-2s89j","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/distinct()-3uo2p","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/distinct(by:)-4kcvg","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/distinct(by:)-6gpb8","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/fill(using:)-6z70q","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/fill(using:)-mcai","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/fill(using:)-xuvn","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/filter(_:)-5zeb0","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/filter(_:)-8llou","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/find(_:)-2mbdq","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/find(_:)-6o4xq","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/find(_:mutate:)-82019","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/find(_:mutate:)-8cf92","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/first(byunwrapping:)-17tfs","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/first(byunwrapping:)-5ik1y","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/first(oftype:)-5oyzs","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/first(oftype:)-96xsd","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/firstandonly(byunwrapping:)-1yhyh","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/firstandonly(byunwrapping:)-8rgdm","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/firstandonly(oftype:)-11tkh","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/firstandonly(oftype:)-1d1nk","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/flatmap(_:)-3huv1","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/flatmap(_:)-43io7","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/flatmap(_:)-99n64","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/hasprefix(_:)-2rfni","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/hasprefix(_:)-90xnf","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/joined(separator:)-61kf6","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/joined(separator:)-6atk7","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/longestconsecutivesequences(by:relativeto:)-1kjvt","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/longestconsecutivesequences(by:relativeto:)-3g2p3","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/map(_:)-2svld","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/map(_:)-3tnk8","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/minormax(_:by:)-2f546","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/minormax(_:by:)-9s894","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/reduce(_:_:)-6frrt","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/reduce(_:_:)-slgr","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/removefirst(_:)-1y77n","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/removefirst(_:)-57ja5","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/removefirst(byunwrapping:)-4qttk","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/removefirst(byunwrapping:)-5wn2s","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/sorted(by:order:)-1ule8","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/sorted(by:order:)-d35k","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/sorted(using:)-2q91h","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/sorted(using:)-30w8g","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/sequencewrappermap\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/allsatisfy(_:)-29ah8","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/allsatisfy(_:)-5v0ae","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/clip()","title":"func clip()","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/compactmap(_:)-4hpz2","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/compactmap(_:)-7ii1v","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/concurrentforeach(_:)","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/contains(_:)-3ufrn","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/contains(_:)-612t7","title":"func contains<Value>(CasePath<Self.Element, Value>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/distinct()-2s89j","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/distinct()-3uo2p","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/distinct(by:)-4kcvg","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/distinct(by:)-6gpb8","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/fill(using:)-6z70q","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/fill(using:)-mcai","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/fill(using:)-xuvn","title":"func fill(using: NSCompositingOperation)","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/filter(_:)-5zeb0","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/filter(_:)-8llou","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/find(_:)-2mbdq","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/find(_:)-6o4xq","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/find(_:mutate:)-82019","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/find(_:mutate:)-8cf92","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/first(byunwrapping:)-17tfs","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/first(byunwrapping:)-5ik1y","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/first(oftype:)-5oyzs","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/first(oftype:)-96xsd","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/firstandonly(byunwrapping:)-1yhyh","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/firstandonly(byunwrapping:)-8rgdm","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/firstandonly(oftype:)-11tkh","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/firstandonly(oftype:)-1d1nk","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/firstandonly(where:)","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/flatmap(_:)-3huv1","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/flatmap(_:)-43io7","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/flatmap(_:)-99n64","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/hasprefix(_:)-2rfni","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/hasprefix(_:)-90xnf","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/join(_:)","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/joined(separator:)-61kf6","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/joined(separator:)-6atk7","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/longestconsecutivesequences(by:relativeto:)-1kjvt","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/longestconsecutivesequences(by:relativeto:)-3g2p3","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/map(_:)-2svld","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/map(_:)-3tnk8","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/minormax(_:by:)-2f546","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/minormax(_:by:)-9s894","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/reduce(_:_:)-6frrt","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/reduce(_:_:)-slgr","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/removefirst(_:)-1y77n","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/removefirst(_:)-57ja5","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/removefirst(byunwrapping:)-4qttk","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/removefirst(byunwrapping:)-5wn2s","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/sorted(by:order:)-1ule8","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/sorted(by:order:)-d35k","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/sorted(using:)-2q91h","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/sorted(using:)-30w8g","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/sum()","title":"func sum() -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sequencewrappermap\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"}],"path":"\/documentation\/diagnostics\/sequencewrappermap\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/sequencewrappermap","title":"SequenceWrapperMap","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/standardoutputtextstream\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/standardoutputtextstream\/write(_:)","title":"func write(String)","type":"method"}],"path":"\/documentation\/diagnostics\/standardoutputtextstream","title":"StandardOutputTextStream","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/timestampstrategy\/decode(_:)","title":"static func decode(TimeInterval) throws -> Date","type":"method"},{"path":"\/documentation\/diagnostics\/timestampstrategy\/encode(_:)","title":"static func encode(Date) -> TimeInterval","type":"method"}],"path":"\/documentation\/diagnostics\/timestampstrategy","title":"TimestampStrategy","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trymacrooption\/optimistic","title":"static let optimistic: TryMacroOption","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trymacrooption\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/trymacrooption\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trymacrooption\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/trymacrooption\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trymacrooption\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/trymacrooption\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trymacrooption\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/trymacrooption\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trymacrooption\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trymacrooption\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/trymacrooption\/memoize(with:_:)-6ctdv","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/trymacrooption\/memoize(with:_:)-974p","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/trymacrooption\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/trymacrooption","title":"TryMacroOption","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/unimplementedfailure\/description","title":"let description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/unimplementedfailure\/localizeddescription","title":"var localizedDescription: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/unimplementedfailure\/throw()","title":"func `throw`() throws -> Never","type":"method"}],"path":"\/documentation\/diagnostics\/unimplementedfailure\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/unimplementedfailure","title":"UnimplementedFailure","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/weak\/===(_:_:)","title":"static func === (Weak<Value>, Value) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/weak\/init()","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/weak\/init(_:)","title":"init(Value?)","type":"init"},{"path":"\/documentation\/diagnostics\/weak\/init(nilliteral:)","title":"init(nilLiteral: ())","type":"init"},{"path":"\/documentation\/diagnostics\/weak\/init(wrappedvalue:)","title":"init(wrappedValue: Value?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/weak\/wrappedvalue","title":"var wrappedValue: Value?","type":"property"}],"path":"\/documentation\/diagnostics\/weak","title":"Weak","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/weakobjectpointer\/==(_:_:)","title":"static func == (WeakObjectPointer<Value>, WeakObjectPointer<Value>) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/weakobjectpointer\/init(wrappedvalue:)","title":"init(wrappedValue: Value?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/weakobjectpointer\/wrappedvalue","title":"var wrappedValue: Value?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/weakobjectpointer\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/weakobjectpointer\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/weakobjectpointer\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/weakobjectpointer\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/weakobjectpointer\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/weakobjectpointer\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/weakobjectpointer\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/weakobjectpointer\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/weakobjectpointer\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/weakobjectpointer\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/weakobjectpointer\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/weakobjectpointer\/memoize(with:_:)-55hh0","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/weakobjectpointer\/memoize(with:_:)-7tlyr","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/weakobjectpointer\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/weakobjectpointer","title":"WeakObjectPointer","type":"struct"},{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/xcoderuntimeissuelogger\/callsitecache\/shouldraiseissue(in:on:)","title":"func shouldRaiseIssue(in: StaticString, on: UInt) -> Bool","type":"method"}],"path":"\/documentation\/diagnostics\/xcoderuntimeissuelogger\/callsitecache","title":"XcodeRuntimeIssueLogger.CallsiteCache","type":"class"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/xcoderuntimeissuelogger\/init(category:)","title":"init(category: StaticString)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/xcoderuntimeissuelogger\/error(_:)","title":"func error(any Error)","type":"method"},{"path":"\/documentation\/diagnostics\/xcoderuntimeissuelogger\/raise(_:file:line:_:)","title":"func raise(StaticString, file: StaticString, line: UInt, any CVarArg...)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/xcoderuntimeissuelogger\/default","title":"static let `default`: XcodeRuntimeIssueLogger","type":"property"},{"path":"\/documentation\/diagnostics\/xcoderuntimeissuelogger\/systemframeworkhandle","title":"static let systemFrameworkHandle: UnsafeRawPointer?","type":"property"}],"path":"\/documentation\/diagnostics\/xcoderuntimeissuelogger","title":"XcodeRuntimeIssueLogger","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/yearmonthdaystrategy\/decode(_:)","title":"static func decode(String) throws -> Date","type":"method"},{"path":"\/documentation\/diagnostics\/yearmonthdaystrategy\/encode(_:)","title":"static func encode(Date) -> String","type":"method"}],"path":"\/documentation\/diagnostics\/yearmonthdaystrategy","title":"YearMonthDayStrategy","type":"struct"},{"title":"Variables","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/is32bit","title":"let is32Bit: Bool","type":"var"},{"path":"\/documentation\/diagnostics\/is64bit","title":"let is64Bit: Bool","type":"var"},{"path":"\/documentation\/diagnostics\/unknown","title":"let unknown: Trilean","type":"var"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/rti_runtime_issues_unavailable()","title":"func RTI_RUNTIME_ISSUES_UNAVAILABLE()","type":"func"},{"path":"\/documentation\/diagnostics\/xctassertnothrowasync(_:_:file:line:)-3nv3h","title":"func XCTAssertNoThrowAsync<T>(@autoclosure () async throws -> T, @autoclosure () -> String?, file: StaticString, line: UInt) async","type":"func"},{"path":"\/documentation\/diagnostics\/xctassertnothrowasync(_:_:file:line:)-83le5","title":"func XCTAssertNoThrowAsync<T>(() async throws -> T, @autoclosure () -> String?, file: StaticString, line: UInt) async","type":"func"},{"path":"\/documentation\/diagnostics\/xctassertthrowserrorasync(_:_:file:line:_:)-1ds8p","title":"func XCTAssertThrowsErrorAsync<T>(@autoclosure () async throws -> T, @autoclosure () -> String, file: StaticString, line: UInt, (any Error) -> Void) async","type":"func"},{"path":"\/documentation\/diagnostics\/xctassertthrowserrorasync(_:_:file:line:_:)-5lpgo","title":"func XCTAssertThrowsErrorAsync<T>(() async throws -> T, @autoclosure () -> String, file: StaticString, line: UInt, (any Error) -> Void) async","type":"func"},{"path":"\/documentation\/diagnostics\/xctfail(_:)","title":"func XCTFail(String)","type":"func"},{"path":"\/documentation\/diagnostics\/xctfail(_:file:line:)","title":"func XCTFail(String, file: StaticString, line: UInt)","type":"func"},{"path":"\/documentation\/diagnostics\/alloca(_:)","title":"func alloca<T>(T.Type) -> T","type":"func"},{"path":"\/documentation\/diagnostics\/alloca_zero(_:)","title":"func alloca_zero<T>(T.Type) -> T","type":"func"},{"path":"\/documentation\/diagnostics\/assert(_:_:file:line:)","title":"func assert(@autoclosure () throws -> Bool, @autoclosure () -> String, file: StaticString, line: UInt)","type":"func"},{"path":"\/documentation\/diagnostics\/assert(_:file:line:_:)","title":"func assert(@autoclosure () -> String, file: StaticString, line: UInt, () -> Bool)","type":"func"},{"path":"\/documentation\/diagnostics\/assertnotnil(_:)","title":"func assertNotNil<T>(T?)","type":"func"},{"path":"\/documentation\/diagnostics\/assertionfailure(_:)-5xyjj","title":"func assertionFailure(any Error)","type":"func"},{"path":"\/documentation\/diagnostics\/assertionfailure(_:)-mdj9","title":"func assertionFailure(Never.Reason)","type":"func"},{"path":"\/documentation\/diagnostics\/build(_:with:)-1wod0","title":"func build<T>(consuming T, with: ((inout T) throws -> ())) rethrows -> T","type":"func"},{"path":"\/documentation\/diagnostics\/build(_:with:)-3ocot","title":"func build<T, U>(consuming T, with: ((inout T) throws -> (() throws -> U))) throws -> T","type":"func"},{"path":"\/documentation\/diagnostics\/build(_:with:)-76ebj","title":"func build<T, U>(consuming T, with: ((inout T) throws -> (() -> U))) rethrows -> T","type":"func"},{"path":"\/documentation\/diagnostics\/build(_:with:_:)-2vte4","title":"func build<T, U, V>(consuming T, with: ((inout T) throws -> ((U) throws -> V)), U) throws -> T","type":"func"},{"path":"\/documentation\/diagnostics\/build(_:with:_:)-6ft46","title":"func build<T, U, V>(consuming T, with: ((inout T) throws -> ((U) -> V)), U) rethrows -> T","type":"func"},{"path":"\/documentation\/diagnostics\/build(_:with:_:)-7szbw","title":"func build<T, U>(inout T, with: ((T, U) -> T), U)","type":"func"},{"path":"\/documentation\/diagnostics\/build(_:with:_:)-8yzvw","title":"func build<T, U, V>(consuming T, with: ((inout T, U) throws -> V), U) rethrows -> T","type":"func"},{"path":"\/documentation\/diagnostics\/build(_:with:_:)-x6b2","title":"func build<T>(inout T, with: ((T, T) -> T), T)","type":"func"},{"path":"\/documentation\/diagnostics\/cast(_:to:_:)","title":"func cast<T, U, Result>(inout T, to: U.Type, (inout U) -> Result) throws -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/cast(_:to:file:fileid:function:line:column:)","title":"func cast<T, U>(T, to: U.Type, file: StaticString, fileID: StaticString, function: StaticString, line: UInt, column: UInt) throws -> U","type":"func"},{"path":"\/documentation\/diagnostics\/coerce(_:to:file:fileid:function:line:column:)","title":"func coerce<T, U>(T, to: U.Type, file: StaticString, fileID: StaticString, function: StaticString, line: UInt, column: UInt) throws -> U","type":"func"},{"path":"\/documentation\/diagnostics\/debug(_:)","title":"func debug(() -> ())","type":"func"},{"path":"\/documentation\/diagnostics\/fatalerror(_:file:function:line:)-1samq","title":"func fatalError(Never.Reason, file: StaticString, function: StaticString, line: UInt) -> Never","type":"func"},{"path":"\/documentation\/diagnostics\/fatalerror(_:file:function:line:)-558b","title":"func fatalError(any Error, file: StaticString, function: StaticString, line: UInt) -> Never","type":"func"},{"path":"\/documentation\/diagnostics\/fatalerror(reason:file:function:line:)","title":"func fatalError(reason: Never.Reason, file: StaticString, function: StaticString, line: UInt) -> Never","type":"func"},{"path":"\/documentation\/diagnostics\/fragile(_:)-9e4on","title":"func fragile<T>(() -> T) -> T","type":"func"},{"path":"\/documentation\/diagnostics\/fragile(_:)-r4we","title":"func fragile<T>(@autoclosure () -> T) -> T","type":"func"},{"path":"\/documentation\/diagnostics\/id(_:)-2iag9","title":"func id<T>(T) -> T","type":"func"},{"path":"\/documentation\/diagnostics\/id(_:)-392qy","title":"func id<T>(inout T) -> T","type":"func"},{"path":"\/documentation\/diagnostics\/id(_:)-3ctvx","title":"func id<T, U, V>(((inout T, inout U) -> V)) -> ((inout (T, U)) -> V)","type":"func"},{"path":"\/documentation\/diagnostics\/id(_:)-3llf7","title":"func id<T, U>(((T) throws -> U)) -> ((T) throws -> U)","type":"func"},{"path":"\/documentation\/diagnostics\/id(_:)-5iswo","title":"func id<T, U, V>(((T, U) -> V)) -> (((T, U)) -> V)","type":"func"},{"path":"\/documentation\/diagnostics\/isanyobject(_:)-5dayb","title":"func isAnyObject<T>(T?) -> Bool","type":"func"},{"path":"\/documentation\/diagnostics\/isanyobject(_:)-7q1c7","title":"func isAnyObject<T>(T) -> Bool","type":"func"},{"path":"\/documentation\/diagnostics\/isclass(_:descendantof:)","title":"func isClass(AnyClass, descendantOf: AnyClass) -> Bool","type":"func"},{"path":"\/documentation\/diagnostics\/istype(_:descendantof:)","title":"func isType(any Any.Type, descendantOf: any Any.Type) -> Bool","type":"func"},{"path":"\/documentation\/diagnostics\/longjump(_:_:)","title":"func longjump(UnsafeMutablePointer<jmp_buf>, Int32) -> Never","type":"func"},{"path":"\/documentation\/diagnostics\/malloc_zero(_:)","title":"func malloc_zero(Int) -> UnsafeMutableRawPointer","type":"func"},{"path":"\/documentation\/diagnostics\/pclose(_:)","title":"func pclose(UnsafeMutablePointer<FILE>?) -> CInt","type":"func"},{"path":"\/documentation\/diagnostics\/popen(_:_:)","title":"func popen(UnsafePointer<CChar>, UnsafePointer<CChar>) -> UnsafeMutablePointer<FILE>!","type":"func"},{"path":"\/documentation\/diagnostics\/print(_:)","title":"func print<T>(T)","type":"func"},{"path":"\/documentation\/diagnostics\/printeach(elements:)-1janc","title":"func printEach<T>(elements: () throws -> [T]) rethrows","type":"func"},{"path":"\/documentation\/diagnostics\/printeach(elements:)-awwi","title":"func printEach<T>(elements: () async throws -> [T]) async rethrows","type":"func"},{"path":"\/documentation\/diagnostics\/printeval(_:)","title":"func printeval<T>(() -> T)","type":"func"},{"path":"\/documentation\/diagnostics\/printing(_:)","title":"func printing<T>(T) -> T","type":"func"},{"path":"\/documentation\/diagnostics\/runtimeissue(_:file:line:)-4h2wn","title":"func runtimeIssue(any Error, file: StaticString, line: UInt) -> any Error","type":"func"},{"path":"\/documentation\/diagnostics\/runtimeissue(_:file:line:)-8buqz","title":"func runtimeIssue(@autoclosure () -> String, file: StaticString, line: UInt)","type":"func"},{"path":"\/documentation\/diagnostics\/runtimeissue(_:file:line:)-9l0nm","title":"func runtimeIssue(Never.Reason, file: StaticString, line: UInt) -> any Error","type":"func"},{"path":"\/documentation\/diagnostics\/runtimeissue(_:file:line:_:)","title":"func runtimeIssue(StaticString, file: StaticString, line: UInt, any CVarArg...)","type":"func"},{"path":"\/documentation\/diagnostics\/setjump(_:)","title":"func setjump(UnsafeMutablePointer<jmp_buf>) -> Int32","type":"func"},{"path":"\/documentation\/diagnostics\/swift_isclasstype(_:)","title":"func swift_isClassType(any Any.Type) -> Bool","type":"func"},{"path":"\/documentation\/diagnostics\/terseprint(_:)","title":"func tersePrint<T>(T)","type":"func"},{"path":"\/documentation\/diagnostics\/undocumented(_:)","title":"func undocumented<T>((() -> T)) -> T","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:file:fileid:line:)-27q09","title":"func unimplemented<A, B, C, D, Result>(@autoclosure () -> String, file: StaticString, fileID: StaticString, line: UInt) -> (A, B, C, D) async -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:file:fileid:line:)-2clgz","title":"func unimplemented<Result>(@autoclosure () -> String, file: StaticString, fileID: StaticString, line: UInt) -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:file:fileid:line:)-3nv3i","title":"func unimplemented<A, B, C, Result>(@autoclosure () -> String, file: StaticString, fileID: StaticString, line: UInt) -> (A, B, C) async -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:file:fileid:line:)-3q2bp","title":"func unimplemented<A, Result>(@autoclosure () -> String, file: StaticString, fileID: StaticString, line: UInt) -> (A) -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:file:fileid:line:)-3wp01","title":"func unimplemented<Result>(@autoclosure () -> String, file: StaticString, fileID: StaticString, line: UInt) -> () async -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:file:fileid:line:)-51vly","title":"func unimplemented<A, B, C, D, E, Result>(@autoclosure () -> String, file: StaticString, fileID: StaticString, line: UInt) -> (A, B, C, D, E) async -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:file:fileid:line:)-62q8v","title":"func unimplemented<A, Result>(@autoclosure () -> String, file: StaticString, fileID: StaticString, line: UInt) -> (A) async -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:file:fileid:line:)-6odbz","title":"func unimplemented<A, B, C, Result>(@autoclosure () -> String, file: StaticString, fileID: StaticString, line: UInt) -> (A, B, C) -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:file:fileid:line:)-81j7k","title":"func unimplemented<A, B, Result>(@autoclosure () -> String, file: StaticString, fileID: StaticString, line: UInt) -> (A, B) async -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:file:fileid:line:)-84ltx","title":"func unimplemented<A, B, C, D, Result>(@autoclosure () -> String, file: StaticString, fileID: StaticString, line: UInt) -> (A, B, C, D) -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:file:fileid:line:)-8dfsu","title":"func unimplemented<A, B, C, D, E, Result>(@autoclosure () -> String, file: StaticString, fileID: StaticString, line: UInt) -> (A, B, C, D, E) -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:file:fileid:line:)-ojkb","title":"func unimplemented<A, B, Result>(@autoclosure () -> String, file: StaticString, fileID: StaticString, line: UInt) -> (A, B) -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:file:fileid:line:)-w2au","title":"func unimplemented<Result>(@autoclosure () -> String, file: StaticString, fileID: StaticString, line: UInt) -> () -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:fileid:line:)-1r2lt","title":"func unimplemented<A, Result>(@autoclosure () -> String, fileID: StaticString, line: UInt) -> (A) async throws -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:fileid:line:)-1rf3h","title":"func unimplemented<A, B, C, D, E, Result>(@autoclosure () -> String, fileID: StaticString, line: UInt) -> (A, B, C, D, E) async throws -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:fileid:line:)-1sjqd","title":"func unimplemented<A, B, Result>(@autoclosure () -> String, fileID: StaticString, line: UInt) -> (A, B) async throws -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:fileid:line:)-26hlk","title":"func unimplemented<A, B, C, D, E, Result>(@autoclosure () -> String, fileID: StaticString, line: UInt) -> (A, B, C, D, E) throws -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:fileid:line:)-33s8k","title":"func unimplemented<A, B, Result>(@autoclosure () -> String, fileID: StaticString, line: UInt) -> (A, B) throws -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:fileid:line:)-4ebpf","title":"func unimplemented<Result>(@autoclosure () -> String, fileID: StaticString, line: UInt) -> () async throws -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:fileid:line:)-6u2op","title":"func unimplemented<A, B, C, D, Result>(@autoclosure () -> String, fileID: StaticString, line: UInt) -> (A, B, C, D) async throws -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:fileid:line:)-75ed6","title":"func unimplemented<A, B, C, Result>(@autoclosure () -> String, fileID: StaticString, line: UInt) -> (A, B, C) async throws -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:fileid:line:)-84f0y","title":"func unimplemented<A, B, C, D, Result>(@autoclosure () -> String, fileID: StaticString, line: UInt) -> (A, B, C, D) throws -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:fileid:line:)-9u0q2","title":"func unimplemented<A, B, C, Result>(@autoclosure () -> String, fileID: StaticString, line: UInt) -> (A, B, C) throws -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:fileid:line:)-9y284","title":"func unimplemented<Result>(@autoclosure () -> String, fileID: StaticString, line: UInt) -> () throws -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:fileid:line:)-awz6","title":"func unimplemented<A, Result>(@autoclosure () -> String, fileID: StaticString, line: UInt) -> (A) throws -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:placeholder:fileid:line:)-1iqtc","title":"func unimplemented<Result>(@autoclosure () -> String, placeholder: @autoclosure () -> Result, fileID: StaticString, line: UInt) -> () -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:placeholder:fileid:line:)-2zqna","title":"func unimplemented<A, B, C, Result>(@autoclosure () -> String, placeholder: @autoclosure () -> Result, fileID: StaticString, line: UInt) -> (A, B, C) -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:placeholder:fileid:line:)-4eydo","title":"func unimplemented<A, B, Result>(@autoclosure () -> String, placeholder: @autoclosure () -> Result, fileID: StaticString, line: UInt) -> (A, B) -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:placeholder:fileid:line:)-4lvbn","title":"func unimplemented<A, B, C, D, Result>(@autoclosure () -> String, placeholder: @autoclosure () -> Result, fileID: StaticString, line: UInt) -> (A, B, C, D) async -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:placeholder:fileid:line:)-5r0fj","title":"func unimplemented<A, B, C, D, E, Result>(@autoclosure () -> String, placeholder: @autoclosure () -> Result, fileID: StaticString, line: UInt) -> (A, B, C, D, E) async -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:placeholder:fileid:line:)-76at","title":"func unimplemented<Result>(@autoclosure () -> String, placeholder: @autoclosure () -> Result, fileID: StaticString, line: UInt) -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:placeholder:fileid:line:)-7aiw2","title":"func unimplemented<A, B, C, D, Result>(@autoclosure () -> String, placeholder: @autoclosure () -> Result, fileID: StaticString, line: UInt) -> (A, B, C, D) -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:placeholder:fileid:line:)-7d9dn","title":"func unimplemented<A, Result>(@autoclosure () -> String, placeholder: @autoclosure () -> Result, fileID: StaticString, line: UInt) -> (A) -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:placeholder:fileid:line:)-7e0n5","title":"func unimplemented<Result>(@autoclosure () -> String, placeholder: @autoclosure () -> Result, fileID: StaticString, line: UInt) -> () async -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:placeholder:fileid:line:)-8qrbu","title":"func unimplemented<A, B, C, D, E, Result>(@autoclosure () -> String, placeholder: @autoclosure () -> Result, fileID: StaticString, line: UInt) -> (A, B, C, D, E) -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:placeholder:fileid:line:)-98d4c","title":"func unimplemented<A, B, Result>(@autoclosure () -> String, placeholder: @autoclosure () -> Result, fileID: StaticString, line: UInt) -> (A, B) async -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:placeholder:fileid:line:)-9kzxt","title":"func unimplemented<A, B, C, Result>(@autoclosure () -> String, placeholder: @autoclosure () -> Result, fileID: StaticString, line: UInt) -> (A, B, C) async -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unimplemented(_:placeholder:fileid:line:)-wgyd","title":"func unimplemented<A, Result>(@autoclosure () -> String, placeholder: @autoclosure () -> Result, fileID: StaticString, line: UInt) -> (A) async -> Result","type":"func"},{"path":"\/documentation\/diagnostics\/unsafebitcast(_:)","title":"func unsafeBitCast<T, U>(T) -> U","type":"func"},{"path":"\/documentation\/diagnostics\/unsafepartialbitcast(_:to:)","title":"func unsafePartialBitCast<T, U>(T, to: U.Type) -> U","type":"func"},{"path":"\/documentation\/diagnostics\/warn(_:)","title":"func warn(Error)","type":"func"},{"path":"\/documentation\/diagnostics\/with(_:modify:)","title":"func with<V>(consuming V, modify: (inout V) throws -> ()) rethrows -> V","type":"func"},{"path":"\/documentation\/diagnostics\/withasyncunsafecontinuation(_:)","title":"func withAsyncUnsafeContinuation<T, U>((UnsafeContinuation<U, Never>) -> T) async -> (T, U)","type":"func"},{"path":"\/documentation\/diagnostics\/withasyncunsafethrowingcontinuation(_:)","title":"func withAsyncUnsafeThrowingContinuation<T, U>((UnsafeContinuation<U, any Error>) throws -> T) async throws -> (T, U)","type":"func"},{"path":"\/documentation\/diagnostics\/withmemoryrebound(_:_:to:_:_:)","title":"func withMemoryRebound<T0, T1, U0, U1, ReturnType>(inout T0, T1, to: U0.Type, U1.Type, ((inout U0, U1) -> ReturnType)) -> ReturnType","type":"func"},{"path":"\/documentation\/diagnostics\/withmemoryrebound(_:to:_:)","title":"func withMemoryRebound<T, U, ReturnType>(inout T, to: U.Type, ((inout U) -> ReturnType)) -> ReturnType","type":"func"},{"path":"\/documentation\/diagnostics\/withmutablescope(_:modify:)","title":"func withMutableScope<V>(consuming V, modify: (inout V) throws -> ()) rethrows -> V","type":"func"},{"path":"\/documentation\/diagnostics\/withunsafethrowingcontinuation(_:)","title":"func withUnsafeThrowingContinuation<T>((UnsafeContinuation<T, any Error>) throws -> Void) async throws -> T","type":"func"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/!!(_:_:)-4rfo2","title":"func !! <T>(T?, some Error) -> T","type":"op"},{"path":"\/documentation\/diagnostics\/!!(_:_:)-6dgnz","title":"func !! <T>(T?, String) -> T","type":"op"},{"path":"\/documentation\/diagnostics\/*(_:)","title":"func * <T>(T) -> ((T) -> T)","type":"op"},{"path":"\/documentation\/diagnostics\/*=(_:)","title":"func *= <T>(T) -> ((inout T) -> Void)","type":"op"},{"path":"\/documentation\/diagnostics\/*=(_:_:)","title":"func *= <T>(inout T, T)","type":"op"},{"path":"\/documentation\/diagnostics\/+(_:)","title":"func + <T>(T) -> ((T) -> T)","type":"op"},{"path":"\/documentation\/diagnostics\/+=(_:)","title":"func += <T>(T) -> ((inout T) -> Void)","type":"op"},{"path":"\/documentation\/diagnostics\/+=(_:_:)","title":"func += <T>(inout T, T)","type":"op"},{"path":"\/documentation\/diagnostics\/-(_:)","title":"func - <T>(T) -> ((T) -> T)","type":"op"},{"path":"\/documentation\/diagnostics\/-=(_:)","title":"func -= <T>(T) -> ((inout T) -> Void)","type":"op"},{"path":"\/documentation\/diagnostics\/-=(_:_:)","title":"func -= <T>(inout T, T)","type":"op"},{"path":"\/documentation\/diagnostics\/'..(_:_:)","title":"func .. <Root, Value, AppendedValue>((Root) -> Value?, (AppendedValue) -> Value) -> (Root) -> AppendedValue?","type":"op"},{"path":"\/documentation\/diagnostics\/'.._(_:_:)","title":"func ..< <T>(T.Bound, T.Bound) -> T","type":"op"},{"path":"\/documentation\/diagnostics\/==(_:_:)-26otj","title":"func == <T>(MaybeKnown<T>?, T) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/==(_:_:)-5amn2","title":"func == <T>(MaybeKnown<T>, T) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/_(_:)-1v4us","title":"func \/ <Root, Value>((Value) -> Root?) -> CasePath<Root?, Value>","type":"op"},{"path":"\/documentation\/diagnostics\/_(_:)-27oso","title":"func \/ <Root, Value>(CasePath<Root, Value>) -> CasePath<Root, Value>","type":"op"},{"path":"\/documentation\/diagnostics\/_(_:)-2w7i2","title":"func \/ <Root, Value>((Value) -> Root?) -> (Root?) -> Value?","type":"op"},{"path":"\/documentation\/diagnostics\/_(_:)-3vn7e","title":"func \/ <Root>(Root) -> (Root) -> Void?","type":"op"},{"path":"\/documentation\/diagnostics\/_(_:)-5ccy3","title":"func \/ <T>(T) -> ((T) -> T)","type":"op"},{"path":"\/documentation\/diagnostics\/_(_:)-5odyo","title":"func \/ <Root, Value>((Value) -> Root) -> (Root) -> Value?","type":"op"},{"path":"\/documentation\/diagnostics\/_(_:)-6ky78","title":"func \/ <Root>(Root) -> (Root?) -> Void?","type":"op"},{"path":"\/documentation\/diagnostics\/_(_:)-893vi","title":"func \/ <Root>(Root.Type) -> CasePath<Root, Root>","type":"op"},{"path":"\/documentation\/diagnostics\/_(_:)-bo15","title":"func \/ <Root>(Root?) -> CasePath<Root?, Void>","type":"op"},{"path":"\/documentation\/diagnostics\/_(_:)-loaj","title":"func \/ <Root>(Root) -> CasePath<Root, Void>","type":"op"},{"path":"\/documentation\/diagnostics\/_(_:)-qwaz","title":"func \/ <Root, Value>((Value) -> Root) -> CasePath<Root, Value>","type":"op"},{"path":"\/documentation\/diagnostics\/_=(_:)","title":"func \/= <T>(T) -> ((inout T) -> Void)","type":"op"},{"path":"\/documentation\/diagnostics\/_=(_:_:)","title":"func \/= <T>(inout T, T)","type":"op"},{"path":"\/documentation\/diagnostics\/___(_:_:)-8a579","title":"func ||| <T>(T.LeftValue?, @autoclosure () throws -> T.RightValue?) rethrows -> T?","type":"op"},{"path":"\/documentation\/diagnostics\/___(_:_:)-8xv2n","title":"func ||| <T>(T.LeftValue?, @autoclosure () throws -> T.RightValue) rethrows -> T","type":"op"},{"path":"\/documentation\/diagnostics\/__~(_:_:)","title":"func >>~ <T>(T, T) -> T","type":"op"},{"path":"\/documentation\/diagnostics\/__~=(_:_:)","title":"func >>~= <T>(inout T, T)","type":"op"},{"path":"\/documentation\/diagnostics\/_~=(_:_:)-3xp13","title":"func <~= <T>(T, T) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/_~=(_:_:)-5go6p","title":"func >~= <T>(T, T) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/~=(_:_:)-1shvq","title":"func ~= <T, U>(T, CasePath<T, U>) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/~=(_:_:)-3u7o","title":"func ~= <T>(any Any.Type, T.Type) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/~=(_:_:)-5v6kr","title":"func ~= (any Any.Type, any AnyObject.Type) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/~=(_:_:)-69v0s","title":"func ~= <T>(T.Type, any Any.Type) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/~=(_:_:)-84h6k","title":"func ~= <T, U>(T.Type, U.Type) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/~=(_:_:)-8pa9u","title":"func ~= <Root, Value>(CasePath<Root, Value>, Root) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/~__(_:_:)","title":"func ~<< <T>(T, T) -> T","type":"op"},{"path":"\/documentation\/diagnostics\/~__=(_:_:)","title":"func ~<<= <T>(inout T, T)","type":"op"},{"title":"Macros","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/try(_:_:)-5avwt","title":"macro `try`<T>(TryMacroOption..., () throws -> T?) -> T?","type":"macro"},{"path":"\/documentation\/diagnostics\/try(_:_:)-5ns8b","title":"macro `try`<T>(TryMacroOption..., () async throws -> T) -> T?","type":"macro"},{"path":"\/documentation\/diagnostics\/try(_:_:)-93sba","title":"macro `try`<T>(TryMacroOption..., () async throws -> T?) -> T?","type":"macro"},{"path":"\/documentation\/diagnostics\/try(_:_:)-xg87","title":"macro `try`<T>(TryMacroOption..., () throws -> T) -> T?","type":"macro"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/byte","title":"Byte","type":"typealias"},{"path":"\/documentation\/diagnostics\/collectionoffour","title":"CollectionOfFour","type":"typealias"},{"path":"\/documentation\/diagnostics\/collectionofthree","title":"CollectionOfThree","type":"typealias"},{"path":"\/documentation\/diagnostics\/collectionoftwo","title":"CollectionOfTwo","type":"typealias"},{"path":"\/documentation\/diagnostics\/datacodable","title":"DataCodable","type":"typealias"},{"path":"\/documentation\/diagnostics\/datacodablewithdefaultstrategies","title":"DataCodableWithDefaultStrategies","type":"typealias"},{"path":"\/documentation\/diagnostics\/fstat","title":"Fstat","type":"typealias"},{"path":"\/documentation\/diagnostics\/identifierindexingarrayof","title":"IdentifierIndexingArrayOf","type":"typealias"},{"path":"\/documentation\/diagnostics\/join3collection","title":"Join3Collection","type":"typealias"},{"path":"\/documentation\/diagnostics\/join3sequence","title":"Join3Sequence","type":"typealias"},{"path":"\/documentation\/diagnostics\/memoizationcache","title":"MemoizationCache","type":"typealias"},{"path":"\/documentation\/diagnostics\/nativebytetupletype","title":"NativeByteTupleType","type":"typealias"},{"path":"\/documentation\/diagnostics\/nativefloatingpoint","title":"NativeFloatingPoint","type":"typealias"},{"path":"\/documentation\/diagnostics\/nativeword","title":"NativeWord","type":"typealias"},{"path":"\/documentation\/diagnostics\/nativewordpointer","title":"NativeWordPointer","type":"typealias"},{"path":"\/documentation\/diagnostics\/oslogger","title":"OSLogger","type":"typealias"},{"path":"\/documentation\/diagnostics\/sequenceoftwo","title":"SequenceOfTwo","type":"typealias"},{"path":"\/documentation\/diagnostics\/stringrepresentable","title":"StringRepresentable","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/array(_:)","title":"case array([AnyCodable])","type":"case"},{"path":"\/documentation\/diagnostics\/anycodable\/bool(_:)","title":"case bool(Bool)","type":"case"},{"path":"\/documentation\/diagnostics\/anycodable\/data(_:)","title":"case data(Data)","type":"case"},{"path":"\/documentation\/diagnostics\/anycodable\/date(_:)","title":"case date(Date)","type":"case"},{"path":"\/documentation\/diagnostics\/anycodable\/dictionary(_:)-swift.enum.case","title":"case dictionary([AnyCodingKey : AnyCodable])","type":"case"},{"path":"\/documentation\/diagnostics\/anycodable\/none","title":"case none","type":"case"},{"path":"\/documentation\/diagnostics\/anycodable\/number(_:)-swift.enum.case","title":"case number(AnyNumber)","type":"case"},{"path":"\/documentation\/diagnostics\/anycodable\/string(_:)","title":"case string(String)","type":"case"},{"path":"\/documentation\/diagnostics\/anycodable\/url(_:)","title":"case url(URL)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/init(_:)-3id1g","title":"init(any Codable)","type":"init"},{"path":"\/documentation\/diagnostics\/anycodable\/init(_:)-6clsr","title":"init(Any) throws","type":"init"},{"path":"\/documentation\/diagnostics\/anycodable\/init(destructuring:)","title":"init(destructuring: any Encodable) throws","type":"init"},{"path":"\/documentation\/diagnostics\/anycodable\/init(lazy:)","title":"init(lazy: any Codable)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/prettyprinteddescription","title":"var prettyPrintedDescription: String","type":"property"},{"path":"\/documentation\/diagnostics\/anycodable\/value","title":"var value: (any Codable)?","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/subscript(key:)-3yvmk","title":"subscript(key _: String) -> AnyCodable?","type":"subscript"},{"path":"\/documentation\/diagnostics\/anycodable\/subscript(key:)-a0v","title":"subscript(key _: AnyCodingKey) -> AnyCodable?","type":"subscript"},{"path":"\/documentation\/diagnostics\/anycodable\/subscript(key:caseinsensitive:)","title":"subscript(key _: String, caseInsensitive _: Bool) -> AnyCodable?","type":"subscript"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/dictionary(_:)-swift.type.method","title":"static func dictionary([String : AnyCodable]) -> AnyCodable","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/number(_:)-64i4m","title":"static func number<T>(T) -> AnyCodable","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/number(_:)-f4a8","title":"static func number<T>(T) -> AnyCodable","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/toanycodable()","title":"func toAnyCodable() -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/anycodable\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/anycodable\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/anycodable\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/decodeifpresent(from:)-40zlr","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/decodeifpresent(from:)-7hknl","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/anycodable\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/codingpath","title":"var codingPath: [any CodingKey]","type":"property"},{"path":"\/documentation\/diagnostics\/anycodable\/userinfo","title":"var userInfo: [CodingUserInfoKey : Any]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/container(keyedby:)","title":"func container<Key>(keyedBy: Key.Type) throws -> KeyedDecodingContainer<Key>","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/decode(_:forkey:)","title":"func decode<T, Key>(T.Type, forKey: Key) throws -> T","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/decode(first:)","title":"func decode<T>(first: T.Type) throws -> T","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/decodeifpresent(_:forkey:)","title":"func decodeIfPresent<T, Key>(T.Type, forKey: Key) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/decodeifpresent(single:)","title":"func decodeIfPresent<T>(single: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/decodekeyednil()","title":"func decodeKeyedNil() throws -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/decodenil()","title":"func decodeNil() throws -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/decodesinglevalue(_:)","title":"func decodeSingleValue<T>(T.Type) throws -> T","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/decodesinglevaluenil()","title":"func decodeSingleValueNil() throws -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/decodeunkeyednil()","title":"func decodeUnkeyedNil() throws -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/singlevaluecontainer()","title":"func singleValueContainer() throws -> any SingleValueDecodingContainer","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/unkeyedcontainer()","title":"func unkeyedContainer() throws -> any UnkeyedDecodingContainer","type":"method"}],"path":"\/documentation\/diagnostics\/anycodable\/decoder-implementations","title":"Decoder Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/anycodable\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/anycodable\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anycodable\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/anycodable\/==(_:_:)","title":"static func == (AnyCodable, AnyCodable) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anycodable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anycodable\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/anycodable\/==(_:_:)","title":"static func == (AnyCodable, AnyCodable) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anycodable\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/init(arrayliteral:)","title":"init(arrayLiteral: AnyCodable...)","type":"init"}],"path":"\/documentation\/diagnostics\/anycodable\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/init(booleanliteral:)","title":"init(booleanLiteral: Bool)","type":"init"}],"path":"\/documentation\/diagnostics\/anycodable\/expressiblebybooleanliteral-implementations","title":"ExpressibleByBooleanLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (AnyCodingKey, AnyCodable)...)","type":"init"}],"path":"\/documentation\/diagnostics\/anycodable\/expressiblebydictionaryliteral-implementations","title":"ExpressibleByDictionaryLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/init(extendedgraphemeclusterliteral:)-5d5gw","title":"init(extendedGraphemeClusterLiteral: String)","type":"init"},{"path":"\/documentation\/diagnostics\/anycodable\/init(extendedgraphemeclusterliteral:)-9bv14","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/diagnostics\/anycodable\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/init(floatliteral:)","title":"init(floatLiteral: Double)","type":"init"}],"path":"\/documentation\/diagnostics\/anycodable\/expressiblebyfloatliteral-implementations","title":"ExpressibleByFloatLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"}],"path":"\/documentation\/diagnostics\/anycodable\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/init(nilliteral:)","title":"init(nilLiteral: ())","type":"init"}],"path":"\/documentation\/diagnostics\/anycodable\/expressiblebynilliteral-implementations","title":"ExpressibleByNilLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/diagnostics\/anycodable\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/diagnostics\/anycodable\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/memoize(with:_:)-3rwfz","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/memoize(with:_:)-midr","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/anycodable\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/memoize(with:_:)-3rwfz","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/anycodable\/memoize(with:_:)-midr","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/anycodable\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/bridgetoobjectivec()","title":"func bridgeToObjectiveC() throws -> AnyCodable.ObjectiveCType","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anycodable\/bridgefromobjectivec(_:)","title":"static func bridgeFromObjectiveC(AnyCodable.ObjectiveCType) throws -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/anycodable\/objectivecbridgeable-implementations","title":"ObjectiveCBridgeable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/anycodable","title":"AnyCodable","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyloglevel\/critical","title":"case critical","type":"case"},{"path":"\/documentation\/diagnostics\/anyloglevel\/debug","title":"case debug","type":"case"},{"path":"\/documentation\/diagnostics\/anyloglevel\/error","title":"case error","type":"case"},{"path":"\/documentation\/diagnostics\/anyloglevel\/fault","title":"case fault","type":"case"},{"path":"\/documentation\/diagnostics\/anyloglevel\/info","title":"case info","type":"case"},{"path":"\/documentation\/diagnostics\/anyloglevel\/notice","title":"case notice","type":"case"},{"path":"\/documentation\/diagnostics\/anyloglevel\/trace","title":"case trace","type":"case"},{"path":"\/documentation\/diagnostics\/anyloglevel\/undefined","title":"case undefined","type":"case"},{"path":"\/documentation\/diagnostics\/anyloglevel\/warning","title":"case warning","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyloglevel\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyloglevel\/stringvalue","title":"var stringValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyloglevel\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anyloglevel\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyloglevel\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anyloglevel\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyloglevel\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/anyloglevel\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyloglevel\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/anyloglevel\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyloglevel\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyloglevel\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/anyloglevel\/memoize(with:_:)-3422v","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/anyloglevel\/memoize(with:_:)-45jk5","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/anyloglevel\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyloglevel\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/anyloglevel\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/diagnostics\/anyloglevel\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/anyloglevel","title":"AnyLogLevel","type":"enum"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bit\/!(_:)","title":"static func ! (Bit) -> Bit","type":"op"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bit\/one","title":"case one","type":"case"},{"path":"\/documentation\/diagnostics\/bit\/zero","title":"case zero","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bit\/init(_:)","title":"init<T>(T)","type":"init"},{"path":"\/documentation\/diagnostics\/bit\/init(rawvalue:)","title":"init?(rawValue: Byte)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bit\/&&-_(_:_:)-4lniq","title":"static func &&-> <T>(Self, @autoclosure () throws -> T?) rethrows -> T?","type":"op"},{"path":"\/documentation\/diagnostics\/bit\/&&-_(_:_:)-7fals","title":"static func &&-> <T>(Self, @autoclosure () throws -> T) rethrows -> T?","type":"op"},{"path":"\/documentation\/diagnostics\/bit\/&&=(_:_:)","title":"static func &&= (inout Self, @autoclosure () throws -> Self) rethrows","type":"op"},{"path":"\/documentation\/diagnostics\/bit\/__=(_:_:)","title":"static func ||= (inout Self, @autoclosure () throws -> Self) rethrows","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bit\/boolvalue","title":"var boolValue: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bit\/or(_:)-1m64n","title":"func or<T>(@autoclosure () throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/bit\/or(_:)-2rqhh","title":"func or<T>(@autoclosure () throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/bit\/orthrow()","title":"func orThrow() throws","type":"method"},{"path":"\/documentation\/diagnostics\/bit\/orthrow(_:)","title":"func orThrow(any Error) throws","type":"method"},{"path":"\/documentation\/diagnostics\/bit\/then(_:)-661aw","title":"func then<T>(@autoclosure () throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/bit\/then(_:)-8cq9o","title":"func then<T>(@autoclosure () throws -> T?) rethrows -> T?","type":"method"}],"path":"\/documentation\/diagnostics\/bit\/boolean-implementations","title":"Boolean Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bit\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/bit\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bit\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bit\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bit\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bit\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bit\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/bit\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bit\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/bit\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bit\/init(booleanliteral:)","title":"init(booleanLiteral: Bool)","type":"init"}],"path":"\/documentation\/diagnostics\/bit\/expressiblebybooleanliteral-implementations","title":"ExpressibleByBooleanLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bit\/init(integerliteral:)","title":"init(integerLiteral: Int8)","type":"init"}],"path":"\/documentation\/diagnostics\/bit\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bit\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bit\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/bit\/memoize(with:_:)-13yog","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/bit\/memoize(with:_:)-49w4b","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/bit\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bit\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/bit\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/diagnostics\/bit\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/bit","title":"Bit","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/byteorder\/significanceascending","title":"case significanceAscending","type":"case"},{"path":"\/documentation\/diagnostics\/byteorder\/significancedescending","title":"case significanceDescending","type":"case"},{"path":"\/documentation\/diagnostics\/byteorder\/unknown","title":"case unknown","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/byteorder\/init()","title":"init()","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/byteorder\/isbigendian","title":"var isBigEndian: Trilean","type":"property"},{"path":"\/documentation\/diagnostics\/byteorder\/islittleendian","title":"var isLittleEndian: Trilean","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/byteorder\/current","title":"static var current: ByteOrder","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/byteorder\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/byteorder\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/byteorder\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/byteorder\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/byteorder\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/byteorder\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/byteorder\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/byteorder\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/byteorder\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/byteorder\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/byteorder\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/byteorder\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/byteorder\/memoize(with:_:)-402qn","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/byteorder\/memoize(with:_:)-4b1tm","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/byteorder\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/byteorder\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/byteorder\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/byteorder\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/byteorder\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/byteorder\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/byteorder\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/byteorder\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/byteorder\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/byteorder\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/byteorder\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/byteorder\/trivial-implementations","title":"Trivial Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/byteorder","title":"ByteOrder","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/clientloglevel\/critical","title":"case critical","type":"case"},{"path":"\/documentation\/diagnostics\/clientloglevel\/debug","title":"case debug","type":"case"},{"path":"\/documentation\/diagnostics\/clientloglevel\/error","title":"case error","type":"case"},{"path":"\/documentation\/diagnostics\/clientloglevel\/fault","title":"case fault","type":"case"},{"path":"\/documentation\/diagnostics\/clientloglevel\/info","title":"case info","type":"case"},{"path":"\/documentation\/diagnostics\/clientloglevel\/notice","title":"case notice","type":"case"},{"path":"\/documentation\/diagnostics\/clientloglevel\/undefined","title":"case undefined","type":"case"},{"path":"\/documentation\/diagnostics\/clientloglevel\/warning","title":"case warning","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/clientloglevel\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/clientloglevel\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/diagnostics\/clientloglevel\/stringvalue","title":"var stringValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/clientloglevel\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/clientloglevel\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/clientloglevel\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/clientloglevel\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/clientloglevel\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/clientloglevel\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/clientloglevel\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/clientloglevel\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/clientloglevel\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/clientloglevel\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/clientloglevel\/memoize(with:_:)-8a44j","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/clientloglevel\/memoize(with:_:)-9hutz","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/clientloglevel\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/clientloglevel\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/clientloglevel\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/diagnostics\/clientloglevel\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/clientloglevel","title":"ClientLogLevel","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpathelement\/key(_:)","title":"case key(AnyCodingKey)","type":"case"},{"path":"\/documentation\/diagnostics\/codingpathelement\/super(key:)","title":"case `super`(key: AnyCodingKey?)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpathelement\/init(_:)","title":"init(any CodingKey)","type":"init"},{"path":"\/documentation\/diagnostics\/codingpathelement\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpathelement\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/diagnostics\/codingpathelement\/key","title":"var key: AnyCodingKey?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpathelement\/toanycodingkey()","title":"func toAnyCodingKey() -> AnyCodingKey","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpathelement\/init(intvalue:)","title":"init(intValue: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/codingpathelement\/init(stringvalue:)","title":"init(stringValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpathelement\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/diagnostics\/codingpathelement\/intvalue","title":"var intValue: Int?","type":"property"},{"path":"\/documentation\/diagnostics\/codingpathelement\/stringvalue","title":"var stringValue: String","type":"property"}],"path":"\/documentation\/diagnostics\/codingpathelement\/codingkey-implementations","title":"CodingKey Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpathelement\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/codingpathelement\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/codingpathelement\/decodeifpresent(from:)-2q7cw","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpathelement\/decodeifpresent(from:)-4nvrf","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/codingpathelement\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/codingpathelement\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpathelement\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/codingpathelement\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/codingpathelement\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpathelement\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/codingpathelement\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpathelement\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/codingpathelement\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpathelement\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/codingpathelement\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpathelement\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/codingpathelement\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpathelement\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/codingpathelement\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/codingpathelement\/memoize(with:_:)-4gn1","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/codingpathelement\/memoize(with:_:)-8ect5","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/codingpathelement\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/codingpathelement","title":"CodingPathElement","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/left(_:)","title":"case left(T)","type":"case"},{"path":"\/documentation\/diagnostics\/either\/right(_:)","title":"case right(U)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/init(_:)","title":"init(Either<Either<T, U>.LeftValue, Either<T, U>.RightValue>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/diagnostics\/either\/eithervalue","title":"var eitherValue: Either<Either<T, U>.LeftValue, Either<T, U>.RightValue>","type":"property"},{"path":"\/documentation\/diagnostics\/either\/leftorrightvalue","title":"var leftOrRightValue: T","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/nilifempty()","title":"func nilIfEmpty() -> Either<T, U>?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/leftvalue-swift.typealias","title":"Either.LeftValue","type":"typealias"},{"path":"\/documentation\/diagnostics\/either\/rightvalue-swift.typealias","title":"Either.RightValue","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/'...(_:)-3b0yb","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/either\/'...(_:)-8ke5j","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/either\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/either\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/either\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/either\/_(_:_:)","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/either\/_=(_:_:)-1ir7","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/either\/_=(_:_:)-5ytgo","title":"static func <= (Self, Self) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/erasedasanycomparable","title":"var erasedAsAnyComparable: AnyComparable","type":"property"}],"path":"\/documentation\/diagnostics\/either\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/'...(_:)-3b0yb","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/either\/'...(_:)-8ke5j","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/either\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/either\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/either\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/either\/_(_:_:)","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/either\/_=(_:_:)-1ir7","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/either\/_=(_:_:)-5ytgo","title":"static func <= (Self, Self) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/erasedasanycomparable","title":"var erasedAsAnyComparable: AnyComparable","type":"property"}],"path":"\/documentation\/diagnostics\/either\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/either\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/either\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/either\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/either\/decodeifpresent(from:)-894fv","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/either\/decodeifpresent(from:)-9vb5b","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/either\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/either\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/init(leftvalue:)","title":"init(leftValue: Self.LeftValue)","type":"init"},{"path":"\/documentation\/diagnostics\/either\/init(rightvalue:)","title":"init(rightValue: Self.RightValue)","type":"init"}],"path":"\/documentation\/diagnostics\/either\/eitherrepresentable-implementations","title":"EitherRepresentable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/isleft","title":"var isLeft: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/either\/isright","title":"var isRight: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/either\/leftorright","title":"var leftOrRight: Self.LeftValue","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/collapse(_:)-8ss55","title":"func collapse<T>(((Self.RightValue) throws -> T)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/either\/collapse(_:)-9ctyy","title":"func collapse<T>(((Self.LeftValue) throws -> T)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/either\/collapse(_:_:)","title":"func collapse<T, U>(((Self.LeftValue) throws -> T), ((Self.RightValue) throws -> U)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/either\/collapse(_:_:_:)","title":"func collapse((Self.LeftValue.LeftValue) throws -> (), (Self.LeftValue.RightValue) throws -> (), (Self.RightValue) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/either\/collapse(_:do:)","title":"func collapse<T, U>(((Self.LeftValue) throws -> T), do: @autoclosure () throws -> U) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/either\/collapse(do:_:)","title":"func collapse<T, U>(do: @autoclosure () throws -> T, ((Self.RightValue) throws -> U)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/either\/collapse(do:do:)","title":"func collapse<T, U>(do: @autoclosure () throws -> T, do: @autoclosure () throws -> U) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/either\/filter(_:_:)","title":"func filter(((Self.LeftValue) throws -> Bool), ((Self.RightValue) throws -> Bool)) rethrows -> Self.EitherValue?","type":"method"},{"path":"\/documentation\/diagnostics\/either\/filterormap(_:_:)","title":"func filterOrMap<T>(((Self.LeftValue) throws -> Bool), ((Self.RightValue) throws -> T)) rethrows -> Either<Self.LeftValue, T>?","type":"method"},{"path":"\/documentation\/diagnostics\/either\/flatmap(left:right:)","title":"func flatMap<T, U>(left: ((Self.LeftValue) throws -> T?), right: ((Self.RightValue) throws -> U?)) rethrows -> Either<T, U>?","type":"method"},{"path":"\/documentation\/diagnostics\/either\/map(_:_:)","title":"func map<T, U>(((Self.LeftValue) throws -> T), ((Self.RightValue) throws -> U)) rethrows -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/either\/map(left:)","title":"func map<T>(left: ((Self.LeftValue) throws -> T)) rethrows -> Either<T, Self.RightValue>","type":"method"},{"path":"\/documentation\/diagnostics\/either\/map(left:right:)","title":"func map<T, U>(left: ((Self.LeftValue) throws -> T), right: ((Self.RightValue) throws -> U)) rethrows -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/either\/map(right:)","title":"func map<T>(right: ((Self.RightValue) throws -> T)) rethrows -> Either<Self.LeftValue, T>","type":"method"},{"path":"\/documentation\/diagnostics\/either\/mapleft(_:)","title":"func mapLeft<T>(((Self.LeftValue) throws -> T)) rethrows -> Either<T, Self.RightValue>","type":"method"},{"path":"\/documentation\/diagnostics\/either\/mapright(_:)","title":"func mapRight<T>(((Self.RightValue) throws -> T)) rethrows -> Either<Self.LeftValue, T>","type":"method"},{"path":"\/documentation\/diagnostics\/either\/reduce(_:)-4zpta","title":"func reduce(((Self.LeftValue) throws -> Self.RightValue)) rethrows -> Self.RightValue","type":"method"},{"path":"\/documentation\/diagnostics\/either\/reduce(_:)-92ib4","title":"func reduce(((Self.RightValue) throws -> Self.LeftValue)) rethrows -> Self.LeftValue","type":"method"},{"path":"\/documentation\/diagnostics\/either\/reduce(_:_:)-15qsp","title":"func reduce<T>(((Self.LeftValue) throws -> T), ((Self.RightValue) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/either\/reduce(_:_:)-36kan","title":"func reduce<T>(@autoclosure () throws -> T, @autoclosure () throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/either\/reduce(_:_:)-44ilw","title":"func reduce<T>(@autoclosure () throws -> T, ((Self.RightValue) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/either\/reduce(_:_:)-86a17","title":"func reduce<T>(((Self.LeftValue) throws -> T), @autoclosure () throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/either\/reduce(_:_:_:)","title":"func reduce<T>(((Self.LeftValue.LeftValue) throws -> T), ((Self.LeftValue.RightValue) throws -> T), ((Self.RightValue) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/either\/reduce(left:right:)","title":"func reduce<T>(left: ((Self.LeftValue) throws -> T), right: ((Self.RightValue) throws -> T)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/either\/eithervalueconvertible-implementations","title":"EitherValueConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/either\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/either\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/either\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/either\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/either\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/either\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/either\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/either\/==(_:_:)","title":"static func == (Either<T, U>, Either<T, U>) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/either\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/either\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"path":"\/documentation\/diagnostics\/either\/==(_:_:)","title":"static func == (Either<T, U>, Either<T, U>) -> Bool","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/either\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/either\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/either\/memoize(with:_:)-176zx","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/either\/memoize(with:_:)-42rlo","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/either\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/either\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"},{"path":"\/documentation\/diagnostics\/either\/memoize(with:_:)-176zx","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/either\/memoize(with:_:)-42rlo","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/either\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/leftvalue-swift.property","title":"var leftValue: Self.LeftValue?","type":"property"},{"path":"\/documentation\/diagnostics\/either\/rightvalue-swift.property","title":"var rightValue: Self.RightValue?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/either\/mapinplace(_:_:)-1sgxa","title":"func mapInPlace(((Self.LeftValue) throws -> Self.LeftValue), @autoclosure () throws -> Self.LeftValue) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/either\/mapinplace(_:_:)-1y7yz","title":"func mapInPlace(@autoclosure () throws -> Self.LeftValue, ((Self.RightValue) throws -> Self.RightValue)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/either\/mapinplace(_:_:)-3diiu","title":"func mapInPlace(((Self.LeftValue) throws -> Self.LeftValue), @autoclosure () throws -> Self.RightValue) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/either\/mapinplace(_:_:)-5n8bz","title":"func mapInPlace(@autoclosure () throws -> Self.RightValue, ((Self.RightValue) throws -> Self.RightValue)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/either\/mapinplace(_:_:)-5yobo","title":"func mapInPlace(((Self.LeftValue) throws -> Self.LeftValue), ((Self.RightValue) throws -> Self.LeftValue)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/either\/mapinplace(_:_:)-7n8u2","title":"func mapInPlace(((Self.LeftValue) throws -> Self.LeftValue), ((Self.RightValue) throws -> Self.RightValue)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/either\/mapinplace(_:_:)-9j96f","title":"func mapInPlace(((Self.LeftValue) throws -> Self.RightValue), ((Self.RightValue) throws -> Self.RightValue)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/either\/mapormutate(_:_:)-4jmds","title":"func mapOrMutate<T, U>(@autoclosure () throws -> T, ((inout Self.RightValue) throws -> U)) rethrows -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/either\/mapormutate(_:_:)-6qg0g","title":"func mapOrMutate<T, U>(((Self.LeftValue) -> T), ((inout Self.RightValue) -> U)) -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/either\/mutate(_:_:)","title":"func mutate<T, U>(((inout Self.LeftValue) throws -> T), ((inout Self.RightValue) throws -> U)) rethrows -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/either\/mutateormap(_:_:)-4p78m","title":"func mutateOrMap<T, U>(((inout Self.LeftValue) -> T), ((Self.RightValue) -> U)) -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/either\/mutateormap(_:_:)-589zn","title":"func mutateOrMap<T, U>(((inout Self.LeftValue) throws -> T), @autoclosure () throws -> U) rethrows -> Either<T, U>","type":"method"}],"path":"\/documentation\/diagnostics\/either\/mutableeithervalueconvertible-implementations","title":"MutableEitherValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/either","title":"Either","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/firstorlastcollectionindex\/first","title":"case first","type":"case"},{"path":"\/documentation\/diagnostics\/firstorlastcollectionindex\/last","title":"case last","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/firstorlastcollectionindex\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/firstorlastcollectionindex\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/firstorlastcollectionindex\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/firstorlastcollectionindex\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/firstorlastcollectionindex\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/firstorlastcollectionindex\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/firstorlastcollectionindex\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/firstorlastcollectionindex\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/firstorlastcollectionindex\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/firstorlastcollectionindex\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/firstorlastcollectionindex\/memoize(with:_:)-390hz","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/firstorlastcollectionindex\/memoize(with:_:)-8cncz","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/firstorlastcollectionindex\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/firstorlastcollectionindex","title":"FirstOrLastCollectionIndex","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/fortify\/escape(msg:file:line:)","title":"static func escape(msg: String, file: StaticString, line: UInt) -> Never","type":"method"},{"path":"\/documentation\/diagnostics\/fortify\/escape(witherror:)","title":"static func escape(withError: any Error) -> Never","type":"method"},{"path":"\/documentation\/diagnostics\/fortify\/protect(block:)-5plma","title":"static func protect<T>(block: () async throws -> T) async throws -> T","type":"method"},{"path":"\/documentation\/diagnostics\/fortify\/protect(block:)-7jw76","title":"static func protect<T>(block: () throws -> T) throws -> T","type":"method"},{"path":"\/documentation\/diagnostics\/fortify\/protect(runloop:onerror:)","title":"static func protect(runLoop: RunLoop, onError: (any Error) -> Void)","type":"method"},{"path":"\/documentation\/diagnostics\/fortify\/stacktrace()","title":"static func stackTrace() -> String","type":"method"}],"path":"\/documentation\/diagnostics\/fortify","title":"Fortify","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/analytics","title":"case analytics","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/authorization","title":"case authorization","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/communication","title":"case communication","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/concurrent","title":"case concurrent","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/configuration","title":"case configuration","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/database","title":"case database","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/deprecation","title":"case deprecation","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/documentation","title":"case documentation","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/filesystem","title":"case fileSystem","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/hardware","title":"case hardware","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/internationalization","title":"case internationalization","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/interoperability","title":"case interoperability","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/network","title":"case network","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/operatingsystem","title":"case operatingSystem","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/payment","title":"case payment","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/performance","title":"case performance","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/resource","title":"case resource","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/security","title":"case security","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/serialization","title":"case serialization","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/statemanagement","title":"case stateManagement","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/testing","title":"case testing","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/thirdpartylibrary","title":"case thirdPartyLibrary","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/unsupportedfeature","title":"case unsupportedFeature","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/userinterface","title":"case userInterface","type":"case"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/validation","title":"case validation","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/generalerrorclassification\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/generalerrorclassification\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/memoize(with:_:)-25sk3","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/memoize(with:_:)-33emj","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/generalerrorclassification\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/generalerrorclassification\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/diagnostics\/generalerrorclassification\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/generalerrorclassification","title":"GeneralErrorClassification","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/maybeknown\/known(_:)","title":"case known(Value)","type":"case"},{"path":"\/documentation\/diagnostics\/maybeknown\/unknown","title":"case unknown","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/maybeknown\/init(_:)","title":"init(Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/maybeknown\/knownvalue","title":"var knownValue: Value?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/maybeknown\/map(_:)","title":"func map<T>((Value) throws -> T) rethrows -> MaybeKnown<T>","type":"method"},{"path":"\/documentation\/diagnostics\/maybeknown\/unwrap()","title":"func unwrap() throws -> Value","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/maybeknown\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/maybeknown\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/maybeknown\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/maybeknown\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/maybeknown\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/maybeknown\/decodeifpresent(from:)-19p9o","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/maybeknown\/decodeifpresent(from:)-3rfq4","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/maybeknown\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/maybeknown\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/maybeknown\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/maybeknown\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/maybeknown\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/maybeknown\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/maybeknown\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/maybeknown\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/maybeknown\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/maybeknown\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/maybeknown\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/maybeknown\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/maybeknown\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/maybeknown\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/maybeknown\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/maybeknown\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/maybeknown\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/maybeknown\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/maybeknown\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/maybeknown\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/maybeknown\/memoize(with:_:)-6qi25","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/maybeknown\/memoize(with:_:)-t86d","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/maybeknown\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/maybeknown","title":"MaybeKnown","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/left(_:)","title":"case left(I0)","type":"case"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/right(_:)","title":"case right(I1)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/init(_:)","title":"init(Either<I0, I1>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/eithervalue","title":"var eitherValue: Either<I0, I1>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/next()","title":"func next() -> OneOfTwoIterators<I0, I1>.Element?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/element","title":"OneOfTwoIterators.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/init(leftvalue:)","title":"init(leftValue: Self.LeftValue)","type":"init"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/init(rightvalue:)","title":"init(rightValue: Self.RightValue)","type":"init"}],"path":"\/documentation\/diagnostics\/oneoftwoiterators\/eitherrepresentable-implementations","title":"EitherRepresentable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/isleft","title":"var isLeft: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/isright","title":"var isRight: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/leftorright","title":"var leftOrRight: Self.LeftValue","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/collapse(_:)-3tp2i","title":"func collapse<T>(((Self.LeftValue) throws -> T)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/collapse(_:)-9je5w","title":"func collapse<T>(((Self.RightValue) throws -> T)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/collapse(_:_:)","title":"func collapse<T, U>(((Self.LeftValue) throws -> T), ((Self.RightValue) throws -> U)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/collapse(_:_:_:)","title":"func collapse((Self.LeftValue.LeftValue) throws -> (), (Self.LeftValue.RightValue) throws -> (), (Self.RightValue) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/collapse(_:do:)","title":"func collapse<T, U>(((Self.LeftValue) throws -> T), do: @autoclosure () throws -> U) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/collapse(do:_:)","title":"func collapse<T, U>(do: @autoclosure () throws -> T, ((Self.RightValue) throws -> U)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/collapse(do:do:)","title":"func collapse<T, U>(do: @autoclosure () throws -> T, do: @autoclosure () throws -> U) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/filter(_:_:)","title":"func filter(((Self.LeftValue) throws -> Bool), ((Self.RightValue) throws -> Bool)) rethrows -> Self.EitherValue?","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/filterormap(_:_:)","title":"func filterOrMap<T>(((Self.LeftValue) throws -> Bool), ((Self.RightValue) throws -> T)) rethrows -> Either<Self.LeftValue, T>?","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/flatmap(left:right:)","title":"func flatMap<T, U>(left: ((Self.LeftValue) throws -> T?), right: ((Self.RightValue) throws -> U?)) rethrows -> Either<T, U>?","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/map(_:_:)","title":"func map<T, U>(((Self.LeftValue) throws -> T), ((Self.RightValue) throws -> U)) rethrows -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/map(left:)","title":"func map<T>(left: ((Self.LeftValue) throws -> T)) rethrows -> Either<T, Self.RightValue>","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/map(left:right:)","title":"func map<T, U>(left: ((Self.LeftValue) throws -> T), right: ((Self.RightValue) throws -> U)) rethrows -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/map(right:)","title":"func map<T>(right: ((Self.RightValue) throws -> T)) rethrows -> Either<Self.LeftValue, T>","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/mapleft(_:)","title":"func mapLeft<T>(((Self.LeftValue) throws -> T)) rethrows -> Either<T, Self.RightValue>","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/mapright(_:)","title":"func mapRight<T>(((Self.RightValue) throws -> T)) rethrows -> Either<Self.LeftValue, T>","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/reduce(_:)-4yscc","title":"func reduce(((Self.RightValue) throws -> Self.LeftValue)) rethrows -> Self.LeftValue","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/reduce(_:)-7giom","title":"func reduce(((Self.LeftValue) throws -> Self.RightValue)) rethrows -> Self.RightValue","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/reduce(_:_:)-4d7m5","title":"func reduce<T>(((Self.LeftValue) throws -> T), ((Self.RightValue) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/reduce(_:_:)-7xmzo","title":"func reduce<T>(@autoclosure () throws -> T, ((Self.RightValue) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/reduce(_:_:)-9wy4a","title":"func reduce<T>(((Self.LeftValue) throws -> T), @autoclosure () throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/reduce(_:_:)-xdcl","title":"func reduce<T>(@autoclosure () throws -> T, @autoclosure () throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/reduce(_:_:_:)","title":"func reduce<T>(((Self.LeftValue.LeftValue) throws -> T), ((Self.LeftValue.RightValue) throws -> T), ((Self.RightValue) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/reduce(left:right:)","title":"func reduce<T>(left: ((Self.LeftValue) throws -> T), right: ((Self.RightValue) throws -> T)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/oneoftwoiterators\/eithervalueconvertible-implementations","title":"EitherValueConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/erasetoanyiterator()","title":"func eraseToAnyIterator() -> AnyIterator<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/exhaust()","title":"func exhaust()","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/exhaust(count:)","title":"func exhaust<N>(count: N) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/exhausting()","title":"func exhausting() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/join(_:)","title":"func join<G>(G) -> Join2Iterator<Self, G>","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/makesequence()","title":"func makeSequence() -> IteratorSequence<Self>","type":"method"}],"path":"\/documentation\/diagnostics\/oneoftwoiterators\/iteratorprotocol-implementations","title":"IteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/leftvalue","title":"var leftValue: Self.LeftValue?","type":"property"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/rightvalue","title":"var rightValue: Self.RightValue?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/mapinplace(_:_:)-2mm3c","title":"func mapInPlace(((Self.LeftValue) throws -> Self.RightValue), ((Self.RightValue) throws -> Self.RightValue)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/mapinplace(_:_:)-4uedl","title":"func mapInPlace(@autoclosure () throws -> Self.LeftValue, ((Self.RightValue) throws -> Self.RightValue)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/mapinplace(_:_:)-5sekc","title":"func mapInPlace(@autoclosure () throws -> Self.RightValue, ((Self.RightValue) throws -> Self.RightValue)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/mapinplace(_:_:)-73ce1","title":"func mapInPlace(((Self.LeftValue) throws -> Self.LeftValue), ((Self.RightValue) throws -> Self.RightValue)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/mapinplace(_:_:)-76j5l","title":"func mapInPlace(((Self.LeftValue) throws -> Self.LeftValue), ((Self.RightValue) throws -> Self.LeftValue)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/mapinplace(_:_:)-8knqf","title":"func mapInPlace(((Self.LeftValue) throws -> Self.LeftValue), @autoclosure () throws -> Self.LeftValue) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/mapinplace(_:_:)-92tjm","title":"func mapInPlace(((Self.LeftValue) throws -> Self.LeftValue), @autoclosure () throws -> Self.RightValue) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/mapormutate(_:_:)-2ie24","title":"func mapOrMutate<T, U>(((Self.LeftValue) -> T), ((inout Self.RightValue) -> U)) -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/mapormutate(_:_:)-9gwn2","title":"func mapOrMutate<T, U>(@autoclosure () throws -> T, ((inout Self.RightValue) throws -> U)) rethrows -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/mutate(_:_:)","title":"func mutate<T, U>(((inout Self.LeftValue) throws -> T), ((inout Self.RightValue) throws -> U)) rethrows -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/mutateormap(_:_:)-1rgxg","title":"func mutateOrMap<T, U>(((inout Self.LeftValue) throws -> T), @autoclosure () throws -> U) rethrows -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/oneoftwoiterators\/mutateormap(_:_:)-9vq60","title":"func mutateOrMap<T, U>(((inout Self.LeftValue) -> T), ((Self.RightValue) -> U)) -> Either<T, U>","type":"method"}],"path":"\/documentation\/diagnostics\/oneoftwoiterators\/mutableeithervalueconvertible-implementations","title":"MutableEitherValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/oneoftwoiterators","title":"OneOfTwoIterators","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/init(file:fileid:function:line:column:)-1i6y1","title":"init(file: StaticString, fileID: StaticString?, function: StaticString?, line: UInt?, column: UInt?)","type":"init"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/init(file:fileid:function:line:column:)-67afz","title":"init(file: String, fileID: String?, function: String, line: UInt, column: UInt?)","type":"init"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/column","title":"var column: UInt?","type":"property"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/file","title":"var file: String","type":"property"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/fileid","title":"var fileID: String?","type":"property"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/function","title":"var function: String?","type":"property"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/line","title":"var line: UInt?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/drop(_:)","title":"func drop(Preprocessor.Point.CodingKeys) -> Preprocessor.Point","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/column","title":"case column","type":"case"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/file","title":"case file","type":"case"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/fileid","title":"case fileID","type":"case"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/function","title":"case function","type":"case"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/line","title":"case line","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/init(intvalue:)","title":"init?(intValue: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/init(stringvalue:)","title":"init?(stringValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/codingkey-implementations","title":"CodingKey Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/memoize(with:_:)-8nr5e","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/memoize(with:_:)-91yby","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/preprocessor\/point\/codingkeys","title":"Preprocessor.Point.CodingKeys","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/preprocessor\/point\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/preprocessor\/point\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/decodeifpresent(from:)-60dj5","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/decodeifpresent(from:)-6795v","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/preprocessor\/point\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/preprocessor\/point\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/preprocessor\/point\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/preprocessor\/point\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/memoize(with:_:)-4lxpb","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/preprocessor\/point\/memoize(with:_:)-5jzyr","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/preprocessor\/point\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/preprocessor\/point","title":"Preprocessor.Point","type":"struct"}],"path":"\/documentation\/diagnostics\/preprocessor","title":"Preprocessor","type":"enum"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/resultcomparison\/!=(_:_:)-9yvv2","title":"static func != <T, U>(Result<T, U>, ResultComparison) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/resultcomparison\/==(_:_:)","title":"static func == <T, U>(Result<T, U>, ResultComparison) -> Bool","type":"op"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/resultcomparison\/failure","title":"case failure","type":"case"},{"path":"\/documentation\/diagnostics\/resultcomparison\/success","title":"case success","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/resultcomparison\/!=(_:_:)-2fyl0","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/resultcomparison\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/resultcomparison\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/resultcomparison\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/resultcomparison\/!=(_:_:)-2fyl0","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/resultcomparison\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/resultcomparison\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/resultcomparison\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/resultcomparison\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/resultcomparison\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/resultcomparison\/memoize(with:_:)-1wvvn","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/resultcomparison\/memoize(with:_:)-70y2z","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/resultcomparison\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/resultcomparison","title":"ResultComparison","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/runtimecasterror\/invalidtypecast(from:to:value:location:)","title":"case invalidTypeCast(from: any Any.Type, to: any Any.Type, value: Any, location: SourceCodeLocation)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/runtimecasterror\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/diagnostics\/runtimecasterror\/errordescription","title":"var errorDescription: String?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/runtimecasterror\/localizeddescription","title":"var localizedDescription: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/runtimecasterror\/throw()","title":"func `throw`() throws -> Never","type":"method"}],"path":"\/documentation\/diagnostics\/runtimecasterror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/runtimecasterror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/diagnostics\/runtimecasterror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/diagnostics\/runtimecasterror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/diagnostics\/runtimecasterror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/runtimecasterror","title":"RuntimeCastError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/runtimecoercionerror\/coercionfailed(from:to:value:location:)","title":"case coercionFailed(from: any Any.Type, to: any Any.Type, value: Any, location: SourceCodeLocation)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/runtimecoercionerror\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/runtimecoercionerror\/localizeddescription","title":"var localizedDescription: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/runtimecoercionerror\/throw()","title":"func `throw`() throws -> Never","type":"method"}],"path":"\/documentation\/diagnostics\/runtimecoercionerror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/runtimecoercionerror\/errordescription","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/diagnostics\/runtimecoercionerror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/diagnostics\/runtimecoercionerror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/diagnostics\/runtimecoercionerror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/diagnostics\/runtimecoercionerror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/runtimecoercionerror","title":"RuntimeCoercionError","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/serverloglevel\/critical","title":"case critical","type":"case"},{"path":"\/documentation\/diagnostics\/serverloglevel\/debug","title":"case debug","type":"case"},{"path":"\/documentation\/diagnostics\/serverloglevel\/error","title":"case error","type":"case"},{"path":"\/documentation\/diagnostics\/serverloglevel\/info","title":"case info","type":"case"},{"path":"\/documentation\/diagnostics\/serverloglevel\/notice","title":"case notice","type":"case"},{"path":"\/documentation\/diagnostics\/serverloglevel\/trace","title":"case trace","type":"case"},{"path":"\/documentation\/diagnostics\/serverloglevel\/warning","title":"case warning","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/serverloglevel\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/serverloglevel\/stringvalue","title":"var stringValue: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/serverloglevel\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/serverloglevel\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/serverloglevel\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/serverloglevel\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/serverloglevel\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/serverloglevel\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/serverloglevel\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/serverloglevel\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/serverloglevel\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/serverloglevel\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/serverloglevel\/memoize(with:_:)-5eu5g","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/serverloglevel\/memoize(with:_:)-9l663","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/serverloglevel\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/serverloglevel\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/serverloglevel\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/diagnostics\/serverloglevel\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/serverloglevel","title":"ServerLogLevel","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/exact(_:)","title":"case exact(Preprocessor.Point)","type":"case"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/regular(file:line:)","title":"case regular(file: String, line: UInt)","type":"case"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/unavailable","title":"case unavailable","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/init(_:)-8tkyr","title":"init(Preprocessor.Point)","type":"init"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/init(file:fileid:function:line:column:)-3cf5i","title":"init(file: String, fileID: String?, function: String, line: UInt, column: UInt?)","type":"init"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/init(file:fileid:function:line:column:)-82jdr","title":"init(file: StaticString, fileID: StaticString?, function: StaticString, line: UInt, column: UInt?)","type":"init"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/init(fileid:function:line:column:)","title":"init(fileID: StaticString, function: StaticString, line: UInt, column: UInt?)","type":"init"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/column","title":"var column: UInt?","type":"property"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/file","title":"var file: String?","type":"property"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/function","title":"var function: String?","type":"property"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/line","title":"var line: UInt?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/drop(_:)","title":"func drop(Preprocessor.Point.CodingKeys) -> SourceCodeLocation","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/sourcecodelocation\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/decodeifpresent(from:)-6ywrm","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/decodeifpresent(from:)-9a8cm","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/sourcecodelocation\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/sourcecodelocation\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/sourcecodelocation\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/sourcecodelocation\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/memoize(with:_:)-5v2i1","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/memoize(with:_:)-mit1","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/sourcecodelocation\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/init(_:)-55drb","title":"init(SourceCodeLocation)","type":"init"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/init(file:fileid:function:line:column:)-4bqhl","title":"init(file: StaticString, fileID: StaticString?, function: StaticString, line: UInt, column: UInt?)","type":"init"},{"path":"\/documentation\/diagnostics\/sourcecodelocation\/init(file:fileid:function:line:column:)-918wv","title":"init(file: String, fileID: String?, function: String, line: UInt, column: UInt?)","type":"init"}],"path":"\/documentation\/diagnostics\/sourcecodelocation\/sourcecodelocationinitiable-implementations","title":"SourceCodeLocationInitiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/sourcecodelocation","title":"SourceCodeLocation","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/stringcodingstrategies\/base64\/decode(_:)","title":"func decode(StringCodingStrategies.Base64.Output) throws -> String","type":"method"},{"path":"\/documentation\/diagnostics\/stringcodingstrategies\/base64\/encode(_:)","title":"func encode(String) throws -> StringCodingStrategies.Base64.Output","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/stringcodingstrategies\/base64\/output","title":"StringCodingStrategies.Base64.Output","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/stringcodingstrategies\/base64\/base64","title":"static var base64: StringCodingStrategies.Base64","type":"property"}],"path":"\/documentation\/diagnostics\/stringcodingstrategies\/base64\/stringcodingstrategy-implementations","title":"StringCodingStrategy Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/stringcodingstrategies\/base64","title":"StringCodingStrategies.Base64","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/stringcodingstrategies\/utf8\/decode(_:)","title":"func decode(StringCodingStrategies.UTF8.Output) throws -> String","type":"method"},{"path":"\/documentation\/diagnostics\/stringcodingstrategies\/utf8\/encode(_:)","title":"func encode(String) throws -> StringCodingStrategies.UTF8.Output","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/stringcodingstrategies\/utf8\/output","title":"StringCodingStrategies.UTF8.Output","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/stringcodingstrategies\/utf8\/utf8","title":"static var utf8: StringCodingStrategies.UTF8","type":"property"}],"path":"\/documentation\/diagnostics\/stringcodingstrategies\/utf8\/stringcodingstrategy-implementations","title":"StringCodingStrategy Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/stringcodingstrategies\/utf8","title":"StringCodingStrategies.UTF8","type":"struct"}],"path":"\/documentation\/diagnostics\/stringcodingstrategies","title":"StringCodingStrategies","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/todo\/here(_:note:)","title":"static func here(TODO.Action..., note: String?)","type":"method"},{"path":"\/documentation\/diagnostics\/todo\/whole(_:note:_:)","title":"static func whole<T>(TODO.Action..., note: String?, () throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/todo\/whole(_:note:file:line:)","title":"static func whole(TODO.Action..., note: String?, file: StaticString, line: UInt)","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/todo\/abstractreturnvalue\/fixme","title":"case fixMe","type":"case"},{"path":"\/documentation\/diagnostics\/todo\/abstractreturnvalue\/unimplemented","title":"case unimplemented","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/todo\/abstractreturnvalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/todo\/abstractreturnvalue\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/todo\/abstractreturnvalue\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/todo\/abstractreturnvalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/todo\/abstractreturnvalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/todo\/abstractreturnvalue\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/todo\/abstractreturnvalue\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/todo\/abstractreturnvalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/todo\/abstractreturnvalue\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/todo\/abstractreturnvalue\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/todo\/abstractreturnvalue\/memoize(with:_:)-23i6a","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/todo\/abstractreturnvalue\/memoize(with:_:)-9zh5i","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/todo\/abstractreturnvalue\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/todo\/abstractreturnvalue","title":"TODO.AbstractReturnValue","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/todo\/action\/addressedgecase","title":"case addressEdgeCase","type":"case"},{"path":"\/documentation\/diagnostics\/todo\/action\/benchmark","title":"case benchmark","type":"case"},{"path":"\/documentation\/diagnostics\/todo\/action\/complete","title":"case complete","type":"case"},{"path":"\/documentation\/diagnostics\/todo\/action\/document","title":"case document","type":"case"},{"path":"\/documentation\/diagnostics\/todo\/action\/fix","title":"case fix","type":"case"},{"path":"\/documentation\/diagnostics\/todo\/action\/implement","title":"case implement","type":"case"},{"path":"\/documentation\/diagnostics\/todo\/action\/improve","title":"case improve","type":"case"},{"path":"\/documentation\/diagnostics\/todo\/action\/maybefix","title":"case maybeFix","type":"case"},{"path":"\/documentation\/diagnostics\/todo\/action\/modernize","title":"case modernize","type":"case"},{"path":"\/documentation\/diagnostics\/todo\/action\/optimize","title":"case optimize","type":"case"},{"path":"\/documentation\/diagnostics\/todo\/action\/refactor","title":"case refactor","type":"case"},{"path":"\/documentation\/diagnostics\/todo\/action\/remove","title":"case remove","type":"case"},{"path":"\/documentation\/diagnostics\/todo\/action\/rethink","title":"case rethink","type":"case"},{"path":"\/documentation\/diagnostics\/todo\/action\/test","title":"case test","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/todo\/action\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/todo\/action\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/todo\/action\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/todo\/action\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/todo\/action\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/todo\/action\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/todo\/action\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/todo\/action\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/todo\/action\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/todo\/action\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/todo\/action\/memoize(with:_:)-5zny","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/todo\/action\/memoize(with:_:)-9vz89","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/todo\/action\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/todo\/action","title":"TODO.Action","type":"enum"},{"title":"Type Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/todo\/subscript(dynamicmember:)-2jo0g","title":"static subscript<T>(dynamicMember _: KeyPath<TODO._Actions, TODO.Action>) -> _CallFunctionAsFunction<T>","type":"subscript"},{"path":"\/documentation\/diagnostics\/todo\/subscript(dynamicmember:)-9u0uk","title":"static subscript(dynamicMember _: KeyPath<TODO.AbstractReturnValue._InstanceKeyPaths, TODO.AbstractReturnValue>) -> Never","type":"subscript"}],"path":"\/documentation\/diagnostics\/todo","title":"TODO","type":"enum"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/terminalui\/ascii\/boxcontentalignment\/center","title":"case center","type":"case"},{"path":"\/documentation\/diagnostics\/terminalui\/ascii\/boxcontentalignment\/left","title":"case left","type":"case"},{"path":"\/documentation\/diagnostics\/terminalui\/ascii\/boxcontentalignment\/right","title":"case right","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/terminalui\/ascii\/boxcontentalignment\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/terminalui\/ascii\/boxcontentalignment\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/terminalui\/ascii\/boxcontentalignment\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/terminalui\/ascii\/boxcontentalignment\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/terminalui\/ascii\/boxcontentalignment\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/terminalui\/ascii\/boxcontentalignment\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/terminalui\/ascii\/boxcontentalignment\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/terminalui\/ascii\/boxcontentalignment\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/terminalui\/ascii\/boxcontentalignment\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/terminalui\/ascii\/boxcontentalignment\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/terminalui\/ascii\/boxcontentalignment\/memoize(with:_:)-8qxck","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/terminalui\/ascii\/boxcontentalignment\/memoize(with:_:)-9p99t","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/terminalui\/ascii\/boxcontentalignment\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/terminalui\/ascii\/boxcontentalignment","title":"TerminalUI.ASCII.BoxContentAlignment","type":"enum"}],"path":"\/documentation\/diagnostics\/terminalui\/ascii","title":"TerminalUI.ASCII","type":"enum"}],"path":"\/documentation\/diagnostics\/terminalui","title":"TerminalUI","type":"enum"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trilean\/!(_:)","title":"static func ! (Trilean) -> Trilean","type":"op"},{"path":"\/documentation\/diagnostics\/trilean\/&&(_:_:)","title":"static func && (Trilean, Trilean) -> Trilean","type":"op"},{"path":"\/documentation\/diagnostics\/trilean\/__(_:_:)","title":"static func || (Trilean, Trilean) -> Trilean","type":"op"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trilean\/false","title":"case `false`","type":"case"},{"path":"\/documentation\/diagnostics\/trilean\/true","title":"case `true`","type":"case"},{"path":"\/documentation\/diagnostics\/trilean\/unknown","title":"case unknown","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trilean\/init(rawvalue:)","title":"init?(rawValue: Int8)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trilean\/&&-_(_:_:)-3x9sm","title":"static func &&-> <T>(Self, @autoclosure () throws -> T?) rethrows -> T?","type":"op"},{"path":"\/documentation\/diagnostics\/trilean\/&&-_(_:_:)-hllj","title":"static func &&-> <T>(Self, @autoclosure () throws -> T) rethrows -> T?","type":"op"},{"path":"\/documentation\/diagnostics\/trilean\/&&=(_:_:)","title":"static func &&= (inout Self, @autoclosure () throws -> Self) rethrows","type":"op"},{"path":"\/documentation\/diagnostics\/trilean\/__=(_:_:)","title":"static func ||= (inout Self, @autoclosure () throws -> Self) rethrows","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trilean\/boolvalue","title":"var boolValue: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trilean\/or(_:)-7jul6","title":"func or<T>(@autoclosure () throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/trilean\/or(_:)-z6x8","title":"func or<T>(@autoclosure () throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/trilean\/orthrow()","title":"func orThrow() throws","type":"method"},{"path":"\/documentation\/diagnostics\/trilean\/orthrow(_:)","title":"func orThrow(any Error) throws","type":"method"},{"path":"\/documentation\/diagnostics\/trilean\/then(_:)-364si","title":"func then<T>(@autoclosure () throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/trilean\/then(_:)-9x0yx","title":"func then<T>(@autoclosure () throws -> T?) rethrows -> T?","type":"method"}],"path":"\/documentation\/diagnostics\/trilean\/boolean-implementations","title":"Boolean Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trilean\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/diagnostics\/trilean\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trilean\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/trilean\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trilean\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/trilean\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trilean\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/trilean\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trilean\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/trilean\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trilean\/init(booleanliteral:)","title":"init(booleanLiteral: Bool)","type":"init"}],"path":"\/documentation\/diagnostics\/trilean\/expressiblebybooleanliteral-implementations","title":"ExpressibleByBooleanLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trilean\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/trilean\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trilean\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trilean\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/trilean\/memoize(with:_:)-3hi3i","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/trilean\/memoize(with:_:)-6ltg3","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/trilean\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trilean\/value","title":"var value: Bool?","type":"property"}],"path":"\/documentation\/diagnostics\/trilean\/mutablewrapper-implementations","title":"MutableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trilean\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trilean\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/diagnostics\/trilean\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trilean\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/trilean\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/trilean\/init(_:)","title":"init(Bool?)","type":"init"}],"path":"\/documentation\/diagnostics\/trilean\/wrapper-implementations","title":"Wrapper Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/trilean","title":"Trilean","type":"enum"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/module\/bundleidentifier","title":"static let bundleIdentifier: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/module\/initialize()","title":"static func initialize()","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/module\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/module\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/module\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/module\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/module\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/module\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/module\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/module\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/module\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/module\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/module\/memoize(with:_:)-2l63h","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/module\/memoize(with:_:)-ck9z","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/module\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/module","title":"module","type":"enum"},{"title":"Extended Modules","type":"groupMarker"},{"children":[{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/accelerate\/vdsp\/eigendecomposition\/eigenvalues","title":"let eigenvalues: [Double]","type":"property"},{"path":"\/documentation\/diagnostics\/accelerate\/vdsp\/eigendecomposition\/eigenvectors","title":"let eigenvectors: [[Double]]","type":"property"}],"path":"\/documentation\/diagnostics\/accelerate\/vdsp\/eigendecomposition","title":"vDSP.EigenDecomposition","type":"struct"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/accelerate\/vdsp\/cosinesimilarity(lhs:rhs:)-339ro","title":"static func cosineSimilarity<U>(lhs: U, rhs: U) -> Float","type":"method"},{"path":"\/documentation\/diagnostics\/accelerate\/vdsp\/cosinesimilarity(lhs:rhs:)-5ncjy","title":"static func cosineSimilarity<U>(lhs: U, rhs: U) -> Double","type":"method"},{"path":"\/documentation\/diagnostics\/accelerate\/vdsp\/eigendecomposition(of:)","title":"static func eigenDecomposition(of: [Double]) throws -> vDSP.EigenDecomposition","type":"method"},{"path":"\/documentation\/diagnostics\/accelerate\/vdsp\/eigendecomposition2(of:)","title":"static func eigenDecomposition2(of: [Double]) throws -> vDSP.EigenDecomposition","type":"method"},{"path":"\/documentation\/diagnostics\/accelerate\/vdsp\/euclideandistance(lhs:rhs:)-79zdn","title":"static func euclideanDistance<U>(lhs: U, rhs: U) -> Float","type":"method"},{"path":"\/documentation\/diagnostics\/accelerate\/vdsp\/euclideandistance(lhs:rhs:)-8e13u","title":"static func euclideanDistance<U>(lhs: U, rhs: U) -> Double","type":"method"},{"path":"\/documentation\/diagnostics\/accelerate\/vdsp\/mmul(_:matrixb:rowcount:columncount:commondimension:)","title":"static func mmul([Double], matrixB: [Double], rowCount: Int, columnCount: Int, commonDimension: Int) -> [Double]","type":"method"},{"path":"\/documentation\/diagnostics\/accelerate\/vdsp\/normalize(_:)","title":"static func normalize([[Double]]) -> [[Double]]","type":"method"},{"path":"\/documentation\/diagnostics\/accelerate\/vdsp\/normalize(_:rowcount:columncount:)","title":"static func normalize([Double], rowCount: Int, columnCount: Int) -> [Double]","type":"method"},{"path":"\/documentation\/diagnostics\/accelerate\/vdsp\/standarddeviation(_:)","title":"static func standardDeviation<U>(U) -> U.Element","type":"method"},{"path":"\/documentation\/diagnostics\/accelerate\/vdsp\/transpose(_:rowcount:columncount:)","title":"static func transpose([Double], rowCount: Int, columnCount: Int) -> [Double]","type":"method"},{"path":"\/documentation\/diagnostics\/accelerate\/vdsp\/vsmul(_:scalar:)","title":"static func vsmul([Double], scalar: Double) -> [Double]","type":"method"}],"path":"\/documentation\/diagnostics\/accelerate\/vdsp","title":"vDSP","type":"extension"}],"path":"\/documentation\/diagnostics\/accelerate","title":"Accelerate","type":"extension"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/combine\/publisher\/filter(_:)","title":"func filter(Self.Output.TypeDiscriminator) -> Publishers.Filter<Self>","type":"method"}],"path":"\/documentation\/diagnostics\/combine\/publisher","title":"Publisher","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/combine\/topleveldecoder\/attempttodecode(_:from:)","title":"func attemptToDecode<T>(T.Type, from: Self.Input) throws -> T","type":"method"}],"path":"\/documentation\/diagnostics\/combine\/topleveldecoder","title":"TopLevelDecoder","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/combine\/toplevelencoder\/encodeifpossible(_:)","title":"func encodeIfPossible<T>(T) throws -> Self.Output","type":"method"}],"path":"\/documentation\/diagnostics\/combine\/toplevelencoder","title":"TopLevelEncoder","type":"extension"}],"path":"\/documentation\/diagnostics\/combine","title":"Combine","type":"extension"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/nativevalue","title":"var nativeValue: CGFloat.NativeType","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/init(_:)-2m0rx","title":"init(ObjCBool)","type":"init"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/init(_:)-2ov44","title":"init(Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/init(_:)-95d1a","title":"init(DarwinBoolean)","type":"init"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/init(boolean:)","title":"init<T>(boolean: T)","type":"init"}],"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/booleaninitiable-implementations","title":"BooleanInitiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/bigendianview","title":"var bigEndianView: Self","type":"property"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/littleendianview","title":"var littleEndianView: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/swapbyteorder()-69e61","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/swapbyteorder()-8om97","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/swapbyteorderbigtohost()","title":"func swapByteOrderBigToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/swapbyteorderhosttobig()","title":"func swapByteOrderHostToBig()","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/swapbyteorderhosttolittle()","title":"func swapByteOrderHostToLittle()","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/swapbyteorderhosttoportable()","title":"func swapByteOrderHostToPortable()","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/swapbyteorderlittletohost()","title":"func swapByteOrderLittleToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/swapbyteorderportabletohost()","title":"func swapByteOrderPortableToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/swappingbyteorder()","title":"func swappingByteOrder() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/swappingbyteorderbigtohost()","title":"func swappingByteOrderBigToHost() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/swappingbyteorderhosttobig()","title":"func swappingByteOrderHostToBig() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/swappingbyteorderhosttolittle()","title":"func swappingByteOrderHostToLittle() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/swappingbyteorderhosttoportable()","title":"func swappingByteOrderHostToPortable() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/swappingbyteorderlittletohost()","title":"func swappingByteOrderLittleToHost() -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/byteorderswappable-implementations","title":"ByteOrderSwappable Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/iscontinuous","title":"static var isContinuous: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/isdiscrete","title":"static var isDiscrete: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/discreteorcontinuous-implementations","title":"DiscreteOrContinuous Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/init(_:)-3qnrk","title":"init(NSDecimalNumber)","type":"init"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/init(_:)-4lvcn","title":"init(CGFloat)","type":"init"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/init(_:)-5yisp","title":"init(Decimal)","type":"init"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/init(floatliteral:)","title":"init(floatLiteral: Float)","type":"init"}],"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/floatingpointinitiable-implementations","title":"FloatingPointInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/init(_:)-1kozf","title":"init?(String)","type":"init"}],"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/losslessstringconvertible-implementations","title":"LosslessStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/init(unchecked:)","title":"init<N>(unchecked: N)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/ceiling","title":"var ceiling: Self","type":"property"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/floor","title":"var floor: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/denormalize(_:_:)","title":"func denormalize(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/interpolate(_:_:)","title":"func interpolate(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/normalize(_:_:)","title":"func normalize(Self, Self) -> Self","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/lossless(from:)-1ztdu","title":"static func lossless<N>(from: N) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/lossless(from:)-9w8q8","title":"static func lossless(from: AnyNumber) throws -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/number-implementations","title":"Number Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/nativefloatingpointvalue","title":"var nativeFloatingPointValue: NativeFloatingPoint","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/tobool()","title":"func toBool() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/tocgfloat()","title":"func toCGFloat() -> CGFloat","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/todecimal()","title":"func toDecimal() -> Decimal","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/todouble()","title":"func toDouble() -> Double","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/tofloat()","title":"func toFloat() -> Float","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/toint()","title":"func toInt() -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/toint16()","title":"func toInt16() -> Int16","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/toint32()","title":"func toInt32() -> Int32","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/toint64()","title":"func toInt64() -> Int64","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/toint8()","title":"func toInt8() -> Int8","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/tonsnumber()","title":"func toNSNumber() -> NSNumber","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/tonativefloatingpointvalue()","title":"func toNativeFloatingPointValue() -> NativeFloatingPoint","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/touint()","title":"func toUInt() -> UInt","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/touint16()","title":"func toUInt16() -> UInt16","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/touint32()","title":"func toUInt32() -> UInt32","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/touint64()","title":"func toUInt64() -> UInt64","type":"method"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/touint8()","title":"func toUInt8() -> UInt8","type":"method"}],"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/numberconvertible-implementations","title":"NumberConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/absolutevalue","title":"var absoluteValue: Self","type":"property"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/isnegative","title":"var isNegative: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/canbesignminus-4mphu","title":"static var canBeSignMinus: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/signed-implementations","title":"Signed Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/init(_:)-2sxko","title":"init(Int8)","type":"init"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/init(_:)-6n5m7","title":"init(Int16)","type":"init"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/init(_:)-6t6xk","title":"init(Int32)","type":"init"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/init(_:)-7xjn7","title":"init(Int64)","type":"init"}],"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/signedintegerinitiable-implementations","title":"SignedIntegerInitiable Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/canbesignminus-251hb","title":"static var canBeSignMinus: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/signedorunsigned-implementations","title":"SignedOrUnsigned Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/init(_:)-58mpu","title":"init(UInt16)","type":"init"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/init(_:)-7inv0","title":"init(UInt32)","type":"init"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/init(_:)-7qia","title":"init(UInt8)","type":"init"},{"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/init(_:)-8hu9g","title":"init(UInt64)","type":"init"}],"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat\/unsignedintegerinitiable-implementations","title":"UnsignedIntegerInitiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/corefoundation\/cgfloat","title":"CGFloat","type":"extension"}],"path":"\/documentation\/diagnostics\/corefoundation","title":"CoreFoundation","type":"extension"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/darwin\/stat\/init(fd:)","title":"init?(fd: CInt)","type":"init"},{"path":"\/documentation\/diagnostics\/darwin\/stat\/init(link:)","title":"init?(link: String)","type":"init"},{"path":"\/documentation\/diagnostics\/darwin\/stat\/init(path:)","title":"init?(path: String)","type":"init"},{"path":"\/documentation\/diagnostics\/darwin\/stat\/init(url:)","title":"init?(url: URL)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/darwin\/stat\/accessed","title":"var accessed: Date","type":"property"},{"path":"\/documentation\/diagnostics\/darwin\/stat\/creation","title":"var creation: Date","type":"property"},{"path":"\/documentation\/diagnostics\/darwin\/stat\/isdirectory","title":"var isDirectory: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/darwin\/stat\/islink","title":"var isLink: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/darwin\/stat\/isowned","title":"var isOwned: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/darwin\/stat\/issocket","title":"var isSocket: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/darwin\/stat\/modeflags","title":"var modeFlags: mode_t","type":"property"},{"path":"\/documentation\/diagnostics\/darwin\/stat\/modified","title":"var modified: Date","type":"property"}],"path":"\/documentation\/diagnostics\/darwin\/stat","title":"stat","type":"extension"}],"path":"\/documentation\/diagnostics\/darwin","title":"Darwin","type":"extension"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/foundation\/jsondecoder\/init(datedecodingstrategy:datadecodingstrategy:keydecodingstrategy:nonconformingfloatdecodingstrategy:)","title":"convenience init(dateDecodingStrategy: JSONDecoder.DateDecodingStrategy?, dataDecodingStrategy: JSONDecoder.DataDecodingStrategy?, keyDecodingStrategy: JSONDecoder.KeyDecodingStrategy?, nonConformingFloatDecodingStrategy: JSONDecoder.NonConformingFloatDecodingStrategy?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/foundation\/jsondecoder\/decode(_:from:allowfragments:)","title":"func decode<T>(T.Type, from: Data, allowFragments: Bool) throws -> T","type":"method"},{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/foundation\/jsondecoder\/datedecodingstrategy\/iso8601x","title":"static var iso8601X: JSONDecoder.DateDecodingStrategy","type":"property"}],"path":"\/documentation\/diagnostics\/foundation\/jsondecoder\/datedecodingstrategy","title":"JSONDecoder.DateDecodingStrategy","type":"extension"}],"path":"\/documentation\/diagnostics\/foundation\/jsondecoder","title":"JSONDecoder","type":"extension"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/foundation\/jsonencoder\/init(dateencodingstrategy:dataencodingstrategy:keyencodingstrategy:nonconformingfloatencodingstrategy:)","title":"convenience init(dateEncodingStrategy: JSONEncoder.DateEncodingStrategy?, dataEncodingStrategy: JSONEncoder.DataEncodingStrategy?, keyEncodingStrategy: JSONEncoder.KeyEncodingStrategy?, nonConformingFloatEncodingStrategy: JSONEncoder.NonConformingFloatEncodingStrategy?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/foundation\/jsonencoder\/encode(_:allowfragments:)","title":"func encode<T>(T, allowFragments: Bool) throws -> Data","type":"method"}],"path":"\/documentation\/diagnostics\/foundation\/jsonencoder","title":"JSONEncoder","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/foundation\/nsarray\/toanycodable()","title":"func toAnyCodable() throws -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/foundation\/nsarray\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/foundation\/nsarray","title":"NSArray","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/foundation\/nsdictionary\/toanycodable()","title":"func toAnyCodable() throws -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/foundation\/nsdictionary\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/foundation\/nsdictionary","title":"NSDictionary","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/foundation\/nsmutableattributedstring\/apply(_:)","title":"func apply(ContiguousCollectionDifference<NSAttributedString>)","type":"method"}],"path":"\/documentation\/diagnostics\/foundation\/nsmutableattributedstring","title":"NSMutableAttributedString","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/foundation\/nsnull\/toanycodable()","title":"func toAnyCodable() -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/foundation\/nsnull\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/foundation\/nsnull","title":"NSNull","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/foundation\/nsnumber\/toanycodable()","title":"func toAnyCodable() throws -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/foundation\/nsnumber\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/foundation\/nsnumber","title":"NSNumber","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/foundation\/nsset\/toanycodable()","title":"func toAnyCodable() throws -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/foundation\/nsset\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/foundation\/nsset","title":"NSSet","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/foundation\/nsstring\/toanycodable()","title":"func toAnyCodable() -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/foundation\/nsstring\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/foundation\/nsstring","title":"NSString","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/foundation\/url\/toanycodable()","title":"func toAnyCodable() throws -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/foundation\/url\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/foundation\/url","title":"URL","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/foundation\/uuid\/truncateddescription","title":"var truncatedDescription: String","type":"property"}],"path":"\/documentation\/diagnostics\/foundation\/uuid\/customtruncatedstringconvertible-implementations","title":"CustomTruncatedStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/foundation\/uuid\/random()","title":"static func random() -> UUID","type":"method"}],"path":"\/documentation\/diagnostics\/foundation\/uuid\/randomnable-implementations","title":"Randomnable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/foundation\/uuid\/stringvalue","title":"var stringValue: String","type":"property"}],"path":"\/documentation\/diagnostics\/foundation\/uuid\/stringconvertible-implementations","title":"StringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/foundation\/uuid\/init(stringvalue:)","title":"init?(stringValue: String)","type":"init"}],"path":"\/documentation\/diagnostics\/foundation\/uuid\/stringinitializable-implementations","title":"StringInitializable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/foundation\/uuid","title":"UUID","type":"extension"}],"path":"\/documentation\/diagnostics\/foundation","title":"Foundation","type":"extension"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/oslog\/oslogstore\/logentries","title":"OSLogStore.LogEntries","type":"typealias"},{"path":"\/documentation\/diagnostics\/oslog\/oslogstore\/logentry","title":"OSLogStore.LogEntry","type":"typealias"},{"path":"\/documentation\/diagnostics\/oslog\/oslogstore\/logenumeratoroptions","title":"OSLogStore.LogEnumeratorOptions","type":"typealias"},{"path":"\/documentation\/diagnostics\/oslog\/oslogstore\/logposition","title":"OSLogStore.LogPosition","type":"typealias"}],"path":"\/documentation\/diagnostics\/oslog\/oslogstore\/logstoreprotocol-implementations","title":"LogStoreProtocol Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/oslog\/oslogstore","title":"OSLogStore","type":"extension"},{"title":"Extended Types","type":"groupMarker"},{"children":[{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/oslog\/oslogentrylog\/level\/stringvalue","title":"var stringValue: String","type":"property"}],"path":"\/documentation\/diagnostics\/oslog\/oslogentrylog\/level\/stringconvertible-implementations","title":"StringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/oslog\/oslogentrylog\/level","title":"OSLogEntryLog.Level","type":"extension"}],"path":"\/documentation\/diagnostics\/oslog\/oslogentrylog","title":"OSLogEntryLog","type":"extension"}],"path":"\/documentation\/diagnostics\/oslog","title":"OSLog","type":"extension"},{"children":[{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectivec\/objc_associationpolicy\/assign","title":"static var assign: objc_AssociationPolicy","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectivec\/objc_associationpolicy\/copy(_:)","title":"static func copy(objc_AssociationPolicy.Atomicity) -> objc_AssociationPolicy","type":"method"},{"path":"\/documentation\/diagnostics\/objectivec\/objc_associationpolicy\/retain(_:)","title":"static func retain(objc_AssociationPolicy.Atomicity) -> objc_AssociationPolicy","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectivec\/objc_associationpolicy\/atomicity\/atomic","title":"case atomic","type":"case"},{"path":"\/documentation\/diagnostics\/objectivec\/objc_associationpolicy\/atomicity\/nonatomic","title":"case nonatomic","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectivec\/objc_associationpolicy\/atomicity\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/objectivec\/objc_associationpolicy\/atomicity\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectivec\/objc_associationpolicy\/atomicity\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/objectivec\/objc_associationpolicy\/atomicity\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectivec\/objc_associationpolicy\/atomicity\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/objectivec\/objc_associationpolicy\/atomicity\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectivec\/objc_associationpolicy\/atomicity\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/objectivec\/objc_associationpolicy\/atomicity\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectivec\/objc_associationpolicy\/atomicity\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/objectivec\/objc_associationpolicy\/atomicity\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/objectivec\/objc_associationpolicy\/atomicity\/memoize(with:_:)-3zyh6","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/objectivec\/objc_associationpolicy\/atomicity\/memoize(with:_:)-75x1f","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/objectivec\/objc_associationpolicy\/atomicity\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/objectivec\/objc_associationpolicy\/atomicity","title":"objc_AssociationPolicy.Atomicity","type":"enum"}],"path":"\/documentation\/diagnostics\/objectivec\/objc_associationpolicy","title":"objc_AssociationPolicy","type":"extension"}],"path":"\/documentation\/diagnostics\/objectivec","title":"ObjectiveC","type":"extension"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bidirectionalcollection\/erasetoanybidirectionalcollection()","title":"func eraseToAnyBidirectionalCollection() -> AnyBidirectionalCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bidirectionalcollection\/hasapproximatesuffix(_:)","title":"func hasApproximateSuffix<Suffix>(Suffix) -> Bool","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/bidirectionalcollection","title":"BidirectionalCollection","type":"extension"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/binaryinteger\/init(data:using:)","title":"init(data: Data, using: Self.DataDecodingStrategy) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/binaryinteger\/data(using:)","title":"func data(using: Self.DataEncodingStrategy) throws -> Data","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/binaryinteger","title":"BinaryInteger","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collection\/allsubrangeschunked(by:)","title":"func allSubrangesChunked<C>(by: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/chunked(by:)-9nuuz","title":"func chunked(by: Int) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/chunked(by:)-kx24","title":"func chunked<C>(by: C) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/consecutives()","title":"func consecutives() -> AnySequence<(Self.Element, Self.Element)>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/consecutivesallowinghalfemptypairs()","title":"func consecutivesAllowingHalfEmptyPairs() -> LazyMapSequence<Self._EnumeratedSequence, (Self.Element, Self.Element?)>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/cycle(index:)","title":"func cycle(index: Self.Index) -> Self.Index","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/erasetoanycollection()","title":"func eraseToAnyCollection() -> AnyCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/join(_:)","title":"func join<C>(C) -> Join2Collection<Self, C>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/join(_:_:)","title":"func join<C0, C1>(C0, C1) -> Join3Collection<Self, C0, C1>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/nilifempty()","title":"func nilIfEmpty() -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/prefix(_:)","title":"func prefix(Int?) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/prefix(till:)-19v6u","title":"func prefix(till: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/prefix(till:)-26ac2","title":"func prefix(till: Self.Element) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/reduce(_:)","title":"func reduce(((Self.Element, Self.Element) -> Self.Element)) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/sharedkeysbyequalvalue(where:)","title":"func sharedKeysByEqualValue<T, U>(where: (U, U) throws -> Bool) rethrows -> [T : U]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-1hl3i","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: (Self.Element) throws -> Separator?) rethrows -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/splitincludingseparators(maxsplits:omittingemptysubsequences:separator:)-2zl03","title":"func splitIncludingSeparators<Separator>(maxSplits: Int, omittingEmptySubsequences: Bool, separator: CasePath<Self.Element, Separator>) -> [Either<Self.SubSequence, Separator>]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/splitincludingseparators(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func splitIncludingSeparators(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/splittingfirst()","title":"func splittingFirst() -> (head: Self.Element, tail: Self.SubSequence)?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/tocollectionofone()","title":"func toCollectionOfOne() throws -> CollectionOfOne<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/tocollectionofzeroorone()","title":"func toCollectionOfZeroOrOne() throws -> CollectionOfOne<Self.Element>?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collection\/unfoldingforward()","title":"func unfoldingForward() -> UnfoldSequence<(Self.Element, Self.SubSequence), Self.SubSequence>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collection\/subscript(after:)","title":"subscript(after _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/swift\/collection\/subscript(atdistance:)","title":"subscript(atDistance _: Int) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/swift\/collection\/subscript(cycling:)","title":"subscript(cycling _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/swift\/collection\/subscript(try:)-4phqg","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"},{"path":"\/documentation\/diagnostics\/swift\/collection\/subscript(try:)-6tqgb","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/swift\/collection\/subscript(try:)-9ojum","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"}],"path":"\/documentation\/diagnostics\/swift\/collection","title":"Collection","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/comparable\/erasedasanycomparable","title":"var erasedAsAnyComparable: AnyComparable","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/comparable","title":"Comparable","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/encodable\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/encodable\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/encodable","title":"Encodable","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/encoder\/encode(_:)","title":"func encode<T>(T) throws","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/encoder\/encode(_:forkey:)","title":"func encode<T, Key>(T, forKey: Key) throws","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/encoder\/encode(contentsof:)","title":"func encode<S>(contentsOf: S) throws","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/encoder\/encode(contentsof:forkey:)","title":"func encode<S, Key>(contentsOf: S, forKey: Key) throws","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/encoder\/encode(opaque:forkey:)","title":"func encode<Key>(opaque: any Encodable, forKey: Key) throws","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/encoder","title":"Encoder","type":"extension"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/equatable\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/equatable\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/equatable","title":"Equatable","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/expressiblebystringliteral\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/expressiblebystringliteral\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/expressiblebystringliteral","title":"ExpressibleByStringLiteral","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/fixedwidthinteger\/swapbyteorderhosttoportable()","title":"func swapByteOrderHostToPortable()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/fixedwidthinteger\/swapbyteorderportabletohost()","title":"func swapByteOrderPortableToHost()","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/fixedwidthinteger","title":"FixedWidthInteger","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/hashable\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/hashable\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/hashable\/memoize(with:_:)-1yig5","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/hashable\/memoize(with:_:)-26z4h","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/hashable","title":"Hashable","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/iteratorprotocol\/erasetoanyiterator()","title":"func eraseToAnyIterator() -> AnyIterator<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/iteratorprotocol\/exhaust()","title":"func exhaust()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/iteratorprotocol\/exhaust(count:)","title":"func exhaust<N>(count: N) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/iteratorprotocol\/exhausting()","title":"func exhausting() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/iteratorprotocol\/join(_:)","title":"func join<G>(G) -> Join2Iterator<Self, G>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/iteratorprotocol\/makesequence()","title":"func makeSequence() -> IteratorSequence<Self>","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/iteratorprotocol","title":"IteratorProtocol","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/keyeddecodingcontainerprotocol\/decode(_:forkey:default:)","title":"func decode<T>(T.Type, forKey: Self.Key, default: @autoclosure () -> T) throws -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/keyeddecodingcontainerprotocol\/decode(forkey:)","title":"func decode<T>(forKey: Self.Key) throws -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/keyeddecodingcontainerprotocol\/decoder(forkey:)","title":"func decoder(forKey: Self.Key) throws -> any Decoder","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/keyeddecodingcontainerprotocol","title":"KeyedDecodingContainerProtocol","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/keyedencodingcontainerprotocol\/encode(using:forkey:)","title":"func encode(using: (any Encoder) throws -> (), forKey: Self.Key) throws","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/keyedencodingcontainerprotocol","title":"KeyedEncodingContainerProtocol","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/mutablecollection\/reindexwith(_:)-2fbeq","title":"func reindexWith<S>(S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/mutablecollection\/reindexwith(_:)-9isn9","title":"func reindexWith<C>(C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/mutablecollection\/reindexwith(_:count:)-5polg","title":"func reindexWith<S>(S, count: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/mutablecollection\/reindexwith(_:count:)-7oqzm","title":"func reindexWith<C>(C, count: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/mutablecollection\/remove(elementsatindices:)","title":"func remove<C>(elementsAtIndices: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/mutablecollection\/removing(elementsatindices:)","title":"func removing<C>(elementsAtIndices: C) -> Self","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/mutablecollection\/subscript(atdistance:)","title":"subscript(atDistance _: Int) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/swift\/mutablecollection\/subscript(cycling:)","title":"subscript(cycling _: Self.Index) -> Self.Element","type":"subscript"},{"path":"\/documentation\/diagnostics\/swift\/mutablecollection\/subscript(try:)-24okh","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/swift\/mutablecollection\/subscript(try:)-4kt9t","title":"subscript(try _: Self.Index) -> Self.Element?","type":"subscript"},{"path":"\/documentation\/diagnostics\/swift\/mutablecollection\/subscript(try:)-5yx3l","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"},{"path":"\/documentation\/diagnostics\/swift\/mutablecollection\/subscript(try:)-8dyk2","title":"subscript(try _: Range<Self.Index>) -> Self.SubSequence?","type":"subscript"}],"path":"\/documentation\/diagnostics\/swift\/mutablecollection","title":"MutableCollection","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/randomaccesscollection\/erasetoanyrandomaccesscollection()","title":"func eraseToAnyRandomAccessCollection() -> AnyRandomAccessCollection<Self.Element>","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/randomaccesscollection","title":"RandomAccessCollection","type":"extension"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/init(capacity:)","title":"init(capacity: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/mutablefirst","title":"var mutableFirst: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/mutablelast","title":"var mutableLast: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/append(contentsof:join:)-7kvt5","title":"func append(contentsOf: some Collection<Self.Element>, join: (Self.Element, Self.Element) -> Self.Element?)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/append(contentsof:join:)-zrpo","title":"func append(contentsOf: some Sequence<Self.Element>, join: (Self.Element, Self.Element) -> Self.Element?)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/appending(contentsof:)","title":"func appending<S>(contentsOf: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/apply(_:)","title":"func apply<C>(ContiguousCollectionDifference<C>)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/mutatefirstandlast(first:last:)","title":"func mutateFirstAndLast(first: (inout Self.Element?) throws -> Void, last: (inout Self.Element?) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/pad(at:with:tocount:)","title":"func pad(at: Self.Index, with: Self.Element, toCount: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/pad(at:withcontentsof:tocount:)","title":"func pad<C>(at: Self.Index, withContentsOf: C, toCount: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/padded(at:with:tocount:)","title":"func padded(at: Self.Index, with: Self.Element, toCount: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/padded(at:withcontentsof:tocount:)","title":"func padded<C>(at: Self.Index, withContentsOf: C, toCount: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/reduce(byunwrapping:_:)-2tsfd","title":"func reduce<T>(byUnwrapping: (Self.Element) -> T?, (T, T) -> Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/reduce(byunwrapping:_:)-34o55","title":"func reduce<T>(byUnwrapping: CasePath<Self.Element, T>, (T, T) -> T) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/remove(at:_:_:)","title":"func remove(at: Self.Index, Self.Index, Self.Index...) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/remove(at:into:)-4388n","title":"func remove<C0, C1>(at: C0, into: inout C1)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/remove(at:into:)-8izag","title":"func remove<S0, S1>(at: S0, into: inout S1)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/remove(byunwrapping:)","title":"func remove<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/removeafter(predicate:)","title":"func removeAfter(predicate: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/removeall(identifiedby:)","title":"func removeAll(identifiedBy: some Sequence)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/removeallbackwards(where:until:)","title":"func removeAllBackwards(where: (Self.Element) -> Bool, until: (Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/removeduplicates()","title":"func removeDuplicates()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/removefirst(of:)","title":"func removeFirst(of: Self.Element) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/removefrom(predicate:)","title":"func removeFrom(predicate: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/removing(at:)-13k0","title":"func removing<S>(at: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/removing(at:)-3hnmn","title":"func removing<C>(at: C) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/removing(at:)-71v2k","title":"func removing(at: Self.Index) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/removingall(where:)","title":"func removingAll(where: ((Self.Element) throws -> Bool)) rethrows -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/removingduplicates()","title":"func removingDuplicates() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/replace(_:with:)-126d8","title":"func replace<S>(((Self.Element) -> Bool), with: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/replace(_:with:)-9a07","title":"func replace(((Self.Element) -> Bool), with: Self.Element) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/replace(allof:with:)-5senm","title":"func replace<C>(allOf: Self.Element, with: C) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/replace(allof:with:)-9tcqe","title":"func replace(allOf: Self.Element, with: Self.Element) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/replace(at:with:)-4g9q7","title":"func replace<S>(at: Self.Index, with: S) -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/replace(at:with:)-5fdp6","title":"func replace(at: Self.Index, with: Self.Element) -> Self.Element","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/replace(at:with:)-5y2jr","title":"func replace<S>(at: S, with: Self.Element) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/replace(at:with:)-8nfv7","title":"func replace<S0, S1>(at: S0, with: S1) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/replace(at:with:removedinto:)","title":"func replace<S0, S1, S2>(at: S0, with: S1, removedInto: inout S2)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/replacesubranges(_:with:file:line:)","title":"func replaceSubranges<Ranges, Replacements, Replacement>(Ranges, with: Replacements, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/replacingsubranges(_:with:)","title":"func replacingSubranges<Ranges, Replacements, Replacement>(Ranges, with: Replacements) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/updateorappend(_:)","title":"func updateOrAppend(Self.Element)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/updateorappend(contentsof:)","title":"func updateOrAppend<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/upsert(_:)","title":"func upsert(Self.Element)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/upsert(contentsof:)","title":"func upsert<S>(contentsOf: S)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/insert(_:at:)","title":"func insert(Self.Element, at: RelativeIndex)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/insert(contentsof:at:)","title":"func insert<C>(contentsOf: C, at: RelativeIndex)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/remove(at:)-1ur2x","title":"func remove<S>(at: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/remove(at:)-6thy3","title":"func remove<C>(at: C) -> [Self.Element]","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection\/rangereplaceablecollection-implementations","title":"RangeReplaceableCollection Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/rangereplaceablecollection","title":"RangeReplaceableCollection","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/compact()","title":"func compact() -> CompactSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/compactmap(_:)","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/contains(_:)","title":"func contains<Value>(CasePath<Self.Element, Value>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/find(_:)","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/first(_:)","title":"func first<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/first(_:_:)","title":"func first<T0, T1>(CasePath<Self.Element, T0>, CasePath<T0, T1>) -> T1?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/first(oftype:)","title":"func first(ofType: Self.Element.TypeDiscriminator) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/firstandonly(oftype:)","title":"func firstAndOnly(ofType: Self.Element.TypeDiscriminator) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/flatmap(_:)","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/join(_:)-1ifii","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/join(_:)-39kjc","title":"func join<S>(S) -> Join2Sequence<Self, S>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/map(_:)","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/removefirst(_:)-5aj1c","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/removefirst(_:)-83773","title":"func removeFirst<Value>(CasePath<Self.Element, Value>) -> Value?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/removefirst(byunwrapping:)","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/sequence\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/sequence","title":"Sequence","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/anybidirectionalcollection\/erasetoanybidirectionalcollection()","title":"func eraseToAnyBidirectionalCollection() -> AnyBidirectionalCollection<Element>","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/anybidirectionalcollection\/anybidirectionalcollectiontype-implementations","title":"AnyBidirectionalCollectionType Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/anybidirectionalcollection\/init()","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/anybidirectionalcollection\/initiable-implementations","title":"Initiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/anybidirectionalcollection","title":"AnyBidirectionalCollection","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/anycollection\/init()","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/anycollection\/initiable-implementations","title":"Initiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/anycollection","title":"AnyCollection","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/anyiterator\/erasetoanyiterator()","title":"func eraseToAnyIterator() -> AnyIterator<Element>","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/anyiterator","title":"AnyIterator","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/anyrandomaccesscollection\/init()","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/anyrandomaccesscollection\/initiable-implementations","title":"Initiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/anyrandomaccesscollection","title":"AnyRandomAccessCollection","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/anysequence\/init()","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/anysequence\/initiable-implementations","title":"Initiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/anysequence\/init(_:count:)","title":"init<S>(S, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/anysequence\/init(element:)","title":"init(element: Self.Element)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/anysequence\/init(iterator:)-23rig","title":"init<I>(iterator: inout I)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/anysequence\/init(iterator:)-9s9vw","title":"init<I>(iterator: I)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/anysequence\/init(iterator:count:)-86g75","title":"init<I>(iterator: I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/anysequence\/init(iterator:count:)-8naib","title":"init<I>(iterator: inout I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/anysequence\/init(nosequence:)","title":"init(noSequence: ())","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/anysequence\/init(repeating:count:)-6juti","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/anysequence\/init(repeating:count:)-6s2fx","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/anysequence\/prependall(_:)","title":"func prependAll<S>(Self.Element) -> S","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/anysequence\/sequenceinitiablesequence-implementations","title":"SequenceInitiableSequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/anysequence","title":"AnySequence","type":"extension"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/array\/init(_:)","title":"init(AutodeallocatingUnsafeBufferPointer<Element>)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/array\/flattening(content:)","title":"static func flattening(content: () -> [Element]) -> Array<Element>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/array\/toanycodable()","title":"func toAnyCodable() throws -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/array\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/array\/withbufferpointer(_:)","title":"func withBufferPointer<BP, T>(((BP) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/withunsafebufferpointer(_:)","title":"func withUnsafeBufferPointer<T>(((UnsafeBufferPointer<Self.Element>) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/array\/contiguousstorage-implementations","title":"ContiguousStorage Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/array\/-(_:_:)-1187b","title":"static func - <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/array\/-(_:_:)-7w45k","title":"static func - (Self, Self.Element) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/array\/-=(_:_:)-3jksh","title":"static func -= (inout Self, Self.Element)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/array\/-=(_:_:)-6gmp","title":"static func -= <S>(inout Self, S)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/array\/filterinplace(_:)","title":"func filterInPlace(((Self.Element) throws -> Bool)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/remove(contentsof:)-61t2k","title":"func remove<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/remove(contentsof:)-9kltd","title":"func remove<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/removeall()-80rek","title":"func removeAll()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/removeall()-9bfv0","title":"func removeAll()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/removeall(of:)","title":"func removeAll(of: Self.Element)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/removing(allof:)","title":"func removing(allOf: Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/removing(contentsof:)-6upvv","title":"func removing<C>(contentsOf: C) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/removing(contentsof:)-8cgoq","title":"func removing<S>(contentsOf: S) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/array\/destructivelymutablesequence-implementations","title":"DestructivelyMutableSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/array\/applyunconditionally(_:)","title":"func applyUnconditionally(Self.Difference) throws","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/array\/difference","title":"Array.Difference","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/array\/diffable-implementations","title":"Diffable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/array\/+(_:_:)-1uhin","title":"static func + (Self.Element, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/array\/+(_:_:)-3x3mx","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/array\/+(_:_:)-4a9w4","title":"static func + <S>(S, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/array\/+(_:_:)-65sw6","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/array\/+(_:_:)-7ob0w","title":"static func + (Self, Self.Element) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/array\/+=(_:_:)-1i6k1","title":"static func += <S>(inout Self, S)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/array\/+=(_:_:)-9awnx","title":"static func += (inout Self, Self.Element)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/array\/+=(_:_:)-9z4x1","title":"static func += <S>(inout Self, S)","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/array\/extensiblerangereplaceablecollection-implementations","title":"ExtensibleRangeReplaceableCollection Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/array\/+(_:_:)-2pvm","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/array\/+(_:_:)-3sger","title":"static func + <S>(S, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/array\/+(_:_:)-7dhy4","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/array\/+(_:_:)-80c7u","title":"static func + (Self, Self.Element) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/array\/+(_:_:)-tpke","title":"static func + (Self.Element, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/array\/+=(_:_:)-6nfmg","title":"static func += (inout Self, Self.Element)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/array\/+=(_:_:)-6zg7z","title":"static func += <S>(inout Self, S)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/array\/+=(_:_:)-9xgsk","title":"static func += <S>(inout Self, S)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/array\/append(contentsof:)","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/appending(_:)","title":"func appending(Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/appending(contentsof:)-4xvzj","title":"func appending<S>(contentsOf: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/appending(contentsof:)-7a7e5","title":"func appending<S>(contentsOf: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/insert(_:)-3as4i","title":"func insert(Self.Element)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/insert(_:)-7z04b","title":"func insert(Element)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/insert(contentsof:)-3tp10","title":"func insert<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/insert(contentsof:)-4ct8o","title":"func insert<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/insert(contentsof:)-882kw","title":"func insert<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/inserting(_:)","title":"func inserting(Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/inserting(contentsof:)-1he5l","title":"func inserting<S>(contentsOf: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/inserting(contentsof:)-2xzo","title":"func inserting<S>(contentsOf: S) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/array\/extensiblesequence-implementations","title":"ExtensibleSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/array\/withmutablebufferpointer(_:)","title":"func withMutableBufferPointer<BP, T>(((BP) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/withunsafemutablebufferpointer(_:)","title":"func withUnsafeMutableBufferPointer<T>(((UnsafeMutableBufferPointer<Self.Element>) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/array\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/array\/mutablecontiguousstorage-implementations","title":"MutableContiguousStorage Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/array\/replace(allof:with:)","title":"func replace(allOf: Self.Element, with: Self.Element)","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/array\/mutablesequence-implementations","title":"MutableSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/array\/nondestructivecount","title":"var nonDestructiveCount: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/array\/nondestroyingsequence-implementations","title":"NonDestroyingSequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/array\/init(_:count:)","title":"init<S>(S, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/array\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/array\/init(element:)","title":"init(element: Self.Element)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/array\/init(iterator:)-97vrs","title":"init<I>(iterator: I)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/array\/init(iterator:)-9s65t","title":"init<I>(iterator: inout I)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/array\/init(iterator:count:)-2qyvf","title":"init<I>(iterator: I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/array\/init(iterator:count:)-6vc9g","title":"init<I>(iterator: inout I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/array\/init(nosequence:)","title":"init(noSequence: ())","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/array\/init(repeating:count:)-1cgrl","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/array\/init(repeating:count:)-3dp3a","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/array\/init(repeating:count:)-533m5","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/array\/init(repeating:count:)-ylvx","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/array\/prependall(_:)","title":"func prependAll<S>(Self.Element) -> S","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/array\/sequenceinitiablesequence-implementations","title":"SequenceInitiableSequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/array","title":"Array","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/withbufferpointer(_:)","title":"func withBufferPointer<BP, T>(((BP) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/withunsafebufferpointer(_:)","title":"func withUnsafeBufferPointer<T>(((UnsafeBufferPointer<Self.Element>) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/arrayslice\/contiguousstorage-implementations","title":"ContiguousStorage Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/-(_:_:)-66sbr","title":"static func - (Self, Self.Element) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/-(_:_:)-8ql50","title":"static func - <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/-=(_:_:)-1jo93","title":"static func -= <S>(inout Self, S)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/-=(_:_:)-85bra","title":"static func -= (inout Self, Self.Element)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/filterinplace(_:)","title":"func filterInPlace(((Self.Element) throws -> Bool)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/remove(contentsof:)-6x6mg","title":"func remove<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/remove(contentsof:)-8jqpp","title":"func remove<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/removeall()-660wc","title":"func removeAll()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/removeall()-znzi","title":"func removeAll()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/removeall(of:)","title":"func removeAll(of: Self.Element)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/removeall(where:)","title":"func removeAll(where: ((Element) throws -> Bool)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/removing(allof:)","title":"func removing(allOf: Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/removing(contentsof:)-50l72","title":"func removing<C>(contentsOf: C) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/removing(contentsof:)-lb5","title":"func removing<S>(contentsOf: S) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/arrayslice\/destructivelymutablesequence-implementations","title":"DestructivelyMutableSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/applyunconditionally(_:)","title":"func applyUnconditionally(Self.Difference) throws","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/difference","title":"ArraySlice.Difference","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/arrayslice\/diffable-implementations","title":"Diffable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/withmutablebufferpointer(_:)","title":"func withMutableBufferPointer<BP, T>(((BP) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/withunsafemutablebufferpointer(_:)","title":"func withUnsafeMutableBufferPointer<T>(((UnsafeMutableBufferPointer<Self.Element>) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/arrayslice\/mutablecontiguousstorage-implementations","title":"MutableContiguousStorage Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/replace(allof:with:)","title":"func replace(allOf: Self.Element, with: Self.Element)","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/arrayslice\/mutablesequence-implementations","title":"MutableSequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/init(_:count:)","title":"init<S>(S, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/init(element:)","title":"init(element: Self.Element)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/init(iterator:)-2wpsh","title":"init<I>(iterator: I)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/init(iterator:)-7uvl9","title":"init<I>(iterator: inout I)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/init(iterator:count:)-3p8v5","title":"init<I>(iterator: inout I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/init(iterator:count:)-59u0a","title":"init<I>(iterator: I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/init(nosequence:)","title":"init(noSequence: ())","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/init(repeating:count:)-29x39","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/init(repeating:count:)-60mdf","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/init(repeating:count:)-6fvmg","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/init(repeating:count:)-9qel4","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/arrayslice\/prependall(_:)","title":"func prependAll<S>(Self.Element) -> S","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/arrayslice\/sequenceinitiablesequence-implementations","title":"SequenceInitiableSequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/arrayslice","title":"ArraySlice","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/autoreleasingunsafemutablepointer\/init(_:)-746tw","title":"init(OpaquePointer)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/autoreleasingunsafemutablepointer\/opaquepointerinitiable-implementations","title":"OpaquePointerInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/autoreleasingunsafemutablepointer\/init(_:)-49lc7","title":"init<P>(P)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/autoreleasingunsafemutablepointer\/init(_:)-6shnw","title":"init?<P>(P?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/autoreleasingunsafemutablepointer\/init(bitpattern:)","title":"init<P>(bitPattern: P)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/autoreleasingunsafemutablepointer\/mutablerawrepresentation","title":"var mutableRawRepresentation: UnsafeMutableRawPointer","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/autoreleasingunsafemutablepointer\/nativewordpointerrepresentation","title":"var nativeWordPointerRepresentation: UnsafePointer<NativeWord>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/autoreleasingunsafemutablepointer\/opaquepointerrepresentation","title":"var opaquePointerRepresentation: OpaquePointer","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/autoreleasingunsafemutablepointer\/rawrepresentation","title":"var rawRepresentation: UnsafeRawPointer","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/autoreleasingunsafemutablepointer\/unsafemutablepointerrepresentation","title":"var unsafeMutablePointerRepresentation: UnsafeMutablePointer<Self.Pointee>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/autoreleasingunsafemutablepointer\/unsafepointerrepresentation","title":"var unsafePointerRepresentation: UnsafePointer<Self.Pointee>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/autoreleasingunsafemutablepointer\/allocate(initializingto:)","title":"static func allocate(initializingTo: Self.Pointee) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/autoreleasingunsafemutablepointer\/allocate(initializingto:count:)","title":"static func allocate<N>(initializingTo: Self.Pointee, count: N) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/autoreleasingunsafemutablepointer\/to(_:)","title":"static func to(inout Self.Pointee) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/autoreleasingunsafemutablepointer\/to(assuminglayoutcompatible:)","title":"static func to<T>(assumingLayoutCompatible: inout T) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/autoreleasingunsafemutablepointer\/pointer-implementations","title":"Pointer Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/autoreleasingunsafemutablepointer","title":"AutoreleasingUnsafeMutablePointer","type":"extension"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/false\/value","title":"static let value: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/bool\/false","title":"Bool.False","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/true\/value","title":"static let value: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/bool\/true","title":"Bool.True","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/eithervalue-swift.typealias","title":"Bool.EitherValue","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/toanycodable()","title":"func toAnyCodable() -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/bool\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/&&-_(_:_:)-6qoyi","title":"static func &&-> <T>(Self, @autoclosure () throws -> T?) rethrows -> T?","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/bool\/&&-_(_:_:)-s414","title":"static func &&-> <T>(Self, @autoclosure () throws -> T) rethrows -> T?","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/bool\/&&=(_:_:)","title":"static func &&= (inout Self, @autoclosure () throws -> Self) rethrows","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/bool\/__=(_:_:)","title":"static func ||= (inout Self, @autoclosure () throws -> Self) rethrows","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/boolvalue","title":"var boolValue: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/or(_:)-4x8oy","title":"func or<T>(@autoclosure () throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/or(_:)-7h075","title":"func or<T>(@autoclosure () throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/orthrow()","title":"func orThrow() throws","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/orthrow(_:)","title":"func orThrow(any Error) throws","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/then(_:)-47tdy","title":"func then<T>(@autoclosure () throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/then(_:)-89yws","title":"func then<T>(@autoclosure () throws -> T) rethrows -> T?","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/bool\/boolean-implementations","title":"Boolean Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-1bkxy","title":"init(DarwinBoolean)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-px14","title":"init(ObjCBool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(boolean:)","title":"init<T>(boolean: T)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(booleanliteral:)","title":"init(booleanLiteral: Bool)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/bool\/booleaninitiable-implementations","title":"BooleanInitiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/bigendianview","title":"var bigEndianView: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/bool\/littleendianview","title":"var littleEndianView: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/swapbyteorder()-37sjg","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/swapbyteorder()-47duh","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/swapbyteorderbigtohost()","title":"func swapByteOrderBigToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/swapbyteorderhosttobig()","title":"func swapByteOrderHostToBig()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/swapbyteorderhosttolittle()","title":"func swapByteOrderHostToLittle()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/swapbyteorderhosttoportable()","title":"func swapByteOrderHostToPortable()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/swapbyteorderlittletohost()","title":"func swapByteOrderLittleToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/swapbyteorderportabletohost()","title":"func swapByteOrderPortableToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/swappingbyteorder()","title":"func swappingByteOrder() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/swappingbyteorderbigtohost()","title":"func swappingByteOrderBigToHost() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/swappingbyteorderhosttobig()","title":"func swappingByteOrderHostToBig() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/swappingbyteorderhosttolittle()","title":"func swappingByteOrderHostToLittle() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/swappingbyteorderhosttoportable()","title":"func swappingByteOrderHostToPortable() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/swappingbyteorderlittletohost()","title":"func swappingByteOrderLittleToHost() -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/bool\/byteorderswappable-implementations","title":"ByteOrderSwappable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-3uh9g","title":"init(Bit)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/bytetupletype","title":"Bool.ByteTupleType","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/bool\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-3t0os","title":"init(Bool.EitherValue)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(leftvalue:)","title":"init(leftValue: Self.LeftValue)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(rightvalue:)","title":"init(rightValue: Self.RightValue)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/bool\/eitherrepresentable-implementations","title":"EitherRepresentable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/eithervalue-swift.property","title":"var eitherValue: Bool.EitherValue","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/bool\/isleft","title":"var isLeft: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/bool\/isright","title":"var isRight: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/bool\/leftvalue","title":"var leftValue: Self.LeftValue?","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/bool\/rightvalue","title":"var rightValue: Self.RightValue?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/collapse(_:)-7a5ni","title":"func collapse<T>(((Self.LeftValue) throws -> T)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/collapse(_:)-8je5e","title":"func collapse<T>(((Self.RightValue) throws -> T)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/collapse(_:_:)","title":"func collapse<T, U>(((Self.LeftValue) throws -> T), ((Self.RightValue) throws -> U)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/collapse(_:do:)","title":"func collapse<T, U>(((Self.LeftValue) throws -> T), do: @autoclosure () throws -> U) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/collapse(do:_:)","title":"func collapse<T, U>(do: @autoclosure () throws -> T, ((Self.RightValue) throws -> U)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/collapse(do:do:)","title":"func collapse<T, U>(do: @autoclosure () throws -> T, do: @autoclosure () throws -> U) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/filter(_:_:)","title":"func filter(((Self.LeftValue) throws -> Bool), ((Self.RightValue) throws -> Bool)) rethrows -> Self.EitherValue?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/filterormap(_:_:)","title":"func filterOrMap<T>(((Self.LeftValue) throws -> Bool), ((Self.RightValue) throws -> T)) rethrows -> Either<Self.LeftValue, T>?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/flatmap(left:right:)","title":"func flatMap<T, U>(left: ((Self.LeftValue) throws -> T?), right: ((Self.RightValue) throws -> U?)) rethrows -> Either<T, U>?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/map(_:_:)","title":"func map<T, U>(((Self.LeftValue) throws -> T), ((Self.RightValue) throws -> U)) rethrows -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/map(left:)","title":"func map<T>(left: ((Self.LeftValue) throws -> T)) rethrows -> Either<T, Self.RightValue>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/map(left:right:)","title":"func map<T, U>(left: ((Self.LeftValue) throws -> T), right: ((Self.RightValue) throws -> U)) rethrows -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/map(right:)","title":"func map<T>(right: ((Self.RightValue) throws -> T)) rethrows -> Either<Self.LeftValue, T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/mapleft(_:)","title":"func mapLeft<T>(((Self.LeftValue) throws -> T)) rethrows -> Either<T, Self.RightValue>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/mapright(_:)","title":"func mapRight<T>(((Self.RightValue) throws -> T)) rethrows -> Either<Self.LeftValue, T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/reduce(_:)-4jhfh","title":"func reduce(((Self.LeftValue) throws -> Self.RightValue)) rethrows -> Self.RightValue","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/reduce(_:)-51xza","title":"func reduce(((Self.RightValue) throws -> Self.LeftValue)) rethrows -> Self.LeftValue","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/reduce(_:_:)-216dc","title":"func reduce<T>(@autoclosure () throws -> T, ((Self.RightValue) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/reduce(_:_:)-4x118","title":"func reduce<T>(@autoclosure () throws -> T, @autoclosure () throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/reduce(_:_:)-74gjk","title":"func reduce<T>(((Self.LeftValue) throws -> T), ((Self.RightValue) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/reduce(_:_:)-a47t","title":"func reduce<T>(((Self.LeftValue) throws -> T), @autoclosure () throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/reduce(left:right:)","title":"func reduce<T>(left: ((Self.LeftValue) throws -> T), right: ((Self.RightValue) throws -> T)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/bool\/eithervalueconvertible-implementations","title":"EitherValueConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/bool\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-1d8b8","title":"init(NSDecimalNumber)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-53izk","title":"init(Decimal)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-5j2bg","title":"init(CGFloat)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-86xdb","title":"init(Double)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-ffxf","title":"init(Float)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-ri5e","title":"init(CGFloat)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/bool\/floatingpointinitiable-implementations","title":"FloatingPointInitiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/nativefloatingpointvalue","title":"var nativeFloatingPointValue: NativeFloatingPoint","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/tobool()","title":"func toBool() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/tocgfloat()","title":"func toCGFloat() -> CGFloat","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/todecimal()","title":"func toDecimal() -> Decimal","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/todouble()","title":"func toDouble() -> Double","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/tofloat()","title":"func toFloat() -> Float","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/toint()","title":"func toInt() -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/toint16()","title":"func toInt16() -> Int16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/toint32()","title":"func toInt32() -> Int32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/toint64()","title":"func toInt64() -> Int64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/toint8()","title":"func toInt8() -> Int8","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/tonsnumber()","title":"func toNSNumber() -> NSNumber","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/tonativefloatingpointvalue()","title":"func toNativeFloatingPointValue() -> NativeFloatingPoint","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/touint()","title":"func toUInt() -> UInt","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/touint16()","title":"func toUInt16() -> UInt16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/touint32()","title":"func toUInt32() -> UInt32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/touint64()","title":"func toUInt64() -> UInt64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/touint8()","title":"func toUInt8() -> UInt8","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/bool\/numberconvertible-implementations","title":"NumberConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-18ot6","title":"init(Int64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-1q1n3","title":"init(Int32)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-1t6lp","title":"init(Int8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-44pwl","title":"init(Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-5rwwf","title":"init(Int8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-7zw1c","title":"init(Int16)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/bool\/signedintegerinitiable-implementations","title":"SignedIntegerInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/bool\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/bool\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/bool\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/bool\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/bool\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-3urfw","title":"init(UInt8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-50c77","title":"init(UInt64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-5gsjg","title":"init(UInt16)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-6v0sf","title":"init(UInt8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-7dekq","title":"init(UInt32)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/bool\/init(_:)-7rpgf","title":"init(UInt)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/bool\/unsignedintegerinitiable-implementations","title":"UnsignedIntegerInitiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/bool","title":"Bool","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/character\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/character\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/character\/decodeifpresent(from:)-1in1a","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/character\/decodeifpresent(from:)-60s0c","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/character\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/character\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/character\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/character\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/character\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/character\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/character\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/character\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/character\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/character\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/character\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/character\/value-swift.property","title":"var value: Character.Value","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/character\/mutablewrapper-implementations","title":"MutableWrapper Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/character\/random()","title":"static func random() -> Character","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/character\/randomnable-implementations","title":"Randomnable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/character\/stringvalue","title":"var stringValue: String","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/character\/stringconvertible-implementations","title":"StringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(stringvalue:)","title":"init?(stringValue: String)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/character\/stringinitializable-implementations","title":"StringInitializable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(managedutf8string:)","title":"init?<P>(managedUTF8String: P?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(managedutf8string:count:)","title":"init?<P>(managedUTF8String: P?, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(unmanagedutf8string:)","title":"init?<P>(unmanagedUTF8String: P?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(unmanagedutf8string:count:)","title":"init?<P>(unmanagedUTF8String: P?, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(utf8character:)","title":"init(utf8Character: CChar)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(utf8string:)-2hrrk","title":"init?<P>(utf8String: P?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(utf8string:)-3eqk5","title":"init?(utf8String: NullTerminatedUTF8String?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(utf8string:)-97iin","title":"init<P>(utf8String: P)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(utf8string:)-y18f","title":"init(utf8String: NullTerminatedUTF8String)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(utf8string:count:)-4rozh","title":"init<P>(utf8String: P, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(utf8string:count:)-9syi8","title":"init?<P>(utf8String: P?, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(utf8string:count:deallocate:)-5mafn","title":"init?(utf8String: NullTerminatedUTF8String?, count: Int, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(utf8string:count:deallocate:)-9qzha","title":"init(utf8String: NullTerminatedUTF8String, count: Int, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(utf8string:count:managed:)-2k9v3","title":"init(utf8String: NullTerminatedUTF8String, count: Int, managed: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(utf8string:count:managed:)-3rb63","title":"init?(utf8String: NullTerminatedUTF8String?, count: Int, managed: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(utf8string:deallocate:)-36iya","title":"init(utf8String: NullTerminatedUTF8String, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(utf8string:deallocate:)-3f1vr","title":"init?(utf8String: NullTerminatedUTF8String?, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(utf8string:deallocate:)-4zlrd","title":"init?<P>(utf8String: P?, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(utf8string:deallocate:)-7k8dv","title":"init<P>(utf8String: P, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(utf8string:managed:)-88jug","title":"init(utf8String: NullTerminatedUTF8String, managed: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(utf8string:managed:)-88p6m","title":"init?(utf8String: NullTerminatedUTF8String?, managed: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(validatingutf8string:)","title":"init?(validatingUTF8String: NullTerminatedUTF8String?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(validatingutf8string:deallocate:)","title":"init?(validatingUTF8String: NullTerminatedUTF8String?, deallocate: Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/character\/mutatingwithmutablecstring(_:)","title":"func mutatingWithMutableCString<T>(((NullTerminatedUTF8String) throws -> T)) rethrows -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/character\/nullterminatedutf8string()","title":"func nullTerminatedUTF8String() -> NullTerminatedUTF8String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/character\/withmutablecstring(_:)","title":"func withMutableCString<T>(((NullTerminatedUTF8String) throws -> T)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/character\/utf8representable-implementations","title":"UTF8Representable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/character\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/character\/value-swift.typealias","title":"Character.Value","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/character\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/character\/init(_:)","title":"init(Character.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/character\/wrapper-implementations","title":"Wrapper Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/character\/init()","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/character\/_placeholderinitiable-implementations","title":"_PlaceholderInitiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/character","title":"Character","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/closedrange\/init(bounds:)","title":"init(bounds: (lower: Bound, upper: Bound))","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/closedrange\/init(uncheckedbounds:)","title":"init(uncheckedBounds: (lower: Self.Bound, upper: Self.Bound))","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/closedrange\/boundinitiablerangeprotocol-implementations","title":"BoundInitiableRangeProtocol Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/closedrange\/init(_:)","title":"init(Self.Bound)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/closedrange\/init(lowerbound:upperbound:)","title":"init(lowerBound: Self.Bound, upperBound: Self.Bound)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/closedrange\/clampinplace(to:)","title":"func clampInPlace(to: Self)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/closedrange\/contains(_:)-59bzh","title":"func contains(Range<Bound>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/closedrange\/contains(_:)-717t9","title":"func contains(ClosedRange<Bound>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/closedrange\/overlaps(with:)","title":"func overlaps(with: Self) -> Bool","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/closedrange\/rangeprotocol-implementations","title":"RangeProtocol Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/closedrange","title":"ClosedRange","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectiondifference\/tocontiguouscollectiondifference()","title":"func toContiguousCollectionDifference() -> ContiguousCollectionDifference<[ChangeElement]>","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/collectiondifference","title":"CollectionDifference","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/init(update:)","title":"init(update: CollectionOfOne<Element>.Difference.Change?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/update","title":"let update: CollectionOfOne<Element>.Difference.Change?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/map(_:)","title":"func map<T>((Element) throws -> T) rethrows -> CollectionOfOne<T>.Difference","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/change\/update(from:to:)","title":"case update(from: Element, to: Element)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/change\/newvalue","title":"var newValue: Element","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/change\/oldvalue","title":"var oldValue: Element","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/change\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/change\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/change\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/change\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/change\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/change\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/change\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/change\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/change\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/change\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/change\/memoize(with:_:)-1v36i","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/change\/memoize(with:_:)-4twom","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/change\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/change","title":"CollectionOfOne.Difference.Change","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/memoize(with:_:)-78x7j","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/memoize(with:_:)-9vh3z","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference","title":"CollectionOfOne.Difference","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/applyunconditionally(_:)-6pvep","title":"func applyUnconditionally(CollectionOfOne<Element>.Difference)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/applyunconditionally(_:)-9c1ia","title":"func applyUnconditionally(Self.Difference) throws","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/applying(_:)","title":"func applying(CollectionOfOne<Element>.Difference) -> CollectionOfOne<Element>?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/difference(from:)","title":"func difference(from: CollectionOfOne<Element>) -> CollectionOfOne<Element>.Difference","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/collectionofone\/diffable-implementations","title":"Diffable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/collectionofone\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/join(_:)","title":"func join(Self) -> Self.JointSequenceType","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/jointsequencetype","title":"CollectionOfOne.JointSequenceType","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/collectionofone\/joinablecollection-implementations","title":"JoinableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/replace(allof:with:)","title":"func replace(allOf: Self.Element, with: Self.Element)","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/collectionofone\/mutablesequence-implementations","title":"MutableSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/value-swift.property","title":"var value: CollectionOfOne<Element>.Value","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/collectionofone\/mutablewrapper-implementations","title":"MutableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/nondestructivecount","title":"var nonDestructiveCount: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/collectionofone\/nondestroyingsequence-implementations","title":"NonDestroyingSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/first","title":"var first: Element","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/last","title":"var last: Element","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/collectionofone\/nonemptysequence-implementations","title":"NonEmptySequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/collectionofone\/value-swift.typealias","title":"CollectionOfOne.Value","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/collectionofone\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/collectionofone","title":"CollectionOfOne","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/withbufferpointer(_:)","title":"func withBufferPointer<BP, T>(((BP) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/withunsafebufferpointer(_:)","title":"func withUnsafeBufferPointer<T>(((UnsafeBufferPointer<Self.Element>) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/contiguousstorage-implementations","title":"ContiguousStorage Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/-(_:_:)-1req7","title":"static func - (Self, Self.Element) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/-(_:_:)-8gtv1","title":"static func - <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/-=(_:_:)-5uii6","title":"static func -= (inout Self, Self.Element)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/-=(_:_:)-73xge","title":"static func -= <S>(inout Self, S)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/filterinplace(_:)","title":"func filterInPlace(((Self.Element) throws -> Bool)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/remove(contentsof:)-8pkjw","title":"func remove<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/remove(contentsof:)-cbz0","title":"func remove<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/removeall()-3nelu","title":"func removeAll()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/removeall()-8dlds","title":"func removeAll()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/removeall(of:)","title":"func removeAll(of: Self.Element)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/removing(allof:)","title":"func removing(allOf: Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/removing(contentsof:)-13x0f","title":"func removing<S>(contentsOf: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/removing(contentsof:)-2sr3t","title":"func removing<C>(contentsOf: C) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/destructivelymutablesequence-implementations","title":"DestructivelyMutableSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/applyunconditionally(_:)","title":"func applyUnconditionally(Self.Difference) throws","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/difference","title":"ContiguousArray.Difference","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/diffable-implementations","title":"Diffable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/+(_:_:)-2k7el","title":"static func + (Self.Element, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/+(_:_:)-30kyd","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/+(_:_:)-3crwh","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/+(_:_:)-65heq","title":"static func + <S>(S, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/+(_:_:)-7vjtb","title":"static func + (Self, Self.Element) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/+=(_:_:)-3fskc","title":"static func += <S>(inout Self, S)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/+=(_:_:)-3lq75","title":"static func += (inout Self, Self.Element)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/+=(_:_:)-5fq6w","title":"static func += <S>(inout Self, S)","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/extensiblerangereplaceablecollection-implementations","title":"ExtensibleRangeReplaceableCollection Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/+(_:_:)-2wcxk","title":"static func + (Self, Self.Element) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/+(_:_:)-493z6","title":"static func + <S>(S, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/+(_:_:)-4lcqs","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/+(_:_:)-60e9s","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/+(_:_:)-9mpx5","title":"static func + (Self.Element, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/+=(_:_:)-6jure","title":"static func += <S>(inout Self, S)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/+=(_:_:)-6rqkl","title":"static func += <S>(inout Self, S)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/+=(_:_:)-8ryhl","title":"static func += (inout Self, Self.Element)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/append(contentsof:)","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/appending(_:)","title":"func appending(Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/appending(contentsof:)-3q2dc","title":"func appending<S>(contentsOf: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/appending(contentsof:)-8r1yx","title":"func appending<S>(contentsOf: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/insert(_:)","title":"func insert(Self.Element)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/insert(contentsof:)-4pbf3","title":"func insert<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/insert(contentsof:)-5oj4c","title":"func insert<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/insert(contentsof:)-8yvy4","title":"func insert<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/inserting(_:)","title":"func inserting(Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/inserting(contentsof:)-19fpr","title":"func inserting<S>(contentsOf: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/inserting(contentsof:)-6bjm7","title":"func inserting<S>(contentsOf: S) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/extensiblesequence-implementations","title":"ExtensibleSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/join(_:)","title":"func join(Self) -> Self.JointSequenceType","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/joinablecollection-implementations","title":"JoinableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/withmutablebufferpointer(_:)","title":"func withMutableBufferPointer<BP, T>(((BP) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/withunsafemutablebufferpointer(_:)","title":"func withUnsafeMutableBufferPointer<T>(((UnsafeMutableBufferPointer<Self.Element>) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/mutablecontiguousstorage-implementations","title":"MutableContiguousStorage Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/replace(allof:with:)","title":"func replace(allOf: Self.Element, with: Self.Element)","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/mutablesequence-implementations","title":"MutableSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/nondestructivecount","title":"var nonDestructiveCount: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/nondestroyingsequence-implementations","title":"NonDestroyingSequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/init(_:count:)","title":"init<S>(S, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/init(element:)","title":"init(element: Self.Element)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/init(iterator:)-1a6yr","title":"init<I>(iterator: inout I)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/init(iterator:)-23dx","title":"init<I>(iterator: I)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/init(iterator:count:)-1154j","title":"init<I>(iterator: inout I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/init(iterator:count:)-6a1ws","title":"init<I>(iterator: I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/init(nosequence:)","title":"init(noSequence: ())","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/init(repeating:count:)-193bv","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/init(repeating:count:)-5ybb","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/init(repeating:count:)-6yrqd","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/init(repeating:count:)-9hu6p","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/prependall(_:)","title":"func prependAll<S>(Self.Element) -> S","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/contiguousarray\/sequenceinitiablesequence-implementations","title":"SequenceInitiableSequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/contiguousarray","title":"ContiguousArray","type":"extension"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/init(_:)-4myr4","title":"init<T>(HeterogeneousDictionary<T>)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/toanycodable()","title":"func toAnyCodable() throws -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/dictionary\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/filterinplace(_:)","title":"func filterInPlace(((Self.Element) throws -> Bool)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/removeall()","title":"func removeAll()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/removeall(where:)","title":"func removeAll(where: ((Dictionary<Key, Value>.Element) throws -> Bool)) rethrows","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/dictionary\/destructivelymutablesequence-implementations","title":"DestructivelyMutableSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/contains(key:)","title":"func contains(key: Self.DictionaryKey) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/value(forkey:)","title":"func value(forKey: Self.DictionaryKey) -> Self.DictionaryValue?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/subscript(_:)-7wxkj","title":"subscript(Self.DictionaryKey?) -> Self.DictionaryValue?","type":"subscript"}],"path":"\/documentation\/diagnostics\/swift\/dictionary\/dictionaryprotocol-implementations","title":"DictionaryProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/applyunconditionally(_:)-3c27l","title":"func applyUnconditionally(Self.Difference) throws","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/applyunconditionally(_:)-65mzu","title":"func applyUnconditionally(Dictionary<Key, Value>.Difference)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/applying(_:)","title":"func applying(Dictionary<Key, Value>.Difference) -> Dictionary<Key, Value>?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/difference(from:)","title":"func difference(from: Dictionary<Key, Value>) -> Dictionary<Key, Value>.Difference","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/difference","title":"Dictionary.Difference","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/dictionary\/diffable-implementations","title":"Diffable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/remove(_:)","title":"func remove(Dictionary<Key, Value>.Element) -> Dictionary<Key, Value>.Element?","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/dictionary\/elementremoveabledestructivelymutablesequence-implementations","title":"ElementRemoveableDestructivelyMutableSequence Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/+(_:_:)-2pwn","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/+(_:_:)-3sgfq","title":"static func + <S>(S, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/+(_:_:)-7dhyx","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/+(_:_:)-80c8v","title":"static func + (Self, Self.Element) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/+(_:_:)-tpjf","title":"static func + (Self.Element, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/+=(_:_:)-6nfnh","title":"static func += (inout Self, Self.Element)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/+=(_:_:)-6zg8q","title":"static func += <S>(inout Self, S)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/+=(_:_:)-9xgtd","title":"static func += <S>(inout Self, S)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/append(_:)","title":"func append(Dictionary<Key, Value>.Element)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/append(contentsof:)-8lwtp","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/append(contentsof:)-vmjk","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/appending(_:)","title":"func appending(Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/appending(contentsof:)","title":"func appending<S>(contentsOf: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/insert(_:)","title":"func insert(Dictionary<Key, Value>.Element)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/insert(contentsof:)-3tp01","title":"func insert<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/insert(contentsof:)-4ct9p","title":"func insert<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/insert(contentsof:)-882lx","title":"func insert<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/inserting(_:)","title":"func inserting(Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/inserting(contentsof:)","title":"func inserting<S>(contentsOf: S) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/dictionary\/extensiblesequence-implementations","title":"ExtensibleSequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/init(uniquekeyswithvalues:)","title":"init(uniqueKeysWithValues: some KeyedValues<Key, Value>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/unorderedmapvalues(_:)","title":"func unorderedMapValues<T>((Value) throws -> T) rethrows -> Dictionary<Key, T>","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/dictionary\/keyedvalues-implementations","title":"KeyedValues Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/removevalue(forkey:)-7bwk1","title":"func removeValue(forKey: any Any.Type)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/removevalue(forkey:)-7o7yn","title":"func removeValue(forKey: Self.DictionaryKey) -> Self.DictionaryValue?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/removevalues(forkeys:)","title":"func removeValues(forKeys: some Sequence<Self.DictionaryKey>)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/removingvalue(forkey:)","title":"func removingValue(forKey: Self.DictionaryKey) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/removingvalues(forkeys:)","title":"func removingValues(forKeys: some Sequence<Self.DictionaryKey>) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/setvalue(_:forkey:)","title":"func setValue(Self.DictionaryValue, forKey: Self.DictionaryKey)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/updatevalue(_:forkey:)","title":"func updateValue(Self.DictionaryValue, forKey: Self.DictionaryKey) -> Self.DictionaryValue?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/subscript(_:)-5azxk","title":"subscript(Self.DictionaryKey?) -> Self.DictionaryValue?","type":"subscript"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/subscript(_:)-yxlt","title":"subscript(any Any.Type) -> Self.DictionaryValue?","type":"subscript"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/subscript(_:defaultinplace:)","title":"subscript(Self.DictionaryKey, defaultInPlace _: @autoclosure () -> Self.DictionaryValue) -> Self.DictionaryValue","type":"subscript"}],"path":"\/documentation\/diagnostics\/swift\/dictionary\/mutabledictionaryprotocol-implementations","title":"MutableDictionaryProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/nondestructivecount","title":"var nonDestructiveCount: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/dictionary\/nondestroyingsequence-implementations","title":"NonDestroyingSequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/init(_:)-gtun","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/init(_:count:)","title":"init<S>(S, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/init(element:)","title":"init(element: Self.Element)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/init(iterator:)-97vst","title":"init<I>(iterator: I)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/init(iterator:)-9s650","title":"init<I>(iterator: inout I)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/init(iterator:count:)-2qywe","title":"init<I>(iterator: I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/init(iterator:count:)-6vca9","title":"init<I>(iterator: inout I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/init(nosequence:)","title":"init(noSequence: ())","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/init(repeating:count:)-1cgqs","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/init(repeating:count:)-3dp43","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/dictionary\/prependall(_:)","title":"func prependAll<S>(Self.Element) -> S","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/dictionary\/sequenceinitiablesequence-implementations","title":"SequenceInitiableSequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/dictionary","title":"Dictionary","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/toanycodable()","title":"func toAnyCodable() -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/double\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/init(_:)-1bkxs","title":"init(DarwinBoolean)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/double\/init(_:)-1byjk","title":"init(Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/double\/init(_:)-px1a","title":"init(ObjCBool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/double\/init(boolean:)","title":"init<T>(boolean: T)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/double\/booleaninitiable-implementations","title":"BooleanInitiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/isminimumormaximum","title":"var isMinimumOrMaximum: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/maximum","title":"static var maximum: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/double\/minimum","title":"static var minimum: Self","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/double\/bounded-implementations","title":"Bounded Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/random()","title":"static func random() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/random(maximum:)","title":"static func random(maximum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/random(minimum:)","title":"static func random(minimum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/random(minimum:maximum:)","title":"static func random(minimum: Double, maximum: Double) -> Double","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/random(minimum:maximum:excluding:)-5tg1a","title":"static func random(minimum: Self, maximum: Self, excluding: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/random(minimum:maximum:excluding:)-udir","title":"static func random(minimum: Self, maximum: Self, excluding: Range<Self>) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/double\/boundedrandomnable-implementations","title":"BoundedRandomnable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/bigendianview","title":"var bigEndianView: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/double\/littleendianview","title":"var littleEndianView: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/swapbyteorder()","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/swapbyteorderbigtohost()","title":"func swapByteOrderBigToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/swapbyteorderhosttobig()","title":"func swapByteOrderHostToBig()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/swapbyteorderhosttolittle()","title":"func swapByteOrderHostToLittle()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/swapbyteorderhosttoportable()","title":"func swapByteOrderHostToPortable()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/swapbyteorderlittletohost()","title":"func swapByteOrderLittleToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/swapbyteorderportabletohost()","title":"func swapByteOrderPortableToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/swappingbyteorder()","title":"func swappingByteOrder() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/swappingbyteorderbigtohost()","title":"func swappingByteOrderBigToHost() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/swappingbyteorderhosttobig()","title":"func swappingByteOrderHostToBig() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/swappingbyteorderhosttolittle()","title":"func swappingByteOrderHostToLittle() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/swappingbyteorderhosttoportable()","title":"func swappingByteOrderHostToPortable() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/swappingbyteorderlittletohost()","title":"func swappingByteOrderLittleToHost() -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/double\/byteorderswappable-implementations","title":"ByteOrderSwappable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/bytetupletype","title":"Double.ByteTupleType","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/double\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/iscontinuous","title":"static var isContinuous: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/double\/isdiscrete","title":"static var isDiscrete: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/double\/discreteorcontinuous-implementations","title":"DiscreteOrContinuous Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/double\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/init(_:)-1d8b6","title":"init(NSDecimalNumber)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/double\/init(_:)-53izq","title":"init(Decimal)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/double\/init(_:)-ri5g","title":"init(CGFloat)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/double\/init(floatliteral:)","title":"init(floatLiteral: Float)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/double\/floatingpointinitiable-implementations","title":"FloatingPointInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/init()","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/double\/initiable-implementations","title":"Initiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/init(unchecked:)","title":"init<N>(unchecked: N)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/ceiling","title":"var ceiling: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/double\/floor","title":"var floor: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/denormalize(_:_:)","title":"func denormalize(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/interpolate(_:_:)","title":"func interpolate(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/normalize(_:_:)","title":"func normalize(Self, Self) -> Self","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/lossless(from:)-49ueb","title":"static func lossless<N>(from: N) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/lossless(from:)-gwzz","title":"static func lossless(from: AnyNumber) throws -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/double\/number-implementations","title":"Number Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/nativefloatingpointvalue","title":"var nativeFloatingPointValue: NativeFloatingPoint","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/tobool()","title":"func toBool() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/tocgfloat()","title":"func toCGFloat() -> CGFloat","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/todecimal()","title":"func toDecimal() -> Decimal","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/todouble()","title":"func toDouble() -> Double","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/tofloat()","title":"func toFloat() -> Float","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/toint()","title":"func toInt() -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/toint16()","title":"func toInt16() -> Int16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/toint32()","title":"func toInt32() -> Int32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/toint64()","title":"func toInt64() -> Int64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/toint8()","title":"func toInt8() -> Int8","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/tonsnumber()","title":"func toNSNumber() -> NSNumber","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/tonativefloatingpointvalue()","title":"func toNativeFloatingPointValue() -> NativeFloatingPoint","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/touint()","title":"func toUInt() -> UInt","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/touint16()","title":"func toUInt16() -> UInt16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/touint32()","title":"func toUInt32() -> UInt32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/touint64()","title":"func toUInt64() -> UInt64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/touint8()","title":"func toUInt8() -> UInt8","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/double\/numberconvertible-implementations","title":"NumberConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/absolutevalue","title":"var absoluteValue: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/double\/isnegative","title":"var isNegative: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/canbesignminus","title":"static var canBeSignMinus: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/double\/signed-implementations","title":"Signed Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/init(_:)-18ot8","title":"init(Int64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/double\/init(_:)-1q1mx","title":"init(Int32)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/double\/init(_:)-5rww9","title":"init(Int8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/double\/init(_:)-7zw1i","title":"init(Int16)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/double\/signedintegerinitiable-implementations","title":"SignedIntegerInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/double\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/double\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/double\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/double\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/double\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/double\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/double\/init(_:)-3urfu","title":"init(UInt8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/double\/init(_:)-50c79","title":"init(UInt64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/double\/init(_:)-5gsje","title":"init(UInt16)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/double\/init(_:)-7deks","title":"init(UInt32)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/double\/unsignedintegerinitiable-implementations","title":"UnsignedIntegerInitiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/double","title":"Double","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/toanycodable()","title":"func toAnyCodable() -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/float\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/init(_:)-1bkxu","title":"init(DarwinBoolean)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/float\/init(_:)-1byjm","title":"init(Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/float\/init(_:)-px18","title":"init(ObjCBool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/float\/init(boolean:)","title":"init<T>(boolean: T)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/float\/booleaninitiable-implementations","title":"BooleanInitiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/isminimumormaximum","title":"var isMinimumOrMaximum: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/maximum","title":"static var maximum: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/float\/minimum","title":"static var minimum: Self","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/float\/bounded-implementations","title":"Bounded Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/random()","title":"static func random() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/random(maximum:)","title":"static func random(maximum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/random(minimum:)","title":"static func random(minimum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/random(minimum:maximum:)","title":"static func random(minimum: Float, maximum: Float) -> Float","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/random(minimum:maximum:excluding:)-5tg18","title":"static func random(minimum: Self, maximum: Self, excluding: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/random(minimum:maximum:excluding:)-udip","title":"static func random(minimum: Self, maximum: Self, excluding: Range<Self>) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/float\/boundedrandomnable-implementations","title":"BoundedRandomnable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/bigendianview","title":"var bigEndianView: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/float\/littleendianview","title":"var littleEndianView: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/swapbyteorder()","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/swapbyteorderbigtohost()","title":"func swapByteOrderBigToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/swapbyteorderhosttobig()","title":"func swapByteOrderHostToBig()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/swapbyteorderhosttolittle()","title":"func swapByteOrderHostToLittle()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/swapbyteorderhosttoportable()","title":"func swapByteOrderHostToPortable()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/swapbyteorderlittletohost()","title":"func swapByteOrderLittleToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/swapbyteorderportabletohost()","title":"func swapByteOrderPortableToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/swappingbyteorder()","title":"func swappingByteOrder() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/swappingbyteorderbigtohost()","title":"func swappingByteOrderBigToHost() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/swappingbyteorderhosttobig()","title":"func swappingByteOrderHostToBig() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/swappingbyteorderhosttolittle()","title":"func swappingByteOrderHostToLittle() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/swappingbyteorderhosttoportable()","title":"func swappingByteOrderHostToPortable() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/swappingbyteorderlittletohost()","title":"func swappingByteOrderLittleToHost() -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/float\/byteorderswappable-implementations","title":"ByteOrderSwappable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/bytetupletype","title":"Float.ByteTupleType","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/float\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/iscontinuous","title":"static var isContinuous: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/float\/isdiscrete","title":"static var isDiscrete: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/float\/discreteorcontinuous-implementations","title":"DiscreteOrContinuous Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/float\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/init(_:)-1d8b4","title":"init(NSDecimalNumber)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/float\/init(_:)-53izo","title":"init(Decimal)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/float\/init(_:)-ri5i","title":"init(CGFloat)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/float\/init(floatliteral:)","title":"init(floatLiteral: Float)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/float\/floatingpointinitiable-implementations","title":"FloatingPointInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/init()","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/float\/initiable-implementations","title":"Initiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/init(unchecked:)","title":"init<N>(unchecked: N)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/ceiling","title":"var ceiling: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/float\/floor","title":"var floor: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/denormalize(_:_:)","title":"func denormalize(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/interpolate(_:_:)","title":"func interpolate(Self, Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/normalize(_:_:)","title":"func normalize(Self, Self) -> Self","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/lossless(from:)-49ue9","title":"static func lossless<N>(from: N) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/lossless(from:)-gwzx","title":"static func lossless(from: AnyNumber) throws -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/float\/number-implementations","title":"Number Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/nativefloatingpointvalue","title":"var nativeFloatingPointValue: NativeFloatingPoint","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/tobool()","title":"func toBool() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/tocgfloat()","title":"func toCGFloat() -> CGFloat","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/todecimal()","title":"func toDecimal() -> Decimal","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/todouble()","title":"func toDouble() -> Double","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/tofloat()","title":"func toFloat() -> Float","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/toint()","title":"func toInt() -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/toint16()","title":"func toInt16() -> Int16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/toint32()","title":"func toInt32() -> Int32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/toint64()","title":"func toInt64() -> Int64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/toint8()","title":"func toInt8() -> Int8","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/tonsnumber()","title":"func toNSNumber() -> NSNumber","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/tonativefloatingpointvalue()","title":"func toNativeFloatingPointValue() -> NativeFloatingPoint","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/touint()","title":"func toUInt() -> UInt","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/touint16()","title":"func toUInt16() -> UInt16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/touint32()","title":"func toUInt32() -> UInt32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/touint64()","title":"func toUInt64() -> UInt64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/touint8()","title":"func toUInt8() -> UInt8","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/float\/numberconvertible-implementations","title":"NumberConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/absolutevalue","title":"var absoluteValue: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/float\/isnegative","title":"var isNegative: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/canbesignminus","title":"static var canBeSignMinus: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/float\/signed-implementations","title":"Signed Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/init(_:)-18ota","title":"init(Int64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/float\/init(_:)-1q1mz","title":"init(Int32)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/float\/init(_:)-5rwwb","title":"init(Int8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/float\/init(_:)-7zw1g","title":"init(Int16)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/float\/signedintegerinitiable-implementations","title":"SignedIntegerInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/float\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/float\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/float\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/float\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/float\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/float\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/float\/init(_:)-3urfs","title":"init(UInt8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/float\/init(_:)-50c7b","title":"init(UInt64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/float\/init(_:)-5gsjc","title":"init(UInt16)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/float\/init(_:)-7deku","title":"init(UInt32)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/float\/unsignedintegerinitiable-implementations","title":"UnsignedIntegerInitiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/float","title":"Float","type":"extension"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/hasher\/finalizedhashvalue(combining:_:)","title":"static func finalizedHashValue<T, U>(combining: T, U) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/hasher\/finalizedhashvalue(combining:_:_:)","title":"static func finalizedHashValue<T, U, V>(combining: T, U, V) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/hasher\/finalizedhashvalue(combining:_:_:_:)","title":"static func finalizedHashValue<T, U, V, W>(combining: T, U, V, W) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/hasher\/finalizedhashvalue(combiningcontentsof:)-69cw8","title":"static func finalizedHashValue<S>(combiningContentsOf: S) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/hasher\/finalizedhashvalue(combiningcontentsof:)-7v0pf","title":"static func finalizedHashValue<S>(combiningContentsOf: S) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/hasher\/finalizedhashvalue(combiningunorderedcontentsof:)","title":"static func finalizedHashValue<S>(combiningUnorderedContentsOf: S) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/hasher\/finalizedhashvalue(for:)","title":"static func finalizedHashValue<T>(for: T) -> Int","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/hasher","title":"Hasher","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/toanycodable()","title":"func toAnyCodable() -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/init(_:)-1bky5","title":"init(DarwinBoolean)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int\/init(_:)-1byjx","title":"init(Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int\/init(_:)-px0z","title":"init(ObjCBool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int\/init(boolean:)","title":"init<T>(boolean: T)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int\/booleaninitiable-implementations","title":"BooleanInitiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/isminimumormaximum","title":"var isMinimumOrMaximum: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/maximum","title":"static let maximum: Int","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int\/minimum","title":"static let minimum: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/int\/bounded-implementations","title":"Bounded Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/random()","title":"static func random() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/random(maximum:)","title":"static func random(maximum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/random(minimum:)","title":"static func random(minimum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/random(minimum:maximum:)","title":"static func random(minimum: Int, maximum: Int) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/random(minimum:maximum:excluding:)-5tg0z","title":"static func random(minimum: Self, maximum: Self, excluding: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/random(minimum:maximum:excluding:)-udj2","title":"static func random(minimum: Self, maximum: Self, excluding: Range<Self>) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int\/boundedrandomnable-implementations","title":"BoundedRandomnable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/bigendianview","title":"var bigEndianView: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int\/littleendianview","title":"var littleEndianView: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/swapbyteorder()-47dua","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/swapbyteorder()-5jl30","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/swapbyteorderbigtohost()","title":"func swapByteOrderBigToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/swapbyteorderhosttobig()","title":"func swapByteOrderHostToBig()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/swapbyteorderhosttolittle()","title":"func swapByteOrderHostToLittle()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/swapbyteorderlittletohost()","title":"func swapByteOrderLittleToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/swappingbyteorder()","title":"func swappingByteOrder() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/swappingbyteorderbigtohost()","title":"func swappingByteOrderBigToHost() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/swappingbyteorderhosttobig()","title":"func swappingByteOrderHostToBig() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/swappingbyteorderhosttolittle()","title":"func swappingByteOrderHostToLittle() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/swappingbyteorderhosttoportable()","title":"func swappingByteOrderHostToPortable() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/swappingbyteorderlittletohost()","title":"func swappingByteOrderLittleToHost() -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int\/byteorderswappable-implementations","title":"ByteOrderSwappable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/datadecodingstrategy","title":"Int.DataDecodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/int\/datadecodable-implementations","title":"DataDecodable Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/dataencodingstrategy","title":"Int.DataEncodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/int\/dataencodable-implementations","title":"DataEncodable Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/iscontinuous","title":"static var isContinuous: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int\/isdiscrete","title":"static var isDiscrete: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/int\/discreteorcontinuous-implementations","title":"DiscreteOrContinuous Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/int\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/init(_:)-1d8bj","title":"init(NSDecimalNumber)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int\/init(_:)-53izv","title":"init(Decimal)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int\/init(_:)-ri5l","title":"init(CGFloat)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int\/floatingpointinitiable-implementations","title":"FloatingPointInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/init()-6l1cc","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int\/init()-831av","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int\/initiable-implementations","title":"Initiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/bytetuple","title":"var byteTuple: NativeByteTupleType","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/bytetupletype","title":"Int.ByteTupleType","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/int\/nativewordsized-implementations","title":"NativeWordSized Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/init(unchecked:)","title":"init<N>(unchecked: N)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/nativetype","title":"Int.NativeType","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/lossless(from:)-49uem","title":"static func lossless<N>(from: N) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/lossless(from:)-gwzm","title":"static func lossless(from: AnyNumber) throws -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int\/number-implementations","title":"Number Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/nativefloatingpointvalue","title":"var nativeFloatingPointValue: NativeFloatingPoint","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/tobool()","title":"func toBool() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/tocgfloat()","title":"func toCGFloat() -> CGFloat","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/todecimal()","title":"func toDecimal() -> Decimal","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/todouble()","title":"func toDouble() -> Double","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/tofloat()","title":"func toFloat() -> Float","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/toint()","title":"func toInt() -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/toint16()","title":"func toInt16() -> Int16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/toint32()","title":"func toInt32() -> Int32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/toint64()","title":"func toInt64() -> Int64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/toint8()","title":"func toInt8() -> Int8","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/tonsnumber()","title":"func toNSNumber() -> NSNumber","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/tonativefloatingpointvalue()","title":"func toNativeFloatingPointValue() -> NativeFloatingPoint","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/touint()","title":"func toUInt() -> UInt","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/touint16()","title":"func toUInt16() -> UInt16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/touint32()","title":"func toUInt32() -> UInt32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/touint64()","title":"func toUInt64() -> UInt64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/touint8()","title":"func toUInt8() -> UInt8","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int\/numberconvertible-implementations","title":"NumberConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/absolutevalue","title":"var absoluteValue: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int\/isnegative","title":"var isNegative: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/canbesignminus","title":"static var canBeSignMinus: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/int\/signed-implementations","title":"Signed Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/init(_:)-18osx","title":"init(Int64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int\/init(_:)-1q1ms","title":"init(Int32)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int\/init(_:)-5rww4","title":"init(Int8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int\/init(_:)-7zw1n","title":"init(Int16)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int\/signedintegerinitiable-implementations","title":"SignedIntegerInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/int\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int\/init(_:)-3urfr","title":"init(UInt8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int\/init(_:)-50c7c","title":"init(UInt64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int\/init(_:)-5gsjb","title":"init(UInt16)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int\/init(_:)-7dekh","title":"init(UInt32)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int\/unsignedintegerinitiable-implementations","title":"UnsignedIntegerInitiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/int","title":"Int","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/toanycodable()","title":"func toAnyCodable() -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int16\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init(_:)-6giub","title":"init(ObjCBool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init(_:)-84fzz","title":"init(DarwinBoolean)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init(_:)-8taeq","title":"init(Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init(boolean:)","title":"init<T>(boolean: T)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int16\/booleaninitiable-implementations","title":"BooleanInitiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/isminimumormaximum","title":"var isMinimumOrMaximum: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/maximum","title":"static let maximum: Int16","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int16\/minimum","title":"static let minimum: Int16","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/int16\/bounded-implementations","title":"Bounded Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/random()","title":"static func random() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/random(maximum:)","title":"static func random(maximum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/random(minimum:)","title":"static func random(minimum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/random(minimum:maximum:)","title":"static func random(minimum: Int16, maximum: Int16) -> Int16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/random(minimum:maximum:excluding:)-4nuyx","title":"static func random(minimum: Self, maximum: Self, excluding: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/random(minimum:maximum:excluding:)-95bm","title":"static func random(minimum: Self, maximum: Self, excluding: Range<Self>) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int16\/boundedrandomnable-implementations","title":"BoundedRandomnable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/bigendianview","title":"var bigEndianView: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int16\/littleendianview","title":"var littleEndianView: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/swapbyteorder()-2f7cm","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/swapbyteorder()-9ja7r","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/swapbyteorderbigtohost()","title":"func swapByteOrderBigToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/swapbyteorderhosttobig()","title":"func swapByteOrderHostToBig()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/swapbyteorderhosttolittle()","title":"func swapByteOrderHostToLittle()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/swapbyteorderlittletohost()","title":"func swapByteOrderLittleToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/swappingbyteorder()","title":"func swappingByteOrder() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/swappingbyteorderbigtohost()","title":"func swappingByteOrderBigToHost() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/swappingbyteorderhosttobig()","title":"func swappingByteOrderHostToBig() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/swappingbyteorderhosttolittle()","title":"func swappingByteOrderHostToLittle() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/swappingbyteorderhosttoportable()","title":"func swappingByteOrderHostToPortable() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/swappingbyteorderlittletohost()","title":"func swappingByteOrderLittleToHost() -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int16\/byteorderswappable-implementations","title":"ByteOrderSwappable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/bytetupletype","title":"Int16.ByteTupleType","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/int16\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/datadecodingstrategy","title":"Int16.DataDecodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/int16\/datadecodable-implementations","title":"DataDecodable Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/dataencodingstrategy","title":"Int16.DataEncodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/int16\/dataencodable-implementations","title":"DataEncodable Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/iscontinuous","title":"static var isContinuous: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int16\/isdiscrete","title":"static var isDiscrete: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/int16\/discreteorcontinuous-implementations","title":"DiscreteOrContinuous Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/int16\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init(_:)-3pxeq","title":"init(Decimal)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init(_:)-71a3j","title":"init(CGFloat)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init(_:)-93cfg","title":"init(NSDecimalNumber)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int16\/floatingpointinitiable-implementations","title":"FloatingPointInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init()-8de9n","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init()-ie3p","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int16\/initiable-implementations","title":"Initiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init(unchecked:)","title":"init<N>(unchecked: N)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/lossless(from:)-4n7qv","title":"static func lossless<N>(from: N) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/lossless(from:)-74f5u","title":"static func lossless(from: AnyNumber) throws -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int16\/number-implementations","title":"Number Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/nativefloatingpointvalue","title":"var nativeFloatingPointValue: NativeFloatingPoint","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/tobool()","title":"func toBool() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/tocgfloat()","title":"func toCGFloat() -> CGFloat","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/todecimal()","title":"func toDecimal() -> Decimal","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/todouble()","title":"func toDouble() -> Double","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/tofloat()","title":"func toFloat() -> Float","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/toint()","title":"func toInt() -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/toint16()","title":"func toInt16() -> Int16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/toint32()","title":"func toInt32() -> Int32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/toint64()","title":"func toInt64() -> Int64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/toint8()","title":"func toInt8() -> Int8","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/tonsnumber()","title":"func toNSNumber() -> NSNumber","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/tonativefloatingpointvalue()","title":"func toNativeFloatingPointValue() -> NativeFloatingPoint","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/touint()","title":"func toUInt() -> UInt","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/touint16()","title":"func toUInt16() -> UInt16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/touint32()","title":"func toUInt32() -> UInt32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/touint64()","title":"func toUInt64() -> UInt64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/touint8()","title":"func toUInt8() -> UInt8","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int16\/numberconvertible-implementations","title":"NumberConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/absolutevalue","title":"var absoluteValue: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int16\/isnegative","title":"var isNegative: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/canbesignminus","title":"static var canBeSignMinus: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/int16\/signed-implementations","title":"Signed Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init(_:)-47fn7","title":"init(Int16)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init(_:)-4tst5","title":"init(Int32)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init(_:)-6ltxl","title":"init(Int8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init(_:)-8wbxn","title":"init(Int64)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int16\/signedintegerinitiable-implementations","title":"SignedIntegerInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int16\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int16\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int16\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int16\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/int16\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init(_:)-2e8cx","title":"init(UInt32)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init(_:)-4m2h7","title":"init(UInt64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init(_:)-7k7p7","title":"init(UInt8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int16\/init(_:)-8y3n6","title":"init(UInt16)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int16\/unsignedintegerinitiable-implementations","title":"UnsignedIntegerInitiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/int16","title":"Int16","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/toanycodable()","title":"func toAnyCodable() -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int32\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init(_:)-6adz5","title":"init(ObjCBool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init(_:)-8akn9","title":"init(DarwinBoolean)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init(_:)-8lu9c","title":"init(Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init(boolean:)","title":"init<T>(boolean: T)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int32\/booleaninitiable-implementations","title":"BooleanInitiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/isminimumormaximum","title":"var isMinimumOrMaximum: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/maximum","title":"static let maximum: Int32","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int32\/minimum","title":"static let minimum: Int32","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/int32\/bounded-implementations","title":"Bounded Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/random()","title":"static func random() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/random(maximum:)","title":"static func random(maximum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/random(minimum:)","title":"static func random(minimum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/random(minimum:maximum:)","title":"static func random(minimum: Int32, maximum: Int32) -> Int32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/random(minimum:maximum:excluding:)-1ucg","title":"static func random(minimum: Self, maximum: Self, excluding: Range<Self>) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/random(minimum:maximum:excluding:)-4vb2j","title":"static func random(minimum: Self, maximum: Self, excluding: Self) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int32\/boundedrandomnable-implementations","title":"BoundedRandomnable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/bigendianview","title":"var bigEndianView: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int32\/littleendianview","title":"var littleEndianView: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/swapbyteorder()-3os1l","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/swapbyteorder()-9brst","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/swapbyteorderbigtohost()","title":"func swapByteOrderBigToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/swapbyteorderhosttobig()","title":"func swapByteOrderHostToBig()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/swapbyteorderhosttolittle()","title":"func swapByteOrderHostToLittle()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/swapbyteorderlittletohost()","title":"func swapByteOrderLittleToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/swappingbyteorder()","title":"func swappingByteOrder() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/swappingbyteorderbigtohost()","title":"func swappingByteOrderBigToHost() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/swappingbyteorderhosttobig()","title":"func swappingByteOrderHostToBig() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/swappingbyteorderhosttolittle()","title":"func swappingByteOrderHostToLittle() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/swappingbyteorderhosttoportable()","title":"func swappingByteOrderHostToPortable() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/swappingbyteorderlittletohost()","title":"func swappingByteOrderLittleToHost() -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int32\/byteorderswappable-implementations","title":"ByteOrderSwappable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/bytetupletype","title":"Int32.ByteTupleType","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/int32\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/datadecodingstrategy","title":"Int32.DataDecodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/int32\/datadecodable-implementations","title":"DataDecodable Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/dataencodingstrategy","title":"Int32.DataEncodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/int32\/dataencodable-implementations","title":"DataEncodable Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/iscontinuous","title":"static var isContinuous: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int32\/isdiscrete","title":"static var isDiscrete: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/int32\/discreteorcontinuous-implementations","title":"DiscreteOrContinuous Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/int32\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init(_:)-3iosg","title":"init(Decimal)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init(_:)-77mc5","title":"init(CGFloat)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init(_:)-9al1y","title":"init(NSDecimalNumber)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int32\/floatingpointinitiable-implementations","title":"FloatingPointInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init()-8jqmx","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init()-ov27","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int32\/initiable-implementations","title":"Initiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init(unchecked:)","title":"init<N>(unchecked: N)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/lossless(from:)-4unot","title":"static func lossless<N>(from: N) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/lossless(from:)-6wz0g","title":"static func lossless(from: AnyNumber) throws -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int32\/number-implementations","title":"Number Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/nativefloatingpointvalue","title":"var nativeFloatingPointValue: NativeFloatingPoint","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/tobool()","title":"func toBool() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/tocgfloat()","title":"func toCGFloat() -> CGFloat","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/todecimal()","title":"func toDecimal() -> Decimal","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/todouble()","title":"func toDouble() -> Double","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/tofloat()","title":"func toFloat() -> Float","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/toint()","title":"func toInt() -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/toint16()","title":"func toInt16() -> Int16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/toint32()","title":"func toInt32() -> Int32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/toint64()","title":"func toInt64() -> Int64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/toint8()","title":"func toInt8() -> Int8","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/tonsnumber()","title":"func toNSNumber() -> NSNumber","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/tonativefloatingpointvalue()","title":"func toNativeFloatingPointValue() -> NativeFloatingPoint","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/touint()","title":"func toUInt() -> UInt","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/touint16()","title":"func toUInt16() -> UInt16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/touint32()","title":"func toUInt32() -> UInt32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/touint64()","title":"func toUInt64() -> UInt64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/touint8()","title":"func toUInt8() -> UInt8","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int32\/numberconvertible-implementations","title":"NumberConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/absolutevalue","title":"var absoluteValue: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int32\/isnegative","title":"var isNegative: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/canbesignminus","title":"static var canBeSignMinus: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/int32\/signed-implementations","title":"Signed Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init(_:)-413e9","title":"init(Int16)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init(_:)-505a3","title":"init(Int32)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init(_:)-6fhhn","title":"init(Int8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init(_:)-8p0rt","title":"init(Int64)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int32\/signedintegerinitiable-implementations","title":"SignedIntegerInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int32\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int32\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int32\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int32\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/int32\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init(_:)-26pyb","title":"init(UInt32)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init(_:)-4sex5","title":"init(UInt64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init(_:)-7cywp","title":"init(UInt8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int32\/init(_:)-95ogw","title":"init(UInt16)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int32\/unsignedintegerinitiable-implementations","title":"UnsignedIntegerInitiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/int32","title":"Int32","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/toanycodable()","title":"func toAnyCodable() -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int64\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init(_:)-5zoum","title":"init(ObjCBool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init(_:)-806me","title":"init(DarwinBoolean)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init(_:)-93qvz","title":"init(Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init(boolean:)","title":"init<T>(boolean: T)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int64\/booleaninitiable-implementations","title":"BooleanInitiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/isminimumormaximum","title":"var isMinimumOrMaximum: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/maximum","title":"static let maximum: Int64","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int64\/minimum","title":"static let minimum: Int64","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/int64\/bounded-implementations","title":"Bounded Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/random()","title":"static func random() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/random(maximum:)","title":"static func random(maximum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/random(minimum:)","title":"static func random(minimum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/random(minimum:maximum:)","title":"static func random(minimum: Int64, maximum: Int64) -> Int64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/random(minimum:maximum:excluding:)-5c548","title":"static func random(minimum: Self, maximum: Self, excluding: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/random(minimum:maximum:excluding:)-c9sr","title":"static func random(minimum: Self, maximum: Self, excluding: Range<Self>) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int64\/boundedrandomnable-implementations","title":"BoundedRandomnable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/bigendianview","title":"var bigEndianView: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int64\/littleendianview","title":"var littleEndianView: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/swapbyteorder()-5k7vi","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/swapbyteorder()-91cjm","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/swapbyteorderbigtohost()","title":"func swapByteOrderBigToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/swapbyteorderhosttobig()","title":"func swapByteOrderHostToBig()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/swapbyteorderhosttolittle()","title":"func swapByteOrderHostToLittle()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/swapbyteorderlittletohost()","title":"func swapByteOrderLittleToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/swappingbyteorder()","title":"func swappingByteOrder() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/swappingbyteorderbigtohost()","title":"func swappingByteOrderBigToHost() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/swappingbyteorderhosttobig()","title":"func swappingByteOrderHostToBig() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/swappingbyteorderhosttolittle()","title":"func swappingByteOrderHostToLittle() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/swappingbyteorderhosttoportable()","title":"func swappingByteOrderHostToPortable() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/swappingbyteorderlittletohost()","title":"func swappingByteOrderLittleToHost() -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int64\/byteorderswappable-implementations","title":"ByteOrderSwappable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/bytetupletype","title":"Int64.ByteTupleType","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/int64\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/datadecodingstrategy","title":"Int64.DataDecodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/int64\/datadecodable-implementations","title":"DataDecodable Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/dataencodingstrategy","title":"Int64.DataEncodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/int64\/dataencodable-implementations","title":"DataEncodable Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/iscontinuous","title":"static var isContinuous: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int64\/isdiscrete","title":"static var isDiscrete: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/int64\/discreteorcontinuous-implementations","title":"DiscreteOrContinuous Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/int64\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init(_:)-37zrj","title":"init(Decimal)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init(_:)-7pk8u","title":"init(CGFloat)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init(_:)-906yd","title":"init(NSDecimalNumber)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int64\/floatingpointinitiable-implementations","title":"FloatingPointInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init()-7ypk","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init()-91obe","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int64\/initiable-implementations","title":"Initiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init(unchecked:)","title":"init<N>(unchecked: N)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/lossless(from:)-5bhqu","title":"static func lossless<N>(from: N) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/lossless(from:)-7e1wf","title":"static func lossless(from: AnyNumber) throws -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int64\/number-implementations","title":"Number Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/nativefloatingpointvalue","title":"var nativeFloatingPointValue: NativeFloatingPoint","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/tobool()","title":"func toBool() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/tocgfloat()","title":"func toCGFloat() -> CGFloat","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/todecimal()","title":"func toDecimal() -> Decimal","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/todouble()","title":"func toDouble() -> Double","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/tofloat()","title":"func toFloat() -> Float","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/toint()","title":"func toInt() -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/toint16()","title":"func toInt16() -> Int16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/toint32()","title":"func toInt32() -> Int32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/toint64()","title":"func toInt64() -> Int64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/toint8()","title":"func toInt8() -> Int8","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/tonsnumber()","title":"func toNSNumber() -> NSNumber","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/tonativefloatingpointvalue()","title":"func toNativeFloatingPointValue() -> NativeFloatingPoint","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/touint()","title":"func toUInt() -> UInt","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/touint16()","title":"func toUInt16() -> UInt16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/touint32()","title":"func toUInt32() -> UInt32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/touint64()","title":"func toUInt64() -> UInt64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/touint8()","title":"func toUInt8() -> UInt8","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int64\/numberconvertible-implementations","title":"NumberConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/absolutevalue","title":"var absoluteValue: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int64\/isnegative","title":"var isNegative: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/canbesignminus","title":"static var canBeSignMinus: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/int64\/signed-implementations","title":"Signed Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init(_:)-4i626","title":"init(Int16)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init(_:)-5i2wo","title":"init(Int32)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init(_:)-6wafo","title":"init(Int8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init(_:)-8zg6q","title":"init(Int64)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int64\/signedintegerinitiable-implementations","title":"SignedIntegerInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int64\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int64\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int64\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int64\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/int64\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init(_:)-1px28","title":"init(UInt32)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init(_:)-5ackq","title":"init(UInt64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init(_:)-6vw4q","title":"init(UInt8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int64\/init(_:)-8no4v","title":"init(UInt16)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int64\/unsignedintegerinitiable-implementations","title":"UnsignedIntegerInitiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/int64","title":"Int64","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(bitpattern:)","title":"init(bitPattern: Self.BitPattern)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/bitpattern-swift.property","title":"var bitPattern: Int8.BitPattern","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/bitpattern-swift.typealias","title":"Int8.BitPattern","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/int8\/bitpatternconvertible-implementations","title":"BitPatternConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(_:)-5tenq","title":"init(DarwinBoolean)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(_:)-8gs81","title":"init(Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(_:)-9d178","title":"init(ObjCBool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(boolean:)","title":"init<T>(boolean: T)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int8\/booleaninitiable-implementations","title":"BooleanInitiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/isminimumormaximum","title":"var isMinimumOrMaximum: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/maximum","title":"static let maximum: Int8","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int8\/minimum","title":"static let minimum: Int8","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/int8\/bounded-implementations","title":"Bounded Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/random()","title":"static func random() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/random(maximum:)","title":"static func random(maximum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/random(minimum:)","title":"static func random(minimum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/random(minimum:maximum:)","title":"static func random(minimum: Int8, maximum: Int8) -> Int8","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/random(minimum:maximum:excluding:)-2ev6r","title":"static func random(minimum: Self, maximum: Self, excluding: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/random(minimum:maximum:excluding:)-47bt3","title":"static func random(minimum: Self, maximum: Self, excluding: Range<Self>) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int8\/boundedrandomnable-implementations","title":"BoundedRandomnable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/bigendianview","title":"var bigEndianView: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int8\/littleendianview","title":"var littleEndianView: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/swapbyteorder()-15qmd","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/swapbyteorder()-47npy","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/swapbyteorderbigtohost()","title":"func swapByteOrderBigToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/swapbyteorderhosttobig()","title":"func swapByteOrderHostToBig()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/swapbyteorderhosttolittle()","title":"func swapByteOrderHostToLittle()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/swapbyteorderhosttoportable()","title":"func swapByteOrderHostToPortable()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/swapbyteorderlittletohost()","title":"func swapByteOrderLittleToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/swappingbyteorder()","title":"func swappingByteOrder() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/swappingbyteorderbigtohost()","title":"func swappingByteOrderBigToHost() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/swappingbyteorderhosttobig()","title":"func swappingByteOrderHostToBig() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/swappingbyteorderhosttolittle()","title":"func swappingByteOrderHostToLittle() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/swappingbyteorderhosttoportable()","title":"func swappingByteOrderHostToPortable() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/swappingbyteorderlittletohost()","title":"func swappingByteOrderLittleToHost() -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int8\/byteorderswappable-implementations","title":"ByteOrderSwappable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(_:)-egxv","title":"init(Bit)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/bytetupletype","title":"Int8.ByteTupleType","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/int8\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/datadecodingstrategy","title":"Int8.DataDecodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/int8\/datadecodable-implementations","title":"DataDecodable Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/dataencodingstrategy","title":"Int8.DataEncodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/int8\/dataencodable-implementations","title":"DataEncodable Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/iscontinuous","title":"static var isContinuous: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int8\/isdiscrete","title":"static var isDiscrete: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/int8\/discreteorcontinuous-implementations","title":"DiscreteOrContinuous Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/int8\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(_:)-1j326","title":"init(CGFloat)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(_:)-8xkcr","title":"init(NSDecimalNumber)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(_:)-8zq8i","title":"init(Decimal)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int8\/floatingpointinitiable-implementations","title":"FloatingPointInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init()-1e81u","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init()-6u0pf","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int8\/initiable-implementations","title":"Initiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(unchecked:)","title":"init<N>(unchecked: N)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/lossless(from:)-540hl","title":"static func lossless<N>(from: N) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/lossless(from:)-7hyvi","title":"static func lossless(from: AnyNumber) throws -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int8\/number-implementations","title":"Number Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/nativefloatingpointvalue","title":"var nativeFloatingPointValue: NativeFloatingPoint","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/tobool()","title":"func toBool() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/tocgfloat()","title":"func toCGFloat() -> CGFloat","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/todecimal()","title":"func toDecimal() -> Decimal","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/todouble()","title":"func toDouble() -> Double","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/tofloat()","title":"func toFloat() -> Float","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/toint()","title":"func toInt() -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/toint16()","title":"func toInt16() -> Int16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/toint32()","title":"func toInt32() -> Int32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/toint64()","title":"func toInt64() -> Int64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/toint8()","title":"func toInt8() -> Int8","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/tonsnumber()","title":"func toNSNumber() -> NSNumber","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/tonativefloatingpointvalue()","title":"func toNativeFloatingPointValue() -> NativeFloatingPoint","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/touint()","title":"func toUInt() -> UInt","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/touint16()","title":"func toUInt16() -> UInt16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/touint32()","title":"func toUInt32() -> UInt32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/touint64()","title":"func toUInt64() -> UInt64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/touint8()","title":"func toUInt8() -> UInt8","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/int8\/numberconvertible-implementations","title":"NumberConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/absolutevalue","title":"var absoluteValue: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int8\/isnegative","title":"var isNegative: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/canbesignminus","title":"static var canBeSignMinus: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/int8\/signed-implementations","title":"Signed Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(_:)-3t46u","title":"init(Int16)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(_:)-4tf57","title":"init(Int8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(_:)-5bpl5","title":"init(Int64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(_:)-8et8p","title":"init(Int32)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int8\/signedintegerinitiable-implementations","title":"SignedIntegerInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int8\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/int8\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int8\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/int8\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/int8\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(_:)-2eq0x","title":"init(UInt8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(_:)-2fqym","title":"init(UInt64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(_:)-3c1a5","title":"init(UInt32)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/int8\/init(_:)-75j7","title":"init(UInt16)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/int8\/unsignedintegerinitiable-implementations","title":"UnsignedIntegerInitiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/int8","title":"Int8","type":"extension"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/joinedsequence\/init(base:)","title":"init(base: Base)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/joinedsequence","title":"JoinedSequence","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/keyvaluepairs\/init()","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/keyvaluepairs\/initiable-implementations","title":"Initiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/keyvaluepairs\/init(uniquekeyswithvalues:)","title":"init(uniqueKeysWithValues: some KeyedValues<Key, Value>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/keyvaluepairs\/unorderedmapvalues(_:)","title":"func unorderedMapValues<T>((Value) throws -> T) rethrows -> Dictionary<Key, T>","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/keyvaluepairs\/keyedvalues-implementations","title":"KeyedValues Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/keyvaluepairs\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/keyvaluepairs\/init(_:count:)","title":"init<S>(S, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/keyvaluepairs\/init(element:)","title":"init(element: Self.Element)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/keyvaluepairs\/init(iterator:)-3alj5","title":"init<I>(iterator: inout I)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/keyvaluepairs\/init(iterator:)-du1n","title":"init<I>(iterator: I)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/keyvaluepairs\/init(iterator:count:)-5q5iq","title":"init<I>(iterator: inout I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/keyvaluepairs\/init(iterator:count:)-641ea","title":"init<I>(iterator: I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/keyvaluepairs\/init(nosequence:)","title":"init(noSequence: ())","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/keyvaluepairs\/init(repeating:count:)-25q64","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/keyvaluepairs\/init(repeating:count:)-2nhic","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/keyvaluepairs\/prependall(_:)","title":"func prependAll<S>(Self.Element) -> S","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/keyvaluepairs\/sequenceinitiablesequence-implementations","title":"SequenceInitiableSequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/keyvaluepairs","title":"KeyValuePairs","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/keyeddecodingcontainer\/decode(_:forkey:)-4k4bt","title":"func decode<T>(BoolDecodingDefault<T>.Type, forKey: KeyedDecodingContainer<K>.Key) throws -> BoolDecodingDefault<T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/keyeddecodingcontainer\/decode(_:forkey:)-4tf8y","title":"func decode<T>(LossyCoding<T>.Type, forKey: KeyedDecodingContainer<K>.Key) throws -> LossyCoding<T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/keyeddecodingcontainer\/decode(_:forkey:)-5t8pj","title":"func decode<T>(NonCodingProperty<T>.Type, forKey: KeyedDecodingContainer<K>.Key) throws -> NonCodingProperty<T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/keyeddecodingcontainer\/decode(_:forkey:)-6mlqt","title":"func decode<T>(FailableCoding<T>.Type, forKey: KeyedDecodingContainer<K>.Key) throws -> FailableCoding<T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/keyeddecodingcontainer\/decode(_:forkey:)-7q4bf","title":"func decode<C>(DefaultEmptyCollection<C>.Type, forKey: KeyedDecodingContainer<K>.Key) throws -> DefaultEmptyCollection<C>","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/keyeddecodingcontainer","title":"KeyedDecodingContainer","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/lazymapsequence\/base","title":"var base: Base","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/lazymapsequence","title":"LazyMapSequence","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/lazysequence\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<LazySequence<Base>.Element, T>) -> LazyMapSequence<Base, T>","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/lazysequence","title":"LazySequence","type":"extension"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/mirror\/dynamicmemberlookup\/key","title":"Mirror.DynamicMemberLookup.Key","type":"struct"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/mirror\/dynamicmemberlookup\/subscript(dynamicmember:)","title":"subscript(dynamicMember _: String) -> Mirror.DynamicMemberLookup.Key","type":"subscript"}],"path":"\/documentation\/diagnostics\/swift\/mirror\/dynamicmemberlookup","title":"Mirror.DynamicMemberLookup","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/mirror\/init(_:displaystyle:ancestorrepresentation:children:)","title":"init<Subject>(Subject, displayStyle: Mirror.DisplayStyle?, ancestorRepresentation: Mirror.AncestorRepresentation, children: () -> KeyValuePairs<String, Any?>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/mirror\/dictionaryrepresentation","title":"var dictionaryRepresentation: [String : Any]","type":"property"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/mirror\/subscript(keypath:)","title":"subscript(keyPath _: KeyPath<Mirror.DynamicMemberLookup, Mirror.DynamicMemberLookup.Key>) -> Any?","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/mirror\/contains(key:)","title":"func contains(key: Self.DictionaryKey) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/mirror\/value(forkey:)","title":"func value(forKey: Self.DictionaryKey) -> Self.DictionaryValue?","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/mirror\/subscript(_:)","title":"subscript(String) -> Any?","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/mirror\/dictionarykey","title":"Mirror.DictionaryKey","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/mirror\/dictionaryprotocol-implementations","title":"DictionaryProtocol Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/mirror","title":"Mirror","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/'...(_:)-1jwd3","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/'...(_:)-32d06","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/_(_:_:)-5w45j","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/_(_:_:)-9kdpa","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/_=(_:_:)-2ptgb","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/_=(_:_:)-3p94n","title":"static func >= (Self, Self) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/erasedasanycomparable","title":"var erasedAsAnyComparable: AnyComparable","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/'...(_:)-1jwd3","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/'...(_:)-32d06","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/_(_:_:)-5w45j","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/_(_:_:)-9kdpa","title":"static func < (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/_=(_:_:)-2ptgb","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/_=(_:_:)-3p94n","title":"static func >= (Self, Self) -> Bool","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/erasedasanycomparable","title":"var erasedAsAnyComparable: AnyComparable","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/init(_:)-5jjko","title":"init<P>(P)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/assumingmemorybound(to:)","title":"func assumingMemoryBound<T>(to: T.Type) -> UnsafePointer<T>","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/constantpointer-implementations","title":"ConstantPointer Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/init(_:)-2ocms","title":"init?(OpaquePointer?)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/opaquepointerinitiable-implementations","title":"OpaquePointerInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/init(_:)-1afko","title":"init<P>(P)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/init(_:)-5e1zp","title":"init?<P>(P?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/init(bitpattern:)","title":"init<P>(bitPattern: P)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/mutablerawrepresentation","title":"var mutableRawRepresentation: UnsafeMutableRawPointer","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/nativewordpointerrepresentation","title":"var nativeWordPointerRepresentation: UnsafePointer<NativeWord>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/opaquepointerrepresentation","title":"var opaquePointerRepresentation: OpaquePointer","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/rawrepresentation","title":"var rawRepresentation: UnsafeRawPointer","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/unsafemutablepointerrepresentation","title":"var unsafeMutablePointerRepresentation: UnsafeMutablePointer<Self.Pointee>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/unsafepointerrepresentation","title":"var unsafePointerRepresentation: UnsafePointer<Self.Pointee>","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/pointee","title":"OpaquePointer.Pointee","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/allocate(initializingto:)","title":"static func allocate(initializingTo: Self.Pointee) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/allocate(initializingto:count:)","title":"static func allocate<N>(initializingTo: Self.Pointee, count: N) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/to(_:)","title":"static func to(inout Self.Pointee) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/to(assuminglayoutcompatible:)","title":"static func to<T>(assumingLayoutCompatible: inout T) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/pointer-implementations","title":"Pointer Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/advance()","title":"func advance()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/advance(by:)","title":"func advance(by: Self.Stride)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/advanced(by:)","title":"func advanced(by: OpaquePointer.Stride) -> OpaquePointer","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/distance(to:)","title":"func distance(to: OpaquePointer) -> OpaquePointer.Stride","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/predecessor()","title":"func predecessor() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/successor()","title":"func successor() -> Self","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/stride","title":"OpaquePointer.Stride","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/opaquepointer\/strideable-implementations","title":"Strideable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/opaquepointer","title":"OpaquePointer","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/range\/init(bounds:)","title":"init(bounds: (lower: Bound, upper: Bound))","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/range\/init(uncheckedbounds:)","title":"init(uncheckedBounds: (lower: Self.Bound, upper: Self.Bound))","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/range\/boundinitiablerangeprotocol-implementations","title":"BoundInitiableRangeProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/range\/contains(_:)-3m9ut","title":"func contains(Self) -> Bool","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/range\/exclusiverangeprotocol-implementations","title":"ExclusiveRangeProtocol Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/range\/init(_:)","title":"init(Self.Bound)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/range\/init(lowerbound:upperbound:)","title":"init(lowerBound: Self.Bound, upperBound: Self.Bound)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/range\/clampinplace(to:)","title":"func clampInPlace(to: Self)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/range\/contains(_:)-1mfcq","title":"func contains(ClosedRange<Bound>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/range\/contains(_:)-3eba2","title":"func contains(Range<Bound>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/range\/overlaps(with:)","title":"func overlaps(with: Self) -> Bool","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/range\/rangeprotocol-implementations","title":"RangeProtocol Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/range","title":"Range","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/reversedcollection\/base","title":"var base: Base","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/reversedcollection","title":"ReversedCollection","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/compactmap(_:)-5pwrm","title":"func compactMap<Value>(CasePath<Element, Value>) -> Set<Value>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/compactmap(_:)-7t1nz","title":"func compactMap<ElementOfResult>((Element) throws -> ElementOfResult?) rethrows -> Set<ElementOfResult>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/toanycodable()","title":"func toAnyCodable() throws -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/set\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/-(_:_:)-1187i","title":"static func - <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/set\/-(_:_:)-7w45d","title":"static func - (Self, Self.Element) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/set\/-=(_:_:)-3jkso","title":"static func -= (inout Self, Self.Element)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/set\/-=(_:_:)-6gmw","title":"static func -= <S>(inout Self, S)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/filterinplace(_:)","title":"func filterInPlace(((Self.Element) throws -> Bool)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/remove(contentsof:)-61t2d","title":"func remove<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/remove(contentsof:)-9kltk","title":"func remove<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/removeall()","title":"func removeAll()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/removeall(of:)","title":"func removeAll(of: Self.Element)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/removeall(where:)","title":"func removeAll(where: ((Element) throws -> Bool)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/removing(allof:)","title":"func removing(allOf: Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/removing(contentsof:)-6upvm","title":"func removing<C>(contentsOf: C) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/removing(contentsof:)-8cgoj","title":"func removing<S>(contentsOf: S) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/set\/destructivelymutablesequence-implementations","title":"DestructivelyMutableSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/removing(_:)","title":"func removing(Self.Element) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/set\/destructivelymutablesetprotocol-implementations","title":"DestructivelyMutableSetProtocol Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/difference\/init(insertions:removals:)","title":"init(insertions: Set<Element>, removals: Set<Element>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/difference\/insertions","title":"var insertions: Set<Element>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/set\/difference\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/set\/difference\/removals","title":"var removals: Set<Element>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/difference\/map(_:)","title":"func map<T>((Element) throws -> T) rethrows -> Set<T>.Difference","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/difference\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/set\/difference\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/difference\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/set\/difference\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/difference\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/set\/difference\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/difference\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/set\/difference\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/difference\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/difference\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/difference\/memoize(with:_:)-1ntje","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/difference\/memoize(with:_:)-tjd6","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/set\/difference\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/set\/difference","title":"Set.Difference","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/applyunconditionally(_:)-3c271","title":"func applyUnconditionally(Self.Difference) throws","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/applyunconditionally(_:)-4yrab","title":"func applyUnconditionally(Set<Element>.Difference)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/applying(_:)","title":"func applying(Set<Element>.Difference) -> Set<Element>?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/difference(from:)","title":"func difference(from: Set<Element>) -> Set<Element>.Difference","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/set\/diffable-implementations","title":"Diffable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/+(_:_:)-2pvv","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/set\/+(_:_:)-3sgey","title":"static func + <S>(S, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/set\/+(_:_:)-7dhxx","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/set\/+(_:_:)-80c7n","title":"static func + (Self, Self.Element) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/set\/+(_:_:)-tpk7","title":"static func + (Self.Element, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/set\/+=(_:_:)-6nfm9","title":"static func += (inout Self, Self.Element)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/set\/+=(_:_:)-6zg7q","title":"static func += <S>(inout Self, S)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/set\/+=(_:_:)-9xgst","title":"static func += <S>(inout Self, S)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/append(_:)","title":"func append(Element)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/append(contentsof:)","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/appending(_:)","title":"func appending(Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/appending(contentsof:)","title":"func appending<S>(contentsOf: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/insert(contentsof:)-3tp19","title":"func insert<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/insert(contentsof:)-4ct8h","title":"func insert<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/insert(contentsof:)-882l5","title":"func insert<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/inserting(_:)","title":"func inserting(Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/set\/inserting(contentsof:)","title":"func inserting<S>(contentsOf: S) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/set\/extensiblesequence-implementations","title":"ExtensibleSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/union(_:)","title":"func union(Self) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/set\/extensiblesetprotocol-implementations","title":"ExtensibleSetProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/join(_:)","title":"func join(Self) -> Self.JointSequenceType","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/jointsequencetype","title":"Set.JointSequenceType","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/set\/joinablesequence-implementations","title":"JoinableSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/replace(allof:with:)","title":"func replace(allOf: Self.Element, with: Self.Element)","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/set\/mutablesequence-implementations","title":"MutableSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/nondestructivecount","title":"var nonDestructiveCount: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/set\/nondestroyingsequence-implementations","title":"NonDestroyingSequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/init(_:count:)","title":"init<S>(S, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/set\/init(arrayliteral:)","title":"init(arrayLiteral: Self.Element...)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/set\/init(element:)","title":"init(element: Self.Element)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/set\/init(iterator:)-97vrl","title":"init<I>(iterator: I)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/set\/init(iterator:)-9s660","title":"init<I>(iterator: inout I)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/set\/init(iterator:count:)-2qyv6","title":"init<I>(iterator: I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/set\/init(iterator:count:)-6vc9p","title":"init<I>(iterator: inout I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/set\/init(nosequence:)","title":"init(noSequence: ())","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/set\/init(repeating:count:)-1cgrs","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/set\/init(repeating:count:)-3dp3j","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/set\/prependall(_:)","title":"func prependAll<S>(Self.Element) -> S","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/set\/sequenceinitiablesequence-implementations","title":"SequenceInitiableSequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/set","title":"Set","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/slice\/applyunconditionally(_:)","title":"func applyUnconditionally(Self.Difference) throws","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/slice\/difference","title":"Slice.Difference","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/slice\/diffable-implementations","title":"Diffable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/slice","title":"Slice","type":"extension"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(cstring:)","title":"init(cString: NullTerminatedUTF8String)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(describing:recovery:)","title":"init(describing: () throws -> some CustomStringConvertible, recovery: () -> String)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(from:using:)","title":"init<Strategy>(from: Strategy.Output, using: Strategy) throws","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(utf16codeunit:)","title":"init(utf16CodeUnit: UTF16.CodeUnit)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/firstcharactercapitalized","title":"var firstCharacterCapitalized: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/appendline(_:)","title":"func appendLine(String)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/appendtabindentedline(_:_:)","title":"func appendTabIndentedLine(Int, String)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/capitalizefirstletter()","title":"func capitalizeFirstLetter()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/capitalizingfirstletter()","title":"func capitalizingFirstLetter() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/contains(only:)","title":"func contains(only: CharacterSet) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/delimited(by:)","title":"func delimited(by: Character) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/dropfirstcomponent(separatedby:)-1pi8i","title":"func dropFirstComponent(separatedBy: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/dropfirstcomponent(separatedby:)-2kqcc","title":"func dropFirstComponent(separatedBy: Character) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/droplastcomponent(separatedby:)","title":"func dropLastComponent(separatedBy: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/encode(using:)","title":"func encode<Strategy>(using: Strategy) throws -> Strategy.Output","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/hasprefix(_:caseinsensitive:)","title":"func hasPrefix(String, caseInsensitive: Bool) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/maplines(_:)","title":"func mapLines((String) -> String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/modifylines(_:)","title":"func modifyLines((inout String) -> Void)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/modifyinglines(_:)","title":"func modifyingLines((inout String) -> Void) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/numberofoccurences(of:)","title":"func numberOfOccurences(of: Character) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/remove(substrings:)","title":"func remove(substrings: [Substring])","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/removebyteordermark()","title":"func removeByteOrderMark()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/removingbomcharacter()","title":"func removingBOMCharacter() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/removingcharacters(in:)-2xhsz","title":"func removingCharacters(in: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/removingcharacters(in:)-4mhft","title":"func removingCharacters(in: CharacterSet) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/removingleadingcharacters(in:)","title":"func removingLeadingCharacters(in: CharacterSet) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/removingtrailingcharacters(in:)","title":"func removingTrailingCharacters(in: CharacterSet) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/replace(firstoccurenceof:with:)","title":"func replace<String>(firstOccurenceOf: String, with: String)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/replace(occurencesof:with:)","title":"func replace<String>(occurencesOf: String, with: String)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/replace(substrings:with:)","title":"func replace(substrings: [Substring], with: String)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/replacesubstring(_:with:)","title":"func replaceSubstring(Substring, with: String)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/splitinhalf(separator:)","title":"func splitInHalf(separator: String) -> (String, String)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/substrings(separatedby:)","title":"func substrings(separatedBy: CharacterSet) -> [Substring]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/tabindent(_:)","title":"func tabIndent(Int) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/trim(prefix:suffix:)-85bkx","title":"func trim(prefix: String, suffix: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/trim(prefix:suffix:)-9wjwk","title":"func trim(prefix: String, suffix: String) -> Substring","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/trimmingwhitespace()","title":"func trimmingWhitespace() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/trimmingwhitespaceandnewlines()","title":"func trimmingWhitespaceAndNewlines() -> String","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/concatenate(separator:_:)","title":"static func concatenate(separator: String, () throws -> [String]) rethrows -> String","type":"method"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/-(_:_:)-58b8h","title":"static func - <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/-(_:_:)-97c4z","title":"static func - (Self, Self.Element) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/-=(_:_:)-7mo1c","title":"static func -= <S>(inout Self, S)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/-=(_:_:)-8zvz3","title":"static func -= (inout Self, Self.Element)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/filterinplace(_:)","title":"func filterInPlace(((Self.Element) throws -> Bool)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/remove(contentsof:)-7vk2h","title":"func remove<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/remove(contentsof:)-90tc1","title":"func remove<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/removeall()-2xm84","title":"func removeAll()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/removeall()-3t6h4","title":"func removeAll()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/removeall(of:)","title":"func removeAll(of: Self.Element)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/removing(allof:)","title":"func removing(allOf: Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/removing(contentsof:)-3sk1k","title":"func removing<C>(contentsOf: C) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/removing(contentsof:)-5rwgg","title":"func removing<S>(contentsOf: S) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/destructivelymutablesequence-implementations","title":"DestructivelyMutableSequence Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/+(_:_:)-19ofz","title":"static func + <S>(S, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/+(_:_:)-1lv","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/+(_:_:)-2i7ju","title":"static func + (Self.Element, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/+(_:_:)-3bz2n","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/+(_:_:)-ga0m","title":"static func + (Self, Self.Element) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/+=(_:_:)-8hp2f","title":"static func += <S>(inout Self, S)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/+=(_:_:)-8u55a","title":"static func += <S>(inout Self, S)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/+=(_:_:)-9qaep","title":"static func += (inout Self, Self.Element)","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/extensiblerangereplaceablecollection-implementations","title":"ExtensibleRangeReplaceableCollection Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/+(_:_:)-1mzyx","title":"static func + <S>(S, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/+(_:_:)-4n5x","title":"static func + (Self, Self.Element) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/+(_:_:)-4xroo","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/+(_:_:)-7ewqs","title":"static func + (Self.Element, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/+(_:_:)-7yjg5","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/+=(_:_:)-36b06","title":"static func += <S>(inout Self, S)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/+=(_:_:)-4aamk","title":"static func += (inout Self, Self.Element)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/+=(_:_:)-7go1h","title":"static func += <S>(inout Self, S)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/append(contentsof:)","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/appending(_:)","title":"func appending(Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/appending(contentsof:)-1vil","title":"func appending<S>(contentsOf: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/appending(contentsof:)-47l9v","title":"func appending<S>(contentsOf: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/insert(_:)","title":"func insert(Self.Element)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/insert(contentsof:)-33l8a","title":"func insert<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/insert(contentsof:)-56pmz","title":"func insert<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/insert(contentsof:)-xisv","title":"func insert<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/inserting(_:)","title":"func inserting(Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/inserting(contentsof:)-4rbdk","title":"func inserting<S>(contentsOf: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/inserting(contentsof:)-zwxn","title":"func inserting<S>(contentsOf: S) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/extensiblesequence-implementations","title":"ExtensibleSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/replace(allof:with:)","title":"func replace(allOf: Self.Element, with: Self.Element)","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/mutablesequence-implementations","title":"MutableSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/nondestructivecount","title":"var nonDestructiveCount: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/nondestroyingsequence-implementations","title":"NonDestroyingSequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/init(_:count:)","title":"init<S>(S, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/init(element:)","title":"init(element: Self.Element)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/init(iterator:)-131xw","title":"init<I>(iterator: I)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/init(iterator:)-47mem","title":"init<I>(iterator: inout I)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/init(iterator:count:)-4ikj4","title":"init<I>(iterator: I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/init(iterator:count:)-5ijtx","title":"init<I>(iterator: inout I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/init(nosequence:)","title":"init(noSequence: ())","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/init(repeating:count:)-1iry9","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/init(repeating:count:)-44mbq","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/init(repeating:count:)-531go","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/init(repeating:count:)-5qonl","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/prependall(_:)","title":"func prependAll<S>(Self.Element) -> S","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview\/sequenceinitiablesequence-implementations","title":"SequenceInitiableSequence Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/string\/unicodescalarview","title":"String.UnicodeScalarView","type":"extension"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/toanycodable()","title":"func toAnyCodable() -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/string\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/datadecodingstrategy\/init(encoding:)","title":"init(encoding: String.Encoding)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/datadecodingstrategy\/encoding","title":"let encoding: String.Encoding","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/string\/datadecodingstrategy","title":"String.DataDecodingStrategy","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(data:using:)","title":"init(data: Data, using: String.DataDecodingStrategy) throws","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/string\/datadecodable-implementations","title":"DataDecodable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(data:)","title":"init(data: Data) throws","type":"init"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/defaultdatadecodingstrategy","title":"static var defaultDataDecodingStrategy: String.DataDecodingStrategy","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/string\/datadecodablewithdefaultstrategy-implementations","title":"DataDecodableWithDefaultStrategy Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/dataencodingstrategy\/init(encoding:allowlossyconversion:)","title":"init(encoding: String.Encoding, allowLossyConversion: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/dataencodingstrategy\/allowlossyconversion","title":"let allowLossyConversion: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/string\/dataencodingstrategy\/encoding","title":"let encoding: String.Encoding","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/string\/dataencodingstrategy","title":"String.DataEncodingStrategy","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/data(using:)","title":"func data(using: String.DataEncodingStrategy) throws -> Data","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/string\/dataencodable-implementations","title":"DataEncodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/data()","title":"func data() throws -> Data","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/defaultdataencodingstrategy","title":"static var defaultDataEncodingStrategy: String.DataEncodingStrategy","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/string\/dataencodablewithdefaultstrategy-implementations","title":"DataEncodableWithDefaultStrategy Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/-(_:_:)-1188l","title":"static func - <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/-(_:_:)-7w46y","title":"static func - (Self, Self.Element) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/-=(_:_:)-3jktv","title":"static func -= (inout Self, Self.Element)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/-=(_:_:)-6glf","title":"static func -= <S>(inout Self, S)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/filterinplace(_:)","title":"func filterInPlace(((Self.Element) throws -> Bool)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/remove(contentsof:)-61t26","title":"func remove<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/remove(contentsof:)-9kls3","title":"func remove<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/removeall()-80rda","title":"func removeAll()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/removeall()-9bfwe","title":"func removeAll()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/removeall(of:)","title":"func removeAll(of: Self.Element)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/removing(allof:)","title":"func removing(allOf: Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/removing(contentsof:)-6upx5","title":"func removing<C>(contentsOf: C) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/removing(contentsof:)-8cgnc","title":"func removing<S>(contentsOf: S) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/string\/destructivelymutablesequence-implementations","title":"DestructivelyMutableSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/applyunconditionally(_:)","title":"func applyUnconditionally(Self.Difference) throws","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/difference","title":"String.Difference","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/string\/diffable-implementations","title":"Diffable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/+(_:_:)-2pww","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/+(_:_:)-3sgf5","title":"static func + <S>(S, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/+(_:_:)-7dhym","title":"static func + <S>(Self, S) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/+(_:_:)-80c88","title":"static func + (Self, Self.Element) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/+(_:_:)-tpjw","title":"static func + (Self.Element, Self) -> Self","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/+=(_:_:)-6nfmy","title":"static func += (inout Self, Self.Element)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/+=(_:_:)-6zg8d","title":"static func += <S>(inout Self, S)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/string\/+=(_:_:)-9xgty","title":"static func += <S>(inout Self, S)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/append(contentsof:)","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/appending(_:)","title":"func appending(Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/appending(contentsof:)-4xvz1","title":"func appending<S>(contentsOf: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/appending(contentsof:)-7a7dr","title":"func appending<S>(contentsOf: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/insert(_:)","title":"func insert(String.Element)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/insert(contentsof:)-3tozq","title":"func insert<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/insert(contentsof:)-4cta2","title":"func insert<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/insert(contentsof:)-882le","title":"func insert<C>(contentsOf: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/inserting(_:)","title":"func inserting(Self.Element) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/inserting(contentsof:)-1he57","title":"func inserting<S>(contentsOf: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/inserting(contentsof:)-2y06","title":"func inserting<S>(contentsOf: S) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/string\/extensiblesequence-implementations","title":"ExtensibleSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/replace(allof:with:)","title":"func replace(allOf: Self.Element, with: Self.Element)","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/string\/mutablesequence-implementations","title":"MutableSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/stringvalue","title":"var stringValue: String","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/string\/mutablestringconvertible-implementations","title":"MutableStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/nondestructivecount","title":"var nonDestructiveCount: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/string\/nondestroyingsequence-implementations","title":"NonDestroyingSequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(_:count:)","title":"init<S>(S, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(element:)","title":"init(element: Self.Element)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(iterator:)-97vsa","title":"init<I>(iterator: I)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(iterator:)-9s64j","title":"init<I>(iterator: inout I)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(iterator:count:)-2qywp","title":"init<I>(iterator: I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(iterator:count:)-6vc9y","title":"init<I>(iterator: inout I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(nosequence:)","title":"init(noSequence: ())","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(repeating:count:)-1cgr7","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(repeating:count:)-3dp4k","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(repeating:count:)-533nj","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(repeating:count:)-ylxb","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/prependall(_:)","title":"func prependAll<S>(Self.Element) -> S","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/string\/sequenceinitiablesequence-implementations","title":"SequenceInitiableSequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(stringvalue:)","title":"init(stringValue: String)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/string\/stringinitializable-implementations","title":"StringInitializable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(managedutf8string:)","title":"init?<P>(managedUTF8String: P?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(managedutf8string:count:)","title":"init?<P>(managedUTF8String: P?, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(unmanagedutf8string:)","title":"init?<P>(unmanagedUTF8String: P?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(unmanagedutf8string:count:)","title":"init?<P>(unmanagedUTF8String: P?, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(utf8character:)","title":"init(utf8Character: CChar)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(utf8string:)-2hrrd","title":"init?<P>(utf8String: P?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(utf8string:)-3eqjw","title":"init?(utf8String: NullTerminatedUTF8String?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(utf8string:)-97ihy","title":"init<P>(utf8String: P)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(utf8string:)-y17q","title":"init(utf8String: NullTerminatedUTF8String)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(utf8string:count:)-4roys","title":"init<P>(utf8String: P, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(utf8string:count:)-9syi1","title":"init?<P>(utf8String: P?, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(utf8string:count:deallocate:)-3su2s","title":"init(utf8String: NullTerminatedUTF8String, count: Int, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(utf8string:count:deallocate:)-5mafe","title":"init?(utf8String: NullTerminatedUTF8String?, count: Int, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(utf8string:count:managed:)-3rb6a","title":"init?(utf8String: NullTerminatedUTF8String?, count: Int, managed: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(utf8string:count:managed:)-9d760","title":"init(utf8String: NullTerminatedUTF8String, count: Int, managed: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(utf8string:deallocate:)-2lwna","title":"init(utf8String: NullTerminatedUTF8String, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(utf8string:deallocate:)-36iy3","title":"init(utf8String: NullTerminatedUTF8String, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(utf8string:deallocate:)-3f1we","title":"init?(utf8String: NullTerminatedUTF8String?, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(utf8string:deallocate:)-4zlrk","title":"init?<P>(utf8String: P?, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(utf8string:deallocate:)-7k8dm","title":"init<P>(utf8String: P, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(utf8string:managed:)-88jtt","title":"init(utf8String: NullTerminatedUTF8String, managed: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(utf8string:managed:)-88p5z","title":"init?(utf8String: NullTerminatedUTF8String?, managed: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(validatingutf8string:)","title":"init?(validatingUTF8String: NullTerminatedUTF8String?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/string\/init(validatingutf8string:deallocate:)","title":"init?(validatingUTF8String: NullTerminatedUTF8String?, deallocate: Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/string\/mutatingwithmutablecstring(_:)","title":"func mutatingWithMutableCString<T>(((NullTerminatedUTF8String) throws -> T)) rethrows -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/nullterminatedutf8string()","title":"func nullTerminatedUTF8String() -> NullTerminatedUTF8String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/string\/withmutablecstring(_:)","title":"func withMutableCString<T>(((NullTerminatedUTF8String) throws -> T)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/string\/utf8representable-implementations","title":"UTF8Representable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/string","title":"String","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/substring\/components(separatedby:)","title":"func components(separatedBy: Character) -> [Substring]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/substring\/firstline()","title":"func firstLine() -> Substring","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/substring\/lastline()","title":"func lastLine() -> Substring","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/substring\/replace(firstoccurenceof:with:)","title":"func replace(firstOccurenceOf: String, with: String)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/substring\/replace(occurencesof:with:)","title":"func replace(occurencesOf: String, with: String)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/substring\/trimming(_:)","title":"func trimming(Character) -> Substring","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/substring\/trimming(leading:)","title":"func trimming(leading: Character) -> Substring","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/substring\/trimming(trailing:)","title":"func trimming(trailing: Character) -> Substring","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/substring\/trimmingcharacters(in:)","title":"func trimmingCharacters(in: CharacterSet) -> Substring","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/substring\/trimmingleadingcharacters(in:maximum:)","title":"func trimmingLeadingCharacters(in: CharacterSet, maximum: Int?) -> Substring","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/substring\/trimmingnewlines()","title":"func trimmingNewlines() -> Substring","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/substring\/trimmingtrailingcharacters(in:)","title":"func trimmingTrailingCharacters(in: CharacterSet) -> Substring","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/substring\/applyunconditionally(_:)","title":"func applyUnconditionally(Self.Difference) throws","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/substring\/difference","title":"Substring.Difference","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/substring\/diffable-implementations","title":"Diffable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/substring\/nondestructivecount","title":"var nonDestructiveCount: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/substring\/nondestroyingsequence-implementations","title":"NonDestroyingSequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/substring\/init(_:count:)","title":"init<S>(S, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/substring\/init(element:)","title":"init(element: Self.Element)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/substring\/init(iterator:)-97vre","title":"init<I>(iterator: I)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/substring\/init(iterator:)-9s65f","title":"init<I>(iterator: inout I)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/substring\/init(iterator:count:)-2qyvt","title":"init<I>(iterator: I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/substring\/init(iterator:count:)-6vc92","title":"init<I>(iterator: inout I, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/substring\/init(nosequence:)","title":"init(noSequence: ())","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/substring\/init(repeating:count:)-1cgs3","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/substring\/init(repeating:count:)-3dp3o","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/substring\/init(repeating:count:)-533mn","title":"init(repeating: (() -> Self.Element), count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/substring\/init(repeating:count:)-ylwf","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/substring\/prependall(_:)","title":"func prependAll<S>(Self.Element) -> S","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/substring\/sequenceinitiablesequence-implementations","title":"SequenceInitiableSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/substring\/stringvalue","title":"var stringValue: String","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/substring\/stringconvertible-implementations","title":"StringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/substring","title":"Substring","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/toanycodable()","title":"func toAnyCodable() throws -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init(_:)-1bky9","title":"init(DarwinBoolean)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init(_:)-1byk1","title":"init(Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init(_:)-px0v","title":"init(ObjCBool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init(boolean:)","title":"init<T>(boolean: T)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint\/booleaninitiable-implementations","title":"BooleanInitiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/isminimumormaximum","title":"var isMinimumOrMaximum: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/maximum","title":"static let maximum: UInt","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint\/minimum","title":"static let minimum: UInt","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/uint\/bounded-implementations","title":"Bounded Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/random()","title":"static func random() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/random(maximum:)","title":"static func random(maximum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/random(minimum:)","title":"static func random(minimum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/random(minimum:maximum:)","title":"static func random(minimum: UInt, maximum: UInt) -> UInt","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/random(minimum:maximum:excluding:)-5tg1r","title":"static func random(minimum: Self, maximum: Self, excluding: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/random(minimum:maximum:excluding:)-udia","title":"static func random(minimum: Self, maximum: Self, excluding: Range<Self>) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint\/boundedrandomnable-implementations","title":"BoundedRandomnable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/bigendianview","title":"var bigEndianView: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint\/littleendianview","title":"var littleEndianView: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/swapbyteorder()-47du6","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/swapbyteorder()-9r1ka","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/swapbyteorderbigtohost()","title":"func swapByteOrderBigToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/swapbyteorderhosttobig()","title":"func swapByteOrderHostToBig()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/swapbyteorderhosttolittle()","title":"func swapByteOrderHostToLittle()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/swapbyteorderlittletohost()","title":"func swapByteOrderLittleToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/swappingbyteorder()","title":"func swappingByteOrder() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/swappingbyteorderbigtohost()","title":"func swappingByteOrderBigToHost() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/swappingbyteorderhosttobig()","title":"func swappingByteOrderHostToBig() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/swappingbyteorderhosttolittle()","title":"func swappingByteOrderHostToLittle() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/swappingbyteorderhosttoportable()","title":"func swappingByteOrderHostToPortable() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/swappingbyteorderlittletohost()","title":"func swappingByteOrderLittleToHost() -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint\/byteorderswappable-implementations","title":"ByteOrderSwappable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/datadecodingstrategy","title":"UInt.DataDecodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/uint\/datadecodable-implementations","title":"DataDecodable Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/dataencodingstrategy","title":"UInt.DataEncodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/uint\/dataencodable-implementations","title":"DataEncodable Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/iscontinuous","title":"static var isContinuous: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint\/isdiscrete","title":"static var isDiscrete: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/uint\/discreteorcontinuous-implementations","title":"DiscreteOrContinuous Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/uint\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init(_:)-1d8ar","title":"init(NSDecimalNumber)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init(_:)-53j07","title":"init(Decimal)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init(_:)-ri5x","title":"init(CGFloat)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint\/floatingpointinitiable-implementations","title":"FloatingPointInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init()-3b4ct","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init()-6l1cg","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint\/initiable-implementations","title":"Initiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/bytetuple","title":"var byteTuple: NativeByteTupleType","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/bytetupletype","title":"UInt.ByteTupleType","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/uint\/nativewordsized-implementations","title":"NativeWordSized Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init(unchecked:)","title":"init<N>(unchecked: N)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/nativetype","title":"UInt.NativeType","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/lossless(from:)-49ueq","title":"static func lossless<N>(from: N) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/lossless(from:)-gx0e","title":"static func lossless(from: AnyNumber) throws -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint\/number-implementations","title":"Number Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/nativefloatingpointvalue","title":"var nativeFloatingPointValue: NativeFloatingPoint","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/tobool()","title":"func toBool() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/tocgfloat()","title":"func toCGFloat() -> CGFloat","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/todecimal()","title":"func toDecimal() -> Decimal","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/todouble()","title":"func toDouble() -> Double","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/tofloat()","title":"func toFloat() -> Float","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/toint()","title":"func toInt() -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/toint16()","title":"func toInt16() -> Int16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/toint32()","title":"func toInt32() -> Int32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/toint64()","title":"func toInt64() -> Int64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/toint8()","title":"func toInt8() -> Int8","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/tonsnumber()","title":"func toNSNumber() -> NSNumber","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/tonativefloatingpointvalue()","title":"func toNativeFloatingPointValue() -> NativeFloatingPoint","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/touint()","title":"func toUInt() -> UInt","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/touint16()","title":"func toUInt16() -> UInt16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/touint32()","title":"func toUInt32() -> UInt32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/touint64()","title":"func toUInt64() -> UInt64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/touint8()","title":"func toUInt8() -> UInt8","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint\/numberconvertible-implementations","title":"NumberConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init(_:)-18ost","title":"init(Int64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init(_:)-1q1nc","title":"init(Int32)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init(_:)-5rwwo","title":"init(Int8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init(_:)-7zw13","title":"init(Int16)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint\/signedintegerinitiable-implementations","title":"SignedIntegerInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/uint\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/absolutevalue","title":"var absoluteValue: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint\/isnegative","title":"var isNegative: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/canbesignminus","title":"static var canBeSignMinus: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/uint\/unsigned-implementations","title":"Unsigned Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init(_:)-3urgb","title":"init(UInt8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init(_:)-50c7o","title":"init(UInt64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init(_:)-5gsiz","title":"init(UInt16)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint\/init(_:)-7del9","title":"init(UInt32)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint\/unsignedintegerinitiable-implementations","title":"UnsignedIntegerInitiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/uint","title":"UInt","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/toanycodable()","title":"func toAnyCodable() throws -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint16\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init(_:)-30fi5","title":"init(DarwinBoolean)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init(_:)-3pk9e","title":"init(Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init(_:)-6og10","title":"init(ObjCBool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init(boolean:)","title":"init<T>(boolean: T)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint16\/booleaninitiable-implementations","title":"BooleanInitiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/isminimumormaximum","title":"var isMinimumOrMaximum: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/maximum","title":"static let maximum: UInt16","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/minimum","title":"static let minimum: UInt16","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/uint16\/bounded-implementations","title":"Bounded Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/random()","title":"static func random() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/random(maximum:)","title":"static func random(maximum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/random(minimum:)","title":"static func random(minimum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/random(minimum:maximum:)","title":"static func random(minimum: UInt16, maximum: UInt16) -> UInt16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/random(minimum:maximum:excluding:)-8fhsj","title":"static func random(minimum: Self, maximum: Self, excluding: Range<Self>) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/random(minimum:maximum:excluding:)-9xijg","title":"static func random(minimum: Self, maximum: Self, excluding: Self) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint16\/boundedrandomnable-implementations","title":"BoundedRandomnable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/bigendianview","title":"var bigEndianView: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/littleendianview","title":"var littleEndianView: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/swapbyteorder()-38zqj","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/swapbyteorder()-7b4g4","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/swapbyteorderbigtohost()","title":"func swapByteOrderBigToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/swapbyteorderhosttobig()","title":"func swapByteOrderHostToBig()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/swapbyteorderhosttolittle()","title":"func swapByteOrderHostToLittle()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/swapbyteorderlittletohost()","title":"func swapByteOrderLittleToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/swappingbyteorder()","title":"func swappingByteOrder() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/swappingbyteorderbigtohost()","title":"func swappingByteOrderBigToHost() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/swappingbyteorderhosttobig()","title":"func swappingByteOrderHostToBig() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/swappingbyteorderhosttolittle()","title":"func swappingByteOrderHostToLittle() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/swappingbyteorderhosttoportable()","title":"func swappingByteOrderHostToPortable() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/swappingbyteorderlittletohost()","title":"func swappingByteOrderLittleToHost() -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint16\/byteorderswappable-implementations","title":"ByteOrderSwappable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/bytetupletype","title":"UInt16.ByteTupleType","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/uint16\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/datadecodingstrategy","title":"UInt16.DataDecodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/uint16\/datadecodable-implementations","title":"DataDecodable Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/dataencodingstrategy","title":"UInt16.DataEncodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/uint16\/dataencodable-implementations","title":"DataEncodable Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/iscontinuous","title":"static var isContinuous: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/isdiscrete","title":"static var isDiscrete: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/uint16\/discreteorcontinuous-implementations","title":"DiscreteOrContinuous Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/uint16\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init(_:)-3zts9","title":"init(NSDecimalNumber)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init(_:)-62zgi","title":"init(CGFloat)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init(_:)-6zvzd","title":"init(Decimal)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint16\/floatingpointinitiable-implementations","title":"FloatingPointInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init()-1wd46","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init()-5tf45","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint16\/initiable-implementations","title":"Initiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init(unchecked:)","title":"init<N>(unchecked: N)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/lossless(from:)-4rmcv","title":"static func lossless(from: AnyNumber) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/lossless(from:)-86kpe","title":"static func lossless<N>(from: N) throws -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint16\/number-implementations","title":"Number Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/nativefloatingpointvalue","title":"var nativeFloatingPointValue: NativeFloatingPoint","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/tobool()","title":"func toBool() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/tocgfloat()","title":"func toCGFloat() -> CGFloat","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/todecimal()","title":"func toDecimal() -> Decimal","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/todouble()","title":"func toDouble() -> Double","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/tofloat()","title":"func toFloat() -> Float","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/toint()","title":"func toInt() -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/toint16()","title":"func toInt16() -> Int16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/toint32()","title":"func toInt32() -> Int32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/toint64()","title":"func toInt64() -> Int64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/toint8()","title":"func toInt8() -> Int8","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/tonsnumber()","title":"func toNSNumber() -> NSNumber","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/tonativefloatingpointvalue()","title":"func toNativeFloatingPointValue() -> NativeFloatingPoint","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/touint()","title":"func toUInt() -> UInt","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/touint16()","title":"func toUInt16() -> UInt16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/touint32()","title":"func toUInt32() -> UInt32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/touint64()","title":"func toUInt64() -> UInt64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/touint8()","title":"func toUInt8() -> UInt8","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint16\/numberconvertible-implementations","title":"NumberConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init(_:)-2jqse","title":"init(Int16)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init(_:)-52z12","title":"init(Int64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init(_:)-6b7xu","title":"init(Int8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init(_:)-9f5ri","title":"init(Int32)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint16\/signedintegerinitiable-implementations","title":"SignedIntegerInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/uint16\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/absolutevalue","title":"var absoluteValue: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/isnegative","title":"var isNegative: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/canbesignminus","title":"static var canBeSignMinus: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/uint16\/unsigned-implementations","title":"Unsigned Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init(_:)-1gwh2","title":"init(UInt32)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init(_:)-2s9h8","title":"init(UInt64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init(_:)-66tyy","title":"init(UInt16)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint16\/init(_:)-87yqa","title":"init(UInt8)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint16\/unsignedintegerinitiable-implementations","title":"UnsignedIntegerInitiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/uint16","title":"UInt16","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/toanycodable()","title":"func toAnyCodable() throws -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint32\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init(_:)-37vmv","title":"init(DarwinBoolean)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init(_:)-3j5jk","title":"init(Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init(_:)-6h032","title":"init(ObjCBool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init(boolean:)","title":"init<T>(boolean: T)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint32\/booleaninitiable-implementations","title":"BooleanInitiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/isminimumormaximum","title":"var isMinimumOrMaximum: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/maximum","title":"static let maximum: UInt32","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/minimum","title":"static let minimum: UInt32","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/uint32\/bounded-implementations","title":"Bounded Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/random()","title":"static func random() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/random(maximum:)","title":"static func random(maximum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/random(minimum:)","title":"static func random(minimum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/random(minimum:maximum:)","title":"static func random(minimum: UInt32, maximum: UInt32) -> UInt32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/random(minimum:maximum:excluding:)-4byv","title":"static func random(minimum: Self, maximum: Self, excluding: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/random(minimum:maximum:excluding:)-8n0f5","title":"static func random(minimum: Self, maximum: Self, excluding: Range<Self>) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint32\/boundedrandomnable-implementations","title":"BoundedRandomnable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/bigendianview","title":"var bigEndianView: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/littleendianview","title":"var littleEndianView: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/swapbyteorder()-4h4c6","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/swapbyteorder()-73ohq","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/swapbyteorderbigtohost()","title":"func swapByteOrderBigToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/swapbyteorderhosttobig()","title":"func swapByteOrderHostToBig()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/swapbyteorderhosttolittle()","title":"func swapByteOrderHostToLittle()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/swapbyteorderlittletohost()","title":"func swapByteOrderLittleToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/swappingbyteorder()","title":"func swappingByteOrder() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/swappingbyteorderbigtohost()","title":"func swappingByteOrderBigToHost() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/swappingbyteorderhosttobig()","title":"func swappingByteOrderHostToBig() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/swappingbyteorderhosttolittle()","title":"func swappingByteOrderHostToLittle() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/swappingbyteorderhosttoportable()","title":"func swappingByteOrderHostToPortable() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/swappingbyteorderlittletohost()","title":"func swappingByteOrderLittleToHost() -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint32\/byteorderswappable-implementations","title":"ByteOrderSwappable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/bytetupletype","title":"UInt32.ByteTupleType","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/uint32\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/datadecodingstrategy","title":"UInt32.DataDecodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/uint32\/datadecodable-implementations","title":"DataDecodable Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/dataencodingstrategy","title":"UInt32.DataEncodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/uint32\/dataencodable-implementations","title":"DataEncodable Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/iscontinuous","title":"static var isContinuous: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/isdiscrete","title":"static var isDiscrete: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/uint32\/discreteorcontinuous-implementations","title":"DiscreteOrContinuous Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/uint32\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init(_:)-479sb","title":"init(NSDecimalNumber)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init(_:)-6a828","title":"init(CGFloat)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init(_:)-6tjqj","title":"init(Decimal)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint32\/floatingpointinitiable-implementations","title":"FloatingPointInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init()-1p4lo","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init()-5m3yn","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint32\/initiable-implementations","title":"Initiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init(unchecked:)","title":"init<N>(unchecked: N)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/lossless(from:)-4kdmt","title":"static func lossless(from: AnyNumber) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/lossless(from:)-8czeo","title":"static func lossless<N>(from: N) throws -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint32\/number-implementations","title":"Number Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/nativefloatingpointvalue","title":"var nativeFloatingPointValue: NativeFloatingPoint","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/tobool()","title":"func toBool() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/tocgfloat()","title":"func toCGFloat() -> CGFloat","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/todecimal()","title":"func toDecimal() -> Decimal","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/todouble()","title":"func toDouble() -> Double","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/tofloat()","title":"func toFloat() -> Float","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/toint()","title":"func toInt() -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/toint16()","title":"func toInt16() -> Int16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/toint32()","title":"func toInt32() -> Int32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/toint64()","title":"func toInt64() -> Int64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/toint8()","title":"func toInt8() -> Int8","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/tonsnumber()","title":"func toNSNumber() -> NSNumber","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/tonativefloatingpointvalue()","title":"func toNativeFloatingPointValue() -> NativeFloatingPoint","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/touint()","title":"func toUInt() -> UInt","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/touint16()","title":"func toUInt16() -> UInt16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/touint32()","title":"func toUInt32() -> UInt32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/touint64()","title":"func toUInt64() -> UInt64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/touint8()","title":"func toUInt8() -> UInt8","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint32\/numberconvertible-implementations","title":"NumberConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init(_:)-2dlw4","title":"init(Int16)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init(_:)-59dqk","title":"init(Int64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init(_:)-63pbk","title":"init(Int8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init(_:)-9mock","title":"init(Int32)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint32\/signedintegerinitiable-implementations","title":"SignedIntegerInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/uint32\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/absolutevalue","title":"var absoluteValue: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/isnegative","title":"var isNegative: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/canbesignminus","title":"static var canBeSignMinus: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/uint32\/unsigned-implementations","title":"Unsigned Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init(_:)-1o7jg","title":"init(UInt32)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init(_:)-2zs3a","title":"init(UInt64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init(_:)-60mu0","title":"init(UInt16)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint32\/init(_:)-8eg00","title":"init(UInt8)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint32\/unsignedintegerinitiable-implementations","title":"UnsignedIntegerInitiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/uint32","title":"UInt32","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/toanycodable()","title":"func toAnyCodable() throws -> AnyCodable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint64\/anycodableconvertible-implementations","title":"AnyCodableConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init(_:)-38q3z","title":"init(Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init(_:)-3opss","title":"init(DarwinBoolean)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init(_:)-6ywkx","title":"init(ObjCBool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init(boolean:)","title":"init<T>(boolean: T)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint64\/booleaninitiable-implementations","title":"BooleanInitiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/isminimumormaximum","title":"var isMinimumOrMaximum: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/maximum","title":"static let maximum: UInt64","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/minimum","title":"static let minimum: UInt64","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/uint64\/bounded-implementations","title":"Bounded Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/random()","title":"static func random() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/random(maximum:)","title":"static func random(maximum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/random(minimum:)","title":"static func random(minimum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/random(minimum:maximum:)","title":"static func random(minimum: UInt64, maximum: UInt64) -> UInt64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/random(minimum:maximum:excluding:)-8xgwu","title":"static func random(minimum: Self, maximum: Self, excluding: Range<Self>) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/random(minimum:maximum:excluding:)-9t9dh","title":"static func random(minimum: Self, maximum: Self, excluding: Self) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint64\/boundedrandomnable-implementations","title":"BoundedRandomnable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/bigendianview","title":"var bigEndianView: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/littleendianview","title":"var littleEndianView: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/swapbyteorder()-3gu5y","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/swapbyteorder()-7kr69","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/swapbyteorderbigtohost()","title":"func swapByteOrderBigToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/swapbyteorderhosttobig()","title":"func swapByteOrderHostToBig()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/swapbyteorderhosttolittle()","title":"func swapByteOrderHostToLittle()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/swapbyteorderlittletohost()","title":"func swapByteOrderLittleToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/swappingbyteorder()","title":"func swappingByteOrder() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/swappingbyteorderbigtohost()","title":"func swappingByteOrderBigToHost() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/swappingbyteorderhosttobig()","title":"func swappingByteOrderHostToBig() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/swappingbyteorderhosttolittle()","title":"func swappingByteOrderHostToLittle() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/swappingbyteorderhosttoportable()","title":"func swappingByteOrderHostToPortable() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/swappingbyteorderlittletohost()","title":"func swappingByteOrderLittleToHost() -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint64\/byteorderswappable-implementations","title":"ByteOrderSwappable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/bytetupletype","title":"UInt64.ByteTupleType","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/uint64\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/datadecodingstrategy","title":"UInt64.DataDecodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/uint64\/datadecodable-implementations","title":"DataDecodable Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/dataencodingstrategy","title":"UInt64.DataEncodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/uint64\/dataencodable-implementations","title":"DataEncodable Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/iscontinuous","title":"static var isContinuous: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/isdiscrete","title":"static var isDiscrete: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/uint64\/discreteorcontinuous-implementations","title":"DiscreteOrContinuous Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/uint64\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init(_:)-4o3u0","title":"init(NSDecimalNumber)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init(_:)-5zu0r","title":"init(CGFloat)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init(_:)-7acqc","title":"init(Decimal)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint64\/floatingpointinitiable-implementations","title":"FloatingPointInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init()-181r3","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init()-5wj78","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint64\/initiable-implementations","title":"Initiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init(unchecked:)","title":"init<N>(unchecked: N)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/lossless(from:)-49oga","title":"static func lossless(from: AnyNumber) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/lossless(from:)-83f7f","title":"static func lossless<N>(from: N) throws -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint64\/number-implementations","title":"Number Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/nativefloatingpointvalue","title":"var nativeFloatingPointValue: NativeFloatingPoint","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/tobool()","title":"func toBool() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/tocgfloat()","title":"func toCGFloat() -> CGFloat","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/todecimal()","title":"func toDecimal() -> Decimal","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/todouble()","title":"func toDouble() -> Double","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/tofloat()","title":"func toFloat() -> Float","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/toint()","title":"func toInt() -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/toint16()","title":"func toInt16() -> Int16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/toint32()","title":"func toInt32() -> Int32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/toint64()","title":"func toInt64() -> Int64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/toint8()","title":"func toInt8() -> Int8","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/tonsnumber()","title":"func toNSNumber() -> NSNumber","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/tonativefloatingpointvalue()","title":"func toNativeFloatingPointValue() -> NativeFloatingPoint","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/touint()","title":"func toUInt() -> UInt","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/touint16()","title":"func toUInt16() -> UInt16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/touint32()","title":"func toUInt32() -> UInt32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/touint64()","title":"func toUInt64() -> UInt64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/touint8()","title":"func toUInt8() -> UInt8","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint64\/numberconvertible-implementations","title":"NumberConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init(_:)-22wqj","title":"init(Int16)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init(_:)-5jufv","title":"init(Int64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init(_:)-5t9vz","title":"init(Int8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init(_:)-9c093","title":"init(Int32)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint64\/signedintegerinitiable-implementations","title":"SignedIntegerInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/uint64\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/absolutevalue","title":"var absoluteValue: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/isnegative","title":"var isNegative: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/canbesignminus","title":"static var canBeSignMinus: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/uint64\/unsigned-implementations","title":"Unsigned Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init(_:)-17azv","title":"init(UInt32)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init(_:)-2p3yt","title":"init(UInt64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init(_:)-6b23n","title":"init(UInt16)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint64\/init(_:)-7xjgv","title":"init(UInt8)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint64\/unsignedintegerinitiable-implementations","title":"UnsignedIntegerInitiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/uint64","title":"UInt64","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/bit(atindex:)","title":"func bit(atIndex: UInt8) -> Bit","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/setbit(_:atindex:)","title":"func setBit(Bit, atIndex: UInt8)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(bitpattern:)","title":"init(bitPattern: Self.BitPattern)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/bitpattern-swift.property","title":"var bitPattern: UInt8.BitPattern","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/bitpattern-swift.typealias","title":"UInt8.BitPattern","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/uint8\/bitpatternconvertible-implementations","title":"BitPatternConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(_:)-1jju5","title":"init(ObjCBool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(_:)-7kgky","title":"init(DarwinBoolean)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(_:)-9s1qi","title":"init(Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(boolean:)","title":"init<T>(boolean: T)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint8\/booleaninitiable-implementations","title":"BooleanInitiable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/isminimumormaximum","title":"var isMinimumOrMaximum: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/maximum","title":"static let maximum: UInt8","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/minimum","title":"static let minimum: UInt8","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/uint8\/bounded-implementations","title":"Bounded Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/random()","title":"static func random() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/random(maximum:)","title":"static func random(maximum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/random(minimum:)","title":"static func random(minimum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/random(minimum:maximum:)","title":"static func random(minimum: UInt8, maximum: UInt8) -> UInt8","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/random(minimum:maximum:excluding:)-5sbpy","title":"static func random(minimum: Self, maximum: Self, excluding: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/random(minimum:maximum:excluding:)-9q3t0","title":"static func random(minimum: Self, maximum: Self, excluding: Range<Self>) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint8\/boundedrandomnable-implementations","title":"BoundedRandomnable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/bigendianview","title":"var bigEndianView: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/littleendianview","title":"var littleEndianView: Self","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/swapbyteorder()-283yt","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/swapbyteorder()-ee2x","title":"func swapByteOrder()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/swapbyteorderbigtohost()","title":"func swapByteOrderBigToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/swapbyteorderhosttobig()","title":"func swapByteOrderHostToBig()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/swapbyteorderhosttolittle()","title":"func swapByteOrderHostToLittle()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/swapbyteorderlittletohost()","title":"func swapByteOrderLittleToHost()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/swappingbyteorder()","title":"func swappingByteOrder() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/swappingbyteorderbigtohost()","title":"func swappingByteOrderBigToHost() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/swappingbyteorderhosttobig()","title":"func swappingByteOrderHostToBig() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/swappingbyteorderhosttolittle()","title":"func swappingByteOrderHostToLittle() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/swappingbyteorderhosttoportable()","title":"func swappingByteOrderHostToPortable() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/swappingbyteorderlittletohost()","title":"func swappingByteOrderLittleToHost() -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint8\/byteorderswappable-implementations","title":"ByteOrderSwappable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(_:)-1ifig","title":"init(Bit)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/bytetuple","title":"var byteTuple: Self.ByteTupleType","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/bytetupletype","title":"UInt8.ByteTupleType","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/uint8\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/datadecodingstrategy","title":"UInt8.DataDecodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/uint8\/datadecodable-implementations","title":"DataDecodable Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/dataencodingstrategy","title":"UInt8.DataEncodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/uint8\/dataencodable-implementations","title":"DataEncodable Implementations","type":"symbol"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/iscontinuous","title":"static var isContinuous: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/isdiscrete","title":"static var isDiscrete: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/uint8\/discreteorcontinuous-implementations","title":"DiscreteOrContinuous Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/uint8\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(_:)-1l1gs","title":"init(NSDecimalNumber)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(_:)-1xlua","title":"init(CGFloat)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(_:)-80yf0","title":"init(Decimal)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint8\/floatingpointinitiable-implementations","title":"FloatingPointInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init()-3z10y","title":"init()","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init()-6g8ke","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint8\/initiable-implementations","title":"Initiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(unchecked:)","title":"init<N>(unchecked: N)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/lossless(from:)-5s3iz","title":"static func lossless<N>(from: N) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/lossless(from:)-7zi33","title":"static func lossless(from: AnyNumber) throws -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint8\/number-implementations","title":"Number Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/nativefloatingpointvalue","title":"var nativeFloatingPointValue: NativeFloatingPoint","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/tobool()","title":"func toBool() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/tocgfloat()","title":"func toCGFloat() -> CGFloat","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/todecimal()","title":"func toDecimal() -> Decimal","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/todouble()","title":"func toDouble() -> Double","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/tofloat()","title":"func toFloat() -> Float","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/toint()","title":"func toInt() -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/toint16()","title":"func toInt16() -> Int16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/toint32()","title":"func toInt32() -> Int32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/toint64()","title":"func toInt64() -> Int64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/toint8()","title":"func toInt8() -> Int8","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/tonsnumber()","title":"func toNSNumber() -> NSNumber","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/tonativefloatingpointvalue()","title":"func toNativeFloatingPointValue() -> NativeFloatingPoint","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/touint()","title":"func toUInt() -> UInt","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/touint16()","title":"func toUInt16() -> UInt16","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/touint32()","title":"func toUInt32() -> UInt32","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/touint64()","title":"func toUInt64() -> UInt64","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/touint8()","title":"func toUInt8() -> UInt8","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/uint8\/numberconvertible-implementations","title":"NumberConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(_:)-1sl0b","title":"init(Int64)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(_:)-2vuh3","title":"init(Int8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(_:)-5ry31","title":"init(Int16)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(_:)-9f4vl","title":"init(Int32)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint8\/signedintegerinitiable-implementations","title":"SignedIntegerInitiable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/uint8\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/absolutevalue","title":"var absoluteValue: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/isnegative","title":"var isNegative: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/canbesignminus","title":"static var canBeSignMinus: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/uint8\/unsigned-implementations","title":"Unsigned Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(_:)-2pxuu","title":"init(UInt8)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(_:)-4lyfe","title":"init(UInt16)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(_:)-7wvii","title":"init(UInt32)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/uint8\/init(_:)-97ekf","title":"init(UInt64)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/uint8\/unsignedintegerinitiable-implementations","title":"UnsignedIntegerInitiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/uint8","title":"UInt8","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unmanaged\/flatmap(_:)","title":"func flatMap<T>((Instance) throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unmanaged\/map(_:)-491gd","title":"func map<T>((Instance) throws -> T?) rethrows -> Unmanaged<T>?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unmanaged\/map(_:)-8l1jo","title":"func map<T>((Instance) throws -> T) rethrows -> Unmanaged<T>","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unmanaged\/autorelease(_:)","title":"static func autorelease(Instance)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unmanaged\/autoreleasing(_:)","title":"static func autoreleasing(Instance) -> Unmanaged<Instance>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unmanaged\/release(_:)","title":"static func release(Instance)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unmanaged\/releasing(_:)","title":"static func releasing(Instance) -> Unmanaged<Instance>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unmanaged\/retain(_:)","title":"static func retain(Instance)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unmanaged\/retaining(_:)","title":"static func retaining(Instance) -> Unmanaged<Instance>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unmanaged\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/unmanaged\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unmanaged\/value-swift.property","title":"var value: Unmanaged<Instance>.Value","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unmanaged\/mutablewrapper-implementations","title":"MutableWrapper Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unmanaged\/map(_:)-6nlx5","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unmanaged\/value-swift.typealias","title":"Unmanaged.Value","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/unmanaged\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unmanaged\/init(_:)","title":"init(Unmanaged<Instance>.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/unmanaged\/wrapper-implementations","title":"Wrapper Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/unmanaged","title":"Unmanaged","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/unsafebufferpointerrepresentation","title":"var unsafeBufferPointerRepresentation: UnsafeBufferPointer<Self.Element>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/unsafemutablebufferpointerrepresentation","title":"var unsafeMutableBufferPointerRepresentation: UnsafeMutableBufferPointer<Self.Element>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/unsafemutablepointerrepresentation","title":"var unsafeMutablePointerRepresentation: UnsafeMutablePointer<Self.Element>?","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/unsafepointerrepresentation","title":"var unsafePointerRepresentation: UnsafePointer<Self.Element>?","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/unsaferawpointerrepresentation","title":"var unsafeRawPointerRepresentation: UnsafeRawPointer?","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/baseaddresspointer","title":"UnsafeBufferPointer.BaseAddressPointer","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/bufferpointer-implementations","title":"BufferPointer Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/assumingmemorybound(to:)","title":"func assumingMemoryBound<T>(to: T.Type) -> UnsafeBufferPointer<T>","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/constantbufferpointer-implementations","title":"ConstantBufferPointer Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/init(_:)-59xll","title":"init<BP>(BP)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/init(_:)-6wki1","title":"init<BP>(BP)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/init(start:count:)-2yny1","title":"init<P, N>(start: P?, count: N)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/init(start:count:)-3zqb2","title":"init<P, N>(start: P?, count: N)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/init(start:count:)-7ejvy","title":"init<P>(start: P?, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/init(start:count:)-wmp9","title":"init<P, N>(start: P?, count: N)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/allocate(capacity:)-25s67","title":"static func allocate(capacity: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/allocate(capacity:)-6pftu","title":"static func allocate<N>(capacity: N) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/initializing(from:)-56mn2","title":"static func initializing<BPI>(from: BPI) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/initializing(from:)-6qvxg","title":"static func initializing<C>(from: C) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/initializing(from:)-74axb","title":"static func initializing<S>(from: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/initializing(from:)-7sikp","title":"static func initializing<BPI>(from: BPI) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/initializing(from:count:)-2kei8","title":"static func initializing(from: Self.BaseAddressPointer, count: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/initializing(from:count:)-6sz5f","title":"static func initializing<C>(from: C, count: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/initializing(from:count:)-8jj6i","title":"static func initializing<S>(from: S, count: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/to(assuminglayoutcompatible:)","title":"static func to<T>(assumingLayoutCompatible: inout T) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/initiablebufferpointer-implementations","title":"InitiableBufferPointer Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/join(_:)","title":"func join(Self) -> Self.JointSequenceType","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/joinablecollection-implementations","title":"JoinableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/immutablerepresentation-swift.property","title":"var immutableRepresentation: Self","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/mutablerepresentationconvertible-implementations","title":"MutableRepresentationConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/nondestructivecount","title":"var nonDestructiveCount: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/nondestroyingsequence-implementations","title":"NonDestroyingSequence Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/immutablerepresentation-swift.typealias","title":"UnsafeBufferPointer.ImmutableRepresentation","type":"typealias"},{"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/mutablerepresentation","title":"UnsafeBufferPointer.MutableRepresentation","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer\/_mutablerepresentationconvertible-implementations","title":"_MutableRepresentationConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/unsafebufferpointer","title":"UnsafeBufferPointer","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/unsafebufferpointerrepresentation","title":"var unsafeBufferPointerRepresentation: UnsafeBufferPointer<Self.Element>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/unsafemutablebufferpointerrepresentation","title":"var unsafeMutableBufferPointerRepresentation: UnsafeMutableBufferPointer<Self.Element>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/unsafemutablepointerrepresentation","title":"var unsafeMutablePointerRepresentation: UnsafeMutablePointer<Self.Element>?","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/unsafepointerrepresentation","title":"var unsafePointerRepresentation: UnsafePointer<Self.Element>?","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/unsaferawpointerrepresentation","title":"var unsafeRawPointerRepresentation: UnsafeRawPointer?","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/baseaddresspointer","title":"UnsafeMutableBufferPointer.BaseAddressPointer","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/bufferpointer-implementations","title":"BufferPointer Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/init(_:)","title":"init<BP>(BP)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/init(start:count:)-3zqa6","title":"init<P, N>(start: P?, count: N)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/init(start:count:)-7ejv2","title":"init<P>(start: P?, count: Int)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/allocate(capacity:)-25s73","title":"static func allocate(capacity: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/allocate(capacity:)-6pfsy","title":"static func allocate<N>(capacity: N) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/initializing(from:)-56mny","title":"static func initializing<BPI>(from: BPI) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/initializing(from:)-6qvwk","title":"static func initializing<C>(from: C) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/initializing(from:)-74ay7","title":"static func initializing<S>(from: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/initializing(from:)-7sill","title":"static func initializing<BPI>(from: BPI) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/initializing(from:count:)-2kehc","title":"static func initializing(from: Self.BaseAddressPointer, count: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/initializing(from:count:)-6sz4j","title":"static func initializing<C>(from: C, count: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/initializing(from:count:)-8jj7e","title":"static func initializing<S>(from: S, count: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/to(assuminglayoutcompatible:)","title":"static func to<T>(assumingLayoutCompatible: inout T) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/initiablebufferpointer-implementations","title":"InitiableBufferPointer Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/join(_:)","title":"func join(Self) -> Self.JointSequenceType","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/joinablecollection-implementations","title":"JoinableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/assign(from:)","title":"func assign<BP>(from: BP)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/assumingmemorybound(to:)","title":"func assumingMemoryBound<T>(to: T.Type) -> UnsafeMutableBufferPointer<T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/deinitialize(count:)","title":"func deinitialize(count: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/initialize(from:)","title":"func initialize<S>(from: S) -> (S.Iterator, Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/update(from:)","title":"func update<P>(from: P)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/update(from:count:)-30vc7","title":"func update<P>(from: P, count: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/update(from:count:)-4ywnn","title":"func update<BP>(from: BP, count: Int)","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/mutablebufferpointer-implementations","title":"MutableBufferPointer Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/mutablerepresentation-swift.property","title":"var mutableRepresentation: Self","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/mutablerepresentationconvertible-implementations","title":"MutableRepresentationConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/replace(allof:with:)","title":"func replace(allOf: Self.Element, with: Self.Element)","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/mutablesequence-implementations","title":"MutableSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/nondestructivecount","title":"var nonDestructiveCount: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/nondestroyingsequence-implementations","title":"NonDestroyingSequence Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/immutablerepresentation","title":"UnsafeMutableBufferPointer.ImmutableRepresentation","type":"typealias"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/mutablerepresentation-swift.typealias","title":"UnsafeMutableBufferPointer.MutableRepresentation","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer\/_mutablerepresentationconvertible-implementations","title":"_MutableRepresentationConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablebufferpointer","title":"UnsafeMutableBufferPointer","type":"extension"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/value","title":"var value: Pointee","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/init(bitpattern:)-76sc8","title":"init(bitPattern: Self.BitPattern)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/bitpattern-swift.property","title":"var bitPattern: UnsafeMutablePointer<Pointee>.BitPattern","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/bitpattern-swift.typealias","title":"UnsafeMutablePointer.BitPattern","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/bitpatternconvertible-implementations","title":"BitPatternConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/bytetuple-57a3b","title":"var byteTuple: Self.ByteTupleType","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/filestream","title":"var fileStream: UnsafeMutablePointer<__sFILE>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/flush()","title":"func flush() -> CInt","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/next()","title":"func next() -> String?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/print(_:separator:terminator:)","title":"func print(Any..., separator: String, terminator: String) -> CInt","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/readall(close:)","title":"func readAll(close: Bool) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/readline(strippingnewline:)","title":"func readLine(strippingNewline: Bool) -> String?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/write(data:)","title":"func write(data: Data) -> Int","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/filestream-implementations","title":"FILEStream Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/erasetoanyiterator()","title":"func eraseToAnyIterator() -> AnyIterator<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/exhaust()","title":"func exhaust()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/exhaust(count:)","title":"func exhaust<N>(count: N) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/exhausting()","title":"func exhausting() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/join(_:)-8skea","title":"func join<G>(G) -> Join2Iterator<Self, G>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/makesequence()","title":"func makeSequence() -> IteratorSequence<Self>","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/iteratorprotocol-implementations","title":"IteratorProtocol Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/init(mutating:)-2o3e4","title":"init(mutating: UnsafePointer<Self.Pointee>)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/init(mutating:)-cc24","title":"init?(mutating: UnsafePointer<Self.Pointee>?)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/assumingmemorybound(to:)","title":"func assumingMemoryBound<T>(to: T.Type) -> UnsafeMutablePointer<T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/deinitialize(capacity:)","title":"func deinitialize<N>(capacity: N) -> UnsafeMutableRawPointer","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/deinitializefirst()","title":"func deinitializeFirst() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/initialize(from:)-6oaga","title":"func initialize<BP>(from: BP)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/initialize(from:)-83fa9","title":"func initialize<S>(from: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/initialize(from:)-8ws0l","title":"func initialize<C>(from: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/initialize(from:count:)","title":"func initialize<P>(from: P, count: Self.Stride)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/initialize(repeating:count:)-2hke","title":"func initialize<N>(repeating: Self.Pointee, count: N)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/initialize(repeating:count:)-859t7","title":"func initialize(repeating: Self.Pointee, count: Self.Stride)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/initializing(to:)","title":"func initializing(to: Self.Pointee) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/initializing(to:count:)","title":"func initializing<N>(to: Self.Pointee, count: N) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/reinitialize(to:)","title":"func reinitialize(to: Self.Pointee)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/remove()","title":"func remove() -> Self.Pointee","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/set(pointee:at:)","title":"func set(pointee: Self.Pointee, at: Self.Stride)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/update(from:)-3ttc7","title":"func update<S>(from: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/update(from:)-8s4wa","title":"func update<BP>(from: BP)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/update(from:)-94rjc","title":"func update<C>(from: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/update(from:count:)-1c5jc","title":"func update<P>(from: P, count: Self.Stride)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/update(from:count:)-1e6hv","title":"func update(from: UnsafePointer<Self.Pointee>, count: Self.Stride)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/update(from:count:)-24qey","title":"func update<P, N>(from: P, count: N)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/update(repeating:count:)","title":"func update(repeating: Self.Pointee, count: Self.Stride)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/update(to:)","title":"func update(to: Self.Pointee)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/initializing(from:)-18el9","title":"static func initializing<BP>(from: BP) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/initializing(from:)-6mwrw","title":"static func initializing<C>(from: C) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/initializing(from:)-907md","title":"static func initializing<S>(from: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/initializing(from:count:)","title":"static func initializing<P>(from: P, count: Self.Stride) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/mutablepointer-implementations","title":"MutablePointer Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/mutablerepresentation-swift.property","title":"var mutableRepresentation: Self","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/mutablerepresentationconvertible-implementations","title":"MutableRepresentationConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/bytetuple-4uhi3","title":"var byteTuple: NativeByteTupleType","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/nativewordsized-implementations","title":"NativeWordSized Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/init(_:)-49ldi","title":"init<P>(P)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/init(_:)-6shnh","title":"init?<P>(P?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/init(bitpattern:)-5xxfc","title":"init<P>(bitPattern: P)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/mutablerawrepresentation","title":"var mutableRawRepresentation: UnsafeMutableRawPointer","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/nativewordpointerrepresentation","title":"var nativeWordPointerRepresentation: UnsafePointer<NativeWord>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/opaquepointerrepresentation","title":"var opaquePointerRepresentation: OpaquePointer","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/rawrepresentation","title":"var rawRepresentation: UnsafeRawPointer","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/unsafemutablepointerrepresentation","title":"var unsafeMutablePointerRepresentation: UnsafeMutablePointer<Self.Pointee>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/unsafepointerrepresentation","title":"var unsafePointerRepresentation: UnsafePointer<Self.Pointee>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/allocate(initializingto:)","title":"static func allocate(initializingTo: Self.Pointee) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/allocate(initializingto:count:)","title":"static func allocate<N>(initializingTo: Self.Pointee, count: N) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/to(_:)","title":"static func to(inout Self.Pointee) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/to(assuminglayoutcompatible:)","title":"static func to<T>(assumingLayoutCompatible: inout T) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/pointer-implementations","title":"Pointer Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/allsatisfy(_:)-2jp4j","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/allsatisfy(_:)-75k0p","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/compactmap(_:)-1eghl","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/compactmap(_:)-8tec7","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/concurrentforeach(_:)-7dj2w","title":"func concurrentForEach((Self.Element) async throws -> Void) async throws","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/concurrentforeach(_:)-7yi62","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/distinct()-2dso0","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/distinct()-5hibt","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/distinct(by:)-64tlo","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/distinct(by:)-7dt2q","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/filter(_:)-44xim","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/filter(_:)-6bj7v","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/find(_:)-3dlof","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/find(_:)-9ds9t","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/find(_:mutate:)-2mj7u","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/find(_:mutate:)-4rltn","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/first(byunwrapping:)-1qug9","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/first(byunwrapping:)-7u5q3","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/first(oftype:)","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/firstandonly(byunwrapping:)-5hg5","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/firstandonly(byunwrapping:)-6vl79","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/firstandonly(oftype:)","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/firstandonly(where:)-2w5qs","title":"func firstAndOnly(where: (Self.Element) async throws -> Bool) async throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/firstandonly(where:)-5oqgd","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/flatmap(_:)-6chtt","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/flatmap(_:)-8vys7","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/flatmap(_:)-i3n6","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/hasprefix(_:)-41cyg","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/hasprefix(_:)-9cjgm","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/join(_:)-1af10","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/join(_:)-50z72","title":"func join<S>(S) -> Join2Sequence<Self, S>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/joined(separator:)-1ckos","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/joined(separator:)-7ubf6","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/longestconsecutivesequences(by:relativeto:)-63i7h","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/longestconsecutivesequences(by:relativeto:)-7apnd","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/makeiterator()","title":"func makeIterator() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/map(_:)-9jnoo","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/map(_:)-9rxnl","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/max(by:)-76x88","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/max(by:)-9viv6","title":"func max<Value>(by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/min(by:)-4f2pi","title":"func min<Value>(by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/min(by:)-7wrkb","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/minormax(_:by:)-11o7v","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/minormax(_:by:)-8uff3","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/reduce(_:)-36c86","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/reduce(_:)-4i5ml","title":"func reduce<T>(((T, Self.Element) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/reduce(_:)-hn4p","title":"func reduce<T>(((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/reduce(_:_:)-2zgv","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/reduce(_:_:)-62itj","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/removefirst(byunwrapping:)-1lb35","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/removefirst(byunwrapping:)-89vhf","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sorted(by:)-241cm","title":"func sorted<T>(by: KeyPath<Self.Element, T>) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sorted(by:)-7k7r7","title":"func sorted<T>(by: (Self.Element) throws -> T) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sorted(by:)-99gtx","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sorted(by:order:)-57jwd","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sorted(by:order:)-7hj1i","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sorted(using:)-5f5cc","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sorted(using:)-9wfls","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/element","title":"UnsafeMutablePointer.Element","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/maximum","title":"var maximum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/minimum","title":"var minimum: Self.Element?","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/allelementsareequal()","title":"func allElementsAreEqual() -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/allelementsareequal(to:)","title":"func allElementsAreEqual(to: Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/allsatisfy(_:)-2jp4j","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/allsatisfy(_:)-75k0p","title":"func allSatisfy(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/anysatisfies(_:)","title":"func anySatisfies(KeyPath<Self.Element, Bool>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/asynccompactmap(_:)","title":"func asyncCompactMap<T>((Self.Element) async throws -> T?) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/asyncflatmap(_:)","title":"func asyncFlatMap<T>((Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/asyncforeach(_:)","title":"func asyncForEach((Self.Element) async throws -> Void) async rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/asyncmap(_:)","title":"func asyncMap<T>((Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/between(count:and:)","title":"func between(count: Int, and: Int) -> PrefixSequence<DropFirstSequence<Self>>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/compactmap(_:)-1eghl","title":"func compactMap<Value>(CasePath<Self.Element, Value>) -> [Value]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/compactmap(_:)-8tec7","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/concatenateandreduce(_:_:)","title":"func concatenateAndReduce<T>((Self.Element, Self.Element) throws -> T, (T, Self.Element) throws -> T) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/concurrentflatmap(priority:_:)","title":"func concurrentFlatMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/concurrentforeach(_:)-7dj2w","title":"func concurrentForEach((Self.Element) async throws -> Void) async throws","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/concurrentforeach(_:)-7yi62","title":"func concurrentForEach((Self.Element) async -> Void) async","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/concurrentmap(priority:_:)","title":"func concurrentMap<T>(priority: TaskPriority?, (Self.Element) async throws -> T) async rethrows -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/consecutives()","title":"func consecutives() -> SequenceWrapperMap<Self, ConsecutiveIterator<Self.Iterator>>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/count(where:)","title":"func count<E>(where: (Self.Element) throws(E) -> Bool) throws(E) -> Int","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/distinct()-2dso0","title":"func distinct() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/distinct()-5hibt","title":"func distinct() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/distinct(by:)-64tlo","title":"func distinct<T>(by: KeyPath<Self.Element, T>) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/distinct(by:)-7dt2q","title":"func distinct<T>(by: (Self.Element) -> T) -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/duplicates(groupedby:)","title":"func duplicates<T>(groupedBy: KeyPath<Self.Element, T>) -> [T : [Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/element(after:)","title":"func element(after: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/element(before:)","title":"func element(before: ((Self.Element) throws -> Bool)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/elementofgreatestcount()","title":"func elementOfGreatestCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/elementofleastcount()","title":"func elementOfLeastCount() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/elements(between:and:)","title":"func elements(between: ((Self.Element) throws -> Bool), and: ((Self.Element) throws -> Bool)) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/erasetoanysequence()","title":"func eraseToAnySequence() -> AnySequence<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/filter(_:)-44xim","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/filter(_:)-6bj7v","title":"func filter(Predicate<Self.Element>) throws -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/find(_:)-3dlof","title":"func find<T>(((((T) -> Void), Self.Element) throws -> Void)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/find(_:)-9ds9t","title":"func find<T>(((Self.Element) throws -> T)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/find(_:mutate:)-2mj7u","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/find(_:mutate:)-4rltn","title":"func find<Result>((Self.Element) throws -> Bool, mutate: (inout Self.Element?) throws -> Result) rethrows -> Result?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/first(byunwrapping:)-1qug9","title":"func first<T>(byUnwrapping: (Self.Element) async throws -> T?) async rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/first(byunwrapping:)-7u5q3","title":"func first<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/first(oftype:)","title":"func first<T>(ofType: T.Type) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/firstandonly(byunwrapping:)-5hg5","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) async throws -> T?) async throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/firstandonly(byunwrapping:)-6vl79","title":"func firstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/firstandonly(oftype:)","title":"func firstAndOnly<T>(ofType: T.Type) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/firstandonly(where:)-2w5qs","title":"func firstAndOnly(where: (Self.Element) async throws -> Bool) async throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/firstandonly(where:)-5oqgd","title":"func firstAndOnly(where: (Self.Element) throws -> Bool) throws -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/flatmap(_:)-6chtt","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/flatmap(_:)-8vys7","title":"func flatMap<S>(((Self.Element) throws -> S)) rethrows -> IdentifierIndexingArrayOf<S.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/flatmap(_:)-i3n6","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/formatted()","title":"func formatted() -> String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/hasprefix(_:)-41cyg","title":"func hasPrefix(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/hasprefix(_:)-9cjgm","title":"func hasPrefix(some Sequence<Self.Element>) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/identified(by:)","title":"func identified<T>(by: KeyPath<Self.Element, T>) -> IdentifierIndexingArray<Self.Element, T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/interspersed(with:)","title":"func interspersed(with: Self.Element) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/interspersed(with:where:)","title":"func interspersed(with: Self.Element, where: (Self.Element) -> Bool) -> AnyRandomAccessCollection<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/join(_:)-1af10","title":"func join(Self.Element) -> Join2Sequence<Self, CollectionOfOne<Self.Element>>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/join(_:)-50z72","title":"func join<S>(S) -> Join2Sequence<Self, S>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/joined(separator:)-1ckos","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/joined(separator:)-7ubf6","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/lexicographicallyprecedes(_:orderingshortersequencesafter:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, orderingShorterSequencesAfter: ()) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/longestconsecutivesequence(where:)","title":"func longestConsecutiveSequence(where: (Self.Element, Self.Element) -> Bool) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/longestconsecutivesequences(by:relativeto:)-63i7h","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence<Self.Element>) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/longestconsecutivesequences(by:relativeto:)-7apnd","title":"func longestConsecutiveSequences<T>(by: KeyPath<Self.Element, T>, relativeTo: some Sequence) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/longestconsecutivesequences(where:)","title":"func longestConsecutiveSequences(where: (Self.Element, Self.Element) -> Bool) -> [[Self.Element]]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/makeiterator()","title":"func makeIterator() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/map(_:)-9jnoo","title":"func map<T, E>((Self.Element) throws(E) -> T) throws(E) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/map(_:)-9rxnl","title":"func map<T>(((Self.Element) throws -> T)) rethrows -> IdentifierIndexingArrayOf<T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/map(_:everyother:)","title":"func map<T>(((Self.Element) -> T), everyOther: ((Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, Bool, T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Self.Element, T>) -> [T]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/map(state:transform:)","title":"func map<State, T>(state: State, transform: ((inout State, Self.Element) -> T)) -> LazyMapSequenceWithMemoryRecall<Self, State, T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/max(by:)-76x88","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/max(by:)-9viv6","title":"func max<Value>(by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/min(by:)-4f2pi","title":"func min<Value>(by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/min(by:)-7wrkb","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/minormax(_:)","title":"func minOrMax(_SequenceMinimumOrMaximum) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/minormax(_:by:)-11o7v","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: KeyPath<Self.Element, Value>) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/minormax(_:by:)-8uff3","title":"func minOrMax<Value>(_SequenceMinimumOrMaximum, by: (Self.Element) -> Value) -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/reduce(_:)-36c86","title":"func reduce(((Self.Element, Self.Element) throws -> Self.Element)) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/reduce(_:)-4i5ml","title":"func reduce<T>(((T, Self.Element) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/reduce(_:)-hn4p","title":"func reduce<T>(((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/reduce(_:_:)-2zgv","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/reduce(_:_:)-62itj","title":"func reduce<T>(T, ((T) throws -> ((Self.Element) -> T))) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/reduce(_:combine:)","title":"func reduce<T>((Self.Element) -> T, combine: ((T, Self.Element) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/removefirst(byunwrapping:)-1lb35","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/removefirst(byunwrapping:)-89vhf","title":"func removeFirst<T>(byUnwrapping: (Self.Element) throws -> T?) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/removefirstandonly(byunwrapping:)","title":"func removeFirstAndOnly<T>(byUnwrapping: (Self.Element) throws -> T?) throws -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sorted(by:)-241cm","title":"func sorted<T>(by: KeyPath<Self.Element, T>) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sorted(by:)-7k7r7","title":"func sorted<T>(by: (Self.Element) throws -> T) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sorted(by:)-99gtx","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sorted(by:order:)-57jwd","title":"func sorted<T>(by: KeyPath<Self.Element, T>, order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sorted(by:order:)-7hj1i","title":"func sorted<T>(by: (Self.Element) throws -> T, order: _SequenceSortOrder) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sorted(order:)","title":"func sorted(order: _SequenceSortOrder) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sorted(using:)-5f5cc","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sorted(using:)-9wfls","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/splitbefore(separator:)","title":"func splitBefore(separator: (Self.Iterator.Element) throws -> Bool) rethrows -> [AnySequence<Self.Iterator.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/subsequences(groupedby:)","title":"func subsequences<T>(groupedBy: (Self.Element) throws -> T) rethrows -> [Array<Self.Element>]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/zip(_:)","title":"func zip<S>(S) -> Zip2Sequence<Self, S>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/subscript(between:)","title":"subscript(between _: Range<Int>) -> PrefixSequence<DropFirstSequence<Self>>","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/element","title":"UnsafeMutablePointer.Element","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sequence-implementations","title":"Sequence Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/immutablerepresentation","title":"UnsafeMutablePointer.ImmutableRepresentation","type":"typealias"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/mutablerepresentation-swift.typealias","title":"UnsafeMutablePointer.MutableRepresentation","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer\/_mutablerepresentationconvertible-implementations","title":"_MutableRepresentationConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablepointer","title":"UnsafeMutablePointer","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/unsafebufferpointerrepresentation","title":"var unsafeBufferPointerRepresentation: UnsafeBufferPointer<Self.Element>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/unsafemutablebufferpointerrepresentation","title":"var unsafeMutableBufferPointerRepresentation: UnsafeMutableBufferPointer<Self.Element>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/unsafemutablepointerrepresentation","title":"var unsafeMutablePointerRepresentation: UnsafeMutablePointer<Self.Element>?","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/unsafepointerrepresentation","title":"var unsafePointerRepresentation: UnsafePointer<Self.Element>?","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/unsaferawpointerrepresentation","title":"var unsafeRawPointerRepresentation: UnsafeRawPointer?","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/baseaddresspointer","title":"UnsafeMutableRawBufferPointer.BaseAddressPointer","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/bufferpointer-implementations","title":"BufferPointer Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/init(_:)","title":"init<BP>(BP)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/init(start:count:)-3zqa3","title":"init<P, N>(start: P?, count: N)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/init(start:count:)-7ejuz","title":"init<P>(start: P?, count: Int)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/allocate(capacity:)-25s6y","title":"static func allocate(capacity: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/allocate(capacity:)-6pft3","title":"static func allocate<N>(capacity: N) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/initializing(from:)-56mnv","title":"static func initializing<BPI>(from: BPI) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/initializing(from:)-6qvwh","title":"static func initializing<C>(from: C) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/initializing(from:)-74ay2","title":"static func initializing<S>(from: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/initializing(from:)-7silo","title":"static func initializing<BPI>(from: BPI) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/initializing(from:count:)-2kehh","title":"static func initializing(from: Self.BaseAddressPointer, count: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/initializing(from:count:)-6sz4m","title":"static func initializing<C>(from: C, count: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/initializing(from:count:)-8jj7j","title":"static func initializing<S>(from: S, count: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/to(assuminglayoutcompatible:)","title":"static func to<T>(assumingLayoutCompatible: inout T) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/initiablebufferpointer-implementations","title":"InitiableBufferPointer Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/join(_:)","title":"func join(Self) -> Self.JointSequenceType","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/joinablecollection-implementations","title":"JoinableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/assign(from:)","title":"func assign<BP>(from: BP)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/assumingmemorybound(to:)","title":"func assumingMemoryBound<T>(to: T.Type) -> UnsafeMutableBufferPointer<T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/deinitialize()","title":"func deinitialize()","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/deinitialize(count:)","title":"func deinitialize(count: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/initialize(from:)","title":"func initialize<S>(from: S) -> (S.Iterator, Self.Index)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/update(from:)","title":"func update<P>(from: P)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/update(from:count:)-30vc2","title":"func update<P>(from: P, count: Int)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/update(from:count:)-4ywnq","title":"func update<BP>(from: BP, count: Int)","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/mutablebufferpointer-implementations","title":"MutableBufferPointer Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/mutablerepresentation-swift.property","title":"var mutableRepresentation: Self","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/mutablerepresentationconvertible-implementations","title":"MutableRepresentationConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/replace(allof:with:)","title":"func replace(allOf: Self.Element, with: Self.Element)","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/mutablesequence-implementations","title":"MutableSequence Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/nondestructivecount","title":"var nonDestructiveCount: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/nondestroyingsequence-implementations","title":"NonDestroyingSequence Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/immutablerepresentation","title":"UnsafeMutableRawBufferPointer.ImmutableRepresentation","type":"typealias"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/mutablerepresentation-swift.typealias","title":"UnsafeMutableRawBufferPointer.MutableRepresentation","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer\/_mutablerepresentationconvertible-implementations","title":"_MutableRepresentationConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawbufferpointer","title":"UnsafeMutableRawBufferPointer","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/init(bitpattern:)-76sce","title":"init(bitPattern: Self.BitPattern)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/bitpattern-swift.property","title":"var bitPattern: UnsafeMutableRawPointer.BitPattern","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/bitpattern-swift.typealias","title":"UnsafeMutableRawPointer.BitPattern","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/bitpatternconvertible-implementations","title":"BitPatternConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/init(mutating:)-2o3e2","title":"init(mutating: UnsafePointer<Self.Pointee>)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/init(mutating:)-cc22","title":"init?(mutating: UnsafePointer<Self.Pointee>?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/pointee","title":"var pointee: Self.Pointee","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/assumingmemorybound(to:)","title":"func assumingMemoryBound<T>(to: T.Type) -> UnsafeMutablePointer<T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/deinitialize(capacity:)","title":"func deinitialize<N>(capacity: N) -> UnsafeMutableRawPointer","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/deinitialize(count:)","title":"func deinitialize(count: Int) -> UnsafeMutableRawPointer","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/deinitializefirst()","title":"func deinitializeFirst() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/initialize(from:)-6oagc","title":"func initialize<BP>(from: BP)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/initialize(from:)-83faf","title":"func initialize<S>(from: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/initialize(from:)-8ws0j","title":"func initialize<C>(from: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/initialize(from:count:)","title":"func initialize<P>(from: P, count: Self.Stride)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/initialize(repeating:count:)","title":"func initialize(repeating: Self.Pointee, count: Self.Stride)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/initialize(to:)","title":"func initialize(to: Self.Pointee)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/initializing(to:)","title":"func initializing(to: Self.Pointee) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/initializing(to:count:)","title":"func initializing<N>(to: Self.Pointee, count: N) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/move()","title":"func move() -> Self.Pointee","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/reinitialize(to:)","title":"func reinitialize(to: Self.Pointee)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/remove()","title":"func remove() -> Self.Pointee","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/set(pointee:at:)","title":"func set(pointee: Self.Pointee, at: Self.Stride)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/update(from:)-3ttc1","title":"func update<S>(from: S)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/update(from:)-8s4wc","title":"func update<BP>(from: BP)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/update(from:)-94rji","title":"func update<C>(from: C)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/update(from:count:)","title":"func update(from: UnsafePointer<Self.Pointee>, count: Self.Stride)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/update(repeating:count:)","title":"func update(repeating: Self.Pointee, count: Self.Stride)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/update(to:)","title":"func update(to: Self.Pointee)","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/allocate(capacity:)","title":"static func allocate(capacity: UnsafeMutableRawPointer.Stride) -> UnsafeMutableRawPointer","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/initializing(from:)-18el7","title":"static func initializing<BP>(from: BP) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/initializing(from:)-6mwru","title":"static func initializing<C>(from: C) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/initializing(from:)-907mb","title":"static func initializing<S>(from: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/initializing(from:count:)","title":"static func initializing<P>(from: P, count: Self.Stride) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/mutablepointer-implementations","title":"MutablePointer Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/mutablerepresentation-swift.property","title":"var mutableRepresentation: Self","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/mutablerepresentationconvertible-implementations","title":"MutableRepresentationConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/bytetuple","title":"var byteTuple: NativeByteTupleType","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/nativewordsized-implementations","title":"NativeWordSized Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/init(_:)-49ldc","title":"init<P>(P)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/init(_:)-6shnf","title":"init?<P>(P?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/init(bitpattern:)-5xxfi","title":"init<P>(bitPattern: P)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/mutablerawrepresentation","title":"var mutableRawRepresentation: UnsafeMutableRawPointer","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/nativewordpointerrepresentation","title":"var nativeWordPointerRepresentation: UnsafePointer<NativeWord>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/opaquepointerrepresentation","title":"var opaquePointerRepresentation: OpaquePointer","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/rawrepresentation","title":"var rawRepresentation: UnsafeRawPointer","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/unsafemutablepointerrepresentation","title":"var unsafeMutablePointerRepresentation: UnsafeMutablePointer<Self.Pointee>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/unsafepointerrepresentation","title":"var unsafePointerRepresentation: UnsafePointer<Self.Pointee>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/allocate(initializingto:)","title":"static func allocate(initializingTo: Self.Pointee) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/allocate(initializingto:count:)","title":"static func allocate<N>(initializingTo: Self.Pointee, count: N) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/to(_:)","title":"static func to(inout Self.Pointee) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/to(assuminglayoutcompatible:)","title":"static func to<T>(assumingLayoutCompatible: inout T) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/pointer-implementations","title":"Pointer Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/advancedbystride(of:)","title":"func advancedByStride<T>(of: T.Type) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/rawpointer-implementations","title":"RawPointer Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/immutablerepresentation","title":"UnsafeMutableRawPointer.ImmutableRepresentation","type":"typealias"},{"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/mutablerepresentation-swift.typealias","title":"UnsafeMutableRawPointer.MutableRepresentation","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer\/_mutablerepresentationconvertible-implementations","title":"_MutableRepresentationConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/unsafemutablerawpointer","title":"UnsafeMutableRawPointer","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/init(bitpattern:)-76sbc","title":"init(bitPattern: Self.BitPattern)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/bitpattern-swift.property","title":"var bitPattern: UnsafePointer<Pointee>.BitPattern","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/bitpattern-swift.typealias","title":"UnsafePointer.BitPattern","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/bitpatternconvertible-implementations","title":"BitPatternConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/bytetuple-57a47","title":"var byteTuple: Self.ByteTupleType","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/init(_:)-86dpr","title":"init<P>(P)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/assumingmemorybound(to:)","title":"func assumingMemoryBound<T>(to: T.Type) -> UnsafePointer<T>","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/constantpointer-implementations","title":"ConstantPointer Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/immutablerepresentation-swift.property","title":"var immutableRepresentation: Self","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/mutablerepresentationconvertible-implementations","title":"MutableRepresentationConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/bytetuple-4uhiz","title":"var byteTuple: NativeByteTupleType","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/nativewordsized-implementations","title":"NativeWordSized Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/init(_:)-49lcm","title":"init<P>(P)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/init(_:)-6shod","title":"init?<P>(P?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/init(bitpattern:)-5xxeg","title":"init<P>(bitPattern: P)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/mutablerawrepresentation","title":"var mutableRawRepresentation: UnsafeMutableRawPointer","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/nativewordpointerrepresentation","title":"var nativeWordPointerRepresentation: UnsafePointer<NativeWord>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/opaquepointerrepresentation","title":"var opaquePointerRepresentation: OpaquePointer","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/rawrepresentation","title":"var rawRepresentation: UnsafeRawPointer","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/unsafemutablepointerrepresentation","title":"var unsafeMutablePointerRepresentation: UnsafeMutablePointer<Self.Pointee>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/unsafepointerrepresentation","title":"var unsafePointerRepresentation: UnsafePointer<Self.Pointee>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/allocate(initializingto:)","title":"static func allocate(initializingTo: Self.Pointee) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/allocate(initializingto:count:)","title":"static func allocate<N>(initializingTo: Self.Pointee, count: N) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/to(_:)","title":"static func to(inout Self.Pointee) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/to(assuminglayoutcompatible:)","title":"static func to<T>(assumingLayoutCompatible: inout T) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/pointer-implementations","title":"Pointer Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/immutablerepresentation-swift.typealias","title":"UnsafePointer.ImmutableRepresentation","type":"typealias"},{"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/mutablerepresentation","title":"UnsafePointer.MutableRepresentation","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/unsafepointer\/_mutablerepresentationconvertible-implementations","title":"_MutableRepresentationConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/unsafepointer","title":"UnsafePointer","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/unsafebufferpointerrepresentation","title":"var unsafeBufferPointerRepresentation: UnsafeBufferPointer<Self.Element>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/unsafemutablebufferpointerrepresentation","title":"var unsafeMutableBufferPointerRepresentation: UnsafeMutableBufferPointer<Self.Element>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/unsafemutablepointerrepresentation","title":"var unsafeMutablePointerRepresentation: UnsafeMutablePointer<Self.Element>?","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/unsafepointerrepresentation","title":"var unsafePointerRepresentation: UnsafePointer<Self.Element>?","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/unsaferawpointerrepresentation","title":"var unsafeRawPointerRepresentation: UnsafeRawPointer?","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/baseaddresspointer","title":"UnsafeRawBufferPointer.BaseAddressPointer","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/bufferpointer-implementations","title":"BufferPointer Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/assumingmemorybound(to:)","title":"func assumingMemoryBound<T>(to: T.Type) -> UnsafeBufferPointer<T>","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/constantbufferpointer-implementations","title":"ConstantBufferPointer Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/init(_:)-59xlo","title":"init<BP>(BP)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/init(_:)-6wki4","title":"init<BP>(BP)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/init(start:count:)-2yny4","title":"init<P, N>(start: P?, count: N)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/init(start:count:)-3zqaz","title":"init<P, N>(start: P?, count: N)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/init(start:count:)-7ejvv","title":"init<P>(start: P?, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/init(start:count:)-wmp4","title":"init<P, N>(start: P?, count: N)","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/allocate(capacity:)-25s62","title":"static func allocate(capacity: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/allocate(capacity:)-6pftz","title":"static func allocate<N>(capacity: N) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/initializing(from:)-56mmz","title":"static func initializing<BPI>(from: BPI) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/initializing(from:)-6qvxd","title":"static func initializing<C>(from: C) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/initializing(from:)-74ax6","title":"static func initializing<S>(from: S) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/initializing(from:)-7siks","title":"static func initializing<BPI>(from: BPI) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/initializing(from:count:)-2keid","title":"static func initializing(from: Self.BaseAddressPointer, count: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/initializing(from:count:)-6sz5i","title":"static func initializing<C>(from: C, count: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/initializing(from:count:)-8jj6n","title":"static func initializing<S>(from: S, count: Int) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/to(assuminglayoutcompatible:)","title":"static func to<T>(assumingLayoutCompatible: inout T) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/initiablebufferpointer-implementations","title":"InitiableBufferPointer Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/join(_:)","title":"func join(Self) -> Self.JointSequenceType","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/joinablecollection-implementations","title":"JoinableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/immutablerepresentation-swift.property","title":"var immutableRepresentation: Self","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/mutablerepresentationconvertible-implementations","title":"MutableRepresentationConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/nondestructivecount","title":"var nonDestructiveCount: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/nondestroyingsequence-implementations","title":"NonDestroyingSequence Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/immutablerepresentation-swift.typealias","title":"UnsafeRawBufferPointer.ImmutableRepresentation","type":"typealias"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/mutablerepresentation","title":"UnsafeRawBufferPointer.MutableRepresentation","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer\/_mutablerepresentationconvertible-implementations","title":"_MutableRepresentationConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/unsaferawbufferpointer","title":"UnsafeRawBufferPointer","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/offset(of:)","title":"func offset(of: Int) -> UnsafeRawPointer","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/offset(of:as:)","title":"func offset<T>(of: Int, as: T.Type) -> UnsafeRawPointer","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/init(bitpattern:)-76sbi","title":"init(bitPattern: Self.BitPattern)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/bitpattern-swift.property","title":"var bitPattern: UnsafeRawPointer.BitPattern","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/bitpattern-swift.typealias","title":"UnsafeRawPointer.BitPattern","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/bitpatternconvertible-implementations","title":"BitPatternConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/init(bytetuple:)","title":"init(byteTuple: Self.ByteTupleType)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/bytetupleconvertible-implementations","title":"ByteTupleConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/init(_:)-86dpl","title":"init<P>(P)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/assumingmemorybound(to:)","title":"func assumingMemoryBound<T>(to: T.Type) -> UnsafePointer<T>","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/constantpointer-implementations","title":"ConstantPointer Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/==(_:_:)","title":"static func == (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/immutablerepresentation-swift.property","title":"var immutableRepresentation: Self","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/mutablerepresentationconvertible-implementations","title":"MutableRepresentationConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/bytetuple","title":"var byteTuple: NativeByteTupleType","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/nativewordsized-implementations","title":"NativeWordSized Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/init(_:)-49lcg","title":"init<P>(P)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/init(_:)-6shob","title":"init?<P>(P?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/init(bitpattern:)-5xxem","title":"init<P>(bitPattern: P)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/mutablerawrepresentation","title":"var mutableRawRepresentation: UnsafeMutableRawPointer","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/nativewordpointerrepresentation","title":"var nativeWordPointerRepresentation: UnsafePointer<NativeWord>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/opaquepointerrepresentation","title":"var opaquePointerRepresentation: OpaquePointer","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/rawrepresentation","title":"var rawRepresentation: UnsafeRawPointer","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/unsafemutablepointerrepresentation","title":"var unsafeMutablePointerRepresentation: UnsafeMutablePointer<Self.Pointee>","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/unsafepointerrepresentation","title":"var unsafePointerRepresentation: UnsafePointer<Self.Pointee>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/allocate(initializingto:)","title":"static func allocate(initializingTo: Self.Pointee) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/allocate(initializingto:count:)","title":"static func allocate<N>(initializingTo: Self.Pointee, count: N) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/to(_:)","title":"static func to(inout Self.Pointee) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/to(assuminglayoutcompatible:)","title":"static func to<T>(assumingLayoutCompatible: inout T) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/pointer-implementations","title":"Pointer Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/advancedbystride(of:)","title":"func advancedByStride<T>(of: T.Type) -> Self","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/rawpointer-implementations","title":"RawPointer Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/init(bytes:)","title":"init?<S>(bytes: S)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/init(null:)","title":"init(null: Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/bits","title":"var bits: [Bit]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/bytes","title":"var bytes: [Byte]","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/isequal(to:)","title":"func isEqual(to: Self) -> Bool","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/withunsafebytes(_:)","title":"func withUnsafeBytes<T>(((UnsafeRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/withunsafemutablebytes(_:)","title":"func withUnsafeMutableBytes<T>(((UnsafeMutableRawBufferPointer) throws -> T)) rethrows -> T","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/null","title":"static var null: Self","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/sizeinbits","title":"static var sizeInBits: Int","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/sizeinbytes","title":"static var sizeInBytes: Int","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/trivial-implementations","title":"Trivial Implementations","type":"symbol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/immutablerepresentation-swift.typealias","title":"UnsafeRawPointer.ImmutableRepresentation","type":"typealias"},{"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/mutablerepresentation","title":"UnsafeRawPointer.MutableRepresentation","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer\/_mutablerepresentationconvertible-implementations","title":"_MutableRepresentationConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/unsaferawpointer","title":"UnsafeRawPointer","type":"extension"},{"title":"Extended Enumerations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/abstract","title":"static var abstract: Never.Reason","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/deprecated","title":"static var deprecated: Never.Reason","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/illegal","title":"static var illegal: Never.Reason","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/impossible","title":"static var impossible: Never.Reason","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/invalid","title":"static var invalid: Never.Reason","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/unavailable","title":"static var unavailable: Never.Reason","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/unexpected","title":"static var unexpected: Never.Reason","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/unimplemented","title":"static var unimplemented: Never.Reason","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/unknown","title":"static var unknown: Never.Reason","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/unsupported","title":"static var unsupported: Never.Reason","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/never\/reason\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/==(_:)","title":"static func == (Self) -> ((Self) -> Bool)","type":"op"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/erasetoanyequatable()","title":"func eraseToAnyEquatable() -> AnyEquatable","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/never\/reason\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/localizeddescription","title":"var localizedDescription: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/throw()","title":"func `throw`() throws -> Never","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/never\/reason\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/memoize(with:_:)-2xkpz","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/never\/reason\/memoize(with:_:)-955pd","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/never\/reason\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/never\/reason","title":"Never.Reason","type":"struct"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/never\/materialize()","title":"static func materialize() -> Never","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/never\/materialize(_:)","title":"static func materialize<T, U>(T) -> U","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/never\/materialize(reason:file:function:line:)-1y3nf","title":"static func materialize(reason: Never.Reason, file: StaticString, function: StaticString, line: UInt) -> Never","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/never\/materialize(reason:file:function:line:)-39enp","title":"static func materialize<T>(reason: Never.Reason, file: StaticString, function: StaticString, line: UInt) -> T","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/never\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/never\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/never\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/never\/decodeifpresent(from:)-2iosk","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/never\/decodeifpresent(from:)-62p52","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/never\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/never\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/never\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/never\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/never\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/never\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/never\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/never\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/never\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/never\/encodable-implementations","title":"Encodable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/never","title":"Never","type":"extension"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/optional\/==(_:_:)","title":"static func == <T, U>(Optional<Wrapped>, _ResultComparison) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/optional\/=__(_:_:)-2w95n","title":"static func =?? (inout Wrapped, Optional<Wrapped>)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/optional\/=__(_:_:)-4zhhe","title":"static func =?? (inout Optional<Wrapped>, Optional<Wrapped>?)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/optional\/__=(_:_:)-3re8t","title":"static func ??= (inout Optional<Wrapped>, @autoclosure () -> Wrapped?)","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/optional\/__=(_:_:)-45yt2","title":"static func ??= (inout Optional<Wrapped>, @autoclosure () -> Wrapped)","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/optional\/isnilorempty","title":"var isNilOrEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/optional\/compact()-26ld9","title":"func compact<T>() -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/optional\/compact()-3d989","title":"func compact<T>() -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/optional\/compact()-88k2a","title":"func compact<T>() -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/optional\/flatmap(keypath:)","title":"func flatMap<T>(keyPath: KeyPath<Wrapped, T?>) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/optional\/forceunwrap(file:function:line:column:)","title":"func forceUnwrap(file: StaticString, function: StaticString, line: UInt, column: UInt) throws -> Wrapped","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/optional\/map(into:)","title":"func map(into: inout Wrapped)","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/optional\/map(keypath:)","title":"func map<T>(keyPath: KeyPath<Wrapped, T>) -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/optional\/mutate(_:)","title":"func mutate<T>(((inout Wrapped) throws -> T)) rethrows -> T?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/optional\/nilifempty()","title":"func nilIfEmpty() -> Optional<Wrapped>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/optional\/remove()","title":"func remove() -> Wrapped","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/optional\/unwrap(file:fileid:function:line:column:)","title":"func unwrap(file: StaticString, fileID: StaticString, function: StaticString, line: UInt, column: UInt) throws -> Wrapped","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/optional\/unwraporinitializeinplace(default:)-19gus","title":"func unwrapOrInitializeInPlace(default: () async throws -> Wrapped) async rethrows -> Wrapped","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/optional\/unwraporinitializeinplace(default:)-3kuix","title":"func unwrapOrInitializeInPlace(default: () throws -> Wrapped) rethrows -> Wrapped","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/optional\/unwraporinitializeinplace(default:)-5mkja","title":"func unwrapOrInitializeInPlace(default: () throws -> Wrapped?) throws -> Wrapped","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/optional\/unwraporinitializeinplace(default:)-pj9a","title":"func unwrapOrInitializeInPlace(default: () async throws -> Wrapped?) async throws -> Wrapped","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/optional\/unwraporthrow(_:)","title":"func unwrapOrThrow(@autoclosure () throws -> any Error) throws -> Wrapped","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/optional\/unwrapwithmutablescope(_:)","title":"func unwrapWithMutableScope<Result>((inout Wrapped) throws -> Result) throws -> Result","type":"method"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/optional\/concrete(_:)","title":"static func concrete<T>(T.Type) -> Optional<Wrapped>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/optional\/existential(_:)","title":"static func existential<T, T_Type>(T_Type) -> Optional<Wrapped>","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/optional\/unwrappingerror\/unexpectedlyfoundnil(at:)","title":"case unexpectedlyFoundNil(at: SourceCodeLocation)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/optional\/unwrappingerror\/debugdescription","title":"var debugDescription: String","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/optional\/unwrappingerror\/unexpectedlyfoundnil","title":"static var unexpectedlyFoundNil: Optional<Wrapped>.UnwrappingError","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/optional\/unwrappingerror\/localizeddescription","title":"var localizedDescription: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/optional\/unwrappingerror\/throw()","title":"func `throw`() throws -> Never","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/optional\/unwrappingerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/optional\/unwrappingerror","title":"Optional.UnwrappingError","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/optional\/init(data:using:)","title":"init(data: Data, using: Optional<Wrapped>.DataDecodingStrategy) throws","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/optional\/datadecodingstrategy","title":"Optional.DataDecodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/optional\/datadecodable-implementations","title":"DataDecodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/optional\/data(using:)","title":"func data(using: Optional<Wrapped>.DataEncodingStrategy) throws -> Data","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/optional\/dataencodingstrategy","title":"Optional.DataEncodingStrategy","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/optional\/dataencodable-implementations","title":"DataEncodable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/optional\/init(_:)","title":"init<T>(T)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/optional\/isnil","title":"var isNil: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/optional\/isnotnil","title":"var isNotNil: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/optional\/mutate(with:)","title":"func mutate<T>(with: ((inout Self.Wrapped) throws -> T)) rethrows -> T?","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/optional\/optionalprotocol-implementations","title":"OptionalProtocol Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/optional","title":"Optional","type":"extension"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/result\/!=(_:_:)","title":"static func != (Result<Success, Failure>, _ResultComparison) -> Bool","type":"op"},{"path":"\/documentation\/diagnostics\/swift\/result\/==(_:_:)","title":"static func == (Result<Success, Failure>, _ResultComparison) -> Bool","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/result\/init(_:)-3axb5","title":"init(@autoclosure () throws -> Success)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/result\/init(_:)-45scf","title":"init(Result<Success, Failure>._CodableRepresentation)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/result\/init(_:)-93ows","title":"init?(@autoclosure () throws -> Success?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/result\/init(_:error:)-2kkt","title":"init?(Success?, error: (any Error)?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/result\/init(_:error:)-881tg","title":"init(Success, error: (any Error)?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/result\/init(_:or:)","title":"init(@autoclosure () throws -> Success, or: @autoclosure () throws -> Success)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/result\/init(catching:)-1appf","title":"init(catching: () async throws -> Success) async","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/result\/init(catching:)-2mzuv","title":"init?(catching: () async throws -> Success?) async","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/result\/comparison","title":"var comparison: ResultComparison","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/result\/compact()","title":"func compact<T>() -> Result<T, Failure>?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/compactflatmap(_:)","title":"func compactFlatMap<T>(((Success) throws -> Result<T, any Error>?)) rethrows -> Result<T, any Error>?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/compactmap(_:)","title":"func compactMap<T>(((Success) throws -> T?)) -> Result<T, any Error>?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/filter(_:)","title":"func filter(((Success) throws -> Bool)) -> Result<Success, Failure>?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/flatmap(_:)","title":"func flatMap<T>(((Success) throws -> T?)) rethrows -> Result<T, Failure>?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/get()-15zxm","title":"func get() -> Success","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/get()-9nakr","title":"func get() -> Success.WrappedValue","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/map(_:)","title":"func map<T>(((Success) throws -> T)) rethrows -> Result<T, Failure>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/mapfailure(_:)","title":"func mapFailure<T>(((Failure) throws -> T)) rethrows -> Result<Success, T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/mapsuccess(_:)","title":"func mapSuccess<T>(((Success) throws -> T)) rethrows -> Result<T, Failure>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/mutate(_:)","title":"func mutate(((inout Success) throws -> Void))","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/result\/eithervalue-swift.typealias","title":"Result.EitherValue","type":"typealias"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/result\/from(_:or:or:)","title":"static func from(() throws -> Success, or: () throws -> Success, or: () throws -> Success) throws -> Result<Success, Failure>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/from(_:or:or:or:)","title":"static func from(() throws -> Success, or: () throws -> Success, or: () throws -> Success, or: () throws -> Success) throws -> Result<Success, Failure>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/from(_:or:or:or:or:)","title":"static func from(() throws -> Success, or: () throws -> Success, or: () throws -> Success, or: () throws -> Success, or: () throws -> Success) throws -> Result<Success, Failure>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/fromeither(_:or:)","title":"static func fromEither(() throws -> Success, or: () throws -> Success) throws -> Result<Success, Failure>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/result\/applyunconditionally(_:)-6rnw3","title":"func applyUnconditionally(Result<Success, Failure>.Difference) throws","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/applyunconditionally(_:)-86dqk","title":"func applyUnconditionally(Self.Difference) throws","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/applying(_:)","title":"func applying(Result<Success, Failure>.Difference) -> Result<Success, Failure>?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/difference(from:)","title":"func difference(from: Result<Success, Failure>) -> Result<Success.Difference, Failure>","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/result\/difference","title":"Result.Difference","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/result\/diffable-implementations","title":"Diffable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/result\/init(_:)-1erj2","title":"init(Result<Success, Failure>.EitherValue)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/result\/init(leftvalue:)","title":"init(leftValue: Self.LeftValue)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/result\/init(rightvalue:)","title":"init(rightValue: Self.RightValue)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/result\/eitherrepresentable-implementations","title":"EitherRepresentable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/result\/eithervalue-swift.property","title":"var eitherValue: Result<Success, Failure>.EitherValue","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/result\/isleft","title":"var isLeft: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/result\/isright","title":"var isRight: Bool","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/result\/leftorright","title":"var leftOrRight: Self.LeftValue","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/result\/leftvalue","title":"var leftValue: Self.LeftValue?","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/result\/rightvalue","title":"var rightValue: Self.RightValue?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/result\/collapse(_:)-1yz2z","title":"func collapse<T>(((Self.RightValue) throws -> T)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/collapse(_:)-20sql","title":"func collapse<T>(((Self.LeftValue) throws -> T)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/collapse(_:_:)","title":"func collapse<T, U>(((Self.LeftValue) throws -> T), ((Self.RightValue) throws -> U)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/collapse(_:_:_:)","title":"func collapse((Self.LeftValue.LeftValue) throws -> (), (Self.LeftValue.RightValue) throws -> (), (Self.RightValue) throws -> ()) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/collapse(_:do:)","title":"func collapse<T, U>(((Self.LeftValue) throws -> T), do: @autoclosure () throws -> U) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/collapse(do:_:)","title":"func collapse<T, U>(do: @autoclosure () throws -> T, ((Self.RightValue) throws -> U)) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/collapse(do:do:)","title":"func collapse<T, U>(do: @autoclosure () throws -> T, do: @autoclosure () throws -> U) rethrows","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/filter(_:_:)","title":"func filter(((Self.LeftValue) throws -> Bool), ((Self.RightValue) throws -> Bool)) rethrows -> Self.EitherValue?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/filterormap(_:_:)","title":"func filterOrMap<T>(((Self.LeftValue) throws -> Bool), ((Self.RightValue) throws -> T)) rethrows -> Either<Self.LeftValue, T>?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/flatmap(left:right:)","title":"func flatMap<T, U>(left: ((Self.LeftValue) throws -> T?), right: ((Self.RightValue) throws -> U?)) rethrows -> Either<T, U>?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/map(_:_:)","title":"func map<T, U>(((Self.LeftValue) throws -> T), ((Self.RightValue) throws -> U)) rethrows -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/map(left:)","title":"func map<T>(left: ((Self.LeftValue) throws -> T)) rethrows -> Either<T, Self.RightValue>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/map(left:right:)","title":"func map<T, U>(left: ((Self.LeftValue) throws -> T), right: ((Self.RightValue) throws -> U)) rethrows -> Either<T, U>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/map(right:)","title":"func map<T>(right: ((Self.RightValue) throws -> T)) rethrows -> Either<Self.LeftValue, T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/mapleft(_:)","title":"func mapLeft<T>(((Self.LeftValue) throws -> T)) rethrows -> Either<T, Self.RightValue>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/mapright(_:)","title":"func mapRight<T>(((Self.RightValue) throws -> T)) rethrows -> Either<Self.LeftValue, T>","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/reduce(_:)-3n43c","title":"func reduce(((Self.RightValue) throws -> Self.LeftValue)) rethrows -> Self.LeftValue","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/reduce(_:)-6qkyu","title":"func reduce(((Self.LeftValue) throws -> Self.RightValue)) rethrows -> Self.RightValue","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/reduce(_:_:)-2nxrg","title":"func reduce<T>(@autoclosure () throws -> T, @autoclosure () throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/reduce(_:_:)-2u64j","title":"func reduce<T>(((Self.LeftValue) throws -> T), @autoclosure () throws -> T) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/reduce(_:_:)-3tuby","title":"func reduce<T>(((Self.LeftValue) throws -> T), ((Self.RightValue) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/reduce(_:_:)-5u9r2","title":"func reduce<T>(@autoclosure () throws -> T, ((Self.RightValue) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/reduce(_:_:_:)","title":"func reduce<T>(((Self.LeftValue.LeftValue) throws -> T), ((Self.LeftValue.RightValue) throws -> T), ((Self.RightValue) throws -> T)) rethrows -> T","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/result\/reduce(left:right:)","title":"func reduce<T>(left: ((Self.LeftValue) throws -> T), right: ((Self.RightValue) throws -> T)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/result\/eithervalueconvertible-implementations","title":"EitherValueConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/result\/isempty","title":"var isEmpty: Bool","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/result\/_diffabledifferencetype-implementations","title":"_DiffableDifferenceType Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/result","title":"Result","type":"extension"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/byteordermark\/utf16be","title":"static let utf16BE: [UInt8]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/byteordermark\/utf16le","title":"static let utf16LE: [UInt8]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/byteordermark\/utf32be","title":"static let utf32BE: [UInt8]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/byteordermark\/utf32le","title":"static let utf32LE: [UInt8]","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/byteordermark\/utf8","title":"static let utf8: [UInt8]","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/byteordermark\/readbyteordermark(from:count:)","title":"static func readByteOrderMark(from: UnsafePointer<UInt8>, count: Int) -> (ByteOrder, Int)?","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unicode\/byteordermark","title":"Unicode.ByteOrderMark","type":"enum"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(exactly:)","title":"init?(exactly: UInt32)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/isminimumormaximum","title":"var isMinimumOrMaximum: Bool","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/maximum","title":"static var maximum: UnicodeScalar","type":"property"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/minimum","title":"static var minimum: UnicodeScalar","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/bounded-implementations","title":"Bounded Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/random()-3q1fw","title":"static func random() -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/random(maximum:)","title":"static func random(maximum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/random(minimum:)","title":"static func random(minimum: Self) -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/random(minimum:maximum:)","title":"static func random(minimum: UnicodeScalar, maximum: UnicodeScalar) -> UnicodeScalar","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/boundedrandomnable-implementations","title":"BoundedRandomnable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(from:)","title":"init(from: any Decoder) throws","type":"init"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/decode(from:)","title":"static func decode<Container>(from: inout Container) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/decode(from:forkey:)","title":"static func decode<Container>(from: Container, forKey: Container.Key) throws -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/decodeifpresent(from:)-3626a","title":"static func decodeIfPresent<Container>(from: Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/decodeifpresent(from:)-8j7cv","title":"static func decodeIfPresent<Container>(from: inout Container) throws -> Self?","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/decodeifpresent(from:forkey:)","title":"static func decodeIfPresent<Container>(from: Container, forKey: Container.Key) throws -> Self?","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/tojsondata(prettyprint:)","title":"func toJSONData(prettyPrint: Bool) throws -> Data","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/tojsonstring(prettyprint:)","title":"func toJSONString(prettyPrint: Bool) -> String?","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(uncheckedvalue:)","title":"init(uncheckedValue: Self.Value)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/failablewrapper-implementations","title":"FailableWrapper Implementations","type":"symbol"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/random()-3tbz","title":"static func random() -> UnicodeScalar","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/randomnable-implementations","title":"Randomnable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/stringvalue","title":"var stringValue: String","type":"property"}],"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/stringconvertible-implementations","title":"StringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(stringvalue:)","title":"init?(stringValue: String)","type":"init"}],"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/stringinitializable-implementations","title":"StringInitializable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(managedutf8string:)","title":"init?<P>(managedUTF8String: P?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(managedutf8string:count:)","title":"init?<P>(managedUTF8String: P?, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(unmanagedutf8string:)","title":"init?<P>(unmanagedUTF8String: P?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(unmanagedutf8string:count:)","title":"init?<P>(unmanagedUTF8String: P?, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(utf8character:)","title":"init(utf8Character: CChar)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(utf8string:)-52pbo","title":"init<P>(utf8String: P)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(utf8string:)-5kp09","title":"init(utf8String: NullTerminatedUTF8String)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(utf8string:)-7b0zt","title":"init?(utf8String: NullTerminatedUTF8String?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(utf8string:)-90sns","title":"init?<P>(utf8String: P?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(utf8string:count:)-2zqjv","title":"init<P>(utf8String: P, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(utf8string:count:)-5czqo","title":"init?<P>(utf8String: P?, count: Int)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(utf8string:count:deallocate:)-7eb7s","title":"init?(utf8String: NullTerminatedUTF8String?, count: Int, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(utf8string:count:deallocate:)-wb4u","title":"init(utf8String: NullTerminatedUTF8String, count: Int, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(utf8string:count:managed:)-1exdu","title":"init(utf8String: NullTerminatedUTF8String, count: Int, managed: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(utf8string:count:managed:)-84voe","title":"init?(utf8String: NullTerminatedUTF8String?, count: Int, managed: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(utf8string:deallocate:)-5j95r","title":"init<P>(utf8String: P, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(utf8string:deallocate:)-7g7qi","title":"init?(utf8String: NullTerminatedUTF8String?, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(utf8string:deallocate:)-8r7e4","title":"init(utf8String: NullTerminatedUTF8String, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(utf8string:deallocate:)-epi4","title":"init?<P>(utf8String: P?, deallocate: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(utf8string:managed:)-2bujz","title":"init(utf8String: NullTerminatedUTF8String, managed: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(utf8string:managed:)-3lasn","title":"init?(utf8String: NullTerminatedUTF8String?, managed: Bool)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(validatingutf8string:)","title":"init?(validatingUTF8String: NullTerminatedUTF8String?)","type":"init"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/init(validatingutf8string:deallocate:)","title":"init?(validatingUTF8String: NullTerminatedUTF8String?, deallocate: Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/mutatingwithmutablecstring(_:)","title":"func mutatingWithMutableCString<T>(((NullTerminatedUTF8String) throws -> T)) rethrows -> Self","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/nullterminatedutf8string()","title":"func nullTerminatedUTF8String() -> NullTerminatedUTF8String","type":"method"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/withmutablecstring(_:)","title":"func withMutableCString<T>(((NullTerminatedUTF8String) throws -> T)) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/utf8representable-implementations","title":"UTF8Representable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/map(_:)","title":"func map<T>(((Self.Value) throws -> T.Value)) rethrows -> T","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/value","title":"Unicode.Scalar.Value","type":"typealias"}],"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar\/valueconvertible-implementations","title":"ValueConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swift\/unicode\/scalar","title":"Unicode.Scalar","type":"extension"}],"path":"\/documentation\/diagnostics\/swift\/unicode","title":"Unicode","type":"extension"}],"path":"\/documentation\/diagnostics\/swift","title":"Swift","type":"extension"},{"children":[{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swiftuicore\/preferencekey\/reduce(value:nextvalue:)-2gx1w","title":"static func reduce(value: inout Self.Value, nextValue: () -> Self.Value)","type":"method"},{"path":"\/documentation\/diagnostics\/swiftuicore\/preferencekey\/reduce(value:nextvalue:)-5z96u","title":"static func reduce(value: inout Self.Value, nextValue: () -> Self.Value)","type":"method"}],"path":"\/documentation\/diagnostics\/swiftuicore\/preferencekey\/preferencekey-implementations","title":"PreferenceKey Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/swiftuicore\/preferencekey","title":"PreferenceKey","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swiftuicore\/view\/environment(_:merging:)-61nw1","title":"func environment<V>(WritableKeyPath<EnvironmentValues, V?>, merging: V) -> some View","type":"method"},{"path":"\/documentation\/diagnostics\/swiftuicore\/view\/environment(_:merging:)-8wrk6","title":"func environment<V>(WritableKeyPath<EnvironmentValues, V>, merging: V) -> some View","type":"method"}],"path":"\/documentation\/diagnostics\/swiftuicore\/view","title":"View","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swiftuicore\/binding\/init(_:)","title":"init(Inout<Value>)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swiftuicore\/binding\/unwrapleft(default:)","title":"func unwrapLeft<L, R>(default: L) -> Binding<L>","type":"method"},{"path":"\/documentation\/diagnostics\/swiftuicore\/binding\/unwrapright(default:)","title":"func unwrapRight<L, R>(default: R) -> Binding<R>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swiftuicore\/binding\/subscript(_:default:)","title":"subscript(Value.DictionaryKey, default _: @autoclosure () -> Value.DictionaryValue) -> Binding<Value.DictionaryValue>","type":"subscript"},{"path":"\/documentation\/diagnostics\/swiftuicore\/binding\/subscript(id:)","title":"subscript<Element, ID>(id _: ID) -> Binding<Element>?","type":"subscript"},{"path":"\/documentation\/diagnostics\/swiftuicore\/binding\/subscript(id:default:)","title":"subscript<Element, ID>(id _: ID, default _: @autoclosure () -> Element) -> Binding<Element>","type":"subscript"},{"path":"\/documentation\/diagnostics\/swiftuicore\/binding\/subscript(unsafelyunwrappingelementidentifiedby:)","title":"subscript<Element, ID>(unsafelyUnwrappingElementIdentifiedBy _: ID) -> Binding<Element>","type":"subscript"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swiftuicore\/binding\/keyedvalues(of:)-194l6","title":"static func keyedValues<T>(of: Binding<T>) -> Binding<KeyedValuesOf<T>>","type":"method"},{"path":"\/documentation\/diagnostics\/swiftuicore\/binding\/keyedvalues(of:)-5xht0","title":"static func keyedValues<T>(of: Binding<T?>) -> Binding<KeyedValuesOf<T>>","type":"method"}],"path":"\/documentation\/diagnostics\/swiftuicore\/binding","title":"Binding","type":"extension"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/swiftuicore\/foreach\/init(_:from:content:)","title":"init(Data, from: Binding<IdentifierIndexingArrayOf<Data.Element>>, content: (Binding<Data.Element>) -> Content)","type":"init"},{"path":"\/documentation\/diagnostics\/swiftuicore\/foreach\/init(identified:content:)-4pd7e","title":"init<Element, UnwrappedContent>(identified: Binding<IdentifierIndexingArrayOf<Element>>, content: (Binding<Element>) -> UnwrappedContent)","type":"init"},{"path":"\/documentation\/diagnostics\/swiftuicore\/foreach\/init(identified:content:)-5tur6","title":"init<Element, UnwrappedContent>(identified: Binding<IdentifierIndexingArrayOf<Element>>, content: (Binding<Element>) -> UnwrappedContent)","type":"init"}],"path":"\/documentation\/diagnostics\/swiftuicore\/foreach","title":"ForEach","type":"extension"}],"path":"\/documentation\/diagnostics\/swiftuicore","title":"SwiftUICore","type":"extension"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/uniformtypeidentifiers\/uttype\/dylib","title":"static let dylib: UTType","type":"property"}],"path":"\/documentation\/diagnostics\/uniformtypeidentifiers\/uttype","title":"UTType","type":"extension"}],"path":"\/documentation\/diagnostics\/uniformtypeidentifiers","title":"UniformTypeIdentifiers","type":"extension"},{"children":[{"title":"Extended Classes","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/_concurrency\/mainactor\/runasap(priority:body:)-2bt1m","title":"static func runAsap<Success>(priority: TaskPriority?, body: () async throws -> Success) -> Task<Success, any Error>","type":"method"},{"path":"\/documentation\/diagnostics\/_concurrency\/mainactor\/runasap(priority:body:)-7e1aj","title":"static func runAsap<Success>(priority: TaskPriority?, body: () async -> Success) -> Task<Success, Never>","type":"method"},{"path":"\/documentation\/diagnostics\/_concurrency\/mainactor\/unsafeassumeisolated(_:file:line:)","title":"static func unsafeAssumeIsolated<T>(() throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"}],"path":"\/documentation\/diagnostics\/_concurrency\/mainactor","title":"MainActor","type":"extension"},{"title":"Extended Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/_concurrency\/asynciteratorprotocol\/erasetoanyasynciterator()","title":"func eraseToAnyAsyncIterator() -> AnyAsyncIterator<Self.Element>","type":"method"},{"path":"\/documentation\/diagnostics\/_concurrency\/asynciteratorprotocol\/exhaust()","title":"func exhaust() async throws -> [Self.Element]","type":"method"}],"path":"\/documentation\/diagnostics\/_concurrency\/asynciteratorprotocol","title":"AsyncIteratorProtocol","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/_concurrency\/asyncsequence\/erasetoanyasyncsequence()","title":"func eraseToAnyAsyncSequence() -> AnyAsyncSequence<Self.Element>","type":"method"}],"path":"\/documentation\/diagnostics\/_concurrency\/asyncsequence","title":"AsyncSequence","type":"extension"},{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/_concurrency\/asyncstream\/init()","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/_concurrency\/asyncstream\/_placeholderinitiable-implementations","title":"_PlaceholderInitiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/_concurrency\/asyncstream","title":"AsyncStream","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/_concurrency\/asyncthrowingstream\/init()","title":"init()","type":"init"}],"path":"\/documentation\/diagnostics\/_concurrency\/asyncthrowingstream\/_placeholderinitiable-implementations","title":"_PlaceholderInitiable Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/_concurrency\/asyncthrowingstream","title":"AsyncThrowingStream","type":"extension"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/_concurrency\/task\/bind(to:)","title":"func bind(to: Binding<OpaqueThrowingTask?>)","type":"method"},{"path":"\/documentation\/diagnostics\/_concurrency\/task\/erasetoopaquethrowingtask()","title":"func eraseToOpaqueThrowingTask() -> OpaqueThrowingTask","type":"method"},{"path":"\/documentation\/diagnostics\/_concurrency\/task\/logger(_:)","title":"func logger<L>(L) -> Task","type":"method"}],"path":"\/documentation\/diagnostics\/_concurrency\/task","title":"Task","type":"extension"}],"path":"\/documentation\/diagnostics\/_concurrency","title":"_Concurrency","type":"extension"},{"children":[{"title":"Extended Structures","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/os\/logger\/debug(_:metadata:file:function:line:)","title":"func debug(@autoclosure () -> String, metadata: [String : Any]?, file: String, function: String, line: UInt)","type":"method"},{"path":"\/documentation\/diagnostics\/os\/logger\/error(_:metadata:file:function:line:)-5h5ko","title":"func error(@autoclosure () -> Error, metadata: [String : Any]?, file: String, function: String, line: UInt) -> any Swift.Error","type":"method"},{"path":"\/documentation\/diagnostics\/os\/logger\/error(_:metadata:file:function:line:)-68paa","title":"func error(@autoclosure () -> String, metadata: [String : Any]?, file: String, function: String, line: UInt) -> any Swift.Error","type":"method"},{"path":"\/documentation\/diagnostics\/os\/logger\/log(level:_:metadata:file:function:line:)","title":"func log(level: LogLevel, @autoclosure () -> LogMessage, metadata: @autoclosure () -> [String : Any]?, file: String, function: String, line: UInt)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/os\/logger\/loglevel","title":"Logger.LogLevel","type":"typealias"},{"path":"\/documentation\/diagnostics\/os\/logger\/logmessage","title":"Logger.LogMessage","type":"typealias"}],"path":"\/documentation\/diagnostics\/os\/logger\/loggerprotocol-implementations","title":"LoggerProtocol Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/os\/logger","title":"Logger","type":"extension"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/os\/oslogtype\/erasedasanyhashable","title":"var erasedAsAnyHashable: AnyHashable","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/os\/oslogtype\/erasetoanyhashable()","title":"func eraseToAnyHashable() -> AnyHashable","type":"method"},{"path":"\/documentation\/diagnostics\/os\/oslogtype\/memoize(with:_:)-5xo62","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, T>) -> T","type":"method"},{"path":"\/documentation\/diagnostics\/os\/oslogtype\/memoize(with:_:)-7rtv2","title":"func memoize<T>(with: MemoizationCache?, KeyPath<Self, () -> T>) -> T","type":"method"}],"path":"\/documentation\/diagnostics\/os\/oslogtype\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/diagnostics\/os\/oslogtype\/stringvalue","title":"var stringValue: String","type":"property"}],"path":"\/documentation\/diagnostics\/os\/oslogtype\/stringconvertible-implementations","title":"StringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/diagnostics\/os\/oslogtype","title":"OSLogType","type":"extension"}],"path":"\/documentation\/diagnostics\/os","title":"os","type":"extension"}],"path":"\/documentation\/diagnostics","title":"Diagnostics","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}